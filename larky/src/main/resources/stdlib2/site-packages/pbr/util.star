def shlex_split(path):
    """
    'nt'
    """
def resolve_name(name):
    """
    Resolve a name like ``module.object`` to an object and return it.

        Raise ImportError if the module or name is not found.
    
    """
def cfg_to_args(path='setup.cfg', script_args=()):
    """
    Distutils2 to distutils1 compatibility util.

        This method uses an existing setup.cfg to generate a dictionary of
        keywords that can be used by distutils.core.setup(kwargs**).

        :param path:
            The setup.cfg path.
        :param script_args:
            List of commands setup.py was called with.
        :raises DistutilsFileError:
            When the setup.cfg file is not found.
    
    """
def setup_cfg_to_setup_kwargs(config, script_args=()):
    """
    Convert config options to kwargs.

        Processes the setup.cfg options and converts them to arguments accepted
        by setuptools' setup() function.
    
    """
def register_custom_compilers(config):
    """
    Handle custom compilers.

        This has no real equivalent in distutils, where additional compilers could
        only be added programmatically, so we have to hack it in somehow.
    
    """
def get_extension_modules(config):
    """
    Handle extension modules
    """
def get_entry_points(config):
    """
    Process the [entry_points] section of setup.cfg.

        Processes setup.cfg to handle setuptools entry points. This is, of course,
        not a standard feature of distutils2/packaging, but as there is not
        currently a standard alternative in packaging, we provide support for them.
    
    """
def has_get_option(config, section, option):
    """
    Special behaviour when we have a multi line options
    """
def split_csv(value):
    """
    Special behaviour when we have a comma separated options
    """
def DefaultGetDict(defaultdict):
    """
    Like defaultdict, but get() also sets and returns the default value.
    """
    def get(self, key, default=None):
