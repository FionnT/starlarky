def _run_shell_command(cmd, throw_on_error=False, buffer=True, env=None):
    """
    %s returned %d
    """
def _run_git_command(cmd, git_dir, **kwargs):
    """
    'git'
    """
def _get_git_directory():
    """
    'git'
    """
def _git_is_installed():
    """
     We cannot use 'which git' as it may not be available
     in some distributions, So just try 'git --version'
     to see if we run into trouble

    """
def _get_highest_tag(tags):
    """
    Find the highest tag from a list.

        Pass in a list of tag strings and this will return the highest
        (latest) as sorted by the pkg_resources version parser.
    
    """
def _find_git_files(dirname='', git_dir=None):
    """
    Behave like a file finder entrypoint plugin.

        We don't actually use the entrypoints system for this because it runs
        at absurd times. We only want to do this when we are building an sdist.
    
    """
def _get_raw_tag_info(git_dir):
    """
    'describe'
    """
def get_is_release(git_dir):
    """
    Return the short sha for this repo, if it exists.
    """
def _clean_changelog_message(msg):
    """
    Cleans any instances of invalid sphinx wording.

        This escapes/removes any instances of invalid characters
        that can be interpreted by sphinx as a warning or error
        when translating the Changelog into an HTML file for
        documentation building within projects.

        * Escapes '_' which is interpreted as a link
        * Escapes '*' which is interpreted as a new line
        * Escapes '`' which is interpreted as a literal
    
    """
def _iter_changelog(changelog):
    """
    Convert a oneline log iterator to formatted strings.

        :param changelog: An iterator of one line log entries like
            that given by _iter_log_oneline.
        :return: An iterator over (release, formatted changelog) tuples.
    
    """
def _iter_log_oneline(git_dir=None):
    """
    Iterate over --oneline log entries if possible.

        This parses the output into a structured form but does not apply
        presentation logic to the output - making it suitable for different
        uses.

        :return: An iterator of (hash, tags_set, 1st_line) tuples, or None if
            changelog generation is disabled / not available.
    
    """
def _is_valid_version(candidate):
    """
    Iterate over --oneline log entries.

        This parses the output intro a structured form but does not apply
        presentation logic to the output - making it suitable for different
        uses.

        .. caution:: this function risk to return a tag that doesn't exist really
                     inside the git objects list due to replacement made
                     to tag name to also list pre-release suffix.
                     Compliant with the SemVer specification (e.g 1.2.3-rc1)

        :return: An iterator of (hash, tags_set, 1st_line) tuples.
    
    """
2021-03-02 20:53:23,741 : INFO : tokenize_signature : --> do i ever get here?
def write_git_changelog(git_dir=None, dest_dir=os.path.curdir,
                        option_dict=None, changelog=None):
    """
    Write a changelog based on the git changelog.
    """
def generate_authors(git_dir=None, dest_dir='.', option_dict=dict()):
    """
    Create AUTHORS file using git commits.
    """
