2021-03-02 20:52:04,443 : INFO : tokenize_signature : --> do i ever get here?
def _grid_in_property(field_name, docstring, read_only=False,
                      closed_only=False):
    """
    Create a GridIn property.
    """
    def getter(self):
        """
        can only get %r on a closed file
        """
    def setter(self, value):
        """
        _id
        """
def _grid_out_property(field_name, docstring):
    """
    Create a GridOut property.
    """
    def getter(self):
        """
         Protect against PHP-237

        """
def _clear_entity_type_registry(entity, **kwargs):
    """
    Clear the given database/collection object's type registry.
    """
def _disallow_transactions(session):
    """
    'GridFS does not support multi-document transactions'
    """
def GridIn(object):
    """
    Class to write data to GridFS.
    
    """
2021-03-02 20:52:04,445 : INFO : tokenize_signature : --> do i ever get here?
    def __init__(
            self, root_collection, session=None, disable_md5=False, **kwargs):
        """
        Write a file to GridFS

                Application developers should generally not need to
                instantiate this class directly - instead see the methods
                provided by :class:`~gridfs.GridFS`.

                Raises :class:`TypeError` if `root_collection` is not an
                instance of :class:`~pymongo.collection.Collection`.

                Any of the file level options specified in the `GridFS Spec
                <http://dochub.mongodb.org/core/gridfsspec>`_ may be passed as
                keyword arguments. Any additional keyword arguments will be
                set as additional fields on the file document. Valid keyword
                arguments include:

                  - ``"_id"``: unique ID for this file (default:
                    :class:`~bson.objectid.ObjectId`) - this ``"_id"`` must
                    not have already been used for another file

                  - ``"filename"``: human name for the file

                  - ``"contentType"`` or ``"content_type"``: valid mime-type
                    for the file

                  - ``"chunkSize"`` or ``"chunk_size"``: size of each of the
                    chunks, in bytes (default: 255 kb)

                  - ``"encoding"``: encoding used for this file. In Python 2,
                    any :class:`unicode` that is written to the file will be
                    converted to a :class:`str`. In Python 3, any :class:`str`
                    that is written to the file will be converted to
                    :class:`bytes`.

                :Parameters:
                  - `root_collection`: root collection to write to
                  - `session` (optional): a
                    :class:`~pymongo.client_session.ClientSession` to use for all
                    commands
                  - `disable_md5` (optional): When True, an MD5 checksum will not be
                    computed for the uploaded file. Useful in environments where
                    MD5 cannot be used for regulatory or other reasons. Defaults to
                    False.
                  - `**kwargs` (optional): file level options (see above)

                .. versionchanged:: 3.6
                   Added ``session`` parameter.

                .. versionchanged:: 3.0
                   `root_collection` must use an acknowledged
                   :attr:`~pymongo.collection.Collection.write_concern`
        
        """
    def __create_index(self, collection, index_key, unique):
        """
        _id
        """
    def __ensure_indexes(self):
        """
        _ensured_index
        """
    def abort(self):
        """
        Remove all chunks/files that may have been uploaded and close.
        
        """
    def closed(self):
        """
        Is this file closed?
        
        """
    def __getattr__(self, name):
        """
        GridIn object has no attribute '%s'
        """
    def __setattr__(self, name, value):
        """
         For properties of this instance like _buffer, or descriptors set on
         the class like filename, use regular __setattr__

        """
    def __flush_data(self, data):
        """
        Flush `data` to a chunk.
        
        """
    def __flush_buffer(self):
        """
        Flush the buffer contents out to a chunk.
        
        """
    def __flush(self):
        """
        Flush the file to the database.
        
        """
    def _raise_file_exists(self, file_id):
        """
        Raise a FileExists exception for the given file_id.
        """
    def close(self):
        """
        Flush the file and close it.

                A closed file cannot be written any more. Calling
                :meth:`close` more than once is allowed.
        
        """
    def read(self, size=-1):
        """
        'read'
        """
    def readable(self):
        """
        Write data to the file. There is no return value.

                `data` can be either a string of bytes or a file-like object
                (implementing :meth:`read`). If the file has an
                :attr:`encoding` attribute, `data` can also be a
                :class:`unicode` (:class:`str` in python 3) instance, which
                will be encoded as :attr:`encoding` before being written.

                Due to buffering, the data may not actually be written to the
                database until the :meth:`close` method is called. Raises
                :class:`ValueError` if this file is already closed. Raises
                :class:`TypeError` if `data` is not an instance of
                :class:`str` (:class:`bytes` in python 3), a file-like object,
                or an instance of :class:`unicode` (:class:`str` in python 3).
                Unicode data is only allowed if the file has an :attr:`encoding`
                attribute.

                :Parameters:
                  - `data`: string of bytes or file-like object to be written
                    to the file
        
        """
    def writelines(self, sequence):
        """
        Write a sequence of strings to the file.

                Does not add seperators.
        
        """
    def writeable(self):
        """
        Support for the context manager protocol.
        
        """
    def __exit__(self, exc_type, exc_val, exc_tb):
        """
        Support for the context manager protocol.

                Close the file and allow exceptions to propagate.
        
        """
def GridOut(object):
    """
    Class to read data out of GridFS.
    
    """
2021-03-02 20:52:04,453 : INFO : tokenize_signature : --> do i ever get here?
    def __init__(self, root_collection, file_id=None, file_document=None,
                 session=None):
        """
        Read a file from GridFS

                Application developers should generally not need to
                instantiate this class directly - instead see the methods
                provided by :class:`~gridfs.GridFS`.

                Either `file_id` or `file_document` must be specified,
                `file_document` will be given priority if present. Raises
                :class:`TypeError` if `root_collection` is not an instance of
                :class:`~pymongo.collection.Collection`.

                :Parameters:
                  - `root_collection`: root collection to read from
                  - `file_id` (optional): value of ``"_id"`` for the file to read
                  - `file_document` (optional): file document from
                    `root_collection.files`
                  - `session` (optional): a
                    :class:`~pymongo.client_session.ClientSession` to use for all
                    commands

                .. versionchanged:: 3.8
                   For better performance and to better follow the GridFS spec,
                   :class:`GridOut` now uses a single cursor to read all the chunks in
                   the file.

                .. versionchanged:: 3.6
                   Added ``session`` parameter.

                .. versionchanged:: 3.0
                   Creating a GridOut does not immediately retrieve the file metadata
                   from the server. Metadata is fetched when first needed.
        
        """
    def _ensure_file(self):
        """
        _id
        """
    def __getattr__(self, name):
        """
        GridOut object has no attribute '%s'
        """
    def readable(self):
        """
        Reads a chunk at a time. If the current position is within a
                chunk the remainder of the chunk is returned.
        
        """
    def read(self, size=-1):
        """
        Read at most `size` bytes from the file (less if there
                isn't enough data).

                The bytes are returned as an instance of :class:`str` (:class:`bytes`
                in python 3). If `size` is negative or omitted all data is read.

                :Parameters:
                  - `size` (optional): the number of bytes to read

                .. versionchanged:: 3.8
                   This method now only checks for extra chunks after reading the
                   entire file. Previously, this method would check for extra chunks
                   on every call.
        
        """
    def readline(self, size=-1):
        """
        Read one line or up to `size` bytes from the file.

                :Parameters:
                 - `size` (optional): the maximum number of bytes to read
        
        """
    def tell(self):
        """
        Return the current position of this file.
        
        """
    def seek(self, pos, whence=_SEEK_SET):
        """
        Set the current position of this file.

                :Parameters:
                 - `pos`: the position (or offset if using relative
                   positioning) to seek to
                 - `whence` (optional): where to seek
                   from. :attr:`os.SEEK_SET` (``0``) for absolute file
                   positioning, :attr:`os.SEEK_CUR` (``1``) to seek relative
                   to the current position, :attr:`os.SEEK_END` (``2``) to
                   seek relative to the file's end.
        
        """
    def seekable(self):
        """
        Return an iterator over all of this file's data.

                The iterator will return chunk-sized instances of
                :class:`str` (:class:`bytes` in python 3). This can be
                useful when serving files using a webserver that handles
                such an iterator efficiently.

                .. note::
                   This is different from :py:class:`io.IOBase` which iterates over
                   *lines* in the file. Use :meth:`GridOut.readline` to read line by
                   line instead of chunk by chunk.

                .. versionchanged:: 3.8
                   The iterator now raises :class:`CorruptGridFile` when encountering
                   any truncated, missing, or extra chunk in a file. The previous
                   behavior was to only raise :class:`CorruptGridFile` on a missing
                   chunk.
        
        """
    def close(self):
        """
        Make GridOut more generically file-like.
        """
    def write(self, value):
        """
        'write'
        """
    def __enter__(self):
        """
        Makes it possible to use :class:`GridOut` files
                with the context manager protocol.
        
        """
    def __exit__(self, exc_type, exc_val, exc_tb):
        """
        Makes it possible to use :class:`GridOut` files
                with the context manager protocol.
        
        """
def _GridOutChunkIterator(object):
    """
    Iterates over a file's chunks using a single cursor.

        Raises CorruptGridFile when encountering any truncated, missing, or extra
        chunk in a file.
    
    """
    def __init__(self, grid_out, chunks, session, next_chunk):
        """
        files_id
        """
    def _next_with_retry(self):
        """
        Return the next chunk and retry once on CursorNotFound.

                We retry on CursorNotFound to maintain backwards compatibility in
                cases where two calls to read occur more than 10 minutes apart (the
                server's default cursor timeout).
        
        """
    def next(self):
        """
        no chunk #%d
        """
    def close(self):
        """
        data
        """
def GridOutCursor(Cursor):
    """
    A cursor / iterator for returning GridOut objects as the result
        of an arbitrary query against the GridFS files collection.
    
    """
2021-03-02 20:52:04,460 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:52:04,460 : INFO : tokenize_signature : --> do i ever get here?
    def __init__(self, collection, filter=None, skip=0, limit=0,
                 no_cursor_timeout=False, sort=None, batch_size=0,
                 session=None):
        """
        Create a new cursor, similar to the normal
                :class:`~pymongo.cursor.Cursor`.

                Should not be called directly by application developers - see
                the :class:`~gridfs.GridFS` method :meth:`~gridfs.GridFS.find` instead.

                .. versionadded 2.7

                .. mongodoc:: cursors
        
        """
    def next(self):
        """
        Get next GridOut object from cursor.
        
        """
    def add_option(self, *args, **kwargs):
        """
        Method does not exist for GridOutCursor
        """
    def remove_option(self, *args, **kwargs):
        """
        Method does not exist for GridOutCursor
        """
    def _clone_base(self, session):
        """
        Creates an empty GridOutCursor for information to be copied into.
        
        """
