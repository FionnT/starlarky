def Driver(object):
    """
    Parse a series of tokens and return the syntax tree.
    """
    def parse_stream_raw(self, stream: IO[Text], debug: bool = False) -> NL:
        """
        Parse a stream and return the syntax tree.
        """
    def parse_stream(self, stream: IO[Text], debug: bool = False) -> NL:
        """
        Parse a stream and return the syntax tree.
        """
2021-03-02 20:52:07,752 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:52:07,752 : INFO : tokenize_signature : --> do i ever get here?
    def parse_file(
        self, filename: Path, encoding: Optional[Text] = None, debug: bool = False
    ) -> NL:
        """
        Parse a file and return the syntax tree.
        """
    def parse_string(self, text: Text, debug: bool = False) -> NL:
        """
        Parse a string and return the syntax tree.
        """
    def _partially_consume_prefix(self, prefix: Text, column: int) -> Tuple[Text, Text]:
        """

        """
def _generate_pickle_name(gt: Path, cache_dir: Optional[Path] = None) -> Text:
    """
    .txt
    """
2021-03-02 20:52:07,754 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:52:07,754 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:52:07,754 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:52:07,754 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:52:07,754 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:52:07,754 : INFO : tokenize_signature : --> do i ever get here?
def load_grammar(
    gt: Text = "Grammar.txt",
    gp: Optional[Text] = None,
    save: bool = True,
    force: bool = False,
    logger: Optional[Logger] = None,
) -> Grammar:
    """
    Load the grammar (maybe from a pickle).
    """
def _newer(a: Text, b: Text) -> bool:
    """
    Inquire whether file a was written since file b.
    """
2021-03-02 20:52:07,755 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:52:07,755 : INFO : tokenize_signature : --> do i ever get here?
def load_packaged_grammar(
    package: str, grammar_source: Text, cache_dir: Optional[Path] = None
) -> grammar.Grammar:
    """
    Normally, loads a pickled grammar by doing
            pkgutil.get_data(package, pickled_grammar)
        where *pickled_grammar* is computed from *grammar_source* by adding the
        Python version and using a ``.pickle`` extension.

        However, if *grammar_source* is an extant file, load_grammar(grammar_source)
        is called instead. This facilitates using a packaged grammar file when needed
        but preserves load_grammar's automatic regeneration behavior when possible.

    
    """
def main(*args: Text) -> bool:
    """
    Main program, when run as a script: produce grammar pickle files.

        Calls load_grammar for each argument, a path to a grammar text file.
    
    """
