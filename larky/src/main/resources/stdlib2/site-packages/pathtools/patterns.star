def _string_lower(s):
    """

        Convenience function to lowercase a string (the :mod:`string` module is
        deprecated/removed in Python 3.0).

        :param s:
            The string which will be lowercased.
        :returns:
            Lowercased copy of string s.
    
    """
def match_path_against(pathname, patterns, case_sensitive=True):
    """

        Determines whether the pathname matches any of the given wildcard patterns,
        optionally ignoring the case of the pathname and patterns.

        :param pathname:
            A path name that will be matched against a wildcard pattern.
        :param patterns:
            A list of wildcard patterns to match_path the filename against.
        :param case_sensitive:
            ``True`` if the matching should be case-sensitive; ``False`` otherwise.
        :returns:
            ``True`` if the pattern matches; ``False`` otherwise.

        Doctests::
            >>> match_path_against("/home/username/foobar/blah.py", ["*.py", "*.txt"], False)
            True
            >>> match_path_against("/home/username/foobar/blah.py", ["*.PY", "*.txt"], True)
            False
            >>> match_path_against("/home/username/foobar/blah.py", ["*.PY", "*.txt"], False)
            True
            >>> match_path_against("C:\\windows\\blah\\BLAH.PY", ["*.py", "*.txt"], True)
            False
            >>> match_path_against("C:\\windows\\blah\\BLAH.PY", ["*.py", "*.txt"], False)
            True
    
    """
2021-03-02 20:53:22,667 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:53:22,667 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:53:22,667 : INFO : tokenize_signature : --> do i ever get here?
def _match_path(pathname,
                included_patterns,
                excluded_patterns,
                case_sensitive=True):
    """
    Internal function same as :func:`match_path` but does not check arguments.

        Doctests::
            >>> _match_path("/users/gorakhargosh/foobar.py", ["*.py"], ["*.PY"], True)
            True
            >>> _match_path("/users/gorakhargosh/FOOBAR.PY", ["*.py"], ["*.PY"], True)
            False
            >>> _match_path("/users/gorakhargosh/foobar/", ["*.py"], ["*.txt"], False)
            False
            >>> _match_path("/users/gorakhargosh/FOOBAR.PY", ["*.py"], ["*.PY"], False)
            Traceback (most recent call last):
                ...
            ValueError: conflicting patterns `set(['*.py'])` included and excluded
    
    """
2021-03-02 20:53:22,668 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:53:22,668 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:53:22,668 : INFO : tokenize_signature : --> do i ever get here?
def match_path(pathname,
               included_patterns=None,
               excluded_patterns=None,
               case_sensitive=True):
    """

        Matches a pathname against a set of acceptable and ignored patterns.

        :param pathname:
            A pathname which will be matched against a pattern.
        :param included_patterns:
            Allow filenames matching wildcard patterns specified in this list.
            If no pattern is specified, the function treats the pathname as
            a match_path.
        :param excluded_patterns:
            Ignores filenames matching wildcard patterns specified in this list.
            If no pattern is specified, the function treats the pathname as
            a match_path.
        :param case_sensitive:
            ``True`` if matching should be case-sensitive; ``False`` otherwise.
        :returns:
            ``True`` if the pathname matches; ``False`` otherwise.
        :raises:
            ValueError if included patterns and excluded patterns contain the
            same pattern.

        Doctests::
            >>> match_path("/Users/gorakhargosh/foobar.py")
            True
            >>> match_path("/Users/gorakhargosh/foobar.py", case_sensitive=False)
            True
            >>> match_path("/users/gorakhargosh/foobar.py", ["*.py"], ["*.PY"], True)
            True
            >>> match_path("/users/gorakhargosh/FOOBAR.PY", ["*.py"], ["*.PY"], True)
            False
            >>> match_path("/users/gorakhargosh/foobar/", ["*.py"], ["*.txt"], False)
            False
            >>> match_path("/users/gorakhargosh/FOOBAR.PY", ["*.py"], ["*.PY"], False)
            Traceback (most recent call last):
                ...
            ValueError: conflicting patterns `set(['*.py'])` included and excluded
    
    """
2021-03-02 20:53:22,669 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:53:22,669 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:53:22,669 : INFO : tokenize_signature : --> do i ever get here?
def filter_paths(pathnames,
                 included_patterns=None,
                 excluded_patterns=None,
                 case_sensitive=True):
    """

        Filters from a set of paths based on acceptable patterns and
        ignorable patterns.

        :param pathnames:
            A list of path names that will be filtered based on matching and
            ignored patterns.
        :param included_patterns:
            Allow filenames matching wildcard patterns specified in this list.
            If no pattern list is specified, ["*"] is used as the default pattern,
            which matches all files.
        :param excluded_patterns:
            Ignores filenames matching wildcard patterns specified in this list.
            If no pattern list is specified, no files are ignored.
        :param case_sensitive:
            ``True`` if matching should be case-sensitive; ``False`` otherwise.
        :returns:
            A list of pathnames that matched the allowable patterns and passed
            through the ignored patterns.

        Doctests::
            >>> pathnames = set(["/users/gorakhargosh/foobar.py", "/var/cache/pdnsd.status", "/etc/pdnsd.conf", "/usr/local/bin/python"])
            >>> set(filter_paths(pathnames)) == pathnames
            True
            >>> set(filter_paths(pathnames, case_sensitive=False)) == pathnames
            True
            >>> set(filter_paths(pathnames, ["*.py", "*.conf"], ["*.status"], case_sensitive=True)) == set(["/users/gorakhargosh/foobar.py", "/etc/pdnsd.conf"])
            True
    
    """
2021-03-02 20:53:22,669 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:53:22,669 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:53:22,669 : INFO : tokenize_signature : --> do i ever get here?
def match_any_paths(pathnames,
                    included_patterns=None,
                    excluded_patterns=None,
                    case_sensitive=True):
    """

        Matches from a set of paths based on acceptable patterns and
        ignorable patterns.

        :param pathnames:
            A list of path names that will be filtered based on matching and
            ignored patterns.
        :param included_patterns:
            Allow filenames matching wildcard patterns specified in this list.
            If no pattern list is specified, ["*"] is used as the default pattern,
            which matches all files.
        :param excluded_patterns:
            Ignores filenames matching wildcard patterns specified in this list.
            If no pattern list is specified, no files are ignored.
        :param case_sensitive:
            ``True`` if matching should be case-sensitive; ``False`` otherwise.
        :returns:
            ``True`` if any of the paths matches; ``False`` otherwise.

        Doctests::
            >>> pathnames = set(["/users/gorakhargosh/foobar.py", "/var/cache/pdnsd.status", "/etc/pdnsd.conf", "/usr/local/bin/python"])
            >>> match_any_paths(pathnames)
            True
            >>> match_any_paths(pathnames, case_sensitive=False)
            True
            >>> match_any_paths(pathnames, ["*.py", "*.conf"], ["*.status"], case_sensitive=True)
            True
            >>> match_any_paths(pathnames, ["*.txt"], case_sensitive=False)
            False
            >>> match_any_paths(pathnames, ["*.txt"], case_sensitive=True)
            False
    
    """
