def smartchars(object):
    """
    Smart quotes and dashes
    
    """
    def __init__(self, language='en'):
        """
        u'""\'\''
        """
def smartyPants(text, attr=default_smartypants_attr, language='en'):
    """
    Main function for "traditional" use.
    """
def educate_tokens(text_tokens, attr=default_smartypants_attr, language='en'):
    """
    Return iterator that "educates" the items of `text_tokens`.
    
    """
def educateQuotes(text, language='en'):
    """

        Parameter:  - text string (unicode or bytes).
                    - language (`BCP 47` language tag.)
        Returns:    The `text`, with "educated" curly quote characters.

        Example input:  "Isn't this fun?"
        Example output: “Isn’t this fun?“;
    
    """
def educateBackticks(text, language='en'):
    """

        Parameter:  String (unicode or bytes).
        Returns:    The `text`, with ``backticks'' -style double quotes
                    translated into HTML curly quote entities.
        Example input:  ``Isn't this fun?''
        Example output: “Isn't this fun?“;
    
    """
def educateSingleBackticks(text, language='en'):
    """

        Parameter:  String (unicode or bytes).
        Returns:    The `text`, with `backticks' -style single quotes
                    translated into HTML curly quote entities.

        Example input:  `Isn't this fun?'
        Example output: ‘Isn’t this fun?’
    
    """
def educateDashes(text):
    """

        Parameter:  String (unicode or bytes).
        Returns:    The `text`, with each instance of "--" translated to
                    an em-dash character.
    
    """
def educateDashesOldSchool(text):
    """

        Parameter:  String (unicode or bytes).
        Returns:    The `text`, with each instance of "--" translated to
                    an en-dash character, and each "---" translated to
                    an em-dash character.
    
    """
def educateDashesOldSchoolInverted(text):
    """

        Parameter:  String (unicode or bytes).
        Returns:    The `text`, with each instance of "--" translated to
                    an em-dash character, and each "---" translated to
                    an en-dash character. Two reasons why: First, unlike the
                    en- and em-dash syntax supported by
                    EducateDashesOldSchool(), it's compatible with existing
                    entries written before SmartyPants 1.1, back when "--" was
                    only used for em-dashes.  Second, em-dashes are more
                    common than en-dashes, and so it sort of makes sense that
                    the shortcut should be shorter to type. (Thanks to Aaron
                    Swartz for the idea.)
    
    """
def educateEllipses(text):
    """

        Parameter:  String (unicode or bytes).
        Returns:    The `text`, with each instance of "..." translated to
                    an ellipsis character.

        Example input:  Huh...?
        Example output: Huh&#8230;?
    
    """
def stupefyEntities(text, language='en'):
    """

        Parameter:  String (unicode or bytes).
        Returns:    The `text`, with each SmartyPants character translated to
                    its ASCII counterpart.

        Example input:  “Hello — world.”
        Example output: "Hello -- world."
    
    """
def processEscapes(text, restore=False):
    """
    r"""
        Parameter:  String (unicode or bytes).
        Returns:    The `text`, with after processing the following backslash
                    escape sequences. This is useful if you want to force a "dumb"
                    quote or other character to appear.

                    Escape  Value
                    ------  -----
                    \\      &#92;
                    \"      &#34;
                    \'      &#39;
                    \.      &#46;
                    \-      &#45;
                    \`      &#96;
    
    """
def tokenize(text):
    """

        Parameter:  String containing HTML markup.
        Returns:    An iterator that yields the tokens comprising the input
                    string. Each token is either a tag (possibly with nested,
                    tags contained therein, such as <a href="<MTFoo>">, or a
                    run of text between tags. Each yielded element is a
                    two-element tuple; the first is either 'tag' or 'text';
                    the second is the actual value.

        Based on the _tokenize() subroutine from Brad Choate's MTRegex plugin.
            <http://www.bradchoate.com/past/mtregex.php>
    
    """
        def TestSmartypantsAllAttributes(unittest.TestCase):
    """
     the default attribute is "1", which means "all".

    """
            def test_dates(self):
                """
                1440-80's
                """
            def test_educated_quotes(self):
                """
                '"Isn\'t this fun?"'
                """
            def test_html_tags(self):
                """
                '<a src="foo">more</a>'
                """
