def SafeString(object):
    """

        A wrapper providing robust conversion to `str` and `unicode`.
    
    """
2021-03-02 20:49:00,558 : INFO : tokenize_signature : --> do i ever get here?
    def __init__(self, data, encoding=None, encoding_errors='backslashreplace',
                 decoding_errors='replace'):
        """
        'encoding'
        """
    def __str__(self):
        """
        ', '
        """
    def __unicode__(self):
        """

                Return unicode representation of `self.data`.

                Try ``unicode(self.data)``, catch `UnicodeError` and

                * if `self.data` is an Exception instance, work around
                  http://bugs.python.org/issue2517 with an emulation of
                  Exception.__unicode__,

                * else decode with `self.encoding` and `self.decoding_errors`.
        
        """
def ErrorString(SafeString):
    """

        Safely report exception type and message.
    
    """
    def __str__(self):
        """
        '%s: %s'
        """
    def __unicode__(self):
        """
        u'%s: %s'
        """
def ErrorOutput(object):
    """

        Wrapper class for file-like error streams with
        failsave de- and encoding of `str`, `bytes`, `unicode` and
        `Exception` instances.
    
    """
2021-03-02 20:49:00,561 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:49:00,561 : INFO : tokenize_signature : --> do i ever get here?
    def __init__(self, stream=None, encoding=None,
                 encoding_errors='backslashreplace',
                 decoding_errors='replace'):
        """

                :Parameters:
                    - `stream`: a file-like object,
                                a string (path to a file),
                                `None` (write to `sys.stderr`, default), or
                                evaluating to `False` (write() requests are ignored).
                    - `encoding`: `stream` text encoding. Guessed if None.
                    - `encoding_errors`: how to treat encoding errors.
        
        """
    def write(self, data):
        """

                Write `data` to self.stream. Ignore, if self.stream is False.

                `data` can be a `string`, `unicode`, or `Exception` instance.
        
        """
    def close(self):
        """

                Close the error-output stream.

                Ignored if the stream is` sys.stderr` or `sys.stdout` or has no
                close() method.
        
        """
