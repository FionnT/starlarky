def store_multiple(option, opt, value, parser, *args, **kwargs):
    """

        Store multiple values in `parser.values`.  (Option callback.)

        Store `None` for each attribute named in `args`, and store the value for
        each key (attribute name) in `kwargs`.
    
    """
def read_config_file(option, opt, value, parser):
    """

        Read a configuration file during option processing.  (Option callback.)
    
    """
2021-03-02 20:48:59,290 : INFO : tokenize_signature : --> do i ever get here?
def validate_encoding(setting, value, option_parser,
                      config_parser=None, config_section=None):
    """
    'setting "%s": unknown encoding: "%s"'

    """
2021-03-02 20:48:59,291 : INFO : tokenize_signature : --> do i ever get here?
def validate_encoding_error_handler(setting, value, option_parser,
                                    config_parser=None, config_section=None):
    """
    'unknown encoding error handler: "%s" (choices: '
    '"strict", "ignore", "replace", "backslashreplace", '
    '"xmlcharrefreplace", and possibly others; see documentation for '
    'the Python ``codecs`` module)'
    """
2021-03-02 20:48:59,291 : INFO : tokenize_signature : --> do i ever get here?
def validate_encoding_and_error_handler(
    setting, value, option_parser, config_parser=None, config_section=None):
    """

        Side-effect: if an error handler is included in the value, it is inserted
        into the appropriate place as if it was a separate setting/option.
    
    """
2021-03-02 20:48:59,292 : INFO : tokenize_signature : --> do i ever get here?
def validate_boolean(setting, value, option_parser,
                     config_parser=None, config_section=None):
    """
    Check/normalize boolean settings:
             True:  '1', 'on', 'yes', 'true'
             False: '0', 'off', 'no','false', ''
    
    """
2021-03-02 20:48:59,293 : INFO : tokenize_signature : --> do i ever get here?
def validate_ternary(setting, value, option_parser,
                     config_parser=None, config_section=None):
    """
    Check/normalize three-value settings:
             True:  '1', 'on', 'yes', 'true'
             False: '0', 'off', 'no','false', ''
             any other value: returned as-is.
    
    """
2021-03-02 20:48:59,293 : INFO : tokenize_signature : --> do i ever get here?
def validate_nonnegative_int(setting, value, option_parser,
                             config_parser=None, config_section=None):
    """
    'negative value; must be positive or zero'
    """
2021-03-02 20:48:59,293 : INFO : tokenize_signature : --> do i ever get here?
def validate_threshold(setting, value, option_parser,
                       config_parser=None, config_section=None):
    """
    'unknown threshold: %r.'
    """
2021-03-02 20:48:59,293 : INFO : tokenize_signature : --> do i ever get here?
def validate_colon_separated_string_list(
    setting, value, option_parser, config_parser=None, config_section=None):
    """
    ':'
    """
2021-03-02 20:48:59,294 : INFO : tokenize_signature : --> do i ever get here?
def validate_comma_separated_list(setting, value, option_parser,
                                    config_parser=None, config_section=None):
    """
    Check/normalize list arguments (split at "," and strip whitespace).
    
    """
2021-03-02 20:48:59,294 : INFO : tokenize_signature : --> do i ever get here?
def validate_url_trailing_slash(
    setting, value, option_parser, config_parser=None, config_section=None):
    """
    './'
    """
2021-03-02 20:48:59,295 : INFO : tokenize_signature : --> do i ever get here?
def validate_dependency_file(setting, value, option_parser,
                             config_parser=None, config_section=None):
    """
     value is a comma separated string list:

    """
2021-03-02 20:48:59,296 : INFO : tokenize_signature : --> do i ever get here?
def validate_smartquotes_locales(setting, value, option_parser,
                         config_parser=None, config_section=None):
    """
    Check/normalize a comma separated list of smart quote definitions.

        Return a list of (language-tag, quotes) string tuples.
    """
def make_paths_absolute(pathdict, keys, base_path=None):
    """

        Interpret filesystem path settings relative to the `base_path` given.

        Paths are values in `pathdict` whose keys are in `keys`.  Get `keys` from
        `OptionParser.relative_path_settings`.
    
    """
def make_one_path_absolute(base_path, path):
    """
    Return a copy of `settings_spec` excluding/replacing some settings.

        `settings_spec` is a tuple of configuration settings with a structure
        described for docutils.SettingsSpec.settings_spec.

        Optional positional arguments are names of to-be-excluded settings.
        Keyword arguments are option specification replacements.
        (See the html4strict writer for an example.)
    
    """
def Values(optparse.Values):
    """

        Updates list attributes by extension rather than by replacement.
        Works in conjunction with the `OptionParser.lists` instance attribute.
    
    """
    def __init__(self, *args, **kwargs):
        """
        'record_dependencies'
        """
    def update(self, other_dict, option_parser):
        """
        Return a shallow copy of `self`.
        """
def Option(optparse.Option):
    """
    'validator'
    """
    def process(self, opt, value, values, parser):
        """

                Call the validator function on applicable settings and
                evaluate the 'overrides' option.
                Extends `optparse.Option.process`.
        
        """
def OptionParser(optparse.OptionParser, docutils.SettingsSpec):
    """

        Parser for command-line and library use.  The `settings_spec`
        specification here and in other Docutils components are merged to build
        the set of command-line options and runtime settings for this process.

        Common settings (defined below) and component-specific settings must not
        conflict.  Short options are reserved for common settings, and components
        are restrict to using long options.
    
    """
2021-03-02 20:48:59,306 : INFO : tokenize_signature : --> do i ever get here?
    def __init__(self, components=(), defaults=None, read_config_files=None,
                 *args, **kwargs):
        """

                `components` is a list of Docutils components each containing a
                ``.settings_spec`` attribute.  `defaults` is a mapping of setting
                default overrides.
        
        """
    def populate_from_components(self, components):
        """

                For each component, first populate from the `SettingsSpec.settings_spec`
                structure, then from the `SettingsSpec.settings_defaults` dictionary.
                After all components have been processed, check for and populate from
                each component's `SettingsSpec.settings_default_overrides` dictionary.
        
        """
    def get_standard_config_files(self):
        """
        Return list of config files, from environment or standard.
        """
    def get_standard_config_settings(self):
        """
        Returns a dictionary containing appropriate config file settings.
        """
    def check_values(self, values, args):
        """
        Store positional arguments as runtime settings.
        """
    def check_args(self, args):
        """
        '-'
        """
    def set_defaults_from_dict(self, defaults):
        """
        Needed to get custom `Values` instances.
        """
    def get_option_by_dest(self, dest):
        """

                Get an option by its dest.

                If you're supplying a dest which is shared by several options,
                it is undefined which option of those is returned.

                A KeyError is raised if there is no option with the supplied
                dest.
        
        """
def ConfigParser(RawConfigParser):
    """
    'pep_stylesheet'
    """
    def __init__(self, *args, **kwargs):
        """
        List of paths of configuration files read.
        """
    def read(self, filenames, option_parser):
        """
         Config files must be UTF-8-encoded:

        """
    def handle_old_config(self, filename):
        """
        'options'
        """
    def validate_settings(self, filename, option_parser):
        """

                Call the validator function and implement overrides on all applicable
                settings.
        
        """
    def optionxform(self, optionstr):
        """

                Transform '-' to '_' so the cmdline form of option names can be used.
        
        """
    def get_section(self, section):
        """

                Return a given section as a dictionary (empty if the section
                doesn't exist).
        
        """
def ConfigDeprecationWarning(DeprecationWarning):
    """
    Warning for deprecated configuration file features.
    """
