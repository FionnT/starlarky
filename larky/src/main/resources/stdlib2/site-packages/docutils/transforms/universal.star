def Decorations(Transform):
    """

        Populate a document's decoration element (header, footer).
    
    """
    def apply(self):
        """
         @@@ Text is hard-coded for now.
         Should be made dynamic (language-dependent).
         @@@ Use timestamp from the `SOURCE_DATE_EPOCH`_ environment variable
         for the datestamp?
         See https://sourceforge.net/p/docutils/patches/132/
         and https://reproducible-builds.org/specs/source-date-epoch/

        """
def ExposeInternals(Transform):
    """

        Expose internal attributes if ``expose_internals`` setting is set.
    
    """
    def not_Text(self, node):
        """
        'internal:'
        """
def Messages(Transform):
    """

        Place any system messages generated after parsing into a dedicated section
        of the document.
    
    """
    def apply(self):
        """
        'level'
        """
def FilterMessages(Transform):
    """

        Remove system messages below verbosity threshold.
    
    """
    def apply(self):
        """
        'level'
        """
def TestMessages(Transform):
    """

        Append all post-parse system messages to the end of the document.

        Used for testing purposes.
    
    """
    def apply(self):
        """

            Remove comment elements from the document tree (only if the
            ``strip_comments`` setting is enabled).
    
        """
    def apply(self):
        """

            Remove from the document tree all elements with classes in
            `self.document.settings.strip_elements_with_classes` and all "classes"
            attribute values in `self.document.settings.strip_classes`.
    
        """
    def apply(self):
        """
         Iterate over a tuple as removing the current node
         corrupts the iterator returned by `traverse`:

        """
    def check_classes(self, node):
        """
        'classes'
        """
def SmartQuotes(Transform):
    """

        Replace ASCII quotation marks with typographic form.

        Also replace multiple dashes with em-dash/en-dash characters.
    
    """
    def __init__(self, document, startnode):
        """
         A generator that yields ``(texttype, nodetext)`` tuples for a list
         of "Text" nodes (interface to ``smartquotes.educate_tokens()``).

        """
    def apply(self):
        """
        'alt'
        """
