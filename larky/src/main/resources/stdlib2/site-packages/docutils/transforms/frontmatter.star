def TitlePromoter(Transform):
    """

        Abstract base class for DocTitle and SectionSubTitle transforms.
    
    """
    def promote_title(self, node):
        """

                Transform the following tree::

                    <node>
                        <section>
                            <title>
                            ...

                into ::

                    <node>
                        <title>
                        ...

                `node` is normally a document.
        
        """
    def promote_subtitle(self, node):
        """

                Transform the following node tree::

                    <node>
                        <title>
                        <section>
                            <title>
                            ...

                into ::

                    <node>
                        <title>
                        <subtitle>
                        ...
        
        """
    def candidate_index(self, node):
        """

                Find and return the promotion candidate and its index.

                Return (None, None) if no valid candidate was found.
        
        """
def DocTitle(TitlePromoter):
    """

        In reStructuredText_, there is no way to specify a document title
        and subtitle explicitly. Instead, we can supply the document title
        (and possibly the subtitle as well) implicitly, and use this
        two-step transform to "raise" or "promote" the title(s) (and their
        corresponding section contents) to the document level.

        1. If the document contains a single top-level section as its
           first non-comment element, the top-level section's title
           becomes the document's title, and the top-level section's
           contents become the document's immediate contents. The lone
           top-level section header must be the first non-comment element
           in the document.

           For example, take this input text::

               =================
                Top-Level Title
               =================

               A paragraph.

           Once parsed, it looks like this::

               <document>
                   <section names="top-level title">
                       <title>
                           Top-Level Title
                       <paragraph>
                           A paragraph.

           After running the DocTitle transform, we have::

               <document names="top-level title">
                   <title>
                       Top-Level Title
                   <paragraph>
                       A paragraph.

        2. If step 1 successfully determines the document title, we
           continue by checking for a subtitle.

           If the lone top-level section itself contains a single
           second-level section as its first non-comment element, that
           section's title is promoted to the document's subtitle, and
           that section's contents become the document's immediate
           contents. Given this input text::

               =================
                Top-Level Title
               =================

               Second-Level Title
               ~~~~~~~~~~~~~~~~~~

               A paragraph.

           After parsing and running the Section Promotion transform, the
           result is::

               <document names="top-level title">
                   <title>
                       Top-Level Title
                   <subtitle names="second-level title">
                       Second-Level Title
                   <paragraph>
                       A paragraph.

           (Note that the implicit hyperlink target generated by the
           "Second-Level Title" is preserved on the "subtitle" element
           itself.)

        Any comment elements occurring before the document title or
        subtitle are accumulated and inserted as the first body elements
        after the title(s).

        This transform also sets the document's metadata title
        (document['title']).

        .. _reStructuredText: http://docutils.sf.net/rst.html
    
    """
    def set_metadata(self):
        """

                Set document['title'] metadata title from the following
                sources, listed in order of priority:

                * Existing document['title'] attribute.
                * "title" setting.
                * Document title node (as promoted by promote_title).
        
        """
    def apply(self):
        """
        'doctitle_xform'
        """
def SectionSubTitle(TitlePromoter):
    """

        This works like document subtitles, but for sections.  For example, ::

            <section>
                <title>
                    Title
                <section>
                    <title>
                        Subtitle
                    ...

        is transformed into ::

            <section>
                <title>
                    Title
                <subtitle>
                    Subtitle
                ...

        For details refer to the docstring of DocTitle.
    
    """
    def apply(self):
        """
        'sectsubtitle_xform'
        """
def DocInfo(Transform):
    """

        This transform is specific to the reStructuredText_ markup syntax;
        see "Bibliographic Fields" in the `reStructuredText Markup
        Specification`_ for a high-level description. This transform
        should be run *after* the `DocTitle` transform.

        Given a field list as the first non-comment element after the
        document title and subtitle (if present), registered bibliographic
        field names are transformed to the corresponding DTD elements,
        becoming child elements of the "docinfo" element (except for a
        dedication and/or an abstract, which become "topic" elements after
        "docinfo").

        For example, given this document fragment after parsing::

            <document>
                <title>
                    Document Title
                <field_list>
                    <field>
                        <field_name>
                            Author
                        <field_body>
                            <paragraph>
                                A. Name
                    <field>
                        <field_name>
                            Status
                        <field_body>
                            <paragraph>
                                $RCSfile$
                ...

        After running the bibliographic field list transform, the
        resulting document tree would look like this::

            <document>
                <title>
                    Document Title
                <docinfo>
                    <author>
                        A. Name
                    <status>
                        frontmatter.py
                ...

        The "Status" field contained an expanded RCS keyword, which is
        normally (but optionally) cleaned up by the transform. The sole
        contents of the field body must be a paragraph containing an
        expanded RCS keyword of the form "$keyword: expansion text $". Any
        RCS keyword can be processed in any bibliographic field. The
        dollar signs and leading RCS keyword name are removed. Extra
        processing is done for the following RCS keywords:

        - "RCSfile" expands to the name of the file in the RCS or CVS
          repository, which is the name of the source file with a ",v"
          suffix appended. The transform will remove the ",v" suffix.

        - "Date" expands to the format "YYYY/MM/DD hh:mm:ss" (in the UTC
          time zone). The RCS Keywords transform will extract just the
          date itself and transform it to an ISO 8601 format date, as in
          "2000-12-31".

          (Since the source file for this text is itself stored under CVS,
          we can't show an example of the "Date" RCS keyword because we
          can't prevent any RCS keywords used in this explanation from
          being expanded. Only the "RCSfile" keyword is stable; its
          expansion text changes only if the file name changes.)

        .. _reStructuredText: http://docutils.sf.net/rst.html
        .. _reStructuredText Markup Specification:
           http://docutils.sf.net/docs/ref/rst/restructuredtext.html
    
    """
    def apply(self):
        """
        'docinfo_xform'
        """
    def extract_bibliographic(self, field_list):
        """
        'dedication'
        """
    def check_empty_biblio_field(self, field, name):
        """
        'Cannot extract empty bibliographic field "%s".'
        """
    def check_compound_biblio_field(self, field, name):
        """
        'Cannot extract compound bibliographic field "%s".'
        """
    def extract_authors(self, field, name, docinfo):
        """
        ''
        """
    def authors_from_one_paragraph(self, field):
        """
        Return list of Text nodes for authornames.
        
                The set of separators is locale dependent (default: ";"- or ",").
        
        """
    def authors_from_bullet_list(self, field):
