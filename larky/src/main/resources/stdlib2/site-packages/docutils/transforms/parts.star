def SectNum(Transform):
    """

        Automatically assigns numbers to the titles of document sections.

        It is possible to limit the maximum section level for which the numbers
        are added.  For those sections that are auto-numbered, the "autonum"
        attribute is set, informing the contents table generator that a different
        form of the TOC should be used.
    
    """
    def apply(self):
        """
        'depth'
        """
    def update_section_numbers(self, node, prefix=(), depth=0):
        """
         Use &nbsp; for spacing:

        """
def Contents(Transform):
    """

        This transform generates a table of contents from the entire document tree
        or from a single branch.  It locates "section" elements and builds them
        into a nested bullet list, which is placed within a "topic" created by the
        contents directive.  A title is either explicitly specified, taken from
        the appropriate language module, or omitted (local table of contents).
        The depth may be specified.  Two-way references between the table of
        contents and section titles are generated (requires Writer support).

        This transform requires a startnode, which contains generation
        options and provides the location for the generated table of contents (the
        startnode is replaced by the table of contents "topic").
    
    """
    def apply(self):
        """
         let the writer (or output software) build the contents list?
        """
    def build_contents(self, node, level=0):
        """
        'depth'
        """
    def copy_and_filter(self, node):
        """
        Return a copy of a title, with references, images, etc. removed.
        """
def ContentsFilter(nodes.TreeCopyVisitor):
    """
    'alt'
    """
    def ignore_node_but_process_children(self, node):
