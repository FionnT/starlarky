def Writer(writers.Writer):
    """
    'latex'
    """
    def __init__(self):
        """
         Override parent method to add latex-specific transforms

        """
    def get_transforms(self):
        """
         Convert specific admonitions to generic one

        """
    def translate(self):
        """
         copy parts

        """
    def assemble_parts(self):
        """
        Assemble the `self.parts` dictionary of output fragments.
        """
def Babel(object):
    """
    Language specifics for LaTeX.
    """
    def __init__(self, language_code, reporter=None):
        """
        Return the babel call with correct options and settings
        """
    def language_name(self, language_code):
        """
        Return TeX language name for `language_code`
        """
    def get_language(self):
        """
         Obsolete, kept for backwards compatibility with Sphinx

        """
def SortableDict(dict):
    """
    Dictionary with additional sorting methods

        Tip: use key starting with with '_' for sorting before small letters
             and with '~' for sorting after small letters.
    
    """
    def sortedkeys(self):
        """
        Return sorted list of keys
        """
    def sortedvalues(self):
        """
        Return list of values sorted by keys
        """
def PreambleCmds(object):
    """
    Building blocks for the latex preamble.
    """
def CharMaps(object):
    """
    LaTeX representations for active and Unicode characters.
    """
def DocumentClass(object):
    """
    Details of a LaTeX document class.
    """
    def __init__(self, document_class, with_part=False):
        """
        'section'
        """
    def section(self, level):
        """
        Return the LaTeX section name for section `level`.

                The name depends on the specific document class.
                Level is 1,2,3..., as level 0 is the title.
        
        """
def Table(object):
    """
    Manage a table while traversing.

        Maybe change to a mixin defining the visit/departs, but then
        class Table internal variables are in the Translator.

        Table style might be

        :standard:   horizontal and vertical lines
        :booktabs:   only horizontal lines (requires "booktabs" LaTeX package)
        :borderless: no borders around table cells
        :nolines:    alias for borderless

        :colwidths-auto:  column widths determined by LaTeX
        :colwidths-given: use colum widths from rST source
    
    """
    def __init__(self, translator, latex_type):
        """
         miscellaneous attributes

        """
    def open(self):
        """
         maybe context with search
        """
    def close(self):
        """
        'nolines'
        """
    def get_latex_type(self):
        """
        'longtable'
        """
    def set(self, attr, value):
        """
        'standard'
        """
    def get_opening(self, width=r'\linewidth'):
        """
        'left'
        """
    def get_closing(self):
        """
        'booktabs'
        """
    def visit_colspec(self, node):
        """
         "stubs" list is an attribute of the tgroup element:

        """
    def get_colspecs(self, node):
        """
        Return column specification for longtable.

                Assumes reST line length being 80 characters.
                Table width is hairy.

                === ===
                ABC DEF
                === ===

                usually gets to narrow, therefore we add 1 (fiddlefactor).
        
        """
    def get_column_width(self):
        """
        Return columnwidth for current cell (not multicell).
        """
    def get_multicolumn_width(self, start, len_):
        """
        Return sum of columnwidths for multicell.
        """
    def get_caption(self):
        """
        ''
        """
    def need_recurse(self):
        """
        'longtable'
        """
    def visit_thead(self):
        """
        'standard'
        """
    def depart_thead(self):
        """
        if self.borders == 'standard':
            a.append('\\hline\n')

        """
    def visit_row(self):
        """
        ' \\\\\n'
        """
    def set_rowspan(self, cell, value):
        """

            Generate code for 8-bit LaTeX from a Docutils document tree.

            See the docstring of docutils.writers._html_base.HTMLTranslator for
            notes on and examples of safe subclassing.
    
        """
    def __init__(self, document, babel_class=Babel):
        """
         Reporter
         ~~~~~~~~

        """
    def stylesheet_call(self, path):
        """
        Return code to reference or embed stylesheet file `path`
        """
    def to_latex_encoding(self, docutils_encoding):
        """
        Translate docutils encoding name into LaTeX's.

                Default method is remove "-" and "_" chars from docutils_encoding.
        
        """
    def language_label(self, docutil_label):
        """
        Return text with 'problematic' characters escaped.

                * Escape the special printing characters ``# $ % & ~ _ ^ \\ { }``,
                  square brackets ``[ ]``, double quotes and (in OT1) ``< | >``.
                * Translate non-supported Unicode characters.
                * Separate ``-`` (and more in literal text) to prevent input ligatures.
        
        """
2021-03-02 20:48:57,636 : INFO : tokenize_signature : --> do i ever get here?
    def attval(self, text,
               whitespace=re.compile('[\n\r\t\v\f]')):
        """
        Cleanse, encode, and return attribute value text.
        """
    def is_inline(self, node):
        """
        Check whether a node represents an inline or block-level element
        """
    def append_hypertargets(self, node):
        """
        Append hypertargets for all ids of `node`
        """
    def ids_to_labels(self, node, set_anchor=True):
        """
        Return list of label definitions for all ids of `node`

                If `set_anchor` is True, an anchor is set with \\phantomsection.
        
        """
    def set_align_from_classes(self, node):
        """
        Convert ``align-*`` class arguments into alignment args.
        """
    def insert_align_declaration(self, node, default=None):
        """
        'align'
        """
    def duclass_open(self, node):
        """
        Open a group and insert declarations for class values.
        """
    def duclass_close(self, node):
        """
        Close a group of class declarations.
        """
    def push_output_collector(self, new_out):
        """
         Visitor methods
         ---------------


        """
    def visit_Text(self, node):
        """
        'classes'
        """
    def depart_abbreviation(self, node):
        """
        'classes'
        """
    def depart_acronym(self, node):
        """
        'address'
        """
    def depart_address(self, node):
        """
        'admonition'
        """
    def depart_admonition(self, node):
        """
        '}\n'
        """
    def visit_author(self, node):
        """
        'author'
        """
    def depart_author(self, node):
        """
         not used: visit_author is called anyway for each author.

        """
    def depart_authors(self, node):
        """
        '\\begin{quote}'
        """
    def depart_block_quote(self, node):
        """
        '\\end{quote}\n'
        """
    def visit_bullet_list(self, node):
        """
        '\\begin{list}{}{}'
        """
    def depart_bullet_list(self, node):
        """
        '\\end{list}\n'
        """
    def visit_superscript(self, node):
        """
        r'\textsuperscript{'
        """
    def depart_superscript(self, node):
        """
        'classes'
        """
    def visit_subscript(self, node):
        """
        'textsubscript'
        """
    def depart_subscript(self, node):
        """
        'classes'
        """
    def visit_caption(self, node):
        """
        '\n\\caption{'
        """
    def depart_caption(self, node):
        """
        '}\n'
        """
    def visit_title_reference(self, node):
        """
        'titlereference'
        """
    def depart_title_reference(self, node):
        """
        'classes'
        """
    def visit_citation(self, node):
        """
         TODO: do we need these?
         self.requirements['~fnt_floats'] = PreambleCmds.footnote_floats

        """
    def depart_citation(self, node):
        """
         TODO: normalize label

        """
    def visit_citation_reference(self, node):
        """
        r'\cite{'
        """
    def depart_citation_reference(self, node):
        """
         check for a following citation separated by a space or newline

        """
    def visit_classifier(self, node):
        """
        '(\\textbf{'
        """
    def depart_classifier(self, node):
        """
        '})'
        """
    def visit_colspec(self, node):
        """
        '\n'
        """
    def depart_comment(self, node):
        """
        '\n'
        """
    def depart_compound(self, node):
        """
        'contact'
        """
    def depart_contact(self, node):
        """
        'copyright'
        """
    def depart_copyright(self, node):
        """
        'date'
        """
    def depart_date(self, node):
        """
         header and footer

        """
    def depart_decoration(self, node):
        """
        '\n'
        """
    def visit_definition_list(self, node):
        """
        '\\begin{description}\n'
        """
    def depart_definition_list(self, node):
        """
        '\\end{description}\n'
        """
    def visit_definition_list_item(self, node):
        """
        ' '
        """
    def depart_description(self, node):
        """
         Some itmes (e.g. author) end up at other places

        """
    def visit_docinfo_item(self, node, name):
        """
        'author'
        """
    def depart_docinfo_item(self, node):
        """
         for address we did set insert_newline

        """
    def visit_doctest_block(self, node):
        """
         titled document?

        """
    def depart_document(self, node):
        """
         Complete header with information gained from walkabout
         * language setup

        """
    def visit_emphasis(self, node):
        """
        '\\emph{'
        """
    def depart_emphasis(self, node):
        """
        'classes'
        """
    def insert_additional_table_colum_delimiters(self):
        """
        ' & '
        """
    def visit_entry(self, node):
        """
         cell separation

        """
    def depart_entry(self, node):
        """
         header / not header
        """
    def visit_row(self, node):
        """
         enumeration styles:

        """
    def depart_enumerated_list(self, node):
        """
        '\\end{enumerate}\n'
        """
    def visit_field(self, node):
        """
         output is done in field_argument, field_body, field_name

        """
    def depart_field(self, node):
        """
        r'\\'
        """
    def visit_field_list(self, node):
        """
        'fieldlist'
        """
    def depart_field_list(self, node):
        """
        '\\end{DUfieldlist}\n'
        """
    def visit_field_name(self, node):
        """
        '\\textbf{'
        """
    def depart_field_name(self, node):
        """
        '}: &'
        """
    def visit_figure(self, node):
        """
        'float_settings'
        """
    def depart_figure(self, node):
        """
        '\\end{figure}\n'
        """
    def visit_footer(self, node):
        """
        r'\newcommand{\DUfooter}{'
        """
    def depart_footer(self, node):
        """
        '}'
        """
    def visit_footnote(self, node):
        """
        'backrefs'
        """
    def depart_footnote(self, node):
        """
        '}\n'
        """
    def visit_footnote_reference(self, node):
        """
        ''
        """
    def depart_footnote_reference(self, node):
        """
         footnote/citation label

        """
    def label_delim(self, node, bracket, superscript):
        """
        footnote or citation label: in brackets or as superscript
        """
    def depart_label(self, node):
        """
        ']'
        """
    def visit_generated(self, node):
        """
        r'\newcommand{\DUheader}{'
        """
    def depart_header(self, node):
        """
        '}'
        """
    def to_latex_length(self, length_str, pxunit=None):
        """
        Convert `length_str` with rst lenght to LaTeX length
        
        """
    def visit_image(self, node):
        """
        'graphicx'
        """
    def depart_image(self, node):
        """
        'ids'
        """
    def visit_inline(self, node): # <span>, i.e. custom roles
        """
         <span>, i.e. custom roles
        """
    def depart_inline(self, node):
        """
        '}'
        """
    def visit_legend(self, node):
        """
        'legend'
        """
    def depart_legend(self, node):
        """
        '\\end{DUlegend}\n'
        """
    def visit_line(self, node):
        """
        r'\item[] '
        """
    def depart_line(self, node):
        """
        '\n'
        """
    def visit_line_block(self, node):
        """
        '_providelength'
        """
    def depart_line_block(self, node):
        """
        '\\end{DUlineblock}\n'
        """
    def visit_list_item(self, node):
        """
        '\n\\item '
        """
    def depart_list_item(self, node):
        """
        'code'
        """
    def depart_literal(self, node):
        """
        'classes'
        """
    def is_plaintext(self, node):
        """
        Check whether a node can be typeset verbatim
        """
    def visit_literal_block(self, node):
        """
        Render a literal block.

                Corresponding rST elements: literal block, parsed-literal, code.
        
        """
    def depart_literal_block(self, node):
        """
         def visit_meta(self, node):
             self.out.append('[visit_meta]\n')
         TODO: set keywords for pdf?
         But:
          The reStructuredText "meta" directive creates a "pending" node,
          which contains knowledge that the embedded "meta" node can only
          be handled by HTML-compatible writers. The "pending" node is
          resolved by the docutils.transforms.components.Filter transform,
          which checks that the calling writer supports HTML; if it doesn't,
          the "pending" node (and enclosed "meta" node) is removed from the
          document.
          --- docutils/docs/peps/pep-0258.html#transformer

         def depart_meta(self, node):
             self.out.append('[depart_meta]\n')


        """
    def visit_math(self, node, math_env='$'):
        """
        math role
        """
    def depart_math(self, node):
        """
         never reached
        """
    def visit_math_block(self, node):
        """
         never reached
        """
    def visit_option(self, node):
        """
         this is not the first option

        """
    def depart_option(self, node):
        """
         flag that the first option is done.

        """
    def visit_option_argument(self, node):
        """
        Append the delimiter betweeen an option and its argument to body.
        """
    def depart_option_argument(self, node):
        """
        '\n\\item['
        """
    def depart_option_group(self, node):
        """
         the flag
        """
    def visit_option_list(self, node):
        """
        '_providelength'
        """
    def depart_option_list(self, node):
        """
        '\\end{DUoptionlist}\n'
        """
    def visit_option_list_item(self, node):
        """
        self.out.append(self.starttag(node, 'span', '', CLASS='option'))

        """
    def depart_option_string(self, node):
        """
        self.out.append('</span>')

        """
    def visit_organization(self, node):
        """
        'organization'
        """
    def depart_organization(self, node):
        """
         insert blank line, unless
         * the paragraph is first in a list item or compound,
         * follows a non-paragraph node in a compound,
         * is in a table with auto-width columns

        """
    def depart_paragraph(self, node):
        """
        'classes'
        """
    def visit_problematic(self, node):
        """
        'color'
        """
    def depart_problematic(self, node):
        """
        '}}'
        """
    def visit_raw(self, node):
        """
        'latex'
        """
    def depart_raw(self, node):
        """
        'classes'
        """
    def has_unbalanced_braces(self, string):
        """
        Test whether there are unmatched '{' or '}' characters.
        """
    def visit_reference(self, node):
        """
         We need to escape #, \, and % if we use the URL in a command.

        """
    def depart_reference(self, node):
        """
        '}'
        """
    def visit_revision(self, node):
        """
        'revision'
        """
    def depart_revision(self, node):
        """
        'rubric'
        """
    def depart_rubric(self, node):
        """
        '}\n'
        """
    def visit_section(self, node):
        """
         Initialize counter for potential subsections:

        """
    def depart_section(self, node):
        """
         Remove counter for potential subsections:

        """
    def visit_sidebar(self, node):
        """
        'color'
        """
    def depart_sidebar(self, node):
        """
        '}\n'
        """
    def visit_attribution(self, node):
        """
        '\\nopagebreak\n\n\\raggedleft '
        """
    def depart_attribution(self, node):
        """
        '\n'
        """
    def visit_status(self, node):
        """
        'status'
        """
    def depart_status(self, node):
        """
        '\\textbf{'
        """
    def depart_strong(self, node):
        """
        'classes'
        """
    def visit_substitution_definition(self, node):
        """
        'documentsubtitle'
        """
    def depart_subtitle(self, node):
        """
        '}\n'
        """
    def visit_system_message(self, node):
        """
        'color'
        """
    def depart_system_message(self, node):
        """
        'table'
        """
    def depart_table(self, node):
        """
         wrap content in the right environment:

        """
    def visit_target(self, node):
        """
         Skip indirect targets:

        """
    def depart_target(self, node):
        """
         BUG write preamble if not yet done (colspecs not [])
         for tables without heads.

        """
    def depart_tbody(self, node):
        """
        definition list term
        """
    def depart_term(self, node):
        """
         \leavevmode results in a line break if the
         term is followed by an item list.

        """
    def visit_tgroup(self, node):
        """
        self.out.append(self.starttag(node, 'colgroup'))
        self.context.append('</colgroup>\n')

        """
    def depart_tgroup(self, node):
        """
        '{%s}\n'
        """
    def depart_thead(self, node):
        """
        Append section and other titles.
        """
    def depart_title(self, node):
        """
        'document'
        """
    def minitoc(self, node, title, depth):
        """
        Generate a local table of contents with LaTeX package minitoc
        """
    def visit_topic(self, node):
        """
         Topic nodes can be generic topic, abstract, dedication, or ToC.
         table of contents:

        """
    def depart_topic(self, node):
        """
        'abstract'
        """
    def visit_transition(self, node):
        """
        'transition'
        """
    def depart_transition(self, node):
        """
        'version'
        """
    def depart_version(self, node):
        """
        'visiting unimplemented node type: %s'
        """
