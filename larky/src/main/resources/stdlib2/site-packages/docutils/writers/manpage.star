def Writer(writers.Writer):
    """
    'manpage'
    """
    def __init__(self):
        """
        'center'
        """
    def new_row(self):
        """
        Append the separator for table head.
        """
    def append_cell(self, cell_lines):
        """
        cell_lines is an array of lines
        """
    def _minimize_cell(self, cell_lines):
        """
        Remove leading and trailing blank and ``.sp`` lines
        """
    def as_list(self):
        """
        '.TS\n'
        """
def Translator(nodes.NodeVisitor):
    """

    """
    def __init__(self, document):
        """
        ''
        """
    def comment_begin(self, text):
        """
        Return commented version of the passed text WITHOUT end of
                line/comment.
        """
    def comment(self, text):
        """
        Return commented version of the passed text.
        """
    def ensure_eol(self):
        """
        Ensure the last line in body is terminated by new line.
        """
    def astext(self):
        """
        Return the final formatted document as a string.
        """
    def deunicode(self, text):
        """
        u'\xa0'
        """
    def visit_Text(self, node):
        """
        '\\'
        """
    def depart_Text(self, node):
        """
        'bullet'
        """
            def __init__(self, style):
                """
                'start'
                """
            def __next__(self):
                """
                'bullet'
                """
            def get_width(self):
                """
                'enum_style-%s'
                """
    def list_end(self):
        """
        .TH %(title_upper)s %(manual_section)s
         \"%(date)s\" \"%(version)s\" \"%(manual_group)s\"\n
        .SH NAME\n
        %(title)s \\- %(subtitle)s\n
        """
    def append_header(self):
        """
        append header with .TH and .SH NAME
        """
    def visit_address(self, node):
        """
        'address'
        """
    def depart_address(self, node):
        """

         Make admonitions a simple block quote
         with a strong heading

         Using .IP/.RE doesn't preserve indentation
         when admonitions contain bullets, literal,
         and/or block quotes.


        """
    def depart_admonition(self, node):
        """
        'attention'
        """
    def visit_docinfo_item(self, node, name):
        """
        'author'
        """
    def depart_docinfo_item(self, node):
        """
        'author'
        """
    def visit_authors(self, node):
        """
         _author is called anyway.

        """
    def depart_authors(self, node):
        """
         BUG/HACK: indent always uses the _last_ indention,
         thus we need two of them.

        """
    def depart_block_quote(self, node):
        """
        'caution'
        """
    def visit_citation(self, node):
        """
        '.IP [%s] 5\n'
        """
    def depart_citation(self, node):
        """
        '['
        """
    def visit_classifier(self, node):
        """
        %s.\n
        """
2021-03-02 20:48:56,292 : INFO : tokenize_signature : --> do i ever get here?
    def visit_comment(self, node,
                      sub=re.compile('-(?=-)').sub):
        """
        'contact'
        """
    def visit_container(self, node):
        """
        'copyright'
        """
    def visit_danger(self, node):
        """
        'danger'
        """
    def visit_date(self, node):
        """
        'date'
        """
    def visit_decoration(self, node):
        """
        'definition_list_item'
        """
    def depart_definition_list_item(self, node):
        """
        'definition_list_item'
        """
    def visit_description(self, node):
        """
         NOTE nothing should be written before this

        """
    def visit_doctest_block(self, node):
        """
        'literal_block'
        """
    def depart_doctest_block(self, node):
        """
        'literal_block'
        """
    def visit_document(self, node):
        """
         no blank line between comment and header.

        """
    def depart_document(self, node):
        """
        'author'
        """
    def visit_emphasis(self, node):
        """
        'emphasis'
        """
    def depart_emphasis(self, node):
        """
        'emphasis'
        """
    def visit_entry(self, node):
        """
         a cell in a table row

        """
    def depart_entry(self, node):
        """
        'error'
        """
    def visit_field(self, node):
        """
 
        """
    def depart_field_body(self, node):
        """
        'field_name'
        """
    def depart_field_name(self, node):
        """
        'field_name'
        """
    def visit_figure(self, node):
        """
        '"footer" not supported'
        """
    def depart_footer(self, node):
        """
        '.IP [%s] 5\n'
        """
    def depart_footnote(self, node):
        """
        '"footnote_backrefs" not supported'
        """
    def visit_footnote_reference(self, node):
        """
        '['
        """
    def depart_footnote_reference(self, node):
        """
        'hint'
        """
    def visit_subscript(self, node):
        """
        '\\s-2\\d'
        """
    def depart_subscript(self, node):
        """
        '\\u\\s0'
        """
    def visit_superscript(self, node):
        """
        '\\s-2\\u'
        """
    def depart_superscript(self, node):
        """
        '\\d\\s0'
        """
    def visit_attribution(self, node):
        """
        '\\(em '
        """
    def depart_attribution(self, node):
        """
        '\n'
        """
    def visit_image(self, node):
        """
        '"image" not supported'
        """
    def visit_important(self, node):
        """
        'important'
        """
    def visit_inline(self, node):
        """
         footnote and citation

        """
    def depart_label(self, node):
        """
        ']\n'
        """
    def visit_legend(self, node):
        """
         WHAT should we use .INDENT, .UNINDENT ?

        """
    def visit_line_block(self, node):
        """
         TODO: separate inline blocks from previous paragraphs
         see http://hg.intevation.org/mercurial/crew/rev/9c142ed9c405
         self.body.append('.sp\n')
         but it does not work for me.

        """
    def depart_line_block(self, node):
        """
        '.fi\n'
        """
    def visit_line(self, node):
        """
        '\n'
        """
    def visit_list_item(self, node):
        """
         man 7 man argues to use ".IP" instead of ".TP

        """
    def depart_list_item(self, node):
        """
        'literal'
        """
    def depart_literal(self, node):
        """
        'literal'
        """
    def visit_literal_block(self, node):
        """
         BUG/HACK: indent always uses the _last_ indention,
         thus we need two of them.

        """
    def depart_literal_block(self, node):
        """
        'literal_block'
        """
    def visit_math(self, node):
        """
        '"math" role not supported'
        """
    def depart_math(self, node):
        """
        '"math" directive not supported'
        """
    def depart_math_block(self, node):
        """
        'note'
        """
    def indent(self, by=0.5):
        """
         if we are in a section ".SH" there already is a .RS

        """
    def dedent(self):
        """
        'indent'
        """
    def visit_option_list(self, node):
        """
         one item of the list

        """
    def depart_option_list_item(self, node):
        """
        'option_list_item'
        """
    def visit_option_group(self, node):
        """
         as one option could have several forms it is a group
         options without parameter bold only, .B, -v
         options with parameter bold italic, .BI, -f file

         we do not know if .B or .BI

        """
    def depart_option_group(self, node):
        """
         the counter
        """
    def visit_option(self, node):
        """
         each form of the option will be presented separately

        """
    def depart_option(self, node):
        """
         do not know if .B or .BI

        """
    def depart_option_string(self, node):
        """
        '.BI' bold/italic alternate
        """
    def depart_option_argument(self, node):
        """
        'organization'
        """
    def depart_organization(self, node):
        """
         skip label
        """
    def visit_paragraph(self, node):
        """
         ``.PP`` : Start standard indented paragraph.
         ``.LP`` : Start block paragraph, all except the first.
         ``.P [type]``  : Start paragraph type.
         NOTE do not use paragraph starts because they reset indentation.
         ``.sp`` is only vertical space

        """
    def depart_paragraph(self, node):
        """
        '\n'
        """
    def visit_problematic(self, node):
        """
        'problematic'
        """
    def depart_problematic(self, node):
        """
        'problematic'
        """
    def visit_raw(self, node):
        """
        'format'
        """
    def visit_reference(self, node):
        """
        E.g. link or email address.
        """
    def depart_reference(self, node):
        """
        'reference'
        """
    def visit_revision(self, node):
        """
        'revision'
        """
    def visit_row(self, node):
        """
        'status'
        """
    def visit_strong(self, node):
        """
        'strong'
        """
    def depart_strong(self, node):
        """
        'strong'
        """
    def visit_substitution_definition(self, node):
        """
        Internal only.
        """
    def visit_substitution_reference(self, node):
        """
        '"substitution_reference" not supported'
        """
    def visit_subtitle(self, node):
        """
        'strong'
        """
    def depart_subtitle(self, node):
        """
         document subtitle calls SkipNode

        """
    def visit_system_message(self, node):
        """
         TODO add report_level
        if node['level'] < self.document.reporter['writer'].report_level:
            Level is too low to display:
            raise nodes.SkipNode

        """
    def depart_system_message(self, node):
        """
         targets are in-document hyper targets, without any use for man-pages.

        """
    def visit_tbody(self, node):
        """
        'term'
        """
    def depart_term(self, node):
        """
        'term'
        """
    def visit_tgroup(self, node):
        """
         MAYBE double line '='

        """
    def depart_thead(self, node):
        """
         MAYBE double line '='

        """
    def visit_tip(self, node):
        """
        'tip'
        """
    def visit_title(self, node):
        """
        'topic-title'
        """
    def depart_title(self, node):
        """
        '"'
        """
    def visit_title_reference(self, node):
        """
        inline citation reference
        """
    def depart_title_reference(self, node):
        """
        'title_reference'
        """
    def visit_topic(self, node):
        """
         .PP      Begin a new paragraph and reset prevailing indent.
         .sp N    leaves N lines of blank space.
         .ce      centers the next line

        """
    def depart_transition(self, node):
        """
        '\n.ce 0\n.sp\n'
        """
    def visit_version(self, node):
        """
        'version'
        """
    def visit_warning(self, node):
        """
        'warning'
        """
    def unimplemented_visit(self, node):
        """
        'visiting unimplemented node type: %s'

        """
