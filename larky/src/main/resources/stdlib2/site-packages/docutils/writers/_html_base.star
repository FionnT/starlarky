        def PIL(object): pass  # dummy wrapper
    """
     dummy wrapper
    """
def Writer(writers.Writer):
    """
    'html'
    """
    def get_transforms(self):
        """
        'rb'
        """
    def interpolation_dict(self):
        """
        ''
        """
    def assemble_parts(self):
        """
        ''
        """
def HTMLTranslator(nodes.NodeVisitor):
    """

        Generic Docutils to HTML translator.

        See the `html4css1` and `html5_polyglot` writers for full featured
        HTML writers.

        .. IMPORTANT::
          The `visit_*` and `depart_*` methods use a
          heterogeneous stack, `self.context`.
          When subclassing, make sure to be consistent in its use!

          Examples for robust coding:

          a) Override both `visit_*` and `depart_*` methods, don't call the
             parent functions.

          b) Extend both and unconditionally call the parent functions::

               def visit_example(self, node):
                   if foo:
                       self.body.append('<div class="foo">')
                   html4css1.HTMLTranslator.visit_example(self, node)

               def depart_example(self, node):
                   html4css1.HTMLTranslator.depart_example(self, node)
                   if foo:
                       self.body.append('</div>')

          c) Extend both, calling the parent functions under the same
             conditions::

               def visit_example(self, node):
                   if foo:
                       self.body.append('<div class="foo">\n')
                   else: # call the parent method
                       _html_base.HTMLTranslator.visit_example(self, node)

               def depart_example(self, node):
                   if foo:
                       self.body.append('</div>\n')
                   else: # call the parent method
                       _html_base.HTMLTranslator.depart_example(self, node)

          d) Extend one method (call the parent), but don't otherwise use the
             `self.context` stack::

               def depart_example(self, node):
                   _html_base.HTMLTranslator.depart_example(self, node)
                   if foo:
                       # implementation-specific code
                       # that does not use `self.context`
                       self.body.append('</div>\n')

          This way, changes in stack use will not bite you.
    
    """
    def __init__(self, document):
        """
         self.content_type = 
         encoding not interpolated:

        """
    def astext(self):
        """
        ''
        """
    def encode(self, text):
        """
        Encode special characters in `text` & return.
        """
    def cloak_mailto(self, uri):
        """
        Try to hide a mailto: URL from harvesters.
        """
    def cloak_email(self, addr):
        """
        Try to hide the link text of a email link from harversters.
        """
2021-03-02 20:48:58,323 : INFO : tokenize_signature : --> do i ever get here?
    def attval(self, text,
               whitespace=re.compile('[\n\r\t\v\f]')):
        """
        Cleanse, HTML encode, and return attribute value text.
        """
    def stylesheet_call(self, path):
        """
        Return code to reference or embed stylesheet file `path`
        """
    def starttag(self, node, tagname, suffix='\n', empty=False, **attributes):
        """

                Construct and return a start tag given a node (id & class attributes
                are extracted), tag name, and optional attributes.
        
        """
    def emptytag(self, node, tagname, suffix='\n', **attributes):
        """
        Construct and return an XML-compatible empty tag.
        """
    def set_class_on_child(self, node, class_, index=0):
        """

                Set class `class_` on the visible child no. index of `node`.
                Do nothing if node has fewer children than `index`.
        
        """
    def visit_Text(self, node):
        """
         @@@ implementation incomplete ("title" attribute)

        """
    def depart_abbreviation(self, node):
        """
        '</abbr>'
        """
    def visit_acronym(self, node):
        """
         @@@ implementation incomplete ("title" attribute)

        """
    def depart_acronym(self, node):
        """
        '</acronym>'
        """
    def visit_address(self, node):
        """
        'address'
        """
    def depart_address(self, node):
        """
        '\n</pre>\n'
        """
    def visit_admonition(self, node):
        """
        'classes'
        """
    def depart_admonition(self, node=None):
        """
        '</div>\n'
        """
    def visit_attribution(self, node):
        """
        'p'
        """
    def depart_attribution(self, node):
        """
        '</p>\n'
        """
    def visit_author(self, node):
        """
        'author'
        """
    def depart_author(self, node):
        """
        '</p>'
        """
    def visit_authors(self, node):
        """
        'authors'
        """
    def depart_authors(self, node):
        """
        'blockquote'
        """
    def depart_block_quote(self, node):
        """
        '</blockquote>\n'
        """
    def check_simple_list(self, node):
        """
        Check for a simple list that can be rendered compactly.
        """
    def is_compactable(self, node):
        """
         explicite class arguments have precedence

        """
    def visit_bullet_list(self, node):
        """
        'class'
        """
    def depart_bullet_list(self, node):
        """
        '</ul>\n'
        """
    def visit_caption(self, node):
        """
        'p'
        """
    def depart_caption(self, node):
        """
        '</p>\n'
        """
    def visit_citation(self, node):
        """
        '<dl class="citation">\n'
        """
    def depart_citation(self, node):
        """
        '</dd>\n'
        """
    def visit_citation_reference(self, node):
        """
        '#'
        """
    def depart_citation_reference(self, node):
        """
        ']</a>'
        """
    def visit_classifier(self, node):
        """
        'span'
        """
    def depart_classifier(self, node):
        """
        '</span>'
        """
    def visit_colspec(self, node):
        """
         "stubs" list is an attribute of the tgroup element:

        """
    def depart_colspec(self, node):
        """
         write out <colgroup> when all colspecs are processed

        """
2021-03-02 20:48:58,333 : INFO : tokenize_signature : --> do i ever get here?
    def visit_comment(self, node,
                      sub=re.compile('-(?=-)').sub):
        """
        Escape double-dashes in comment text.
        """
    def visit_compound(self, node):
        """
        'div'
        """
    def depart_compound(self, node):
        """
        '</div>\n'
        """
    def visit_container(self, node):
        """
        'div'
        """
    def depart_container(self, node):
        """
        '</div>\n'
        """
    def visit_contact(self, node):
        """
        'contact'
        """
    def depart_contact(self, node):
        """
        'copyright'
        """
    def depart_copyright(self, node):
        """
        'date'
        """
    def depart_date(self, node):
        """
        '</dt>\n'
        """
    def depart_definition(self, node):
        """
        '</dd>\n'
        """
    def visit_definition_list(self, node):
        """
        'classes'
        """
    def depart_definition_list(self, node):
        """
        '</dl>\n'
        """
    def visit_definition_list_item(self, node):
        """
         pass class arguments, ids and names to definition term:

        """
    def depart_definition_list_item(self, node):
        """
        'dd'
        """
    def depart_description(self, node):
        """
        '</dd>\n'
        """
    def visit_docinfo(self, node):
        """
        'docinfo'
        """
    def depart_docinfo(self, node):
        """
        '</dl>\n'
        """
    def visit_docinfo_item(self, node, name, meta=True):
        """
        '<meta name="%s" content="%s" />\n'
        """
    def depart_docinfo_item(self):
        """
        '</dd>\n'
        """
    def visit_doctest_block(self, node):
        """
        'pre'
        """
    def depart_doctest_block(self, node):
        """
        '\n</pre>\n'
        """
    def visit_document(self, node):
        """
        'title'
        """
    def depart_document(self, node):
        """
        'lang'
        """
    def visit_emphasis(self, node):
        """
        'em'
        """
    def depart_emphasis(self, node):
        """
        '</em>'
        """
    def visit_entry(self, node):
        """
        'class'
        """
    def depart_entry(self, node):
        """
        'start'
        """
    def depart_enumerated_list(self, node):
        """
        '</ol>\n'
        """
    def visit_field_list(self, node):
        """
         Keep simple paragraphs in the field_body to enable CSS
         rule to start body on new line if the label is too long

        """
    def depart_field_list(self, node):
        """
        '</dl>\n'
        """
    def visit_field(self, node):
        """
         as field is ignored, pass class arguments to field-name and field-body:


        """
    def visit_field_name(self, node):
        """
        'dt'
        """
    def depart_field_name(self, node):
        """
        '</dt>\n'
        """
    def visit_field_body(self, node):
        """
        'dd'
        """
    def depart_field_body(self, node):
        """
        '</dd>\n'
        """
    def visit_figure(self, node):
        """
        'class'
        """
    def depart_figure(self, node):
        """
        '</div>\n'
        """
    def visit_footer(self, node):
        """
        'div'
        """
    def visit_footnote(self, node):
        """
        'footnote '
        """
    def depart_footnote(self, node):
        """
        '</dd>\n'
        """
    def visit_footnote_reference(self, node):
        """
        '#'
        """
    def depart_footnote_reference(self, node):
        """
        '</a>'
        """
    def visit_generated(self, node):
        """
        'sectnum'
        """
    def depart_generated(self, node):
        """
        'div'
        """
    def visit_image(self, node):
        """
        'uri'
        """
    def depart_image(self, node):
        """
        'span'
        """
    def depart_inline(self, node):
        """
        '</span>'
        """
    def visit_label(self, node):
        """
        'brackets'
        """
    def depart_label(self, node):
        """
        'backrefs'
        """
    def visit_legend(self, node):
        """
        'div'
        """
    def depart_legend(self, node):
        """
        '</div>\n'
        """
    def visit_line(self, node):
        """
        'div'
        """
    def depart_line(self, node):
        """
        '</div>\n'
        """
    def visit_line_block(self, node):
        """
        'div'
        """
    def depart_line_block(self, node):
        """
        '</div>\n'
        """
    def visit_list_item(self, node):
        """
        'li'
        """
    def depart_list_item(self, node):
        """
        '</li>\n'
        """
    def visit_literal(self, node):
        """
         special case: "code" role

        """
    def depart_literal(self, node):
        """
         skipped unless literal element is from "code" role:

        """
    def visit_literal_block(self, node):
        """
        'pre'
        """
    def depart_literal_block(self, node):
        """
        'code'
        """
    def visit_math(self, node, math_env=''):
        """
         If the method is called from visit_math_block(), math_env != ''.


        """
    def depart_math(self, node):
        """
         never reached
        """
    def visit_math_block(self, node):
        """
         never reached
        """
    def visit_meta(self, node):
        """
        'meta'
        """
    def depart_meta(self, node):
        """
        'span'
        """
    def depart_option(self, node):
        """
        '</span>'
        """
    def visit_option_argument(self, node):
        """
        'delimiter'
        """
    def depart_option_argument(self, node):
        """
        '</var>'
        """
    def visit_option_group(self, node):
        """
        'dt'
        """
    def depart_option_group(self, node):
        """
        '</kbd></dt>\n'
        """
    def visit_option_list(self, node):
        """
        'dl'
        """
    def depart_option_list(self, node):
        """
        '</dl>\n'
        """
    def visit_option_list_item(self, node):
        """
        'organization'
        """
    def depart_organization(self, node):
        """
         Do not omit <p> tags
         --------------------

         The HTML4CSS1 writer does this to "produce
         visually compact lists (less vertical whitespace)". This writer
         relies on CSS rules for"visual compactness".

         * In XHTML 1.1, e.g. a <blockquote> element may not contain
           character data, so you cannot drop the <p> tags.
         * Keeping simple paragraphs in the field_body enables a CSS
           rule to start the field-body on a new line if the label is too long
         * it makes the code simpler.

         TODO: omit paragraph tags in simple table cells?


        """
    def visit_paragraph(self, node):
        """
        'p'
        """
    def depart_paragraph(self, node):
        """
        '</p>'
        """
    def visit_problematic(self, node):
        """
        'refid'
        """
    def depart_problematic(self, node):
        """
        '</span>'
        """
    def visit_raw(self, node):
        """
        'html'
        """
    def visit_reference(self, node):
        """
        'class'
        """
    def depart_reference(self, node):
        """
        '</a>'
        """
    def visit_revision(self, node):
        """
        'revision'
        """
    def depart_revision(self, node):
        """
        'tr'
        """
    def depart_row(self, node):
        """
        '</tr>\n'
        """
    def visit_rubric(self, node):
        """
        'p'
        """
    def depart_rubric(self, node):
        """
        '</p>\n'
        """
    def visit_section(self, node):
        """
        'div'
        """
    def depart_section(self, node):
        """
        '</div>\n'
        """
    def visit_sidebar(self, node):
        """
        'div'
        """
    def depart_sidebar(self, node):
        """
        '</div>\n'
        """
    def visit_status(self, node):
        """
        'status'
        """
    def depart_status(self, node):
        """
        'strong'
        """
    def depart_strong(self, node):
        """
        '</strong>'
        """
    def visit_subscript(self, node):
        """
        'sub'
        """
    def depart_subscript(self, node):
        """
        '</sub>'
        """
    def visit_substitution_definition(self, node):
        """
        Internal only.
        """
    def visit_substitution_reference(self, node):
        """
         h1–h6 elements must not be used to markup subheadings, subtitles,
         alternative titles and taglines unless intended to be the heading for a
         new section or subsection.
         -- http://www.w3.org/TR/html/sections.html#headings-and-sections

        """
    def visit_subtitle(self, node):
        """
        'sidebar-subtitle'
        """
    def depart_subtitle(self, node):
        """
        '</p>\n'
        """
    def visit_superscript(self, node):
        """
        'sup'
        """
    def depart_superscript(self, node):
        """
        '</sup>'
        """
    def visit_system_message(self, node):
        """
        'div'
        """
    def depart_system_message(self, node):
        """
        '</div>\n'
        """
    def visit_table(self, node):
        """
        u' \t\n'
        """
    def depart_table(self, node):
        """
        '</table>\n'
        """
    def visit_target(self, node):
        """
        'refuri'
        """
    def depart_target(self, node):
        """
         no hard-coded vertical alignment in table body

        """
    def visit_tbody(self, node):
        """
        'tbody'
        """
    def depart_tbody(self, node):
        """
        '</tbody>\n'
        """
    def visit_term(self, node):
        """
        'dt'
        """
    def depart_term(self, node):
        """

                Leave the end tag to `self.visit_definition()`, in case there's a
                classifier.
        
        """
    def visit_tgroup(self, node):
        """
        'thead'
        """
    def depart_thead(self, node):
        """
        '</thead>\n'
        """
    def visit_title(self, node):
        """
        Only 6 section levels are supported by HTML.
        """
    def depart_title(self, node):
        """
        'cite'
        """
    def depart_title_reference(self, node):
        """
        '</cite>'
        """
    def visit_topic(self, node):
        """
        'div'
        """
    def depart_topic(self, node):
        """
        '</div>\n'
        """
    def visit_transition(self, node):
        """
        'hr'
        """
    def depart_transition(self, node):
        """
        'version'
        """
    def depart_version(self, node):
        """
        'visiting unimplemented node type: %s'

        """
def SimpleListChecker(nodes.GenericNodeVisitor):
    """

        Raise `nodes.NodeFound` if non-simple list item is encountered.

        Here "simple" means a list item containing nothing other than a single
        paragraph, a simple list, or a paragraph followed by a simple list.

        This version also checks for simple field lists and docinfo.
    
    """
    def default_visit(self, node):
        """
         ignore nodes that are never complex (can contain only inline nodes)

        """
