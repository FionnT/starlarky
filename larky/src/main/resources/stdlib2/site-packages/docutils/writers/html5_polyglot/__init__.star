def Writer(writers._html_base.Writer):
    """
    'html'
    """
    def __init__(self):
        """

            This writer generates `polyglot markup`: HTML5 that is also valid XML.

            Safe subclassing: when overriding, treat ``visit_*`` and ``depart_*``
            methods as a unit to prevent breaks due to internal changes. See the
            docstring of docutils.writers._html_base.HTMLTranslator for details
            and examples.
    
        """
    def visit_acronym(self, node):
        """
         @@@ implementation incomplete ("title" attribute)

        """
    def depart_acronym(self, node):
        """
        '</abbr>'
        """
    def visit_authors(self, node):
        """
        'authors'
        """
    def depart_authors(self, node):
        """
         no standard meta tag name in HTML5, use dcterms.rights
         see https://wiki.whatwg.org/wiki/MetaExtensions

        """
    def visit_copyright(self, node):
        """
        'copyright'
        """
    def depart_copyright(self, node):
        """
         no standard meta tag name in HTML5, use dcterms.date

        """
    def visit_date(self, node):
        """
        'date'
        """
    def depart_date(self, node):
        """
         TODO: use HTML5 <footer> element?
         def visit_footer(self, node):
         def depart_footer(self, node):

         TODO: use the new HTML5 element <aside>? (Also for footnote text)
         def visit_footnote(self, node):
         def depart_footnote(self, node):

         Meta tags: 'lang' attribute replaced by 'xml:lang' in XHTML 1.1
         HTML5/polyglot recommends using both

        """
    def visit_meta(self, node):
        """
        'lang'
        """
    def depart_meta(self, node):
        """
         no standard meta tag name in HTML5

        """
    def visit_organization(self, node):
        """
        'organization'
        """
    def depart_organization(self, node):
        """
         TODO: use the new HTML5 element <section>?
         def visit_section(self, node):
         def depart_section(self, node):

        """
