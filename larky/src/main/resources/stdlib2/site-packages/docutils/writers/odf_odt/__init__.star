        def PIL(object):
    """
     dummy wrapper
    """
def _ElementInterfaceWrapper(_ElementInterface):
    """

     Constants and globals


    """
def Element(tag, attrib=None, nsmap=None, nsdict=CNSD):
    """
    unicode
    """
def escape_cdata(text):
    """
    &
    """
def split_words(line):
    """
     We need whitespace at the end of the string for our regexpr.

    """
def TableStyle(object):
    """
    '0.0007in solid #000000'
    """
def ListLevel(object):
    """
    'application/vnd.oasis.opendocument.text'
    """
    def __init__(self):
        """
        'whole'
        """
    def assemble_my_parts(self):
        """
        Assemble the `self.parts` dictionary.  Extend in subclasses.
        
        """
    def update_stylesheet(self, stylesheet_root, language_code, region_code):
        """
        Update xml style sheet element with language and region/country.
        """
2021-03-02 20:48:57,877 : INFO : tokenize_signature : --> do i ever get here?
    def write_zip_str(
            self, zfile, name, bytes, compress_type=zipfile.ZIP_DEFLATED):
        """
         Add some standard UNIX file access permissions (-rw-r--r--).

        """
    def store_embedded_files(self, zfile):
        """
        Can't open file %s.
        """
    def get_settings(self):
        """

                modeled after get_stylesheet
        
        """
    def get_stylesheet(self):
        """
        Get the stylesheet from the visitor.
                Ask the visitor to setup the page.
        
        """
    def copy_from_stylesheet(self, outzipfile):
        """
        Copy images, settings, etc from the stylesheet doc into target doc.
        
        """
    def assemble_parts(self):
        """
        'manifest:manifest'
        """
    def create_meta(self):
        """
        'office:document-meta'
        """
def ODFTranslator(nodes.GenericNodeVisitor):
    """
    'attribution'
    """
    def __init__(self, document):
        """
        nodes.SparseNodeVisitor.__init__(self, document)

        """
    def get_str_stylesheet(self):
        """
        Retrieve the stylesheet from either a .xml file or from
                a .odt (zip) file.  Return the content as a string.
        
        """
    def extract_table_styles(self, styles_str):
        """
        '{%s}automatic-styles'
        """
    def get_property(self, stylenode):
        """
        '{%s}%s'
        """
    def add_doc_title(self):
        """
        'text:p'
        """
    def find_first_text_p(self, el):
        """
        Search the generated doc and return the first <text:p> element.
        
        """
    def attach_page_style(self, el):
        """
        Attach the default page style.

                Create an automatic-style that refers to the current style
                of this element and that refers to the default page style.
        
        """
    def rststyle(self, name, parameters=()):
        """

                Returns the style name to use for the given style.

                If `parameters` is given `name` must contain a matching number of
                ``%`` and is used as a format expression with `parameters` as
                the value.
        
        """
    def generate_content_element(self, root):
        """
        'office:text'
        """
    def setup_page(self):
        """
        paperconf -s 2> /dev/null
        """
        def walk(el):
            """
            {%s}page-layout-properties
            """
    def add_header_footer(self, root_el):
        """
        '{%s}automatic-styles'
        """
2021-03-02 20:48:57,890 : INFO : tokenize_signature : --> do i ever get here?
    def create_custom_headfoot(
            self, parent, text, style_name, automatic_styles):
        """
        'text:p'
        """
    def make_field_element(self, parent, text, style_name, automatic_styles):
        """
        'p'
        """
    def split_field_specifiers_iter(self, text):
        """
        'backrefs'
        """
    def append_child(self, tag, attrib=None, parent=None):
        """
        'text:p'
        """
    def append_pending_ids(self, el):
        """
        'text:reference-mark'
        """
    def set_current_element(self, el):
        """
        '%s:'
        """
    def generate_labeled_line(self, node, label):
        """
        '%s:'
        """
    def encode(self, text):
        """
        '\n'
        """
    def dispatch_visit(self, node):
        """
        Override to catch basic attributes which many nodes have.
        """
    def handle_basic_atts(self, node):
        """
        'ids'
        """
    def default_visit(self, node):
        """
        'missing visit_%s'
        """
    def default_departure(self, node):
        """
        'missing depart_%s'
        """
    def visit_Text(self, node):
        """
         Skip nodes whose text has been processed in parent nodes.

        """
    def depart_Text(self, node):
        """

         Pre-defined fields



        """
    def visit_address(self, node):
        """
        'address'
        """
    def depart_address(self, node):
        """
        'blockindent'
        """
    def depart_author(self, node):
        """
        '%s:'
        """
    def depart_authors(self, node):
        """
        'contact'
        """
    def depart_contact(self, node):
        """
        'copyright'
        """
    def depart_copyright(self, node):
        """
        'date'
        """
    def depart_date(self, node):
        """
        'organization'
        """
    def depart_organization(self, node):
        """
        'status'
        """
    def depart_status(self, node):
        """
        'revision'
        """
    def depart_revision(self, node):
        """
        'version'
        """
    def depart_version(self, node):
        """
        self.set_to_parent()

        """
    def visit_attribution(self, node):
        """
        'attribution'
        """
    def depart_attribution(self, node):
        """
        'epigraph'
        """
    def depart_block_quote(self, node):
        """
        ''
        """
    def visit_bullet_list(self, node):
        """
        'classes'
        """
    def depart_bullet_list(self, node):
        """
        'textbody'
        """
    def depart_comment(self, node):
        """
         The compound directive currently receives no special treatment.

        """
    def depart_compound(self, node):
        """
        'classes'
        """
    def depart_container(self, node):
        """
        'classes'
        """
    def visit_decoration(self, node):
        """
        'max definition list nesting level exceeded'
        """
    def depart_definition_list(self, node):
        """
        'deflist-term-%d'
        """
    def depart_term(self, node):
        """
        'deflist-def-%d'
        """
    def depart_definition(self, node):
        """
        'text:span'
        """
    def depart_classifier(self, node):
        """
        'text:section'
        """
    def depart_docinfo(self, node):
        """
        'text:span'
        """
    def depart_emphasis(self, node):
        """
        'blockquote'
        """
    def depart_enumerated_list(self, node):
        """
         If we are in a "bumped" list level, then wrap this
           list in an outer lists in order to increase the
           indentation level.

        """
    def depart_list_item(self, node):
        """
        'textbody'
        """
    def depart_field_name(self, node):
        """
        'blockindent'
        """
    def depart_field_body(self, node):
        """
        'text:note-body'
        """
    def depart_footnote(self, node):
        """
        '*'
        """
    def visit_footnote_reference(self, node):
        """
        'ids'
        """
    def depart_footnote_reference(self, node):
        """
        'ids'
        """
    def depart_citation(self, node):
        """
        'refid'
        """
    def depart_citation_reference(self, node):
        """
        ']'
        """
    def visit_label(self, node):
        """
        'textbody'
        """
    def depart_label(self, node):
        """
        'text:reference-mark-end'
        """
    def visit_generated(self, node):
        """
         Capture the image file.

        """
    def depart_image(self, node):
        """
         For conversion factors, see:
         http://www.unitconversion.org/unit_converter/typography-ex.html

        """
    def convert_to_cm(self, size):
        """
        Convert various units to centimeters.

                Note that a call to this method should be wrapped in:
                    try: except ValueError:
        
        """
    def get_image_scale(self, node):
        """
        'scale'
        """
    def get_image_scaled_width_height(self, node, source):
        """
        Return the image size in centimeters adjusted by image attrs.
        """
    def get_page_width(self):
        """
        Return the document's page width in centimeters.
        """
    def generate_figure(self, node, source, destination, current_element):
        """
        'caption'
        """
2021-03-02 20:48:57,925 : INFO : tokenize_signature : --> do i ever get here?
    def generate_image(self, node, source, destination, current_element,
                       frame_attrs=None):
        """
        'rstframestyle%d'
        """
    def is_in_table(self, node):
        """
        'legend'
        """
    def depart_legend(self, node):
        """
        'lineblock%d'
        """
    def depart_line(self, node):
        """
        'text:span'
        """
    def depart_literal(self, node):
        """
        'classes'
        """
    def depart_inline(self, node):
        """
        'latex'
        """
    def fill_line(self, line):
        """
        '<text:s text:c="%d"/>'
        """
    def fill_func2(self, matchobj):
        """
        ' <text:s text:c="%d"/>'
        """
    def visit_literal_block(self, node):
        """
        '<text:p text:style-name="%s">%%s</text:p>'
        """
    def depart_literal_block(self, node):
        """
         placeholder for math (see docs/dev/todo.txt)

        """
    def depart_math(self, node):
        """
        '"math" directive not supported'
        """
    def depart_math_block(self, node):
        """
        'name'
        """
    def depart_meta(self, node):
        """
        'tableoption'
        """
    def depart_option_list(self, node):
        """
        'table:table-row'
        """
    def depart_option_list_item(self, node):
        """
        'table:table-cell'
        """
    def depart_option_group(self, node):
        """
        'text:p'
        """
    def depart_option(self, node):
        """
        'table:table-cell'
        """
    def depart_description(self, node):
        """
        'header'
        """
    def depart_paragraph(self, node):
        """
        'format'
        """
    def depart_raw(self, node):
        """
        text = node.astext()

        """
    def depart_reference(self, node):
        """
        'refuri'
        """
    def visit_rubric(self, node):
        """
        'rubric'
        """
    def depart_rubric(self, node):
        """
        'text:section'
        """
    def depart_section(self, node):
        """
        'text:span'
        """
    def depart_strong(self, node):
        """
        'classes'
        """
    def visit_table(self, node):
        """
        '%s%%d'
        """
    def depart_table(self, node):
        """
        'style:width'
        """
    def visit_tgroup(self, node):
        """
        'A'
        """
    def depart_tgroup(self, node):
        """
        '%s%%d.%%s'
        """
    def depart_colspec(self, node):
        """
        'table:table-header-rows'
        """
    def depart_thead(self, node):
        """
        'A'
        """
    def depart_row(self, node):
        """
        '%s%%d.%%c%%d'
        """
    def depart_entry(self, node):
        """

         I don't know how to implement targets in ODF.
         How do we create a target in oowriter?  A cross-reference?

        """
    def depart_target(self, node):
        """
        'title'
        """
    def depart_title(self, node):
        """
        'subtitle'
        """
    def depart_subtitle(self, node):
        """
        'text:span'
        """
    def depart_title_reference(self, node):
        """
        'text:table-of-content-entry-template'
        """
    def find_title_label(self, node, class_type, label_key):
        """
        ''
        """
    def visit_topic(self, node):
        """
        'classes'
        """
    def depart_topic(self, node):
        """
        'classes'
        """
    def update_toc_page_numbers(self, el):
        """
        'text:index-body'
        """
    def update_toc_add_numbers(self, collection):
        """
        'text:p'
        """
    def visit_transition(self, node):
        """
        'horizontalline'
        """
    def depart_transition(self, node):
        """

         Admonitions


        """
    def visit_warning(self, node):
        """
        'warning'
        """
    def depart_warning(self, node):
        """
        'attention'
        """
    def visit_caution(self, node):
        """
        'caution'
        """
    def visit_danger(self, node):
        """
        'danger'
        """
    def visit_error(self, node):
        """
        'error'
        """
    def visit_hint(self, node):
        """
        'hint'
        """
    def visit_important(self, node):
        """
        'important'
        """
    def visit_note(self, node):
        """
        'note'
        """
    def visit_tip(self, node):
        """
        'tip'
        """
    def visit_admonition(self, node):
        """
        'title'
        """
    def generate_admonition(self, node, label, title=None):
        """
        'labels'
        """
    def visit_subscript(self, node):
        """
        'text:span'
        """
    def depart_subscript(self, node):
        """
        'text:span'
        """
    def depart_superscript(self, node):
        """
         Use an own reader to modify transformations done.

        """
def Reader(standalone.Reader):
