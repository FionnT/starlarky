def Writer(writers._html_base.Writer):
    """
    'html'
    """
    def __init__(self):
        """

            The html4css1 writer has been optimized to produce visually compact
            lists (less vertical whitespace).  HTML's mixed content models
            allow list items to contain "<li><p>body elements</p></li>" or
            "<li>just text</li>" or even "<li>text<p>and body
            elements</p>combined</li>", each with different effects.  It would
            be best to stick with strict body elements in list items, but they
            affect vertical spacing in older browsers (although they really
            shouldn't).
            The html5_polyglot writer solves this using CSS2.

            Here is an outline of the optimization:

            - Check for and omit <p> tags in "simple" lists: list items
              contain either a single paragraph, a nested simple list, or a
              paragraph followed by a nested simple list.  This means that
              this list can be compact:

                  - Item 1.
                  - Item 2.

              But this list cannot be compact:

                  - Item 1.

                    This second paragraph forces space between list items.

                  - Item 2.

            - In non-list contexts, omit <p> tags on a paragraph if that
              paragraph is the only child of its parent (footnotes & citations
              are allowed a label first).

            - Regardless of the above, in definitions, table cells, field bodies,
              option descriptions, and list items, mark the first child with
              'class="first"' and the last child with 'class="last"'.  The stylesheet
              sets the margins (top & bottom respectively) to 0 for these elements.

            The ``no_compact_lists`` setting (``--no-compact-lists`` command-line
            option) disables list whitespace optimization.
    
        """
    def set_first_last(self, node):
        """
        'first'
        """
    def visit_address(self, node):
        """
        'address'
        """
    def visit_admonition(self, node):
        """
        'classes'
        """
    def visit_author(self, node):
        """
        '\n<br />'
        """
    def depart_author(self, node):
        """
        'authors'
        """
    def depart_authors(self, node):
        """
         use "width" argument insted of "style: 'width'":

        """
    def visit_colspec(self, node):
        """
         "stubs" list is an attribute of the tgroup element:

        """
    def depart_colspec(self, node):
        """
         write out <colgroup> when all colspecs are processed

        """
    def is_compactable(self, node):
        """
        'compact'
        """
    def visit_citation(self, node):
        """
        'table'
        """
    def depart_citation(self, node):
        """
        '</td></tr>\n'
        '</tbody>\n</table>\n'
        """
    def visit_classifier(self, node):
        """
        ' <span class="classifier-delimiter">:</span> '
        """
    def visit_definition(self, node):
        """
        '</dt>\n'
        """
    def visit_definition_list(self, node):
        """
        'dl'
        """
    def visit_description(self, node):
        """
        'td'
        """
    def depart_description(self, node):
        """
        '</td>'
        """
    def visit_docinfo(self, node):
        """
        'table'
        """
    def depart_docinfo(self, node):
        """
        '</tbody>\n</table>\n'
        """
    def visit_docinfo_item(self, node, name, meta=True):
        """
        '<meta name="%s" content="%s" />\n'
        """
    def depart_docinfo_item(self):
        """
        '</td></tr>\n'
        """
    def visit_doctest_block(self, node):
        """
        'pre'
        """
    def visit_entry(self, node):
        """
         empty cell
        """
    def visit_enumerated_list(self, node):
        """

                The 'start' attribute does not conform to HTML 4.01's strict.dtd, but
                cannot be emulated in CSS1 (HTML 5 reincludes it).
        
        """
    def depart_enumerated_list(self, node):
        """
        '</ol>\n'
        """
    def visit_field(self, node):
        """
        'tr'
        """
    def depart_field(self, node):
        """
        '</tr>\n'
        """
    def visit_field_body(self, node):
        """
        'td'
        """
    def depart_field_body(self, node):
        """
        '</td>\n'
        """
    def visit_field_list(self, node):
        """
        'compact'
        """
    def depart_field_list(self, node):
        """
        '</tbody>\n</table>\n'
        """
    def visit_field_name(self, node):
        """
        'class'
        """
    def depart_field_name(self, node):
        """
        ':</th>'
        """
    def visit_footnote(self, node):
        """
        'table'
        """
    def footnote_backrefs(self, node):
        """
        'backrefs'
        """
    def depart_footnote(self, node):
        """
        '</td></tr>\n'
        '</tbody>\n</table>\n'
        """
    def visit_footnote_reference(self, node):
        """
        '#'
        """
    def depart_footnote_reference(self, node):
        """
        '</a>'
        """
    def visit_generated(self, node):
        """
         Image types to place in an <object> element
         SVG not supported by IE up to version 8
         (html4css1 strives for IE6 compatibility)

        """
    def visit_label(self, node):
        """
        'td'
        """
    def depart_label(self, node):
        """
        ']%s</td><td>%s'
        """
    def visit_list_item(self, node):
        """
        'li'
        """
    def visit_literal(self, node):
        """
         special case: "code" role

        """
    def visit_literal_block(self, node):
        """
        'pre'
        """
    def depart_literal_block(self, node):
        """
        '\n</pre>\n'
        """
    def visit_option_group(self, node):
        """
        'colspan'
        """
    def depart_option_group(self, node):
        """
        '</kbd></td>\n'
        """
    def visit_option_list(self, node):
        """
        'table'
        """
    def depart_option_list(self, node):
        """
        '</tbody>\n</table>\n'
        """
    def visit_option_list_item(self, node):
        """
        'tr'
        """
    def depart_option_list_item(self, node):
        """
        '</tr>\n'
        """
    def should_be_compact_paragraph(self, node):
        """

                Determine if the <p> tags around paragraph ``node`` can be omitted.
        
        """
    def visit_paragraph(self, node):
        """
        ''
        """
    def depart_paragraph(self, node):
        """
         ersatz for first/last pseudo-classes

        """
    def visit_sidebar(self, node):
        """
        'div'
        """
    def visit_subscript(self, node):
        """
        'span'
        """
    def depart_subscript(self, node):
        """
        '</span>'
        """
    def visit_subtitle(self, node):
        """
        'p'
        """
    def depart_subtitle(self, node):
        """
         <sup> not allowed in <pre> in HTML 4

        """
    def visit_superscript(self, node):
        """
        'span'
        """
    def depart_superscript(self, node):
        """
        '</span>'
        """
    def visit_system_message(self, node):
        """
        'div'
        """
    def visit_table(self, node):
        """
        'border'
        """
    def depart_table(self, node):
        """
        '</table>\n'
        """
    def visit_tbody(self, node):
        """
        'tbody'
        """
    def depart_tbody(self, node):
        """
        '</tbody>\n'
        """
    def visit_thead(self, node):
        """
        'thead'
        """
    def depart_thead(self, node):
        """
        '</thead>\n'
        """
def SimpleListChecker(writers._html_base.SimpleListChecker):
    """

        Raise `nodes.NodeFound` if non-simple list item is encountered.

        Here "simple" means a list item containing nothing other than a single
        paragraph, a simple list, or a paragraph followed by a simple list.
    
    """
    def visit_list_item(self, node):
        """
         def visit_bullet_list(self, node):
             pass

         def visit_enumerated_list(self, node):
             pass


        """
    def visit_paragraph(self, node):
