def InputError(IOError): pass
    """
    Test, whether the encoding of `stream` matches `encoding`.

        Returns

        :None:  if `encoding` or `stream.encoding` are not a valid encoding
                argument (e.g. ``None``) or `stream.encoding is missing.
        :True:  if the encoding argument resolves to the same value as `encoding`,
        :False: if the encodings differ.
    
    """
def Input(TransformSpec):
    """

        Abstract base class for input wrappers.
    
    """
2021-03-02 20:48:59,106 : INFO : tokenize_signature : --> do i ever get here?
    def __init__(self, source=None, source_path=None, encoding=None,
                 error_handler='strict'):
        """
        Text encoding for the input source.
        """
    def __repr__(self):
        """
        '%s: source=%r, source_path=%r'
        """
    def read(self):
        """

                Decode a string, `data`, heuristically.
                Raise UnicodeError if unsuccessful.

                The client application should call ``locale.setlocale`` at the
                beginning of processing::

                    locale.setlocale(locale.LC_ALL, '')
        
        """
    def determine_encoding_from_data(self, data):
        """

                Try to determine the encoding of `data` by looking *in* `data`.
                Check for a byte order mark (BOM) or an encoding declaration.
        
        """
def Output(TransformSpec):
    """

        Abstract base class for output wrappers.
    
    """
2021-03-02 20:48:59,110 : INFO : tokenize_signature : --> do i ever get here?
    def __init__(self, destination=None, destination_path=None,
                 encoding=None, error_handler='strict'):
        """
        Text encoding for the output destination.
        """
    def __repr__(self):
        """
        '%s: destination=%r, destination_path=%r'

        """
    def write(self, data):
        """
        `data` is a Unicode string, to be encoded by `self.encode`.
        """
    def encode(self, data):
        """
        'unicode'
        """
def FileInput(Input):
    """

        Input for single, simple file-like objects.
    
    """
2021-03-02 20:48:59,111 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:48:59,111 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:48:59,111 : INFO : tokenize_signature : --> do i ever get here?
    def __init__(self, source=None, source_path=None,
                 encoding=None, error_handler='strict',
                 autoclose=True,
                 mode='r' if sys.version_info >= (3, 0) else 'rU'):
        """

                :Parameters:
                    - `source`: either a file-like object (which is read directly), or
                      `None` (which implies `sys.stdin` if no `source_path` given).
                    - `source_path`: a path to a file, which is opened and then read.
                    - `encoding`: the expected text encoding of the input file.
                    - `error_handler`: the encoding error handler to use.
                    - `autoclose`: close automatically after read (except when
                      `sys.stdin` is the source).
                    - `mode`: how the file is to be opened (see standard function
                      `open`). The default 'rU' provides universal newline support
                      for text files with Python 2.x.
        
        """
    def read(self):
        """

                Read and decode a single file and return the data (Unicode string).
        
        """
    def readlines(self):
        """

                Return lines of a single file as list of Unicode strings.
        
        """
    def close(self):
        """

            Output for single, simple file-like objects.
    
        """
2021-03-02 20:48:59,113 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:48:59,113 : INFO : tokenize_signature : --> do i ever get here?
    def __init__(self, destination=None, destination_path=None,
                 encoding=None, error_handler='strict', autoclose=True,
                 handle_io_errors=None, mode=None):
        """

                :Parameters:
                    - `destination`: either a file-like object (which is written
                      directly) or `None` (which implies `sys.stdout` if no
                      `destination_path` given).
                    - `destination_path`: a path to a file, which is opened and then
                      written.
                    - `encoding`: the text encoding of the output file.
                    - `error_handler`: the encoding error handler to use.
                    - `autoclose`: close automatically after write (except when
                      `sys.stdout` or `sys.stderr` is the destination).
                    - `handle_io_errors`: ignored, deprecated, will be removed.
                    - `mode`: how the file is to be opened (see standard function
                      `open`). The default is 'w', providing universal newline
                      support for text files.
        
        """
    def open(self):
        """
         Specify encoding in Python 3.

        """
    def write(self, data):
        """
        Encode `data`, write it to a single file, and return it.

                With Python 3 or binary output mode, `data` is returned unchanged,
                except when specified encoding and output encoding differ.
        
        """
    def close(self):
        """

            A version of docutils.io.FileOutput which writes to a binary file.
    
        """
def StringInput(Input):
    """

        Direct string input.
    
    """
    def read(self):
        """
        Decode and return the source string.
        """
def StringOutput(Output):
    """

        Direct string output.
    
    """
    def write(self, data):
        """
        Encode `data`, store it in `self.destination`, and return it.
        """
def NullInput(Input):
    """

        Degenerate input: read nothing.
    
    """
    def read(self):
        """
        Return a null string.
        """
def NullOutput(Output):
    """

        Degenerate output: write nothing.
    
    """
    def write(self, data):
        """
        Do nothing ([don't even] send data to the bit bucket).
        """
def DocTreeInput(Input):
    """

        Adapter for document tree input.

        The document tree must be passed in the ``source`` parameter.
    
    """
    def read(self):
        """
        Return the document tree.
        """
