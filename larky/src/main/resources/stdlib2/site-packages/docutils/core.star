def Publisher(object):
    """

        A facade encapsulating the high-level logic of a Docutils system.
    
    """
2021-03-02 20:48:59,648 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:48:59,649 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:48:59,649 : INFO : tokenize_signature : --> do i ever get here?
    def __init__(self, reader=None, parser=None, writer=None,
                 source=None, source_class=io.FileInput,
                 destination=None, destination_class=io.FileOutput,
                 settings=None):
        """

                Initial setup.  If any of `reader`, `parser`, or `writer` are not
                specified, the corresponding ``set_...`` method should be called with
                a component name (`set_reader` sets the parser as well).
        
        """
    def set_reader(self, reader_name, parser, parser_name):
        """
        Set `self.reader` by name.
        """
    def set_writer(self, writer_name):
        """
        Set `self.writer` by name.
        """
    def set_components(self, reader_name, parser_name, writer_name):
        """
        'application'
        """
2021-03-02 20:48:59,651 : INFO : tokenize_signature : --> do i ever get here?
    def get_settings(self, usage=None, description=None,
                     settings_spec=None, config_section=None, **defaults):
        """

                Set and return default settings (overrides in `defaults` dict).

                Set components first (`self.set_reader` & `self.set_writer`).
                Explicitly setting `self.settings` disables command line option
                processing from `self.publish()`.
        
        """
2021-03-02 20:48:59,652 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:48:59,652 : INFO : tokenize_signature : --> do i ever get here?
    def process_programmatic_settings(self, settings_spec,
                                      settings_overrides,
                                      config_section):
        """
         Propagate exceptions by default when used programmatically:

        """
2021-03-02 20:48:59,652 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:48:59,652 : INFO : tokenize_signature : --> do i ever get here?
    def process_command_line(self, argv=None, usage=None, description=None,
                             settings_spec=None, config_section=None,
                             **defaults):
        """

                Pass an empty list to `argv` to avoid reading `sys.argv` (the
                default).

                Set components first (`self.set_reader` & `self.set_writer`).
        
        """
    def set_io(self, source_path=None, destination_path=None):
        """
         Raise IOError instead of system exit with `tracback == True`
         TODO: change io.FileInput's default behaviour and remove this hack

        """
    def set_destination(self, destination=None, destination_path=None):
        """

                Process command line options and arguments (if `self.settings` not
                already set), run `self.reader` and then `self.writer`.  Return
                `self.writer`'s output.
        
        """
    def debugging_dumps(self):
        """
        '\n::: Runtime settings:'
        """
    def report_Exception(self, error):
        """
        u'Unable to open source file for reading:\n'
        u'  %s\n'
        """
    def report_SystemMessage(self, error):
        """
        'Exiting due to level-%s (%s) system message.'
        """
    def report_UnicodeError(self, error):
        """
        '%s\n'
        '\n'
        'The specified output encoding (%s) cannot\n'
        'handle all of the output.\n'
        'Try setting "--output-encoding-error-handler" to\n'
        '\n'
        '* "xmlcharrefreplace" (for HTML & XML output);\n'
        '  the output will contain "%s" and should be usable.\n'
        '* "backslashreplace" (for other output formats);\n'
        '  look for "%s" in the output.\n'
        '* "replace"; look for "?" in the output.\n'
        '\n'
        '"--output-encoding-error-handler" is currently set to "%s".\n'
        '\n'
        'Exiting due to error.  Use "--traceback" to diagnose.\n'
        'If the advice above doesn\'t eliminate the error,\n'
        'please report it to <docutils-users@lists.sf.net>.\n'
        'Include "--traceback" output, Docutils version (%s),\n'
        'Python version (%s), your OS type & version, and the\n'
        'command line used.\n'

        """
2021-03-02 20:48:59,658 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:48:59,658 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:48:59,658 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:48:59,658 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:48:59,658 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:48:59,658 : INFO : tokenize_signature : --> do i ever get here?
def publish_cmdline(reader=None, reader_name='standalone',
                    parser=None, parser_name='restructuredtext',
                    writer=None, writer_name='pseudoxml',
                    settings=None, settings_spec=None,
                    settings_overrides=None, config_section=None,
                    enable_exit_status=True, argv=None,
                    usage=default_usage, description=default_description):
    """

        Set up & run a `Publisher` for command-line-based file I/O (input and
        output file paths taken automatically from the command line).  Return the
        encoded string output also.

        Parameters: see `publish_programmatically` for the remainder.

        - `argv`: Command-line argument list to use instead of ``sys.argv[1:]``.
        - `usage`: Usage string, output if there's a problem parsing the command
          line.
        - `description`: Program description, output for the "--help" option
          (along with command-line option descriptions).
    
    """
2021-03-02 20:48:59,659 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:48:59,659 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:48:59,659 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:48:59,659 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:48:59,659 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:48:59,659 : INFO : tokenize_signature : --> do i ever get here?
def publish_file(source=None, source_path=None,
                 destination=None, destination_path=None,
                 reader=None, reader_name='standalone',
                 parser=None, parser_name='restructuredtext',
                 writer=None, writer_name='pseudoxml',
                 settings=None, settings_spec=None, settings_overrides=None,
                 config_section=None, enable_exit_status=False):
    """

        Set up & run a `Publisher` for programmatic use with file-like I/O.
        Return the encoded string output also.

        Parameters: see `publish_programmatically`.
    
    """
2021-03-02 20:48:59,660 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:48:59,660 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:48:59,660 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:48:59,660 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:48:59,660 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:48:59,660 : INFO : tokenize_signature : --> do i ever get here?
def publish_string(source, source_path=None, destination_path=None,
                   reader=None, reader_name='standalone',
                   parser=None, parser_name='restructuredtext',
                   writer=None, writer_name='pseudoxml',
                   settings=None, settings_spec=None,
                   settings_overrides=None, config_section=None,
                   enable_exit_status=False):
    """

        Set up & run a `Publisher` for programmatic use with string I/O.  Return
        the encoded string or Unicode string output.

        For encoded string output, be sure to set the 'output_encoding' setting to
        the desired encoding.  Set it to 'unicode' for unencoded Unicode string
        output.  Here's one way::

            publish_string(..., settings_overrides={'output_encoding': 'unicode'})

        Similarly for Unicode string input (`source`)::

            publish_string(..., settings_overrides={'input_encoding': 'unicode'})

        Parameters: see `publish_programmatically`.
    
    """
2021-03-02 20:48:59,661 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:48:59,661 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:48:59,661 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:48:59,661 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:48:59,661 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:48:59,661 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:48:59,661 : INFO : tokenize_signature : --> do i ever get here?
def publish_parts(source, source_path=None, source_class=io.StringInput,
                  destination_path=None,
                  reader=None, reader_name='standalone',
                  parser=None, parser_name='restructuredtext',
                  writer=None, writer_name='pseudoxml',
                  settings=None, settings_spec=None,
                  settings_overrides=None, config_section=None,
                  enable_exit_status=False):
    """

        Set up & run a `Publisher`, and return a dictionary of document parts.
        Dictionary keys are the names of parts, and values are Unicode strings;
        encoding is up to the client.  For programmatic use with string I/O.

        For encoded string input, be sure to set the 'input_encoding' setting to
        the desired encoding.  Set it to 'unicode' for unencoded Unicode string
        input.  Here's how::

            publish_parts(..., settings_overrides={'input_encoding': 'unicode'})

        Parameters: see `publish_programmatically`.
    
    """
2021-03-02 20:48:59,662 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:48:59,662 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:48:59,662 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:48:59,663 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:48:59,663 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:48:59,663 : INFO : tokenize_signature : --> do i ever get here?
def publish_doctree(source, source_path=None,
                    source_class=io.StringInput,
                    reader=None, reader_name='standalone',
                    parser=None, parser_name='restructuredtext',
                    settings=None, settings_spec=None,
                    settings_overrides=None, config_section=None,
                    enable_exit_status=False):
    """

        Set up & run a `Publisher` for programmatic use with string I/O.
        Return the document tree.

        For encoded string input, be sure to set the 'input_encoding' setting to
        the desired encoding.  Set it to 'unicode' for unencoded Unicode string
        input.  Here's one way::

            publish_doctree(..., settings_overrides={'input_encoding': 'unicode'})

        Parameters: see `publish_programmatically`.
    
    """
2021-03-02 20:48:59,663 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:48:59,663 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:48:59,663 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:48:59,663 : INFO : tokenize_signature : --> do i ever get here?
def publish_from_doctree(document, destination_path=None,
                         writer=None, writer_name='pseudoxml',
                         settings=None, settings_spec=None,
                         settings_overrides=None, config_section=None,
                         enable_exit_status=False):
    """

        Set up & run a `Publisher` to render from an existing document
        tree data structure, for programmatic use with string I/O.  Return
        the encoded string output.

        Note that document.settings is overridden; if you want to use the settings
        of the original `document`, pass settings=document.settings.

        Also, new document.transformer and document.reporter objects are
        generated.

        For encoded string output, be sure to set the 'output_encoding' setting to
        the desired encoding.  Set it to 'unicode' for unencoded Unicode string
        output.  Here's one way::

            publish_from_doctree(
                ..., settings_overrides={'output_encoding': 'unicode'})

        Parameters: `document` is a `docutils.nodes.document` object, an existing
        document tree.

        Other parameters: see `publish_programmatically`.
    
    """
2021-03-02 20:48:59,664 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:48:59,664 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:48:59,664 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:48:59,664 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:48:59,664 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:48:59,664 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:48:59,664 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:48:59,665 : INFO : tokenize_signature : --> do i ever get here?
def publish_cmdline_to_binary(reader=None, reader_name='standalone',
                    parser=None, parser_name='restructuredtext',
                    writer=None, writer_name='pseudoxml',
                    settings=None, settings_spec=None,
                    settings_overrides=None, config_section=None,
                    enable_exit_status=True, argv=None,
                    usage=default_usage, description=default_description,
                    destination=None, destination_class=io.BinaryFileOutput
                    ):
    """

        Set up & run a `Publisher` for command-line-based file I/O (input and
        output file paths taken automatically from the command line).  Return the
        encoded string output also.

        This is just like publish_cmdline, except that it uses
        io.BinaryFileOutput instead of io.FileOutput.

        Parameters: see `publish_programmatically` for the remainder.

        - `argv`: Command-line argument list to use instead of ``sys.argv[1:]``.
        - `usage`: Usage string, output if there's a problem parsing the command
          line.
        - `description`: Program description, output for the "--help" option
          (along with command-line option descriptions).
    
    """
2021-03-02 20:48:59,665 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:48:59,665 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:48:59,665 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:48:59,665 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:48:59,665 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:48:59,666 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:48:59,666 : INFO : tokenize_signature : --> do i ever get here?
def publish_programmatically(source_class, source, source_path,
                             destination_class, destination, destination_path,
                             reader, reader_name,
                             parser, parser_name,
                             writer, writer_name,
                             settings, settings_spec,
                             settings_overrides, config_section,
                             enable_exit_status):
    """

        Set up & run a `Publisher` for custom programmatic use.  Return the
        encoded string output and the Publisher object.

        Applications should not need to call this function directly.  If it does
        seem to be necessary to call this function directly, please write to the
        Docutils-develop mailing list
        <http://docutils.sf.net/docs/user/mailing-lists.html#docutils-develop>.

        Parameters:

        * `source_class` **required**: The class for dynamically created source
          objects.  Typically `io.FileInput` or `io.StringInput`.

        * `source`: Type depends on `source_class`:

          - If `source_class` is `io.FileInput`: Either a file-like object
            (must have 'read' and 'close' methods), or ``None``
            (`source_path` is opened).  If neither `source` nor
            `source_path` are supplied, `sys.stdin` is used.

          - If `source_class` is `io.StringInput` **required**: The input
            string, either an encoded 8-bit string (set the
            'input_encoding' setting to the correct encoding) or a Unicode
            string (set the 'input_encoding' setting to 'unicode').

        * `source_path`: Type depends on `source_class`:

          - `io.FileInput`: Path to the input file, opened if no `source`
            supplied.

          - `io.StringInput`: Optional.  Path to the file or object that produced
            `source`.  Only used for diagnostic output.

        * `destination_class` **required**: The class for dynamically created
          destination objects.  Typically `io.FileOutput` or `io.StringOutput`.

        * `destination`: Type depends on `destination_class`:

          - `io.FileOutput`: Either a file-like object (must have 'write' and
            'close' methods), or ``None`` (`destination_path` is opened).  If
            neither `destination` nor `destination_path` are supplied,
            `sys.stdout` is used.

          - `io.StringOutput`: Not used; pass ``None``.

        * `destination_path`: Type depends on `destination_class`:

          - `io.FileOutput`: Path to the output file.  Opened if no `destination`
            supplied.

          - `io.StringOutput`: Path to the file or object which will receive the
            output; optional.  Used for determining relative paths (stylesheets,
            source links, etc.).

        * `reader`: A `docutils.readers.Reader` object.

        * `reader_name`: Name or alias of the Reader class to be instantiated if
          no `reader` supplied.

        * `parser`: A `docutils.parsers.Parser` object.

        * `parser_name`: Name or alias of the Parser class to be instantiated if
          no `parser` supplied.

        * `writer`: A `docutils.writers.Writer` object.

        * `writer_name`: Name or alias of the Writer class to be instantiated if
          no `writer` supplied.

        * `settings`: A runtime settings (`docutils.frontend.Values`) object, for
          dotted-attribute access to runtime settings.  It's the end result of the
          `SettingsSpec`, config file, and option processing.  If `settings` is
          passed, it's assumed to be complete and no further setting/config/option
          processing is done.

        * `settings_spec`: A `docutils.SettingsSpec` subclass or object.  Provides
          extra application-specific settings definitions independently of
          components.  In other words, the application becomes a component, and
          its settings data is processed along with that of the other components.
          Used only if no `settings` specified.

        * `settings_overrides`: A dictionary containing application-specific
          settings defaults that override the defaults of other components.
          Used only if no `settings` specified.

        * `config_section`: A string, the name of the configuration file section
          for this application.  Overrides the ``config_section`` attribute
          defined by `settings_spec`.  Used only if no `settings` specified.

        * `enable_exit_status`: Boolean; enable exit status at end of processing?
    
    """
