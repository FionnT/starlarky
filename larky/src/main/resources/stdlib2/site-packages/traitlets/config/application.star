def catch_config_error(method):
    """
    Method decorator for catching invalid config (Trait/ArgumentErrors) during init.

        On a TraitError (generally caused by bad config), this will print the trait's
        message, and exit the app.

        For use on init methods, to prevent invoking excepthook on invalid input.
    
    """
    def inner(app, *args, **kwargs):
        """
        Bad config encountered during initialization: %s
        """
def ApplicationError(Exception):
    """
    Formatter with additional `highlevel` record

        This field is empty if log level is less than highlevel_limit,
        otherwise it is formatted with self.highlevel_format.

        Useful for adding 'WARNING' to warning messages,
        without adding 'INFO' to info, etc.
    
    """
    def format(self, record):
        """

        """
def Application(SingletonConfigurable):
    """
    A singleton application with full configuration support.
    """
    def _classes_inc_parents(self, classes=None):
        """
        Iterate through configurable classes, including configurable parents

                :param classes:
                    The list of classes to iterate; if not set, uses :attr:`classes`.

                Children should always be after parents, and each class should only be
                yielded once.
        
        """
    def _log_level_changed(self, change):
        """
        Adjust the log level when log_level is set.
        """
    def _log_format_changed(self, change):
        """
        Change the log formatter when log_format is set.
        """
    def _log_default(self):
        """
        Start logging for this application.

                The default is to log to stderr using a StreamHandler, if no default
                handler already exists.  The log level starts at logging.WARN, but this
                can be adjusted by setting the ``log_level`` attribute.
        
        """
    def _show_config_json_changed(self, change):
        """
        'show_config'
        """
    def _show_config_changed(self, change):
        """
         Ensure my class is in self.classes, so my attributes appear in command line
         options and config files.

        """
    def _config_changed(self, change):
        """
        'Config changed: %r'
        """
    def initialize(self, argv=None):
        """
        Do the basic steps to configure me.

                Override in subclasses.
        
        """
    def start(self):
        """
        Start the app mainloop.

                Override in subclasses.
        
        """
    def start_show_config(self):
        """
        start function used when show_config is True
        """
    def print_alias_help(self):
        """
        Print the alias parts of the help.
        """
    def emit_alias_help(self):
        """
        Yield the lines for alias part of the help.
        """
    def print_flag_help(self):
        """
        Print the flag part of the help.
        """
    def emit_flag_help(self):
        """
        Yield the lines for the flag part of the help.
        """
    def print_options(self):
        """
        Print the options part of the help.
        """
    def emit_options_help(self):
        """
        Yield the lines for the options part of the help.
        """
    def print_subcommands(self):
        """
        Print the subcommand part of the help.
        """
    def emit_subcommands_help(self):
        """
        Yield the lines for the subcommand part of the help.
        """
    def emit_help_epilogue(self, classes):
        """
        Yield the very bottom lines of the help message.

                If classes=False (the default), print `--help-all` msg.
        
        """
    def print_help(self, classes=False):
        """
        Print the help for each Configurable class in self.classes.

                If classes=False (the default), only flags and aliases are printed.
        
        """
    def emit_help(self, classes=False):
        """
        Yield the help-lines for each Configurable class in self.classes.

                If classes=False (the default), only flags and aliases are printed.
        
        """
    def document_config_options(self):
        """
        Generate rST format documentation for the config options this application

                Returns a multiline string.
        
        """
    def print_description(self):
        """
        Print the application description.
        """
    def emit_description(self):
        """
        Yield lines with the application description.
        """
    def print_examples(self):
        """
        Print usage and examples (see `emit_examples()`). 
        """
    def emit_examples(self):
        """
        Yield lines with the usage and examples.

                This usage string goes at the end of the command line help string
                and should contain examples of the application's usage.
        
        """
    def print_version(self):
        """
        Print the version string.
        """
    def initialize_subcommand(self, subc, argv=None):
        """
        Initialize a subcommand with argv.
        """
    def flatten_flags(self):
        """
        Flatten flags and aliases for loaders, so cl-args override as expected.

                This prevents issues such as an alias pointing to InteractiveShell,
                but a config file setting the same trait in TerminalInteraciveShell
                getting inappropriate priority over the command-line arg.
                Also, loaders expect ``(key: longname)`` and not ````key: (longname, help)`` items.

                Only aliases with exactly one descendent in the class list
                will be promoted.

        
        """
    def _create_loader(self, argv, aliases, flags, classes):
        """
        Parse the command line arguments.
        """
    def _load_config_files(cls, basefilename, path=None, log=None, raise_config_file_errors=False):
        """
        Load config files (py,json) by filename and path.

                yield each config object in turn.
        
        """
    def loaded_config_files(self):
        """
        Currently loaded configuration files
        """
    def load_config_file(self, filename, path=None):
        """
        Load config files by filename and path.
        """
    def _classes_with_config_traits(self, classes=None):
        """

                Yields only classes with configurable traits, and their subclasses.

                :param classes:
                    The list of classes to iterate; if not set, uses :attr:`classes`.

                Thus, produced sample config-file will contain all classes
                on which a trait-value may be overridden:

                - either on the class owning the trait,
                - or on its subclasses, even if those subclasses do not define
                  any traits themselves.
        
        """
        def is_any_parent_included(cls):
            """
             Mark "empty" classes for inclusion if their parents own-traits,
              and loop until no more classes gets marked.


            """
    def generate_config_file(self, classes=None):
        """
        generate default config file from Configurables
        """
    def exit(self, exit_status=0):
        """
        Exiting application: %s
        """
    def launch_instance(cls, argv=None, **kwargs):
        """
        Launch a global instance of this Application

                If a global instance already exists, this reinitializes and starts it
        
        """
def boolean_flag(name, configurable, set_help='', unset_help=''):
    """
    Helper for building basic --trait, --no-trait flags.

        Parameters
        ----------
        name : str
            The name of the flag.
        configurable : str
            The 'Class.trait' string of the trait to be set/unset with the flag
        set_help : unicode
            help string for --name flag
        unset_help : unicode
            help string for --no-name flag

        Returns
        -------
        cfg : dict
            A dict with two keys: 'name', and 'no-name', for setting and unsetting
            the trait, respectively.
    
    """
def get_config():
    """
    Get the config object for the global Application instance, if there is one

        otherwise return an empty config object
    
    """
