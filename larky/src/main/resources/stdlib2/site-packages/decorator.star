    def get_init(cls):
        """
        'FullArgSpec'
        """
    def getfullargspec(f):
        """
        A quick and dirty replacement for getfullargspec for Python 2.X
        """
    def get_init(cls):
        """
         let's assume there are no coroutine functions in old Python

        """
    def iscoroutinefunction(f):
        """
         assume no generator function in old Python versions

        """
    def isgeneratorfunction(caller):
        """
        r'\s*def\s*([_\w][_\w\d]*)\s*\('
        """
def FunctionMaker(object):
    """

        An object with the ability to create functions with a given signature.
        It has attributes name, doc, module, signature, defaults, dict and
        methods update and make.
    
    """
2021-03-02 20:49:44,672 : INFO : tokenize_signature : --> do i ever get here?
    def __init__(self, func=None, name=None, signature=None,
                 defaults=None, doc=None, module=None, funcdict=None):
        """
         func can be a class or a callable, but not an instance method

        """
    def update(self, func, **kw):
        """
        Update the signature of func with the data in self
        """
    def make(self, src_templ, evaldict=None, addsource=False, **attrs):
        """
        Make a new function from a given template and update the signature
        """
2021-03-02 20:49:44,676 : INFO : tokenize_signature : --> do i ever get here?
    def create(cls, obj, body, evaldict, defaults=None,
               doc=None, module=None, addsource=True, **attrs):
        """

                Create a function from the strings name, signature and body.
                evaldict is the evaluation dictionary. If addsource is true an
                attribute __source__ is added to the result. The attributes attrs
                are added, if any.
        
        """
def decorate(func, caller, extras=()):
    """

        decorate(func, caller) decorates a function using a caller.
        If the caller is a generator function, the resulting function
        will be a generator function.
    
    """
def decorator(caller, _func=None):
    """
    decorator(caller) converts a caller function into a decorator
    """
def ContextManager(_GeneratorContextManager):
    """
    Context manager decorator
    """
    def __init__(self, g, *a, **k):
        """
         (self, gen, *a, **k) Python 3.4
        """
    def __init__(self, g, *a, **k):
        """
         Enable Pylint config: contextmanager-decorators=decorator.contextmanager

        """
def append(a, vancestors):
    """

        Append ``a`` to the list of the virtual ancestors, unless it is already
        included.
    
    """
def dispatch_on(*dispatch_args):
    """

        Factory of decorators turning a function into a generic function
        dispatching on the given arguments.
    
    """
    def check(arguments, wrong=operator.ne, msg=''):
        """
        Make sure one passes the expected number of arguments
        """
    def gen_func_dec(func):
        """
        Decorator turning a function into a generic function
        """
        def vancestors(*types):
            """

                        Get a list of sets of virtual ancestors for the given types
            
            """
        def ancestors(*types):
            """

                        Get a list of virtual MROs, one for each type
            
            """
        def register(*types):
            """

                        Decorator to register an implementation for the given types
            
            """
            def dec(f):
                """
                ' in '
                """
        def dispatch_info(*types):
            """

                        An utility to introspect the dispatch algorithm
            
            """
        def _dispatch(dispatch_args, *args, **kw):
            """
             fast path
            """
