2021-03-02 20:52:15,555 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:52:15,556 : INFO : tokenize_signature : --> do i ever get here?
def substitute_text(
    text: str, replacements: Dict[str, str], diagnostics: List[Diagnostic]
) -> str:
    """
    Apply Giza-style replacements to a string. Report a diagnostic for unknown
           substitutions, and insert an empty string.
    """
    def substitute(match: Match[str]) -> str:
        """
        Handle a substitution match.
        """
2021-03-02 20:52:15,557 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:52:15,557 : INFO : tokenize_signature : --> do i ever get here?
def substitute(
    obj: _T, replacements: Dict[str, str], diagnostics: List[Diagnostic]
) -> _T:
    """
    Apply Giza-style replacements to a Giza node.
    """
def Node:
    """
    A base Giza node.
    """
    def line(self) -> int:
        """
        _start_line
        """
def Inherit(Node):
    """
    A Giza node mixin specifies a parent node.
    """
def Inheritable(Node):
    """
    A mixin for inheritable Giza nodes.
    """
    def get_ref(self) -> Optional[str]:
        """
        Try to find this node's ref name, looking at the inheritance stanza if needed.
        """
    def parent_information(self) -> Optional[Inherit]:
        """
        If this node has a parent identifier, return it.
        """
2021-03-02 20:52:15,558 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:52:15,559 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:52:15,559 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:52:15,559 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:52:15,559 : INFO : tokenize_signature : --> do i ever get here?
def inherit(
    project_config: ProjectConfig,
    obj: _I,
    parent: Optional[_I],
    diagnostics: List[Diagnostic],
) -> _I:
    """
    Implement inheritance on a pair of Giza nodes: parent's fields overwrite any
           unset fields in obj, and substitution variables are replaced if obj is not
           a base node. If parent is None, then only substitution occurs.
    """
def GizaFile(Generic[_I]):
    """
    A GizaFile represents a single Giza YAML file.
    """
def GizaCategory(Generic[_I]):
    """
    A GizaCategory stores metadata about a "category" of Giza YAML files. For
           example, "steps", or "apiargs". Each GizaCategory contains all types necessary
           to transform a given path into Pages.
    """
2021-03-02 20:52:15,560 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:52:15,561 : INFO : tokenize_signature : --> do i ever get here?
    def parse(
        self, path: Path, text: Optional[str] = None
    ) -> Tuple[Sequence[_I], str, List[Diagnostic]]:
        """
        Abstract method to parse Giza nodes out of YAML source text.
        """
2021-03-02 20:52:15,561 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:52:15,561 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:52:15,561 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:52:15,561 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:52:15,561 : INFO : tokenize_signature : --> do i ever get here?
    def to_pages(
        self,
        source_path: Path,
        page_factory: Callable[[str], Tuple[Page, EmbeddedRstParser]],
        data: Sequence[_I],
    ) -> List[Page]:
        """
        Abstract method to generate pages from a given set of Giza nodes.
        """
    def add(self, path: Path, text: str, elements: Sequence[_I]) -> None:
        """
        Add a file with one or more Giza nodes.
        """
2021-03-02 20:52:15,562 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:52:15,562 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:52:15,562 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:52:15,562 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:52:15,562 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:52:15,562 : INFO : tokenize_signature : --> do i ever get here?
    def reify(
        self,
        obj: _I,
        diagnostics: List[Diagnostic],
        refs_set: Optional[Set[str]],
        cycle_set: Set[Tuple[str, str]],
    ) -> _I:
        """
        Resolve inheritance and substitution in a single Giza node.
        """
2021-03-02 20:52:15,563 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:52:15,564 : INFO : tokenize_signature : --> do i ever get here?
    def reify_file_id(
        self, file_id: str, diagnostics: Dict[PurePath, List[Diagnostic]]
    ) -> GizaFile[_I]:
        """
        Resolve inheritance and substitution in a Giza source file.
        """
2021-03-02 20:52:15,564 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:52:15,564 : INFO : tokenize_signature : --> do i ever get here?
    def reify_all_files(
        self, diagnostics: Dict[PurePath, List[Diagnostic]]
    ) -> Iterator[Tuple[str, GizaFile[_I]]]:
        """
        Resolve inheritance and substitution in all source files within this category.
        """
    def __len__(self) -> int:
        """
        Return the number of nodes in this category.
        """
    def __delitem__(self, file_id: str) -> None:
        """
        Remove a file and any nodes it may have created.
        """
def OldHeading(Node):
    """
    Giza at one point supported manually setting the rSt character to use
           for a heading. This node specification defines that format..
    """
def HeadingMixin(Node):
    """
    A mixin for Giza node specifications which define a heading.
    """
    def render_heading(self, rst_parser: EmbeddedRstParser) -> Sequence[n.Node]:
        """
        Return a list of heading node representing this heading node's properties.
        """
