def FileId(PurePosixPath):
    """
    An unambiguous file path relative to the local project's root.
    """
    def collapse_dots(self) -> "FileId":
        """
        ..
        """
    def without_known_suffix(self) -> str:
        """
        Returns the fileid without any of its known file extensions (txt, rst, yaml)
        """
def Node:
    """
    span
    """
    def serialize(self) -> SerializedNode:
        """
        Serialize this AST node into a form that can be passed to json.dumps().
        """
    def get_text(self) -> str:
        """
        Return pure textual content from a given AST node. Most nodes will return an empty string.
        """
    def start(self) -> Tuple[int]:
        """
        Perform optional validations on this node.
        """
def InlineNode(Node):
    """
    lang
    """
def Parent(Node, Generic[_N]):
    """
    children
    """
    def get_child_of_type(self, ty: Type[_T]) -> Iterator[_T]:
        """
        Return the first immediate child node with a given type, or None.
        """
    def get_text(self) -> str:
        """

        """
    def verify(self) -> None:
        """
        f"{child.type} is not an inline node
        """
def Comment(Parent[Node]):
    """
    comment
    """
def Label(Parent[Node]):
    """
    label
    """
def Section(Parent[Node]):
    """
    section
    """
def Paragraph(Parent[Node]):
    """
    paragraph
    """
def Footnote(Parent[Node]):
    """
    id
    """
def FootnoteReference(InlineParent):
    """
    id
    """
def SubstitutionDefinition(Parent[InlineNode]):
    """
    name
    """
def SubstitutionReference(InlineParent):
    """
    name
    """
def Root(Parent[Node]):
    """
    fileid
    """
def Heading(Parent[InlineNode]):
    """
    id
    """
def DefinitionListItem(Parent[Node]):
    """
    term
    """
    def verify(self) -> None:
        """
        definitionList
        """
def ListNodeItem(Parent[Node]):
    """
    listItem
    """
def ListNode(Parent[ListNodeItem]):
    """
    enumtype
    """
def Line(Parent[InlineNode]):
    """
    line
    """
def LineBlock(Parent[Line]):
    """
    line_block
    """
def Directive(Parent[Node]):
    """
    domain
    """
    def verify(self) -> None:
        """
        title
        """
def TocTreeDirective(Directive):
    """
    entries
    """
def DirectiveArgument(Parent[InlineNode]):
    """
    directive_argument
    """
def Target(Parent[Node]):
    """
    domain
    """
def TargetIdentifier(InlineParent):
    """
    ids
    """
def InlineTarget(InlineParent, Target):
    """
    inline_target
    """
def Reference(InlineParent):
    """
    refuri
    """
def Role(InlineParent):
    """
    domain
    """
def RefRole(Role):
    """
    fileid
    """
    def verify(self) -> None:
        """
        f"Missing required target field: {self.serialize()}
        """
def Text(InlineNode):
    """
    value
    """
    def get_text(self) -> str:
        """
        literal
        """
def Emphasis(InlineParent):
    """
    emphasis
    """
def Field(Parent[Node]):
    """
    name
    """
def FieldList(Parent[Field]):
    """
    field_list
    """
def Strong(InlineParent):
    """
    strong
    """
def Transition(Node):
    """
    transition
    """
def Table(Parent[Node]):
    """
    table
    """
