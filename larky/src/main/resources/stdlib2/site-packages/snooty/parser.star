def _DefinitionListTerm(n.InlineParent):
    """
    A vate node used for internal book-keeping that should not be exported to the AST.
    """
    def verify(self) -> None:
        """
        f"{self.__class__.__name__} is private and should have been removed from AST
        """
def PendingFigure(PendingTask):
    """
    Add an image's checksum.
    """
    def __init__(self, node: n.Directive, asset: StaticAsset) -> None:
        """
        Compute this figure's checksum and store it in our node.
        """
def JSONVisitor:
    """
    Node visitor that creates a JSON-serializable structure.
    """
2021-03-02 20:52:15,918 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:52:15,919 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:52:15,919 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:52:15,919 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:52:15,919 : INFO : tokenize_signature : --> do i ever get here?
    def __init__(
        self,
        project_config: ProjectConfig,
        docpath: PurePath,
        document: docutils.nodes.document,
    ) -> None:
        """
         Convert list of mixed strings and tuples into a key: value map

        """
    def dispatch_departure(self, node: docutils.nodes.Node) -> None:
        """
        Definition list terms must be children of definition list items
        """
    def handle_tabset(self, node: n.Directive) -> None:
        """
        tabset
        """
2021-03-02 20:52:15,932 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:52:15,932 : INFO : tokenize_signature : --> do i ever get here?
    def handle_directive(
        self, node: docutils.nodes.Node, line: int
    ) -> Optional[n.Node]:
        """
        name
        """
                def create_page() -> Tuple[Page, EmbeddedRstParser]:
                    """
                     Create dummy page in order to use EmbeddedRstParser

                    """
            def _locate_text(text: str) -> int:
                """

                                Searches the literally-included file ('lines') for the specified text. If no such text is found,
                                add an InvalidLiteralInclude diagnostic.
                
                """
    def validate_doc_role(self, node: docutils.nodes.Node) -> None:
        """
        Validate target for doc role
        """
2021-03-02 20:52:15,939 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:52:15,940 : INFO : tokenize_signature : --> do i ever get here?
    def validate_list_table(
        self, node: docutils.nodes.Node, expected_num_columns: int
    ) -> None:
        """
        Validate list-table structure
        """
    def add_static_asset(self, raw_path: str, upload: bool) -> StaticAsset:
        """
        JSONVisitor
        """
def InlineJSONVisitor(JSONVisitor):
    """
    A JSONVisitor subclass which does not emit block nodes.
    """
    def dispatch_visit(self, node: docutils.nodes.Node) -> None:
        """
        project_config
        """
    def parse_block(self, rst: str, lineno: int) -> MutableSequence[n.Node]:
        """
         Crudely make docutils line numbers match

        """
    def parse_inline(self, rst: str, lineno: int) -> MutableSequence[n.InlineNode]:
        """
         Crudely make docutils line numbers match

        """
def get_giza_category(path: PurePath) -> str:
    """
    Infer the Giza category of a YAML file.
    """
def ProjectBackend(Protocol):
    """
    A database of FileId->Page mappings that ensures the postprocessing pipeline
           is run correctly. Raw parsed pages are added, flush() is called, then postprocessed
           pages can be accessed.
    """
    def __init__(self, postprocessor_factory: Callable[[], Postprocessor]) -> None:
        """
        Set a raw parsed page.
        """
    def __getitem__(self, key: FileId) -> Page:
        """
        If the postprocessor has been run since modifications were made, fetch a postprocessed page.
        """
    def __contains__(self, key: FileId) -> bool:
        """
        Check if a given page exists in the parsed set.
        """
    def values(self) -> Iterable[Page]:
        """
        Iterate over postprocessed pages.
        """
    def items(self) -> Iterable[Tuple[FileId, Page]]:
        """
        Iterate over the postprocessed (FileId, Page) set.
        """
2021-03-02 20:52:15,945 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:52:15,945 : INFO : tokenize_signature : --> do i ever get here?
    def flush(
        self,
    ) -> Tuple[Dict[str, SerializableType], Dict[FileId, List[Diagnostic]]]:
        """
        Run the postprocessor if and only if any pages have changed, and return postprocessing results.
        """
def _Project:
    """
    Internal representation of a Snooty project with no data locking.
    """
2021-03-02 20:52:15,945 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:52:15,945 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:52:15,946 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:52:15,946 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:52:15,946 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:52:15,946 : INFO : tokenize_signature : --> do i ever get here?
    def __init__(
        self,
        root: Path,
        backend: ProjectBackend,
        filesystem_watcher: util.FileWatcher,
        build_identifiers: BuildIdentifierSet,
    ) -> None:
        """
        steps
        """
2021-03-02 20:52:15,948 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:52:15,948 : INFO : tokenize_signature : --> do i ever get here?
    def get_parsed_branches(
        self,
    ) -> Tuple[Optional[PublishedBranches], List[Diagnostic]]:
        """
        published-branches.yaml
        """
    def get_full_path(self, fileid: FileId) -> Path:
        """
        Update page file (.txt) with current text and return a line
        """
    def get_page_ast(self, path: Path) -> n.Node:
        """
        Update page file (.txt) with current text and return fully populated page AST
        """
    def get_project_name(self) -> str:
        """
        .yaml
        """
                def create_page(filename: str) -> Tuple[Page, EmbeddedRstParser]:
                    """
                    Unknown file type: 
                    """
    def delete(self, path: PurePath) -> None:
        """
        file
        """
2021-03-02 20:52:15,951 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:52:15,952 : INFO : tokenize_signature : --> do i ever get here?
    def build(
        self, max_workers: Optional[int] = None, postprocess: bool = True
    ) -> None:
        """
        parse rst
        """
                def create_page(filename: str) -> Tuple[Page, EmbeddedRstParser]:
                    """
                    objects.inv
                    """
    def _page_updated(self, page: Page, diagnostics: List[Diagnostic]) -> None:
        """
        Update any state associated with a parsed page.
        """
    def on_asset_event(self, ev: watchdog.events.FileSystemEvent) -> None:
        """
         Revoke any caching that might have been performed on this file

        """
def Project:
    """
    A Snooty project, providing high-level operations on a project such as
           requesting a rebuild, and updating a file based on new contents.

           This class's public methods are thread-safe.
    """
2021-03-02 20:52:15,955 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:52:15,956 : INFO : tokenize_signature : --> do i ever get here?
    def __init__(
        self, root: Path, backend: ProjectBackend, build_identifiers: BuildIdentifierSet
    ) -> None:
        """
         We don't need to obtain a lock because this method only operates on
         _Project.root, which never changes after creation.

        """
    def get_line_content(self, path: Path, position) -> str:
        """
        Return line content of page with updated text
        """
    def get_page_ast(self, path: Path) -> n.Node:
        """
        Return complete AST of page with updated text
        """
    def get_project_name(self) -> str:
        """
        Re-parse a file, optionally using the provided text rather than reading the file.
        """
    def delete(self, path: PurePath) -> None:
        """
        Mark a path as having been deleted.
        """
2021-03-02 20:52:15,957 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:52:15,957 : INFO : tokenize_signature : --> do i ever get here?
    def build(
        self, max_workers: Optional[int] = None, postprocess: bool = True
    ) -> None:
        """
        Build the full project.
        """
    def queryFileNames(self) -> List[Dict]:
        """
        Stop the filesystem monitoring thread associated with this project.
        """
    def _on_asset_event(self, ev: watchdog.events.FileSystemEvent) -> None:
        """
        Project
        """
    def __exit__(self, *args: object) -> None:
