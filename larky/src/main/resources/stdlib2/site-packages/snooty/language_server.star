def debounce:
    """
    debounce_timer
    """
def Position:
    """
    win32
    """
    def pid_exists(pid: int) -> bool:
        """
        LanguageServer
        """
    def on_progress(self, progress: int, total: int, message: str) -> None:
        """
        The Language Server Protocol's DiagnosticSeverity namespace enumeration.
               See: https://microsoft.github.io/language-server-protocol/specification#diagnostic
        """
    def from_diagnostic(cls, level: Diagnostic.Level) -> "DiagnosticSeverity":
        """
        Convert an internal Snooty Diagnostic's level to a DiagnosticSeverity value.
        """
def WorkspaceEntry:
    """
    range
    """
def LanguageServer(pyls_jsonrpc.dispatchers.MethodDispatcher):
    """
    Handle the backend notifying us that diagnostics are available to be pulled.
    """
    def update_file(self, page_path: Path, change: Optional[str] = None) -> None:
        """
        textDocument/publishDiagnostics
        """
    def uri_to_fileid(self, uri: Uri) -> FileId:
        """
        Cannot map uri to fileid before a project is open
        """
    def fileid_to_uri(self, fileid: FileId) -> str:
        """
        Cannot map fileid to uri before a project is open
        """
2021-03-02 20:52:11,781 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:52:11,781 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:52:11,781 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:52:11,781 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:52:11,782 : INFO : tokenize_signature : --> do i ever get here?
    def m_initialize(
        self,
        processId: Optional[int] = None,
        rootUri: Optional[Uri] = None,
        **kwargs: object,
    ) -> SerializableType:
        """
         XXX: Disabling the postprocessor is temporary until we can test
         its usage in the language server more extensively

        """
            def watch_parent_process(pid: int) -> None:
                """
                 exist when the given pid is not alive

                """
    def completions(self, doc_uri, position):
        """

                Given the filename, return the completion items of the page.
        
        """
    def uriToPath(uri: Uri) -> Path:
        """
        {0}{0}{mnt}{0}
        """
    def m_initialized(self, **kwargs: object) -> None:
        """
         Ignore this message to avoid logging a pointless warning

        """
    def m_text_document__completion(self, textDocument=None, position=None, **_kwargs):
        """
        'uri'
        """
2021-03-02 20:52:11,783 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:52:11,784 : INFO : tokenize_signature : --> do i ever get here?
    def m_text_document__resolve(
        self, fileName: str, docPath: str, resolveType: str
    ) -> str:
        """
        Given an artifact's path relative to the project's source directory,
                return a corresponding source file path relative to the project's root.
        """
    def m_text_document__get_page_ast(self, fileName: str) -> SerializableType:
        """

                Given the filename, return the ast of the page that is created from parsing that file.
                If the file is a .rst file, we return an ast that emulates the ast of a .txt
                file containing a single include directive to said .rst file.
        
        """
    def m_text_document__get_project_name(self) -> SerializableType:
        """
        Get the project's name from its ProjectConfig
        """
    def m_text_document__get_page_fileid(self, filePath: str) -> SerializableType:
        """
        Given a path to a file, return its fileid as a string
        """
    def m_text_document__did_open(self, textDocument: SerializableType) -> None:
        """
        LanguageServer
        """
    def __exit__(self, *args: object) -> None:
        """
        Started
        """
