def _Inheritable(Protocol):
    """
    Configuration for a directive that specifies a date
    """
def LinkRoleType:
    """
    Configuration for a role which links to a specific URL template.
    """
def RefRoleType:
    """
    Configuration for a role which links to an optionally namespaced target.
    """
def MissingDict(Dict[str, _V]):
    """
    Meta information about the file as a whole.
    """
def DirectiveOption:
    """
    Declaration of a reStructuredText directive (block content).
    """
    def __post_init__(self) -> None:
        """
        Declaration of a reStructuredText role (inline content).
        """
def RstObject:
    """
    Declaration of a reStructuredText object, defining both a Directive
           as well as a Role that links to that directive.
    """
    def create_directive(self) -> Directive:
        """
        block
        """
    def create_role(self) -> Role:
        """
        The spec root.
        """
    def loads(cls, data: str) -> "Spec":
        """
        Load a spec from a string.
        """
    def strip_prefix_from_name(self, rstobject_id: str, title: str) -> str:
        """
        f"{rstobject.prefix}.
        """
2021-03-02 20:52:11,608 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:52:11,608 : INFO : tokenize_signature : --> do i ever get here?
    def get_validator(
        self, option_spec: Union[DirectiveOption, ArgumentType]
    ) -> Callable[[str], object]:
        """
        Return a validation function for a given argument type. This function will take in a
                   string, and either throw an exception or return an output value.
        """
            def validator(argument: str) -> object:
                """
                 Assertion to quiet mypy's failing type flow analysis

                """
    def _resolve_inheritance(self) -> None:
        """
        Spec entries can inherit from other entries; resolve this.

                   Not all fields are implicitly inherited: only fields with a default value
                   of None or MissingDict are inherited. This means that, for example content_type
                   is inherited, but as of this writing, deprecated is not.
        """
    def _resolve_category(inheritable_index: Dict[str, _T]) -> None:
        """
        Resolve inheritance within a tree of inheritable dataclasses.
        """
        def resolve_value(key: str, inheritable: _T) -> _T:
            """
            Resolve a single inheritable dataclass.
            """
