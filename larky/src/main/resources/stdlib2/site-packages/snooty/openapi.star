def DictLike:
    """
    Our templating engine accesses properties via indexing. This class
           mixin creates a __getitem__ wrapper around getattr.
    """
    def __getitem__(self, key: str) -> object:
        """
        Return the type of a schema definition.
        """
def TagDefinition(DictLike):
    """
    Resources are grouped by logical "tags".
    """
def FieldDescription(DictLike):
    """
    A field in a request body, response, or parameter.
    """
2021-03-02 20:52:12,518 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:52:12,519 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:52:12,519 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:52:12,519 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:52:12,519 : INFO : tokenize_signature : --> do i ever get here?
    def load(
        cls,
        data: Dict[str, Any],
        name: Optional[str] = None,
        required: Optional[bool] = None,
    ) -> "FieldDescription":
        """
         Merge the schema property, if there is one

        """
def encode_json_pointer(ptr: str) -> str:
    """
    ~
    """
def decode_json_pointer(ptr: str) -> str:
    """
    ~1
    """
def dereference_json_pointer(root: n.SerializableType, ptr: str) -> Dict[str, Any]:
    """
    Given a dictionary or list, return the element referred to by the
           given JSON pointer (RFC-6901).
    """
def schema_as_json(content_schema: Dict[str, n.SerializableType]) -> n.SerializableType:
    """
    Create a JSON document describing the shape of an OpenAPI schema.
    """
def schema_as_fieldlist(content_schema: Dict[str, Any], path: str = "") -> List[Any]:
    """
    Return a list of OpenAPI schema property descriptions.
    """
2021-03-02 20:52:12,523 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:52:12,523 : INFO : tokenize_signature : --> do i ever get here?
def process_parameters(
    endpoint: Dict[str, Any], operation: Dict[str, Any]
) -> Dict[str, str]:
    """
    Integrate an operation's parameters with the endpoint's shared
           set of parameters, and return a dictionary with two keys:
           * path_parameters
           * query_parameters
           * header_parameters
           * cookie_parameters
    """
def OpenAPI:
    """
    data
    """
    def __init__(self, data: Dict[str, Any]) -> None:
        """
        tags
        """
2021-03-02 20:52:12,527 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:52:12,527 : INFO : tokenize_signature : --> do i ever get here?
    def dereference(
        self, val: Dict[str, Any], loop_set: Optional[Set[int]] = None
    ) -> Dict[str, Any]:
        """
        Dereference a $ref JSON pointer.
        """
    def resources(self) -> Generator[Tuple[str, str, Dict[str, Any]], None, None]:
        """
        Enumerate resources listed within this OpenAPI tree.
        """
    def get_security_schemas(self, operation: Dict[str, Any]) -> List[Dict[str, Any]]:
        """
        Return the security schema definitions associated with an
                   operation definition.
        """
    def load(cls, data: TextIO) -> "OpenAPI":
        """
        Load an OpenAPI file stream.
        """
2021-03-02 20:52:12,529 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:52:12,529 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:52:12,529 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:52:12,529 : INFO : tokenize_signature : --> do i ever get here?
    def to_ast(
        self,
        source_path: Path,
        page_factory: Callable[[], Tuple[Page, EmbeddedRstParser]],
    ) -> Tuple[MutableSequence[n.Node], List[Diagnostic]]:
        """
        tags
        """
