2021-03-02 20:52:12,334 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:52:12,334 : INFO : tokenize_signature : --> do i ever get here?
def reroot_path(
    filename: PurePosixPath, docpath: PurePath, project_root: Path
) -> Tuple[FileId, Path]:
    """
    Files within a project may refer to other files. Return a canonical path
           relative to the project root.
    """
def get_files(root: PurePath, extensions: Container[str]) -> Iterator[Path]:
    """
    Recursively iterate over files underneath the given root, yielding
           only filenames with the given extensions.
    """
def get_line(node: docutils.nodes.Node) -> int:
    """
    Return the first line number we can find in node's ancestry.
    """
    def line_of_node(node: docutils.nodes.Node) -> Optional[int]:
        """
        Sometimes you need node['line']. Sometimes you need node.line.
                   Sometimes you want to just run away and herd yaks.
        """
def ast_dive(ast: n.Node) -> Iterator[n.Node]:
    """
    Yield each node in an AST in no particular order.
    """
def add_doc_target_ext(target: str, docpath: PurePath, project_root: Path) -> Path:
    """
    Given the target file of a doc role, add the appropriate extension and return full file path
    """
def FileWatcher:
    """
    A monitor for file changes.
    """
    def AssetChangedHandler(watchdog.events.FileSystemEventHandler):
    """
    A filesystem event handler which flags pages as having changed
            after an included asset has changed.
    """
2021-03-02 20:52:12,337 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:52:12,337 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:52:12,338 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:52:12,338 : INFO : tokenize_signature : --> do i ever get here?
        def __init__(
            self,
            directories: Dict[Path, "FileWatcher.AssetWatch"],
            on_event: Callable[[watchdog.events.FileSystemEvent], None],
        ) -> None:
            """
            Delegate filesystem events.
            """
    def AssetWatch:
    """
    Track files in a directory to watch. This reflects the underlying interface
               exposed by watchdog.
    """
        def __len__(self) -> int:
            """
            Start reporting upon changes to a file.
            """
    def end_watch(self, path: Path) -> None:
        """
        Stop watching a file.
        """
    def start(self) -> None:
        """
        Start a thread watching for file changes.
        """
    def stop(self, join: bool = False) -> None:
        """
        Stop this file watcher.
        """
    def __enter__(self) -> "FileWatcher":
        """

            Check for a valid string option and return it. If no argument is given,
            raise ``ValueError``.
    
        """
def option_bool(argument: Optional[str]) -> bool:
    """

        Check for a valid boolean option return it. If no argument is given,
        treat it as a flag, and return True.
    
    """
def option_flag(argument: Optional[str]) -> bool:
    """

        Variant of the docutils flag handler.
        Check for a valid flag option (no argument) and return ``True``.
        (Directive option conversion function.)

        Raise ``ValueError`` if an argument is found.
    
    """
def split_domain(name: str) -> Tuple[str, str]:
    """
    Split a fully-qualified reStructuredText directive or role name into
        its (domain, name) pair.

        For example, "mongodb:ref" becomes ("mongodb", "ref"), while simply
        "ref" becomes ("", "ref").
    
    """
def fast_deep_copy(v: _T) -> _T:
    """
    Time-efficiently create deep copy of trusted data.
           This implementation currently invokes pickle, so should NOT be called on untrusted objects.
    """
def make_html5_id(orig: str) -> str:
    """
    Turn an ID into a valid HTML5 element ID.
    """
def PerformanceLogger:
    """
    PerformanceLogger
    """
    def __init__(self) -> None:
        """
        f"{name:{title_column_width}} {entry_time:.2f}
        """
    def singleton(cls) -> "PerformanceLogger":
