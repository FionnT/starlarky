def MakeCorrectionMixin:
    """
    Suggest one or more possible corrections to the reStructuredText that this
               diagnostic is about.
    """
def Diagnostic:
    """
    Diagnostic.Level
    """
    def severity(self) -> "Diagnostic.Level":
        """
        Cannot access the severity of an abstract base Diagnostic
        """
    def severity_string(self) -> str:
        """
        Create dict containing diagnostic attributes for neatly reporting diagnostics at program completion
        """
def UnexpectedIndentation(Diagnostic, MakeCorrectionMixin):
    """
    Unexpected indentation
    """
    def did_you_mean(self) -> List[str]:
        """
        .. blockquote::
        """
def InvalidURL(Diagnostic):
    """
    Invalid URL
    """
def ExpectedPathArg(Diagnostic):
    """
    f'"{name}" expected a path argument'
    """
def UnnamedPage(Diagnostic):
    """
    f"Page title not found: {filename}
    """
def ExpectedImageArg(Diagnostic):
    """
    f'"{name}" expected an image argument'
    """
def InvalidField(Diagnostic):
    """
    f"Git merge conflict artifact found in {str(path)} on line {str(start)}
    """
def DocUtilsParseError(Diagnostic):
    """
    f"Error parsing YAML file {str(path)}: {reason}

    """
def InvalidInclude(Diagnostic):
    """
    f"{name} not defined as a source constant
    """
def InvalidTableStructure(Diagnostic):
    """
    '.. option::' must follow '.. program::'
    """
def MissingRef(Diagnostic):
    """
    f"Missing ref; all {name} must define a ref
    """
def MalformedGlossary(Diagnostic):
    """
    Malformed glossary: glossary must contain only a definition list
    """
def FailedToInheritRef(Diagnostic):
    """
    f'Target not found: "{name}:{target}"'
    """
def AmbiguousTarget(Diagnostic):
    """
    f'Ambiguous target: "{name}:{target}". Locations: {", ".join(candidates)}'
    """
def TodoInfo(Diagnostic):
    """
    f"Unmarshalling Error: {reason}
    """
def CannotOpenFile(Diagnostic):
    """
    f"Error opening {str(path)}: {reason}
    """
def CannotRenderOpenAPI(Diagnostic):
    """
    f"Failed to render OpenAPI template for {str(path)}: {reason}
    """
def MissingTocTreeEntry(Diagnostic):
    """
    f"Could not locate toctree entry {entry}
    """
def UnknownTabset(Diagnostic):
    """
    f"""Tabset "{tabset}" is not defined in rstspec.toml
    """
def UnknownTabID(Diagnostic):
    """
    f"""tab id "{tabid}" given in "{tabset}" tabset is unrecognized: {reason}
    """
def TabMustBeDirective(Diagnostic):
    """
    f"Tab sets may only contain tab directives, but found {tab_type}
    """
def IncorrectMonospaceSyntax(Diagnostic, MakeCorrectionMixin):
    """
    Monospace text uses two backticks (``)
    """
    def did_you_mean(self) -> List[str]:
        """
        f"``{self.text}``
        """
def IncorrectLinkSyntax(Diagnostic, MakeCorrectionMixin):
    """
    Malformed external link
    """
    def did_you_mean(self) -> List[str]:
        """
        f"`{self.parts[0]} <{self.parts[1]}>`__
        """
def MissingTab(Diagnostic):
    """
    f"One or more set of tabs on this page was missing the following tab(s): {tabs}
    """
def ExpectedTabs(Diagnostic):
    """
    Expected tabs directive when tabs-selector directive in use
    """
def DuplicateDirective(Diagnostic):
    """
    f"""Directive "{name}" should only appear once per page
    """
def RemovedLiteralBlockSyntax(Diagnostic):
    """
    Literal block syntax is unsupported; use a code-block directive instead
    """
