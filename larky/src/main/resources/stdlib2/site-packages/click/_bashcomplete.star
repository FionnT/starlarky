def get_completion_script(prog_name, complete_var, shell):
    """

    """
def resolve_ctx(cli, prog_name, args):
    """
    Parse into a hierarchy of contexts. Contexts are connected
        through the parent variable.

        :param cli: command definition
        :param prog_name: the program that is running
        :param args: full list of args
        :return: the final context/command parsed
    
    """
def start_of_option(param_str):
    """

        :param param_str: param_str to check
        :return: whether or not this is the start of an option declaration
            (i.e. starts "-" or "--")
    
    """
def is_incomplete_option(all_args, cmd_param):
    """

        :param all_args: the full original list of args supplied
        :param cmd_param: the current command paramter
        :return: whether or not the last option declaration (i.e. starts
            "-" or "--") is incomplete and corresponds to this cmd_param. In
            other words whether this cmd_param option can still accept
            values
    
    """
def is_incomplete_argument(current_params, cmd_param):
    """

        :param current_params: the current params and values for this
            argument as already entered
        :param cmd_param: the current command parameter
        :return: whether or not the last argument is incomplete and
            corresponds to this cmd_param. In other words whether or not the
            this cmd_param argument can still accept values
    
    """
def get_user_autocompletions(ctx, args, incomplete, cmd_param):
    """

        :param ctx: context associated with the parsed command
        :param args: full list of args
        :param incomplete: the incomplete text to autocomplete
        :param cmd_param: command definition
        :return: all the possible user-specified completions for the param
    
    """
def get_visible_commands_starting_with(ctx, starts_with):
    """

        :param ctx: context associated with the parsed command
        :starts_with: string that visible commands must start with.
        :return: all visible (not hidden) commands that start with starts_with.
    
    """
def add_subcommand_completions(ctx, incomplete, completions_out):
    """
     Add subcommand completions.

    """
def get_choices(cli, prog_name, args, incomplete):
    """

        :param cli: command definition
        :param prog_name: the program that is running
        :param args: full list of args
        :param incomplete: the incomplete text to autocomplete
        :return: all the possible completions for the incomplete
    
    """
def do_complete(cli, prog_name, include_descriptions):
    """
    COMP_WORDS
    """
def do_complete_fish(cli, prog_name):
    """
    COMP_WORDS
    """
def bashcomplete(cli, prog_name, complete_var, complete_instr):
    """
    _
    """
