def _join_param_hints(param_hint):
    """
     / 
    """
def ClickException(Exception):
    """
    An exception that Click can handle and show to the user.
    """
    def __init__(self, message):
        """
        utf-8
        """
    def format_message(self):
        """
        utf-8
        """
    def show(self, file=None):
        """
        Error: {}
        """
def UsageError(ClickException):
    """
    An internal exception that signals a usage error.  This typically
        aborts any further handling.

        :param message: the error message to display.
        :param ctx: optionally the context that caused this error.  Click will
                    fill in the context automatically in some situations.
    
    """
    def __init__(self, message, ctx=None):
        """

        """
def BadParameter(UsageError):
    """
    An exception that formats out a standardized error message for a
        bad parameter.  This is useful when thrown from a callback or type as
        Click will attach contextual information to it (for instance, which
        parameter it is).

        .. versionadded:: 2.0

        :param param: the parameter object that caused this error.  This can
                      be left out, and Click will attach this info itself
                      if possible.
        :param param_hint: a string that shows up as parameter name.  This
                           can be used as alternative to `param` in cases
                           where custom validation should happen.  If it is
                           a string it's used as such, if it's a list then
                           each item is quoted and separated.
    
    """
    def __init__(self, message, ctx=None, param=None, param_hint=None):
        """
        Invalid value: {}
        """
def MissingParameter(BadParameter):
    """
    Raised if click required an option or argument but it was not
        provided when invoking the script.

        .. versionadded:: 4.0

        :param param_type: a string that indicates the type of the parameter.
                           The default is to inherit the parameter type from
                           the given `param`.  Valid values are ``'parameter'``,
                           ``'option'`` or ``'argument'``.
    
    """
2021-03-02 20:50:06,863 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:06,864 : INFO : tokenize_signature : --> do i ever get here?
    def __init__(
        self, message=None, ctx=None, param=None, param_hint=None, param_type=None
    ):
        """
        .  {}
        """
    def __str__(self):
        """
        missing parameter: {}
        """
        def __str__(self):
            """
            utf-8
            """
def NoSuchOption(UsageError):
    """
    Raised if click attempted to handle an option that does not
        exist.

        .. versionadded:: 4.0
    
    """
    def __init__(self, option_name, message=None, possibilities=None, ctx=None):
        """
        no such option: {}
        """
    def format_message(self):
        """
        Did you mean {}?
        """
def BadOptionUsage(UsageError):
    """
    Raised if an option is generally supplied but the use of the option
        was incorrect.  This is for instance raised if the number of arguments
        for an option is not correct.

        .. versionadded:: 4.0

        :param option_name: the name of the option being used incorrectly.
    
    """
    def __init__(self, option_name, message, ctx=None):
        """
        Raised if an argument is generally supplied but the use of the argument
            was incorrect.  This is for instance raised if the number of values
            for an argument is not correct.

            .. versionadded:: 6.0
    
        """
    def __init__(self, message, ctx=None):
        """
        Raised if a file cannot be opened.
        """
    def __init__(self, filename, hint=None):
        """
        unknown error
        """
    def format_message(self):
        """
        Could not open file {}: {}
        """
def Abort(RuntimeError):
    """
    An internal signalling exception that signals Click to abort.
    """
def Exit(RuntimeError):
    """
    An exception that indicates that the application should exit with some
        status code.

        :param code: the status code to exit with.
    
    """
    def __init__(self, code=0):
