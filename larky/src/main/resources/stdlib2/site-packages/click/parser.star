def _unpack_args(args, nargs_spec):
    """
    Given an iterable of arguments and an iterable of nargs specifications,
        it returns a tuple with all the unpacked arguments at the first index
        and all remaining arguments as the second.

        The nargs specification is the number of arguments that should be consumed
        or `-1` to indicate that this position should eat up all the remainders.

        Missing items are filled with `None`.
    
    """
    def _fetch(c):
        """
         If we're reversed, we're pulling in the arguments in reverse,
         so we need to turn them around.

        """
def _error_opt_args(nargs, opt):
    """
    {} option requires an argument
    """
def split_opt(opt):
    """

    """
def normalize_opt(opt, ctx):
    """
    Given an argument string this attempts to split it into small parts.
    """
def Option(object):
    """
    Invalid start character for option ({})
    """
    def takes_value(self):
        """
        store
        """
    def process(self, value, state):
        """
        store
        """
def Argument(object):
    """
    argument {} takes {} values
    """
def ParsingState(object):
    """
    The option parser is an internal class that is ultimately used to
        parse options and arguments.  It's modelled after optparse and brings
        a similar but vastly simplified API.  It should generally not be used
        directly as the high level Click classes wrap it for you.

        It's not nearly as extensible as optparse or argparse as it does not
        implement features that are implemented on a higher level (such as
        types or defaults).

        :param ctx: optionally the :class:`~click.Context` where this parser
                    should go with.
    
    """
    def __init__(self, ctx=None):
        """
        : The :class:`~click.Context` for this parser.  This might be
        : `None` for some advanced use cases.

        """
    def add_option(self, opts, dest, action=None, nargs=1, const=None, obj=None):
        """
        Adds a new option named `dest` to the parser.  The destination
                is not inferred (unlike with optparse) and needs to be explicitly
                provided.  Action can be any of ``store``, ``store_const``,
                ``append``, ``appnd_const`` or ``count``.

                The `obj` can be used to identify the option in the order list
                that is returned from the parser.
        
        """
    def add_argument(self, dest, nargs=1, obj=None):
        """
        Adds a positional argument named `dest` to the parser.

                The `obj` can be used to identify the option in the order list
                that is returned from the parser.
        
        """
    def parse_args(self, args):
        """
        Parses positional arguments and returns ``(values, args, order)``
                for the parsed options and arguments as well as the leftover
                arguments if there are any.  The order is a list of objects as they
                appear on the command line.  If arguments appear multiple times they
                will be memorized multiple times as well.
        
        """
    def _process_args_for_args(self, state):
        """
         Double dashes always handled explicitly regardless of what
         prefixes are valid.

        """
    def _match_long_opt(self, opt, explicit_value, state):
        """
         At this point it's safe to modify rargs by injecting the
         explicit value, because no exception is raised in this
         branch.  This means that the inserted value will be fully
         consumed.

        """
    def _match_short_opt(self, arg, state):
        """
         Any characters left in arg?  Pretend they're the
         next arg, and stop consuming characters of arg.

        """
    def _process_opts(self, arg, state):
        """
         Long option handling happens in two parts.  The first part is
         supporting explicitly attached values.  In any case, we will try
         to long match the option first.

        """
