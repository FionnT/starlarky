def _maybe_show_deprecated_notice(cmd):
    """
    name
    """
def fast_exit(code):
    """
    Exit without garbage collection, this speeds up exit by about 10ms for
        things like bash completion.
    
    """
def _bashcomplete(cmd, prog_name, complete_var=None):
    """
    Internal handler for the bash completion support.
    """
def _check_multicommand(base_command, cmd_name, cmd, register=False):
    """
    It is not possible to add multi commands as children to
     another multi command that is in chain mode.

    """
def batch(iterable, batch_size):
    """
    __code__
    """
def augment_usage_errors(ctx, param=None):
    """
    Context manager that attaches extra information to exceptions.
    """
def iter_params_for_processing(invocation_order, declaration_order):
    """
    Given a sequence of parameters in the order as should be considered
        for processing and an iterable of parameters that exist, this returns
        a list in the correct order as they should be processed.
    
    """
    def sort_key(item):
        """
        inf
        """
def Context(object):
    """
    The context is a special internal object that holds state relevant
        for the script execution at every single level.  It's normally invisible
        to commands unless they opt-in to getting access to it.

        The context is useful as it can pass internal objects around and can
        control special execution features such as reading data from
        environment variables.

        A context can be used as context manager in which case it will call
        :meth:`close` on teardown.

        .. versionadded:: 2.0
           Added the `resilient_parsing`, `help_option_names`,
           `token_normalize_func` parameters.

        .. versionadded:: 3.0
           Added the `allow_extra_args` and `allow_interspersed_args`
           parameters.

        .. versionadded:: 4.0
           Added the `color`, `ignore_unknown_options`, and
           `max_content_width` parameters.

        .. versionadded:: 7.1
           Added the `show_default` parameter.

        :param command: the command class for this context.
        :param parent: the parent context.
        :param info_name: the info name for this invocation.  Generally this
                          is the most descriptive name for the script or
                          command.  For the toplevel script it is usually
                          the name of the script, for commands below it it's
                          the name of the script.
        :param obj: an arbitrary object of user data.
        :param auto_envvar_prefix: the prefix to use for automatic environment
                                   variables.  If this is `None` then reading
                                   from environment variables is disabled.  This
                                   does not affect manually set environment
                                   variables which are always read.
        :param default_map: a dictionary (like object) with default values
                            for parameters.
        :param terminal_width: the width of the terminal.  The default is
                               inherit from parent context.  If no context
                               defines the terminal width then auto
                               detection will be applied.
        :param max_content_width: the maximum width for content rendered by
                                  Click (this currently only affects help
                                  pages).  This defaults to 80 characters if
                                  not overridden.  In other words: even if the
                                  terminal is larger than that, Click will not
                                  format things wider than 80 characters by
                                  default.  In addition to that, formatters might
                                  add some safety mapping on the right.
        :param resilient_parsing: if this flag is enabled then Click will
                                  parse without any interactivity or callback
                                  invocation.  Default values will also be
                                  ignored.  This is useful for implementing
                                  things such as completion support.
        :param allow_extra_args: if this is set to `True` then extra arguments
                                 at the end will not raise an error and will be
                                 kept on the context.  The default is to inherit
                                 from the command.
        :param allow_interspersed_args: if this is set to `False` then options
                                        and arguments cannot be mixed.  The
                                        default is to inherit from the command.
        :param ignore_unknown_options: instructs click to ignore options it does
                                       not know and keeps them for later
                                       processing.
        :param help_option_names: optionally a list of strings that define how
                                  the default help parameter is named.  The
                                  default is ``['--help']``.
        :param token_normalize_func: an optional function that is used to
                                     normalize tokens (options, choices,
                                     etc.).  This for instance can be used to
                                     implement case insensitive behavior.
        :param color: controls if the terminal supports ANSI colors or not.  The
                      default is autodetection.  This is only needed if ANSI
                      codes are used in texts that Click prints which is by
                      default not the case.  This for instance would affect
                      help output.
        :param show_default: if True, shows defaults for all options.
                        Even if an option is later created with show_default=False,
                        this command-level setting overrides it.
    
    """
2021-03-02 20:50:05,572 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:05,572 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:05,572 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:05,572 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:05,572 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:05,573 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:05,573 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:05,573 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:05,573 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:05,573 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:05,573 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:05,573 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:05,573 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:05,573 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:05,573 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:05,573 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:05,573 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:05,573 : INFO : tokenize_signature : --> do i ever get here?
    def __init__(
        self,
        command,
        parent=None,
        info_name=None,
        obj=None,
        auto_envvar_prefix=None,
        default_map=None,
        terminal_width=None,
        max_content_width=None,
        resilient_parsing=False,
        allow_extra_args=None,
        allow_interspersed_args=None,
        ignore_unknown_options=None,
        help_option_names=None,
        token_normalize_func=None,
        color=None,
        show_default=None,
    ):
        """
        : the parent context or `None` if none exists.

        """
    def __enter__(self):
        """
        This helper method can be used with the context object to promote
                it to the current thread local (see :func:`get_current_context`).
                The default behavior of this is to invoke the cleanup functions which
                can be disabled by setting `cleanup` to `False`.  The cleanup
                functions are typically used for things such as closing file handles.

                If the cleanup is intended the context object can also be directly
                used as a context manager.

                Example usage::

                    with ctx.scope():
                        assert get_current_context() is ctx

                This is equivalent::

                    with ctx:
                        assert get_current_context() is ctx

                .. versionadded:: 5.0

                :param cleanup: controls if the cleanup functions should be run or
                                not.  The default is to run these functions.  In
                                some situations the context only wants to be
                                temporarily pushed in which case this can be disabled.
                                Nested pushes automatically defer the cleanup.
        
        """
    def meta(self):
        """
        This is a dictionary which is shared with all the contexts
                that are nested.  It exists so that click utilities can store some
                state here if they need to.  It is however the responsibility of
                that code to manage this dictionary well.

                The keys are supposed to be unique dotted strings.  For instance
                module paths are a good choice for it.  What is stored in there is
                irrelevant for the operation of click.  However what is important is
                that code that places data here adheres to the general semantics of
                the system.

                Example usage::

                    LANG_KEY = f'{__name__}.lang'

                    def set_language(value):
                        ctx = get_current_context()
                        ctx.meta[LANG_KEY] = value

                    def get_language():
                        return get_current_context().meta.get(LANG_KEY, 'en_US')

                .. versionadded:: 5.0
        
        """
    def make_formatter(self):
        """
        Creates the formatter for the help and usage output.
        """
    def call_on_close(self, f):
        """
        This decorator remembers a function as callback that should be
                executed when the context tears down.  This is most useful to bind
                resource handling to the script execution.  For instance, file objects
                opened by the :class:`File` type will register their close callbacks
                here.

                :param f: the function to execute on teardown.
        
        """
    def close(self):
        """
        Invokes all close callbacks.
        """
    def command_path(self):
        """
        The computed command path.  This is used for the ``usage``
                information on the help page.  It's automatically created by
                combining the info names of the chain of contexts to the root.
        
        """
    def find_root(self):
        """
        Finds the outermost context.
        """
    def find_object(self, object_type):
        """
        Finds the closest object of a given type.
        """
    def ensure_object(self, object_type):
        """
        Like :meth:`find_object` but sets the innermost object to a
                new instance of `object_type` if it does not exist.
        
        """
    def lookup_default(self, name):
        """
        Looks up the default for a parameter name.  This by default
                looks into the :attr:`default_map` if available.
        
        """
    def fail(self, message):
        """
        Aborts the execution of the program with a specific error
                message.

                :param message: the error message to fail with.
        
        """
    def abort(self):
        """
        Aborts the script.
        """
    def exit(self, code=0):
        """
        Exits the application with a given exit code.
        """
    def get_usage(self):
        """
        Helper method to get formatted usage string for the current
                context and command.
        
        """
    def get_help(self):
        """
        Helper method to get formatted help page for the current
                context and command.
        
        """
    def invoke(*args, **kwargs):  # noqa: B902
        """
         noqa: B902
        """
    def forward(*args, **kwargs):  # noqa: B902
        """
         noqa: B902
        """
def BaseCommand(object):
    """
    The base command implements the minimal API contract of commands.
        Most code will never use this as it does not implement a lot of useful
        functionality but it can act as the direct subclass of alternative
        parsing methods that do not depend on the Click parser.

        For instance, this can be used to bridge Click and other systems like
        argparse or docopt.

        Because base commands do not implement a lot of the API that other
        parts of Click take for granted, they are not supported for all
        operations.  For instance, they cannot be used with the decorators
        usually and they have no built-in callback system.

        .. versionchanged:: 2.0
           Added the `context_settings` parameter.

        :param name: the name of the command to use unless a group overrides it.
        :param context_settings: an optional dictionary with defaults that are
                                 passed to the context object.
    
    """
    def __init__(self, name, context_settings=None):
        """
        : the name the command thinks it has.  Upon registering a command
        : on a :class:`Group` the group will default the command name
        : with this information.  You should instead use the
        : :class:`Context`\'s :attr:`~Context.info_name` attribute.

        """
    def __repr__(self):
        """
        <{} {}>
        """
    def get_usage(self, ctx):
        """
        Base commands cannot get usage
        """
    def get_help(self, ctx):
        """
        Base commands cannot get help
        """
    def make_context(self, info_name, args, parent=None, **extra):
        """
        This function when given an info name and arguments will kick
                off the parsing and create a new :class:`Context`.  It does not
                invoke the actual command callback though.

                :param info_name: the info name for this invokation.  Generally this
                                  is the most descriptive name for the script or
                                  command.  For the toplevel script it's usually
                                  the name of the script, for commands below it it's
                                  the name of the script.
                :param args: the arguments to parse as list of strings.
                :param parent: the parent context if available.
                :param extra: extra keyword arguments forwarded to the context
                              constructor.
        
        """
    def parse_args(self, ctx, args):
        """
        Given a context and a list of arguments this creates the parser
                and parses the arguments, then modifies the context as necessary.
                This is automatically invoked by :meth:`make_context`.
        
        """
    def invoke(self, ctx):
        """
        Given a context, this invokes the command.  The default
                implementation is raising a not implemented error.
        
        """
2021-03-02 20:50:05,580 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:05,580 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:05,580 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:05,580 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:05,580 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:05,580 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:05,580 : INFO : tokenize_signature : --> do i ever get here?
    def main(
        self,
        args=None,
        prog_name=None,
        complete_var=None,
        standalone_mode=True,
        **extra
    ):
        """
        This is the way to invoke a script with all the bells and
                whistles as a command line application.  This will always terminate
                the application after a call.  If this is not wanted, ``SystemExit``
                needs to be caught.

                This method is also available by directly calling the instance of
                a :class:`Command`.

                .. versionadded:: 3.0
                   Added the `standalone_mode` flag to control the standalone mode.

                :param args: the arguments that should be used for parsing.  If not
                             provided, ``sys.argv[1:]`` is used.
                :param prog_name: the program name that should be used.  By default
                                  the program name is constructed by taking the file
                                  name from ``sys.argv[0]``.
                :param complete_var: the environment variable that controls the
                                     bash completion support.  The default is
                                     ``"_<prog_name>_COMPLETE"`` with prog_name in
                                     uppercase.
                :param standalone_mode: the default behavior is to invoke the script
                                        in standalone mode.  Click will then
                                        handle exceptions and convert them into
                                        error messages and the function will never
                                        return but shut down the interpreter.  If
                                        this is set to `False` they will be
                                        propagated to the caller and the return
                                        value of this function is the return value
                                        of :meth:`invoke`.
                :param extra: extra keyword arguments are forwarded to the context
                              constructor.  See :class:`Context` for more information.
        
        """
    def __call__(self, *args, **kwargs):
        """
        Alias for :meth:`main`.
        """
def Command(BaseCommand):
    """
    Commands are the basic building block of command line interfaces in
        Click.  A basic command handles command line parsing and might dispatch
        more parsing to commands nested below it.

        .. versionchanged:: 2.0
           Added the `context_settings` parameter.
        .. versionchanged:: 7.1
           Added the `no_args_is_help` parameter.

        :param name: the name of the command to use unless a group overrides it.
        :param context_settings: an optional dictionary with defaults that are
                                 passed to the context object.
        :param callback: the callback to invoke.  This is optional.
        :param params: the parameters to register with this command.  This can
                       be either :class:`Option` or :class:`Argument` objects.
        :param help: the help string to use for this command.
        :param epilog: like the help string but it's printed at the end of the
                       help page after everything else.
        :param short_help: the short help to use for this command.  This is
                           shown on the command listing of the parent command.
        :param add_help_option: by default each command registers a ``--help``
                                option.  This can be disabled by this parameter.
        :param no_args_is_help: this controls what happens if no arguments are
                                provided.  This option is disabled by default.
                                If enabled this will add ``--help`` as argument
                                if no arguments are passed
        :param hidden: hide this command from help outputs.

        :param deprecated: issues a message indicating that
                                 the command is deprecated.
    
    """
2021-03-02 20:50:05,582 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:05,582 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:05,582 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:05,582 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:05,583 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:05,583 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:05,583 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:05,583 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:05,583 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:05,583 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:05,583 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:05,583 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:05,583 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:05,583 : INFO : tokenize_signature : --> do i ever get here?
    def __init__(
        self,
        name,
        context_settings=None,
        callback=None,
        params=None,
        help=None,
        epilog=None,
        short_help=None,
        options_metavar="[OPTIONS]",
        add_help_option=True,
        no_args_is_help=False,
        hidden=False,
        deprecated=False,
    ):
        """
        : the callback to execute when the command fires.  This might be
        : `None` in which case nothing happens.

        """
    def get_usage(self, ctx):
        """
        Formats the usage line into a string and returns it.

                Calls :meth:`format_usage` internally.
        
        """
    def get_params(self, ctx):
        """
        Writes the usage line into the formatter.

                This is a low-level method called by :meth:`get_usage`.
        
        """
    def collect_usage_pieces(self, ctx):
        """
        Returns all the pieces that go into the usage line and returns
                it as a list of strings.
        
        """
    def get_help_option_names(self, ctx):
        """
        Returns the names for the help option.
        """
    def get_help_option(self, ctx):
        """
        Returns the help option object.
        """
        def show_help(ctx, param, value):
            """
            Show this message and exit.
            """
    def make_parser(self, ctx):
        """
        Creates the underlying option parser for this command.
        """
    def get_help(self, ctx):
        """
        Formats the help into a string and returns it.

                Calls :meth:`format_help` internally.
        
        """
    def get_short_help_str(self, limit=45):
        """
        Gets short help for the command or makes it by shortening the
                long help string.
        
        """
    def format_help(self, ctx, formatter):
        """
        Writes the help into the formatter if it exists.

                This is a low-level method called by :meth:`get_help`.

                This calls the following methods:

                -   :meth:`format_usage`
                -   :meth:`format_help_text`
                -   :meth:`format_options`
                -   :meth:`format_epilog`
        
        """
    def format_help_text(self, ctx, formatter):
        """
        Writes the help text to the formatter if it exists.
        """
    def format_options(self, ctx, formatter):
        """
        Writes all the options into the formatter if they exist.
        """
    def format_epilog(self, ctx, formatter):
        """
        Writes the epilog into the formatter if it exists.
        """
    def parse_args(self, ctx, args):
        """
        Got unexpected extra argument{} ({})
        """
    def invoke(self, ctx):
        """
        Given a context, this invokes the attached callback (if it exists)
                in the right way.
        
        """
def MultiCommand(Command):
    """
    A multi command is the basic implementation of a command that
        dispatches to subcommands.  The most common version is the
        :class:`Group`.

        :param invoke_without_command: this controls how the multi command itself
                                       is invoked.  By default it's only invoked
                                       if a subcommand is provided.
        :param no_args_is_help: this controls what happens if no arguments are
                                provided.  This option is enabled by default if
                                `invoke_without_command` is disabled or disabled
                                if it's enabled.  If enabled this will add
                                ``--help`` as argument if no arguments are
                                passed.
        :param subcommand_metavar: the string that is used in the documentation
                                   to indicate the subcommand place.
        :param chain: if this is set to `True` chaining of multiple subcommands
                      is enabled.  This restricts the form of commands in that
                      they cannot have optional arguments but it allows
                      multiple commands to be chained together.
        :param result_callback: the result callback to attach to this multi
                                command.
    
    """
2021-03-02 20:50:05,588 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:05,588 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:05,589 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:05,589 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:05,589 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:05,589 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:05,589 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:05,589 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:05,589 : INFO : tokenize_signature : --> do i ever get here?
    def __init__(
        self,
        name=None,
        invoke_without_command=False,
        no_args_is_help=None,
        subcommand_metavar=None,
        chain=False,
        result_callback=None,
        **attrs
    ):
        """
        : The result callback that is stored.  This can be set or
        : overridden with the :func:`resultcallback` decorator.

        """
    def collect_usage_pieces(self, ctx):
        """
        Adds a result callback to the chain command.  By default if a
                result callback is already registered this will chain them but
                this can be disabled with the `replace` parameter.  The result
                callback is invoked with the return value of the subcommand
                (or the list of return values from all subcommands if chaining
                is enabled) as well as the parameters as they would be passed
                to the main callback.

                Example::

                    @click.group()
                    @click.option('-i', '--input', default=23)
                    def cli(input):
                        return 42

                    @cli.resultcallback()
                    def process_result(result, input):
                        return result + input

                .. versionadded:: 3.0

                :param replace: if set to `True` an already existing result
                                callback will be removed.
        
        """
        def decorator(f):
            """
            Extra format methods for multi methods that adds all the commands
                    after the options.
        
            """
    def parse_args(self, ctx, args):
        """
         If we are invoked without command the chain flag controls
         how this happens.  If we are not in chain mode, the return
         value here is the return value of the command.
         If however we are in chain mode, the return value is the
         return value of the result processor invoked with an empty
         list (which means that no subcommand actually was executed).

        """
    def resolve_command(self, ctx, args):
        """
         Get the command

        """
    def get_command(self, ctx, cmd_name):
        """
        Given a context and a command name, this returns a
                :class:`Command` object if it exists or returns `None`.
        
        """
    def list_commands(self, ctx):
        """
        Returns a list of subcommand names in the order they should
                appear.
        
        """
def Group(MultiCommand):
    """
    A group allows a command to have subcommands attached.  This is the
        most common way to implement nesting in Click.

        :param commands: a dictionary of commands.
    
    """
    def __init__(self, name=None, commands=None, **attrs):
        """
        : the registered subcommands by their exported names.

        """
    def add_command(self, cmd, name=None):
        """
        Registers another :class:`Command` with this group.  If the name
                is not provided, the name of the command is used.
        
        """
    def command(self, *args, **kwargs):
        """
        A shortcut decorator for declaring and attaching a command to
                the group.  This takes the same arguments as :func:`command` but
                immediately registers the created command with this instance by
                calling into :meth:`add_command`.
        
        """
        def decorator(f):
            """
            A shortcut decorator for declaring and attaching a group to
                    the group.  This takes the same arguments as :func:`group` but
                    immediately registers the created command with this instance by
                    calling into :meth:`add_command`.
        
            """
        def decorator(f):
            """
            A command collection is a multi command that merges multiple multi
                commands together into one.  This is a straightforward implementation
                that accepts a list of different multi commands as sources and
                provides all the commands for each of them.
    
            """
    def __init__(self, name=None, sources=None, **attrs):
        """
        : The list of registered multi commands.

        """
    def add_source(self, multi_cmd):
        """
        Adds a new multi command to the chain dispatcher.
        """
    def get_command(self, ctx, cmd_name):
        """
        r"""A parameter to a command comes in two versions: they are either
            :class:`Option`\s or :class:`Argument`\s.  Other subclasses are currently
            not supported by design as some of the internals for parsing are
            intentionally not finalized.

            Some settings are supported by both options and arguments.

            :param param_decls: the parameter declarations for this option or
                                argument.  This is a list of flags or argument
                                names.
            :param type: the type that should be used.  Either a :class:`ParamType`
                         or a Python type.  The later is converted into the former
                         automatically if supported.
            :param required: controls if this is optional or not.
            :param default: the default value if omitted.  This can also be a callable,
                            in which case it's invoked when the default is needed
                            without any arguments.
            :param callback: a callback that should be executed after the parameter
                             was matched.  This is called as ``fn(ctx, param,
                             value)`` and needs to return the value.
            :param nargs: the number of arguments to match.  If not ``1`` the return
                          value is a tuple instead of single value.  The default for
                          nargs is ``1`` (except if the type is a tuple, then it's
                          the arity of the tuple).
            :param metavar: how the value is represented in the help page.
            :param expose_value: if this is `True` then the value is passed onwards
                                 to the command callback and stored on the context,
                                 otherwise it's skipped.
            :param is_eager: eager values are processed before non eager ones.  This
                             should not be set for arguments or it will inverse the
                             order of processing.
            :param envvar: a string or list of strings that are environment variables
                           that should be checked.

            .. versionchanged:: 7.1
                Empty environment variables are ignored rather than taking the
                empty string value. This makes it possible for scripts to clear
                variables if they can't unset them.

            .. versionchanged:: 2.0
                Changed signature for parameter callback to also be passed the
                parameter. The old callback format will still work, but it will
                raise a warning to give you a chance to migrate the code easier.
    
        """
2021-03-02 20:50:05,596 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:05,596 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:05,596 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:05,597 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:05,597 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:05,597 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:05,597 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:05,597 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:05,597 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:05,597 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:05,597 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:05,597 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:05,597 : INFO : tokenize_signature : --> do i ever get here?
    def __init__(
        self,
        param_decls=None,
        type=None,
        required=False,
        default=None,
        callback=None,
        nargs=None,
        metavar=None,
        expose_value=True,
        is_eager=False,
        envvar=None,
        autocompletion=None,
    ):
        """
         Default nargs to what the type tells us if we have that
         information available.

        """
    def __repr__(self):
        """
        <{} {}>
        """
    def human_readable_name(self):
        """
        Returns the human readable name of this parameter.  This is the
                same as the name for options, but the metavar for arguments.
        
        """
    def make_metavar(self):
        """
        ...
        """
    def get_default(self, ctx):
        """
        Given a context variable this calculates the default value.
        """
    def add_to_parser(self, parser, ctx):
        """
        Given a value this runs it properly through the type system.
                This automatically handles things like `nargs` and `multiple` as
                well as composite types.
        
        """
        def _convert(value, level):
            """
            Given a value and context this runs the logic to convert the
                    value as necessary.
        
            """
    def value_is_missing(self, value):
        """

        """
    def value_from_envvar(self, ctx):
        """
        Get a stringified version of the param for use in error messages to
                indicate which param caused the error.
        
        """
def Option(Parameter):
    """
    Options are usually optional values on the command line and
        have some extra features that arguments don't have.

        All other parameters are passed onwards to the parameter constructor.

        :param show_default: controls if the default value should be shown on the
                             help page. Normally, defaults are not shown. If this
                             value is a string, it shows the string instead of the
                             value. This is particularly useful for dynamic options.
        :param show_envvar: controls if an environment variable should be shown on
                            the help page.  Normally, environment variables
                            are not shown.
        :param prompt: if set to `True` or a non empty string then the user will be
                       prompted for input.  If set to `True` the prompt will be the
                       option name capitalized.
        :param confirmation_prompt: if set then the value will need to be confirmed
                                    if it was prompted for.
        :param hide_input: if this is `True` then the input on the prompt will be
                           hidden from the user.  This is useful for password
                           input.
        :param is_flag: forces this option to act as a flag.  The default is
                        auto detection.
        :param flag_value: which value should be used for this flag if it's
                           enabled.  This is set to a boolean automatically if
                           the option string contains a slash to mark two options.
        :param multiple: if this is set to `True` then the argument is accepted
                         multiple times and recorded.  This is similar to ``nargs``
                         in how it works but supports arbitrary number of
                         arguments.
        :param count: this flag makes an option increment an integer.
        :param allow_from_autoenv: if this is enabled then the value of this
                                   parameter will be pulled from an environment
                                   variable in case a prefix is defined on the
                                   context.
        :param help: the help string.
        :param hidden: hide this option from help outputs.
    
    """
2021-03-02 20:50:05,602 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:05,602 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:05,602 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:05,602 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:05,602 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:05,602 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:05,602 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:05,602 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:05,602 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:05,602 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:05,602 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:05,603 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:05,603 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:05,603 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:05,603 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:05,603 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:05,603 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:05,603 : INFO : tokenize_signature : --> do i ever get here?
    def __init__(
        self,
        param_decls=None,
        show_default=False,
        prompt=False,
        confirmation_prompt=False,
        hide_input=False,
        is_flag=None,
        flag_value=None,
        multiple=False,
        count=False,
        allow_from_autoenv=True,
        type=None,
        help=None,
        hidden=False,
        show_choices=True,
        show_envvar=False,
        **attrs
    ):
        """
        default
        """
    def _parse_decls(self, decls, expose_value):
        """
        Name defined twice
        """
    def add_to_parser(self, parser, ctx):
        """
        dest
        """
    def get_help_record(self, ctx):
        """
         {}
        """
    def get_default(self, ctx):
        """
         If we're a non boolean flag our default is more complex because
         we need to look at all flags in the same group to figure out
         if we're the the default one in which case we return the flag
         value as default.

        """
    def prompt_for_value(self, ctx):
        """
        This is an alternative flow that can be activated in the full
                value processing if a value does not exist.  It will prompt the
                user until a valid value exists and then returns the processed
                value as result.
        
        """
    def resolve_envvar_value(self, ctx):
        """
        {}_{}
        """
    def value_from_envvar(self, ctx):
        """
        Arguments are positional parameters to a command.  They generally
            provide fewer features than options but can have infinite ``nargs``
            and are required by default.

            All parameters are passed onwards to the parameter constructor.
    
        """
    def __init__(self, param_decls, required=None, **attrs):
        """
        default
        """
    def human_readable_name(self):
        """
        [{}]
        """
    def _parse_decls(self, decls, expose_value):
        """
        Could not determine name for argument
        """
    def get_usage_pieces(self, ctx):
