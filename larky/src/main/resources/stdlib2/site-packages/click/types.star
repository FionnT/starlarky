def ParamType(object):
    """
    Helper for converting values through types.  The following is
        necessary for a valid type:

        *   it needs a name
        *   it needs to pass through None unchanged
        *   it needs to convert from a string
        *   it needs to convert its result type through unchanged
            (eg: needs to be idempotent)
        *   it needs to be able to deal with param and context being `None`.
            This can be the case when the object is used with prompt
            inputs.
    
    """
    def __call__(self, value, param=None, ctx=None):
        """
        Returns the metavar default for this param if it provides one.
        """
    def get_missing_message(self, param):
        """
        Optionally might return extra information about a missing
                parameter.

                .. versionadded:: 2.0
        
        """
    def convert(self, value, param, ctx):
        """
        Converts the value.  This is not invoked for values that are
                `None` (the missing value).
        
        """
    def split_envvar_value(self, rv):
        """
        Given a value from an environment variable this splits it up
                into small chunks depending on the defined envvar list splitter.

                If the splitter is set to `None`, which means that whitespace splits,
                then leading and trailing whitespace is ignored.  Otherwise, leading
                and trailing splitters usually lead to empty items being included.
        
        """
    def fail(self, message, param=None, ctx=None):
        """
        Helper method to fail with an invalid value message.
        """
def CompositeParamType(ParamType):
    """
    utf-8
    """
def UnprocessedParamType(ParamType):
    """
    text
    """
    def convert(self, value, param, ctx):
        """
        UNPROCESSED
        """
def StringParamType(ParamType):
    """
    text
    """
    def convert(self, value, param, ctx):
        """
        utf-8
        """
    def __repr__(self):
        """
        STRING
        """
def Choice(ParamType):
    """
    The choice type allows a value to be checked against a fixed set
        of supported values. All of these values have to be strings.

        You should only pass a list or tuple of choices. Other iterables
        (like generators) may lead to surprising results.

        The resulting value will always be one of the originally passed choices
        regardless of ``case_sensitive`` or any ``ctx.token_normalize_func``
        being specified.

        See :ref:`choice-opts` for an example.

        :param case_sensitive: Set to false to make choices case
            insensitive. Defaults to true.
    
    """
    def __init__(self, choices, case_sensitive=True):
        """
        [{}]
        """
    def get_missing_message(self, param):
        """
        Choose from:\n\t{}.
        """
    def convert(self, value, param, ctx):
        """
         Match through normalization and case sensitivity
         first do token_normalize_func, then lowercase
         preserve original `value` to produce an accurate message in
         `self.fail`

        """
    def __repr__(self):
        """
        Choice('{}')
        """
def DateTime(ParamType):
    """
    The DateTime type converts date strings into `datetime` objects.

        The format strings which are checked are configurable, but default to some
        common (non-timezone aware) ISO 8601 formats.

        When specifying *DateTime* formats, you should only pass a list or a tuple.
        Other iterables, like generators, may lead to surprising results.

        The format strings are processed using ``datetime.strptime``, and this
        consequently defines the format strings which are allowed.

        Parsing is tried using each format, in order, and the first format which
        parses successfully is used.

        :param formats: A list or tuple of date format strings, in the order in
                        which they should be tried. Defaults to
                        ``'%Y-%m-%d'``, ``'%Y-%m-%dT%H:%M:%S'``,
                        ``'%Y-%m-%d %H:%M:%S'``.
    
    """
    def __init__(self, formats=None):
        """
        %Y-%m-%d
        """
    def get_metavar(self, param):
        """
        [{}]
        """
    def _try_to_convert_date(self, value, format):
        """
         Exact match

        """
    def __repr__(self):
        """
        DateTime
        """
def IntParamType(ParamType):
    """
    integer
    """
    def convert(self, value, param, ctx):
        """
        {} is not a valid integer
        """
    def __repr__(self):
        """
        INT
        """
def IntRange(IntParamType):
    """
    A parameter that works similar to :data:`click.INT` but restricts
        the value to fit into a range.  The default behavior is to fail if the
        value falls outside the range, but it can also be silently clamped
        between the two edges.

        See :ref:`ranges` for an example.
    
    """
    def __init__(self, min=None, max=None, clamp=False):
        """
        {} is bigger than the maximum valid value {}.
        """
    def __repr__(self):
        """
        IntRange({}, {})
        """
def FloatParamType(ParamType):
    """
    float
    """
    def convert(self, value, param, ctx):
        """
        {} is not a valid floating point value
        """
    def __repr__(self):
        """
        FLOAT
        """
def FloatRange(FloatParamType):
    """
    A parameter that works similar to :data:`click.FLOAT` but restricts
        the value to fit into a range.  The default behavior is to fail if the
        value falls outside the range, but it can also be silently clamped
        between the two edges.

        See :ref:`ranges` for an example.
    
    """
    def __init__(self, min=None, max=None, clamp=False):
        """
        {} is bigger than the maximum valid value {}.
        """
    def __repr__(self):
        """
        FloatRange({}, {})
        """
def BoolParamType(ParamType):
    """
    boolean
    """
    def convert(self, value, param, ctx):
        """
        true
        """
    def __repr__(self):
        """
        BOOL
        """
def UUIDParameterType(ParamType):
    """
    uuid
    """
    def convert(self, value, param, ctx):
        """
        ascii
        """
    def __repr__(self):
        """
        UUID
        """
def File(ParamType):
    """
    Declares a parameter to be a file for reading or writing.  The file
        is automatically closed once the context tears down (after the command
        finished working).

        Files can be opened for reading or writing.  The special value ``-``
        indicates stdin or stdout depending on the mode.

        By default, the file is opened for reading text data, but it can also be
        opened in binary mode or for writing.  The encoding parameter can be used
        to force a specific encoding.

        The `lazy` flag controls if the file should be opened immediately or upon
        first IO. The default is to be non-lazy for standard input and output
        streams as well as files opened for reading, `lazy` otherwise. When opening a
        file lazily for reading, it is still opened temporarily for validation, but
        will not be held open until first IO. lazy is mainly useful when opening
        for writing to avoid creating the file until it is needed.

        Starting with Click 2.0, files can also be opened atomically in which
        case all writes go into a separate file in the same folder and upon
        completion the file will be moved over to the original location.  This
        is useful if a file regularly read by other users is modified.

        See :ref:`file-args` for more information.
    
    """
2021-03-02 20:50:05,794 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:05,794 : INFO : tokenize_signature : --> do i ever get here?
    def __init__(
        self, mode="r", encoding=None, errors="strict", lazy=None, atomic=False
    ):
        """
        -
        """
    def convert(self, value, param, ctx):
        """
        read
        """
def Path(ParamType):
    """
    The path type is similar to the :class:`File` type but it performs
        different checks.  First of all, instead of returning an open file
        handle it returns just the filename.  Secondly, it can perform various
        basic checks about what the file or directory should be.

        .. versionchanged:: 6.0
           `allow_dash` was added.

        :param exists: if set to true, the file or directory needs to exist for
                       this value to be valid.  If this is not required and a
                       file does indeed not exist, then all further checks are
                       silently skipped.
        :param file_okay: controls if a file is a possible value.
        :param dir_okay: controls if a directory is a possible value.
        :param writable: if true, a writable check is performed.
        :param readable: if true, a readable check is performed.
        :param resolve_path: if this is true, then the path is fully resolved
                             before the value is passed onwards.  This means
                             that it's absolute and symlinks are resolved.  It
                             will not expand a tilde-prefix, as this is
                             supposed to be done by the shell only.
        :param allow_dash: If this is set to `True`, a single dash to indicate
                           standard streams is permitted.
        :param path_type: optionally a string type that should be used to
                          represent the path.  The default is `None` which
                          means the return value will be either bytes or
                          unicode depending on what makes most sense given the
                          input data Click deals with.
    
    """
2021-03-02 20:50:05,796 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:05,796 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:05,796 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:05,796 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:05,796 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:05,796 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:05,796 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:05,796 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:05,796 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:05,796 : INFO : tokenize_signature : --> do i ever get here?
    def __init__(
        self,
        exists=False,
        file_okay=True,
        dir_okay=True,
        writable=False,
        readable=True,
        resolve_path=False,
        allow_dash=False,
        path_type=None,
    ):
        """
        file
        """
    def coerce_path_result(self, rv):
        """
        b"-
        """
def Tuple(CompositeParamType):
    """
    The default behavior of Click is to apply a type on a value directly.
        This works well in most cases, except for when `nargs` is set to a fixed
        count and different types should be used for different items.  In this
        case the :class:`Tuple` type can be used.  This type can only be used
        if `nargs` is set to a fixed number.

        For more information see :ref:`tuple-type`.

        This can be selected by using a Python tuple literal as a type.

        :param types: a list of types that should be used for the tuple items.
    
    """
    def __init__(self, types):
        """
        <{}>
        """
    def arity(self):
        """
        It would appear that nargs is set to conflict with the
         composite type arity.

        """
def convert_type(ty, default=None):
    """
    Converts a callable or python type into the most appropriate
        param type.
    
    """
