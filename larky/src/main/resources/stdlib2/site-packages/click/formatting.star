def measure_table(rows):
    """

    """
2021-03-02 20:50:05,969 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:05,970 : INFO : tokenize_signature : --> do i ever get here?
def wrap_text(
    text, width=78, initial_indent="", subsequent_indent="", preserve_paragraphs=False
):
    """
    A helper function that intelligently wraps text.  By default, it
        assumes that it operates on a single paragraph of text but if the
        `preserve_paragraphs` parameter is provided it will intelligently
        handle paragraphs (defined by two empty lines).

        If paragraphs are handled, a paragraph can be prefixed with an empty
        line containing the ``\\b`` character (``\\x08``) to indicate that
        no rewrapping should happen in that block.

        :param text: the text that should be rewrapped.
        :param width: the maximum width for the text.
        :param initial_indent: the initial indent that should be placed on the
                               first line as a string.
        :param subsequent_indent: the indent string that should be placed on
                                  each consecutive line.
        :param preserve_paragraphs: if this flag is set then the wrapping will
                                    intelligently handle paragraphs.
    
    """
    def _flush_par():
        """
        \b
        """
def HelpFormatter(object):
    """
    This class helps with formatting text-based help pages.  It's
        usually just needed for very special internal cases, but it's also
        exposed so that developers can write their own fancy outputs.

        At present, it always writes into memory.

        :param indent_increment: the additional increment for each level.
        :param width: the width for the text.  This defaults to the terminal
                      width clamped to a maximum of 78.
    
    """
    def __init__(self, indent_increment=2, width=None, max_width=None):
        """
        Writes a unicode string into the internal buffer.
        """
    def indent(self):
        """
        Increases the indentation.
        """
    def dedent(self):
        """
        Decreases the indentation.
        """
    def write_usage(self, prog, args="", prefix="Usage: "):
        """
        Writes a usage line into the buffer.

                :param prog: the program name.
                :param args: whitespace separated list of arguments.
                :param prefix: the prefix for the first line.
        
        """
    def write_heading(self, heading):
        """
        Writes a heading into the buffer.
        """
    def write_paragraph(self):
        """
        Writes a paragraph into the buffer.
        """
    def write_text(self, text):
        """
        Writes re-indented text into the buffer.  This rewraps and
                preserves paragraphs.
        
        """
    def write_dl(self, rows, col_max=30, col_spacing=2):
        """
        Writes a definition list into the buffer.  This is how options
                and commands are usually formatted.

                :param rows: a list of two item tuples for the terms and values.
                :param col_max: the maximum width of the first column.
                :param col_spacing: the number of spaces between the first and
                                    second column.
        
        """
    def section(self, name):
        """
        Helpful context manager that writes a paragraph, a heading,
                and the indents.

                :param name: the section name that is written as heading.
        
        """
    def indentation(self):
        """
        A context manager that increases the indentation.
        """
    def getvalue(self):
        """
        Returns the buffer contents.
        """
def join_options(options):
    """
    Given a list of option strings this joins them in the most appropriate
        way and returns them in the form ``(formatted_string,
        any_prefix_is_slash)`` where the second item in the tuple is a flag that
        indicates if any of the option prefixes was a slash.
    
    """
