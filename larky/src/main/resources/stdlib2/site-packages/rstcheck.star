def Error(Exception):
    """
    rstcheck exception.
    """
    def __init__(self, message, line_number):
        """
        Code block directive.
        """
    def run(self):
        """
        Run directive.
        """
def register_code_directive():
    """
    Register code directive.
    """
def strip_byte_order_mark(text):
    """
    Return text with byte order mark (BOM) removed.
    """
2021-03-02 20:52:40,205 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:52:40,206 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:52:40,206 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:52:40,206 : INFO : tokenize_signature : --> do i ever get here?
def check(source,
          filename='<string>',
          report_level=docutils.utils.Reporter.INFO_LEVEL,
          ignore=None,
          debug=False):
    """
    Yield errors.

        Use lower report_level for noisier error output.

        Each yielded error is a tuple of the form:

            (line_number, message)

        Line numbers are indexed at 1 and are with respect to the full RST file.

        Each code block is checked asynchronously in a subprocess.

        Note that this function mutates state by calling the ``docutils``
        ``register_*()`` functions.

    
    """
def find_ignored_languages(source):
    """
    Yield ignored languages.

        Languages are ignored via comment.

        For example, to ignore C++, JSON, and Python:

        >>> list(find_ignored_languages('''
        ... Example
        ... =======
        ...
        ... .. rstcheck: ignore-language=cpp,json
        ...
        ... .. rstcheck: ignore-language=python
        ... '''))
        ['cpp', 'json', 'python']

    
    """
def _check_file(parameters):
    """
    Return list of errors.
    """
def check_python(code):
    """
    Yield errors.
    """
def check_json(code):
    """
    Yield errors.
    """
def check_xml(code):
    """
    Yield errors.
    """
def check_rst(code, ignore):
    """
    Yield errors in nested RST code.
    """
def check_doctest(code):
    """
    Yield doctest syntax errors.

        This does not run the test as that would be unsafe. Nor does this
        check the Python syntax in the doctest. That could be purposely
        incorrect for testing purposes.

    
    """
def get_and_split(options, key, default=''):
    """
    Return list of split and stripped strings.
    """
def split_comma_separated(text):
    """
    Return list of split and stripped strings.
    """
def _get_directives_and_roles_from_sphinx():
    """
    Return a tuple of Sphinx directive and roles.
    """
def IgnoredDirective(docutils.parsers.rst.Directive):
    """
    Stub for unknown directives.
    """
    def run(self):
        """
        Do nothing.
        """
2021-03-02 20:52:40,212 : INFO : tokenize_signature : --> do i ever get here?
def _ignore_role(name, rawtext, text, lineno, inliner,
                 options=None, content=None):
    """
    Stub for unknown roles.
    """
def ignore_sphinx():
    """
    Register Sphinx directives and roles to ignore.
    """
def find_config(directory):
    """
    Return configuration filename.

        Find configuration in directory or its ancestor.

    
    """
def load_configuration_from_file(directory, args):
    """
    Return new ``args`` with configuration loaded from file.
    """
def _get_options(directory):
    """
    'rstcheck'
    """
def ignore_directives_and_roles(directives, roles):
    """
    Ignore directives/roles in docutils.
    """
def bash_checker(code, working_directory):
    """
    Return checker.
    """
    def run_check():
        """
        Yield errors.
        """
def c_checker(code, working_directory):
    """
    Return checker.
    """
def cpp_checker(code, working_directory):
    """
    Return checker.
    """
def gcc_checker(code, filename_suffix, arguments, working_directory):
    """
    Return checker.
    """
    def run_check():
        """
        Yield errors.
        """
def parse_gcc_style_error_message(message, filename, has_column=True):
    """
    Parse GCC-style error message.

        Return (line_number, message). Raise ValueError if message cannot be
        parsed.

    
    """
def get_encoding():
    """
    Return preferred encoding.
    """
def run_in_subprocess(code, filename_suffix, arguments, working_directory):
    """
    Return None on success.
    """
    def run():
        """
        Yield errors.
        """
def CheckTranslator(docutils.nodes.NodeVisitor):
    """
    Visits code blocks and checks for syntax errors in code.
    """
    def __init__(self, document, contents, filename, ignore):
        """
        'languages'
        """
    def visit_doctest_block(self, node):
        """
        Check syntax of doctest.
        """
    def visit_literal_block(self, node):
        """
        Check syntax of code block.
        """
    def visit_paragraph(self, node):
        """
        Check syntax of reStructuredText.
        """
    def _add_check(self, node, run, language, is_code_node):
        """
        Add checker that will be run.
        """
        def run_check():
            """
            Yield errors.
            """
    def unknown_visit(self, node):
        """
        Ignore.
        """
    def unknown_departure(self, node):
        """
        Ignore.
        """
def beginning_of_code_block(node, line_number, full_contents, is_code_node):
    """
    Return line number of beginning of code block.
    """
def CheckWriter(docutils.writers.Writer):
    """
    Runs CheckTranslator on code blocks.
    """
    def __init__(self, contents, filename, ignore):
        """
        Run CheckTranslator.
        """
def decode_filename(filename):
    """
    Return Unicode filename.
    """
def parse_args():
    """
    Return parsed command-line arguments.
    """
def output_message(text, file=sys.stderr):
    """
    Output message to terminal.
    """
def enable_sphinx_if_possible():
    """
    Register Sphinx directives and roles.
    """
def match_file(filename):
    """
    Return True if file is okay for modifying/recursing.
    """
def find_files(filenames, recursive):
    """
    Yield filenames.
    """
def main():
    """
    Return 0 on success.
    """
