def ClipboardData:
    """

        Text on the clipboard.

        :param text: string
        :param type: :class:`~prompt_toolkit.selection.SelectionType`
    
    """
2021-03-02 20:51:56,040 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:56,041 : INFO : tokenize_signature : --> do i ever get here?
    def __init__(
        self, text: str = "", type: SelectionType = SelectionType.CHARACTERS
    ) -> None:
        """

            Abstract baseclass for clipboards.
            (An implementation can be in memory, it can share the X11 or Windows
            keyboard, or can be persistent.)
    
        """
    def set_data(self, data: ClipboardData) -> None:
        """

                Set data to the clipboard.

                :param data: :class:`~.ClipboardData` instance.
        
        """
    def set_text(self, text: str) -> None:  # Not abstract.
        """
         Not abstract.
        """
    def rotate(self) -> None:
        """

                For Emacs mode, rotate the kill ring.
        
        """
    def get_data(self) -> ClipboardData:
        """

                Return clipboard data.
        
        """
def DummyClipboard(Clipboard):
    """

        Clipboard implementation that doesn't remember anything.
    
    """
    def set_data(self, data: ClipboardData) -> None:
        """

            Clipboard class that can dynamically returns any Clipboard.

            :param get_clipboard: Callable that returns a :class:`.Clipboard` instance.
    
        """
    def __init__(self, get_clipboard: Callable[[], Optional[Clipboard]]) -> None:
