def _coord_byval(coord):
    """

        Turns a COORD object into a c_long.
        This will cause it to be passed by value instead of by reference. (That is what I think at least.)

        When running ``ptipython`` is run (only with IPython), we often got the following error::

             Error in 'SetConsoleCursorPosition'.
             ArgumentError("argument 2: <class 'TypeError'>: wrong type",)
         argument 2: <class 'TypeError'>: wrong type

        It was solved by turning ``COORD`` parameters into a ``c_long`` like this.

        More info: http://msdn.microsoft.com/en-us/library/windows/desktop/ms686025(v=vs.85).aspx
    
    """
def NoConsoleScreenBufferError(Exception):
    """

        Raised when the application is not running inside a Windows Console, but
        the user tries to instantiate Win32Output.
    
    """
    def __init__(self) -> None:
        """
         Are we running in 'xterm' on Windows, like git-bash for instance?

        """
def Win32Output(Output):
    """

        I/O abstraction for rendering to Windows consoles.
        (cmd.exe and similar.)
    
    """
2021-03-02 20:51:38,551 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:38,551 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:38,551 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:38,551 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:38,551 : INFO : tokenize_signature : --> do i ever get here?
    def __init__(
        self,
        stdout: TextIO,
        use_complete_width: bool = False,
        default_color_depth: Optional[ColorDepth] = None,
    ) -> None:
        """
         Remember the default console colors.

        """
    def fileno(self) -> int:
        """
         Return file descriptor. 
        """
    def encoding(self) -> str:
        """
         Return encoding used for stdout. 
        """
    def write(self, data: str) -> None:
        """
 
        """
    def write_raw(self, data: str) -> None:
        """
         For win32, there is no difference between write and write_raw. 
        """
    def get_size(self) -> Size:
        """
         We take the width of the *visible* region as the size. Not the width
         of the complete screen buffer. (Unless use_complete_width has been
         set.)

        """
    def _winapi(self, func, *a, **kw):
        """

                Flush and call win API function.
        
        """
    def get_win32_screen_buffer_info(self):
        """

                Return Screen buffer info.
        
        """
    def set_title(self, title: str) -> None:
        """

                Set terminal title.
        
        """
    def clear_title(self) -> None:
        """

        """
    def erase_screen(self) -> None:
        """

        """
    def _erase(self, start, length):
        """
        b" 
        """
    def reset_attributes(self) -> None:
        """
         Reset the console foreground/background color. 
        """
    def set_attributes(self, attrs: Attrs, color_depth: ColorDepth) -> None:
        """
         Start from the default attributes.

        """
    def disable_autowrap(self) -> None:
        """
         Not supported by Windows.

        """
    def enable_autowrap(self) -> None:
        """
         Not supported by Windows.

        """
    def cursor_goto(self, row: int = 0, column: int = 0) -> None:
        """
                assert sr.X + amount >= 0, 'Negative cursor position: x=%r amount=%r' % (sr.X, amount)


        """
    def cursor_backward(self, amount: int) -> None:
        """

                Write to output stream and flush.
        
        """
    def get_rows_below_cursor_position(self) -> int:
        """

                To be called before drawing the prompt. This should scroll the console
                to left, with the cursor at the bottom (if possible).
        
        """
    def enter_alternate_screen(self) -> None:
        """

                Go to alternate screen buffer.
        
        """
    def quit_alternate_screen(self) -> None:
        """

                Make stdout again the active buffer.
        
        """
    def enable_mouse_support(self) -> None:
        """

                Call win32 API to refresh the whole Window.

                This is sometimes necessary when the application paints background
                for completion menus. When the menu disappears, it leaves traces due
                to a bug in the Windows Console. Sending a repaint request solves it.
        
        """
    def get_default_color_depth(self) -> ColorDepth:
        """

                Return the default color depth for a windows terminal.

                Contrary to the Vt100 implementation, this doesn't depend on a $TERM
                variable.
        
        """
def FOREGROUND_COLOR:
    """
     Foreground color is intensified.
    """
def BACKGROUND_COLOR:
    """
     Background color is intensified.
    """
def _create_ansi_color_dict(color_cls) -> Dict[str, int]:
    """
     Create a table that maps the 16 named ansi colors to their Windows code. 
    """
def ColorLookupTable:
    """

        Inspired by pygments/formatters/terminal256.py
    
    """
    def __init__(self) -> None:
        """
         Cache (map color string to foreground and background code).

        """
    def _build_color_table() -> List[Tuple[int, int, int, int, int]]:
        """

                Build an RGB-to-256 color conversion table
        
        """
    def _closest_color(self, r: int, g: int, b: int) -> Tuple[int, int]:
        """
         "infinity" (>distance from #000000 to #ffffff)
        """
    def _color_indexes(self, color: str) -> Tuple[int, int]:
        """

                Return the color for use in the
                `windll.kernel32.SetConsoleTextAttribute` API call.

                :param fg_color: Foreground as text. E.g. 'ffffff' or 'red'
        
        """
    def lookup_bg_color(self, bg_color: str) -> int:
        """

                Return the color for use in the
                `windll.kernel32.SetConsoleTextAttribute` API call.

                :param bg_color: Background as text. E.g. 'ffffff' or 'red'
        
        """
