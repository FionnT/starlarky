def _get_closest_ansi_color(r: int, g: int, b: int, exclude: Sequence[str] = ()) -> str:
    """

        Find closest ANSI color. Return it by name.

        :param r: Red (Between 0 and 255.)
        :param g: Green (Between 0 and 255.)
        :param b: Blue (Between 0 and 255.)
        :param exclude: A tuple of color names to exclude. (E.g. ``('ansired', )``.)
    
    """
def _16ColorCache:
    """

        Cache which maps (r, g, b) tuples to 16 ansi colors.

        :param bg: Cache for background colors, instead of foreground.
    
    """
    def __init__(self, bg: bool = False) -> None:
        """

                Return a (ansi_code, ansi_name) tuple. (E.g. ``(44, 'ansiblue')``.) for
                a given (r,g,b) value.
        
        """
2021-03-02 20:51:38,738 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:38,738 : INFO : tokenize_signature : --> do i ever get here?
    def _get(
        self, value: Tuple[int, int, int], exclude: Sequence[str] = ()
    ) -> _ColorCodeAndName:
        """
         Turn color name into code.

        """
def _256ColorCache(Dict[Tuple[int, int, int], int]):
    """

        Cache which maps (r, g, b) tuples to 256 colors.
    
    """
    def __init__(self) -> None:
        """
         Build color table.

        """
    def __missing__(self, value: Tuple[int, int, int]) -> int:
        """
         Find closest color.
         (Thanks to Pygments for this!)

        """
def _EscapeCodeCache(Dict[Attrs, str]):
    """

        Cache for VT100 escape codes. It maps
        (fgcolor, bgcolor, bold, underline, reverse) tuples to VT100 escape sequences.

        :param true_color: When True, use 24bit colors instead of 256 colors.
    
    """
    def __init__(self, color_depth: ColorDepth) -> None:
        """

        """
    def _color_name_to_rgb(self, color: str) -> Tuple[int, int, int]:
        """
         Turn 'ffffff', into (0xff, 0xff, 0xff). 
        """
    def _colors_to_code(self, fg_color: str, bg_color: str) -> Iterable[str]:
        """

                Return a tuple with the vt100 values  that represent this color.
        
        """
        def get(color: str, bg: bool) -> List[int]:
            """
             16 ANSI colors. (Given by name.)

            """
def _get_size(fileno: int) -> Tuple[int, int]:
    """
     Thanks to fabric (fabfile.org), and
     http://sqizit.bartletts.id.au/2011/02/14/pseudo-terminals-in-python/

    """
def Vt100_Output(Output):
    """

        :param get_size: A callable which returns the `Size` of the output terminal.
        :param stdout: Any object with has a `write` and `flush` method + an 'encoding' property.
        :param term: The terminal environment variable. (xterm, xterm-256color, linux, ...)
        :param write_binary: Encode the output before writing it. If `True` (the
            default), the `stdout` object is supposed to expose an `encoding` attribute.
    
    """
2021-03-02 20:51:38,743 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:38,743 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:38,744 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:38,744 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:38,744 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:38,744 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:38,744 : INFO : tokenize_signature : --> do i ever get here?
    def __init__(
        self,
        stdout: TextIO,
        get_size: Callable[[], Size],
        term: Optional[str] = None,
        write_binary: bool = True,
        default_color_depth: Optional[ColorDepth] = None,
    ) -> None:
        """
        write
        """
2021-03-02 20:51:38,744 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:38,745 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:38,745 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:38,745 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:38,745 : INFO : tokenize_signature : --> do i ever get here?
    def from_pty(
        cls,
        stdout: TextIO,
        term: Optional[str] = None,
        default_color_depth: Optional[ColorDepth] = None,
    ) -> "Vt100_Output":
        """

                Create an Output class from a pseudo terminal.
                (This will take the dimensions by reading the pseudo
                terminal attributes.)
        
        """
        def get_size() -> Size:
            """
             If terminal (incorrectly) reports its size as 0, pick a
             reasonable default.  See
             https://github.com/ipython/ipython/issues/10071

            """
    def get_size(self) -> Size:
        """
         Return file descriptor. 
        """
    def encoding(self) -> str:
        """
         Return encoding used for stdout. 
        """
    def write_raw(self, data: str) -> None:
        """

                Write raw data to output.
        
        """
    def write(self, data: str) -> None:
        """

                Write text to output.
                (Removes vt100 escape codes. -- used for safely writing text.)
        
        """
    def set_title(self, title: str) -> None:
        """

                Set terminal title.
        
        """
    def clear_title(self) -> None:
        """

        """
    def erase_screen(self) -> None:
        """

                Erases the screen with the background colour and moves the cursor to
                home.
        
        """
    def enter_alternate_screen(self) -> None:
        """
        \x1b[?1049h\x1b[H
        """
    def quit_alternate_screen(self) -> None:
        """
        \x1b[?1049l
        """
    def enable_mouse_support(self) -> None:
        """
        \x1b[?1000h
        """
    def disable_mouse_support(self) -> None:
        """
        \x1b[?1000l
        """
    def erase_end_of_line(self) -> None:
        """

                Erases from the current cursor position to the end of the current line.
        
        """
    def erase_down(self) -> None:
        """

                Erases the screen from the current line down to the bottom of the
                screen.
        
        """
    def reset_attributes(self) -> None:
        """
        \x1b[0m
        """
    def set_attributes(self, attrs: Attrs, color_depth: ColorDepth) -> None:
        """

                Create new style and output.

                :param attrs: `Attrs` instance.
        
        """
    def disable_autowrap(self) -> None:
        """
        \x1b[?7l
        """
    def enable_autowrap(self) -> None:
        """
        \x1b[?7h
        """
    def enable_bracketed_paste(self) -> None:
        """
        \x1b[?2004h
        """
    def disable_bracketed_paste(self) -> None:
        """
        \x1b[?2004l
        """
    def cursor_goto(self, row: int = 0, column: int = 0) -> None:
        """

                Move cursor position.
        
        """
    def cursor_up(self, amount: int) -> None:
        """
        \x1b[A
        """
    def cursor_down(self, amount: int) -> None:
        """
         Note: Not the same as '\n', '\n' can cause the window content to
               scroll.

        """
    def cursor_forward(self, amount: int) -> None:
        """
        \x1b[C
        """
    def cursor_backward(self, amount: int) -> None:
        """
        \b
        """
    def hide_cursor(self) -> None:
        """
        \x1b[?25l
        """
    def show_cursor(self) -> None:
        """
        \x1b[?12l\x1b[?25h
        """
    def flush(self) -> None:
        """

                Write to output stream and flush.
        
        """
    def ask_for_cpr(self) -> None:
        """

                Asks for a cursor position report (CPR).
        
        """
    def responds_to_cpr(self) -> bool:
        """
         When the input is a tty, we assume that CPR is supported.
         It's not when the input is piped from Pexpect.

        """
    def bell(self) -> None:
        """
         Sound bell. 
        """
    def get_default_color_depth(self) -> ColorDepth:
        """

                Return the default color depth for a vt100 terminal, according to the
                our term value.

                We prefer 256 colors almost always, because this is what most terminals
                support these days, and is a good default.
        
        """
