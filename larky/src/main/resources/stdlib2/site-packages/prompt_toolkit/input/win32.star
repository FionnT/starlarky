def _Win32InputBase(Input):
    """

        Base class for `Win32Input` and `Win32PipeInput`.
    
    """
    def __init__(self) -> None:
        """

            `Input` class that reads from the Windows console.
    
        """
    def __init__(self, stdin: Optional[TextIO] = None) -> None:
        """

                Return a context manager that makes this input active in the current
                event loop.
        
        """
    def detach(self) -> ContextManager[None]:
        """

                Return a context manager that makes sure that this input is not active
                in the current event loop.
        
        """
    def read_keys(self):
        """
         The windows console doesn't depend on the file handle, so
         this is not used for the event loop (which uses the
         handle instead). But it's used in `Application.run_system_command`
         which opens a subprocess with a given stdin/stdout.

        """
    def typeahead_hash(self) -> str:
        """
        win32-input
        """
    def close(self) -> None:
        """

            :param recognize_paste: When True, try to discover paste actions and turn
                the event into a BracketedPaste.
    
        """
    def __init__(self, recognize_paste: bool = True) -> None:
        """
         When stdin is a tty, use that handle, otherwise, create a handle from
         CONIN$.

        """
    def close(self) -> None:
        """
         Close fdcon. 
        """
    def read(self) -> Iterable[KeyPress]:
        """

                Return a list of `KeyPress` instances. It won't return anything when
                there was nothing to read.  (This function doesn't block.)

                http://msdn.microsoft.com/en-us/library/windows/desktop/ms684961(v=vs.85).aspx
        
        """
    def _insert_key_data(self, key_press: KeyPress) -> KeyPress:
        """

                Insert KeyPress data, for vt100 compatibility.
        
        """
    def _get_keys(self, read, input_records):
        """

                Generator that yields `KeyPress` objects from the input records.
        
        """
    def _is_paste(keys) -> bool:
        """

                Return `True` when we should consider this list of keys as a paste
                event. Pasted text on windows will be turned into a
                `Keys.BracketedPaste` event. (It's not 100% correct, but it is probably
                the best possible way to detect pasting of text and handle that
                correctly.)
        
        """
    def _event_to_key_presses(self, ev):
        """

                For this `KEY_EVENT_RECORD`, return a list of `KeyPress` instances.
        
        """
    def _handle_mouse(self, ev):
        """

                Handle mouse events. Return a list of KeyPress instances.
        
        """
def _Win32Handles:
    """

        Utility to keep track of which handles are connectod to which callbacks.

        `add_win32_handle` starts a tiny event loop in another thread which waits
        for the Win32 handle to become ready. When this happens, the callback will
        be called in the current asyncio event loop using `call_soon_threadsafe`.

        `remove_win32_handle` will stop this tiny event loop.

        NOTE: We use this technique, so that we don't have to use the
              `ProactorEventLoop` on Windows and we can wait for things like stdin
              in a `SelectorEventLoop`. This is important, because our inputhook
              mechanism (used by IPython), only works with the `SelectorEventLoop`.
    
    """
    def __init__(self) -> None:
        """
         Windows Events that are triggered when we have to stop watching this
         handle.

        """
    def add_win32_handle(self, handle: HANDLE, callback: Callable[[], None]) -> None:
        """

                Add a Win32 handle to the event loop.
        
        """
        def ready() -> None:
            """
             Tell the callback that input's ready.

            """
        def wait() -> None:
            """
             Wait until either the handle becomes ready, or the remove event
             has been set.

            """
    def remove_win32_handle(self, handle: HANDLE) -> Optional[Callable[[], None]]:
        """

                Remove a Win32 handle from the event loop.
                Return either the registered handler or `None`.
        
        """
def attach_win32_input(input: _Win32InputBase, callback: Callable[[], None]):
    """

        Context manager that makes this input active in the current event loop.

        :param input: :class:`~prompt_toolkit.input.Input` object.
        :param input_ready_callback: Called when the input is ready to read.
    
    """
def detach_win32_input(input: _Win32InputBase):
    """
    Invalid handle.
    """
def raw_mode:
    """

        ::

            with raw_mode(stdin):
                ''' the windows terminal is now in 'raw' mode. '''

        The ``fileno`` attribute is ignored. This is to be compatible with the
        `raw_input` method of `.vt100_input`.
    
    """
    def __init__(self, fileno=None):
        """
         Remember original mode.

        """
    def _patch(self) -> None:
        """
         Set raw

        """
    def __exit__(self, *a: object) -> None:
        """
         Restore original mode

        """
def cooked_mode(raw_mode):
    """

        ::

            with cooked_mode(stdin):
                ''' The pseudo-terminal stdin is now used in cooked mode. '''
    
    """
    def _patch(self) -> None:
        """
         Set cooked.

        """
