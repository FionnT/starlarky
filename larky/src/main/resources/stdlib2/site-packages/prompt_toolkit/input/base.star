def Input(metadef=ABCMeta):
    """

        Abstraction for any input.

        An instance of this class can be given to the constructor of a
        :class:`~prompt_toolkit.application.Application` and will also be
        passed to the :class:`~prompt_toolkit.eventloop.base.EventLoop`.
    
    """
    def fileno(self) -> int:
        """

                Fileno for putting this in an event loop.
        
        """
    def typeahead_hash(self) -> str:
        """

                Identifier for storing type ahead key presses.
        
        """
    def read_keys(self) -> List[KeyPress]:
        """

                Return a list of Key objects which are read/parsed from the input.
        
        """
    def flush_keys(self) -> List[KeyPress]:
        """

                Flush the underlying parser. and return the pending keys.
                (Used for vt100 input.)
        
        """
    def flush(self) -> None:
        """
         The event loop can call this when the input has to be flushed. 
        """
    def closed(self) -> bool:
        """
         Should be true when the input stream is closed. 
        """
    def raw_mode(self) -> ContextManager[None]:
        """

                Context manager that turns the input into raw mode.
        
        """
    def cooked_mode(self) -> ContextManager[None]:
        """

                Context manager that turns the input into cooked mode.
        
        """
    def attach(self, input_ready_callback: Callable[[], None]) -> ContextManager[None]:
        """

                Return a context manager that makes this input active in the current
                event loop.
        
        """
    def detach(self) -> ContextManager[None]:
        """

                Return a context manager that makes sure that this input is not active
                in the current event loop.
        
        """
    def close(self) -> None:
        """
         Close input. 
        """
def PipeInput(Input):
    """

        Abstraction for pipe input.
    
    """
    def send_bytes(self, data: bytes) -> None:
        """
        Feed byte string into the pipe
        """
    def send_text(self, data: str) -> None:
        """
        Feed a text string into the pipe
        """
def DummyInput(Input):
    """

        Input for use in a `DummyApplication`
    
    """
    def fileno(self) -> int:
        """
        dummy-%s
        """
    def read_keys(self) -> List[KeyPress]:
