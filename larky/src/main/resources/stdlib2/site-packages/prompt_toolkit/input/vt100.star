def Vt100Input(Input):
    """

        Vt100 input for Posix systems.
        (This uses a posix file descriptor that can be registered in the event loop.)
    
    """
    def __init__(self, stdin: TextIO) -> None:
        """
         Test whether the given input object has a file descriptor.
         (Idle reports stdin to be a TTY, but fileno() is not implemented.)

        """
    def attach(self, input_ready_callback: Callable[[], None]) -> ContextManager[None]:
        """

                Return a context manager that makes this input active in the current
                event loop.
        
        """
    def detach(self) -> ContextManager[None]:
        """

                Return a context manager that makes sure that this input is not active
                in the current event loop.
        
        """
    def read_keys(self) -> List[KeyPress]:
        """
         Read list of KeyPress. 
        """
    def flush_keys(self) -> List[KeyPress]:
        """

                Flush pending keys and return them.
                (Used for flushing the 'escape' key.)
        
        """
    def closed(self) -> bool:
        """
        fd-%s
        """
2021-03-02 20:51:34,694 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:34,695 : INFO : tokenize_signature : --> do i ever get here?
def _attached_input(
    input: Vt100Input, callback: Callable[[], None]
) -> Generator[None, None, None]:
    """

        Context manager that makes this input active in the current event loop.

        :param input: :class:`~prompt_toolkit.input.Input` object.
        :param callback: Called when the input is ready to read.
    
    """
def _detached_input(input: Vt100Input) -> Generator[None, None, None]:
    """

        ::

            with raw_mode(stdin):
                ''' the pseudo-terminal stdin is now used in raw mode '''

        We ignore errors when executing `tcgetattr` fails.
    
    """
    def __init__(self, fileno: int) -> None:
        """
         Ignore attribute errors.

        """
    def __enter__(self) -> None:
        """
         NOTE: On os X systems, using pty.setraw() fails. Therefor we are using this:

        """
    def _patch_lflag(cls, attrs):
        """
         Disable XON/XOFF flow control on output and input.
         (Don't capture Ctrl-S and Ctrl-Q.)
         Like executing: "stty -ixon.

        """
    def __exit__(self, *a: object) -> None:
        """
         # Put the terminal in application mode.
         self._stdout.write('\x1b[?1h')



        """
def cooked_mode(raw_mode):
    """

        The opposite of ``raw_mode``, used when we need cooked mode inside a
        `raw_mode` block.  Used in `Application.run_in_terminal`.::

            with cooked_mode(stdin):
                ''' the pseudo-terminal stdin is now used in cooked mode. '''
    
    """
    def _patch_lflag(cls, attrs):
        """
         Turn the ICRNL flag back on. (Without this, calling `input()` in
         run_in_terminal doesn't work and displays ^M instead. Ptpython
         evaluates commands using `run_in_terminal`, so it's important that
         they translate ^M back into ^J.)

        """
