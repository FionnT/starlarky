def Win32PipeInput(_Win32InputBase, PipeInput):
    """

        This is an input pipe that works on Windows.
        Text or bytes can be feed into the pipe, and key strokes can be read from
        the pipe. This is useful if we want to send the input programmatically into
        the application. Mostly useful for unit testing.

        Notice that even though it's Windows, we use vt100 escape sequences over
        the pipe.

        Usage::

            input = Win32PipeInput()
            input.send_text('inputdata')
    
    """
    def __init__(self) -> None:
        """
         Event (handle) for registering this input in the event loop.
         This event is set when there is data available to read from the pipe.
         Note: We use this approach instead of using a regular pipe, like
               returned from `os.pipe()`, because making such a regular pipe
               non-blocking is tricky and this works really well.

        """
    def closed(self) -> bool:
        """

                The windows pipe doesn't depend on the file handle.
        
        """
    def handle(self):
        """
         The handle used for registering this pipe in the event loop. 
        """
    def attach(self, input_ready_callback: Callable) -> ContextManager[None]:
        """

                Return a context manager that makes this input active in the current
                event loop.
        
        """
    def detach(self) -> ContextManager[None]:
        """

                Return a context manager that makes sure that this input is not active
                in the current event loop.
        
        """
    def read_keys(self) -> List[KeyPress]:
        """
         Read list of KeyPress. 
        """
    def flush_keys(self) -> List[KeyPress]:
        """

                Flush pending keys and return them.
                (Used for flushing the 'escape' key.)
        
        """
    def send_bytes(self, data: bytes) -> None:
        """
         Send bytes to the input. 
        """
    def send_text(self, text: str) -> None:
        """
         Send text to the input. 
        """
    def raw_mode(self) -> ContextManager[None]:
        """
         Close pipe handles. 
        """
    def typeahead_hash(self) -> str:
        """

                This needs to be unique for every `PipeInput`.
        
        """
