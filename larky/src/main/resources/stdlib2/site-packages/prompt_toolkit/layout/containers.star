def Container(metadef=ABCMeta):
    """

        Base class for user interface layout.
    
    """
    def reset(self) -> None:
        """

                Reset the state of this container and all the children.
                (E.g. reset scroll offsets, etc...)
        
        """
    def preferred_width(self, max_available_width: int) -> Dimension:
        """

                Return a :class:`~prompt_toolkit.layout.Dimension` that represents the
                desired width for this container.
        
        """
    def preferred_height(self, width: int, max_available_height: int) -> Dimension:
        """

                Return a :class:`~prompt_toolkit.layout.Dimension` that represents the
                desired height for this container.
        
        """
2021-03-02 20:51:36,108 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:36,108 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:36,108 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:36,108 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:36,109 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:36,109 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:36,109 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:36,109 : INFO : tokenize_signature : --> do i ever get here?
    def write_to_screen(
        self,
        screen: Screen,
        mouse_handlers: MouseHandlers,
        write_position: WritePosition,
        parent_style: str,
        erase_bg: bool,
        z_index: Optional[int],
    ) -> None:
        """

                Write the actual content to the screen.

                :param screen: :class:`~prompt_toolkit.layout.screen.Screen`
                :param mouse_handlers: :class:`~prompt_toolkit.layout.mouse_handlers.MouseHandlers`.
                :param parent_style: Style string to pass to the :class:`.Window`
                    object. This will be applied to all content of the windows.
                    :class:`.VSplit` and :class:`.HSplit` can use it to pass their
                    style down to the windows that they contain.
                :param z_index: Used for propagating z_index from parent to child.
        
        """
    def is_modal(self) -> bool:
        """

                When this container is modal, key bindings from parent containers are
                not taken into account if a user control in this container is focused.
        
        """
    def get_key_bindings(self) -> Optional[KeyBindingsBase]:
        """

                Returns a :class:`.KeyBindings` object. These bindings become active when any
                user control in this container has the focus, except if any containers
                between this container and the focused user control is modal.
        
        """
    def get_children(self) -> List["Container"]:
        """

                Return the list of child :class:`.Container` objects.
        
        """
    def MagicContainer(Protocol):
    """

            Any object that implements ``__pt_container__`` represents a container.
        
    """
        def __pt_container__(self) -> "AnyContainer":
            """
            MagicContainer
            """
def _window_too_small() -> "Window":
    """
     Create a `Window` that displays the 'Window too small' text. 
    """
def VerticalAlign(Enum):
    """
     Alignment for `HSplit`. 
    """
def HorizontalAlign(Enum):
    """
     Alignment for `VSplit`. 
    """
def _Split(Container):
    """

        The common parts of `VSplit` and `HSplit`.
    
    """
2021-03-02 20:51:36,110 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:36,110 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:36,110 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:36,110 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:36,111 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:36,111 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:36,111 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:36,111 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:36,111 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:36,111 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:36,111 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:36,111 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:36,111 : INFO : tokenize_signature : --> do i ever get here?
    def __init__(
        self,
        children: Sequence[AnyContainer],
        window_too_small: Optional[Container] = None,
        padding: AnyDimension = Dimension.exact(0),
        padding_char: Optional[str] = None,
        padding_style: str = "",
        width: AnyDimension = None,
        height: AnyDimension = None,
        z_index: Optional[int] = None,
        modal: bool = False,
        key_bindings: Optional[KeyBindingsBase] = None,
        style: Union[str, Callable[[], str]] = "",
    ) -> None:
        """

            Several layouts, one stacked above/under the other. ::

                +--------------------+
                |                    |
                +--------------------+
                |                    |
                +--------------------+

            By default, this doesn't display a horizontal line between the children,
            but if this is something you need, then create a HSplit as follows::

                HSplit(children=[ ... ], padding_char='-',
                       padding=1, padding_style='#ffff00')

            :param children: List of child :class:`.Container` objects.
            :param window_too_small: A :class:`.Container` object that is displayed if
                there is not enough space for all the children. By default, this is a
                "Window too small" message.
            :param align: `VerticalAlign` value.
            :param width: When given, use this width instead of looking at the children.
            :param height: When given, use this height instead of looking at the children.
            :param z_index: (int or None) When specified, this can be used to bring
                element in front of floating elements.  `None` means: inherit from parent.
            :param style: A style string.
            :param modal: ``True`` or ``False``.
            :param key_bindings: ``None`` or a :class:`.KeyBindings` object.

            :param padding: (`Dimension` or int), size to be used for the padding.
            :param padding_char: Character to be used for filling in the padding.
            :param padding_style: Style to applied to the padding.
    
        """
2021-03-02 20:51:36,112 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:36,112 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:36,113 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:36,113 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:36,113 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:36,113 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:36,113 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:36,113 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:36,113 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:36,113 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:36,113 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:36,113 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:36,113 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:36,114 : INFO : tokenize_signature : --> do i ever get here?
    def __init__(
        self,
        children: Sequence[AnyContainer],
        window_too_small: Optional[Container] = None,
        align: VerticalAlign = VerticalAlign.JUSTIFY,
        padding: AnyDimension = 0,
        padding_char: Optional[str] = None,
        padding_style: str = "",
        width: AnyDimension = None,
        height: AnyDimension = None,
        z_index: Optional[int] = None,
        modal: bool = False,
        key_bindings: Optional[KeyBindingsBase] = None,
        style: Union[str, Callable[[], str]] = "",
    ) -> None:
        """
         Dummy window.
        """
    def preferred_width(self, max_available_width: int) -> Dimension:
        """

                List of child objects, including padding.
        
        """
        def get() -> List[Container]:
            """
             Padding Top.

            """
2021-03-02 20:51:36,115 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:36,115 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:36,115 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:36,116 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:36,116 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:36,116 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:36,116 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:36,116 : INFO : tokenize_signature : --> do i ever get here?
    def write_to_screen(
        self,
        screen: Screen,
        mouse_handlers: MouseHandlers,
        write_position: WritePosition,
        parent_style: str,
        erase_bg: bool,
        z_index: Optional[int],
    ) -> None:
        """

                Render the prompt to a `Screen` instance.

                :param screen: The :class:`~prompt_toolkit.layout.screen.Screen` class
                    to which the output has to be written.
        
        """
    def _divide_heights(self, write_position: WritePosition) -> Optional[List[int]]:
        """

                Return the heights for all rows.
                Or None when there is not enough space.
        
        """
def VSplit(_Split):
    """

        Several layouts, one stacked left/right of the other. ::

            +---------+----------+
            |         |          |
            |         |          |
            +---------+----------+

        By default, this doesn't display a vertical line between the children, but
        if this is something you need, then create a HSplit as follows::

            VSplit(children=[ ... ], padding_char='|',
                   padding=1, padding_style='#ffff00')

        :param children: List of child :class:`.Container` objects.
        :param window_too_small: A :class:`.Container` object that is displayed if
            there is not enough space for all the children. By default, this is a
            "Window too small" message.
        :param align: `HorizontalAlign` value.
        :param width: When given, use this width instead of looking at the children.
        :param height: When given, use this height instead of looking at the children.
        :param z_index: (int or None) When specified, this can be used to bring
            element in front of floating elements.  `None` means: inherit from parent.
        :param style: A style string.
        :param modal: ``True`` or ``False``.
        :param key_bindings: ``None`` or a :class:`.KeyBindings` object.

        :param padding: (`Dimension` or int), size to be used for the padding.
        :param padding_char: Character to be used for filling in the padding.
        :param padding_style: Style to applied to the padding.
    
    """
2021-03-02 20:51:36,118 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:36,118 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:36,118 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:36,118 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:36,118 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:36,118 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:36,118 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:36,118 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:36,119 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:36,119 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:36,119 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:36,119 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:36,119 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:36,119 : INFO : tokenize_signature : --> do i ever get here?
    def __init__(
        self,
        children: Sequence[AnyContainer],
        window_too_small: Optional[Container] = None,
        align: HorizontalAlign = HorizontalAlign.JUSTIFY,
        padding: AnyDimension = 0,
        padding_char: Optional[str] = None,
        padding_style: str = "",
        width: AnyDimension = None,
        height: AnyDimension = None,
        z_index: Optional[int] = None,
        modal: bool = False,
        key_bindings: Optional[KeyBindingsBase] = None,
        style: Union[str, Callable[[], str]] = "",
    ) -> None:
        """
         Dummy window.
        """
    def preferred_width(self, max_available_width: int) -> Dimension:
        """
         At the point where we want to calculate the heights, the widths have
         already been decided. So we can trust `width` to be the actual
         `width` that's going to be used for the rendering. So,
         `divide_widths` is supposed to use all of the available width.
         Using only the `preferred` width caused a bug where the reported
         height was more than required. (we had a `BufferControl` which did
         wrap lines because of the smaller width returned by `_divide_widths`.


        """
    def reset(self) -> None:
        """

                List of child objects, including padding.
        
        """
        def get() -> List[Container]:
            """
             Padding left.

            """
    def _divide_widths(self, width: int) -> Optional[List[int]]:
        """

                Return the widths for all columns.
                Or None when there is not enough space.
        
        """
2021-03-02 20:51:36,122 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:36,122 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:36,122 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:36,122 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:36,122 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:36,122 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:36,122 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:36,122 : INFO : tokenize_signature : --> do i ever get here?
    def write_to_screen(
        self,
        screen: Screen,
        mouse_handlers: MouseHandlers,
        write_position: WritePosition,
        parent_style: str,
        erase_bg: bool,
        z_index: Optional[int],
    ) -> None:
        """

                Render the prompt to a `Screen` instance.

                :param screen: The :class:`~prompt_toolkit.layout.screen.Screen` class
                    to which the output has to be written.
        
        """
def FloatContainer(Container):
    """

        Container which can contain another container for the background, as well
        as a list of floating containers on top of it.

        Example Usage::

            FloatContainer(content=Window(...),
                           floats=[
                               Float(xcursor=True,
                                    ycursor=True,
                                    layout=CompletionMenu(...))
                           ])

        :param z_index: (int or None) When specified, this can be used to bring
            element in front of floating elements.  `None` means: inherit from parent.
            This is the z_index for the whole `Float` container as a whole.
    
    """
2021-03-02 20:51:36,124 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:36,124 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:36,124 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:36,124 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:36,124 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:36,124 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:36,124 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:36,124 : INFO : tokenize_signature : --> do i ever get here?
    def __init__(
        self,
        content: AnyContainer,
        floats: List["Float"],
        modal: bool = False,
        key_bindings: Optional[KeyBindingsBase] = None,
        style: Union[str, Callable[[], str]] = "",
        z_index: Optional[int] = None,
    ) -> None:
        """

                Return the preferred height of the float container.
                (We don't care about the height of the floats, they should always fit
                into the dimensions provided by the container.)
        
        """
2021-03-02 20:51:36,125 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:36,125 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:36,125 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:36,125 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:36,125 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:36,125 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:36,125 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:36,125 : INFO : tokenize_signature : --> do i ever get here?
    def write_to_screen(
        self,
        screen: Screen,
        mouse_handlers: MouseHandlers,
        write_position: WritePosition,
        parent_style: str,
        erase_bg: bool,
        z_index: Optional[int],
    ) -> None:
        """
 
        """
2021-03-02 20:51:36,126 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:36,126 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:36,126 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:36,126 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:36,126 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:36,127 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:36,127 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:36,127 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:36,127 : INFO : tokenize_signature : --> do i ever get here?
    def _draw_float(
        self,
        fl: "Float",
        screen: Screen,
        mouse_handlers: MouseHandlers,
        write_position: WritePosition,
        style: str,
        erase_bg: bool,
        z_index: Optional[int],
    ) -> None:
        """
         Draw a single Float. 
        """
    def _area_is_empty(self, screen: Screen, write_position: WritePosition) -> bool:
        """

                Return True when the area below the write position is still empty.
                (For floats that should not hide content underneath.)
        
        """
    def is_modal(self) -> bool:
        """

            Float for use in a :class:`.FloatContainer`.
            Except for the `content` parameter, all other options are optional.

            :param content: :class:`.Container` instance.

            :param width: :class:`.Dimension` or callable which returns a :class:`.Dimension`.
            :param height: :class:`.Dimension` or callable which returns a :class:`.Dimension`.

            :param left: Distance to the left edge of the :class:`.FloatContainer`.
            :param right: Distance to the right edge of the :class:`.FloatContainer`.
            :param top: Distance to the top of the :class:`.FloatContainer`.
            :param bottom: Distance to the bottom of the :class:`.FloatContainer`.

            :param attach_to_window: Attach to the cursor from this window, instead of
                the current window.
            :param hide_when_covering_content: Hide the float when it covers content underneath.
            :param allow_cover_cursor: When `False`, make sure to display the float
                below the cursor. Not on top of the indicated position.
            :param z_index: Z-index position. For a Float, this needs to be at least
                one. It is relative to the z_index of the parent container.
            :param transparent: :class:`.Filter` indicating whether this float needs to be
                drawn transparently.
    
        """
2021-03-02 20:51:36,131 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:36,131 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:36,131 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:36,131 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:36,132 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:36,132 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:36,132 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:36,132 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:36,132 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:36,132 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:36,132 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:36,132 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:36,132 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:36,132 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:36,132 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:36,133 : INFO : tokenize_signature : --> do i ever get here?
    def __init__(
        self,
        content: AnyContainer,
        top: Optional[int] = None,
        right: Optional[int] = None,
        bottom: Optional[int] = None,
        left: Optional[int] = None,
        width: Optional[Union[int, Callable[[], int]]] = None,
        height: Optional[Union[int, Callable[[], int]]] = None,
        xcursor: bool = False,
        ycursor: bool = False,
        attach_to_window: Optional[AnyContainer] = None,
        hide_when_covering_content: bool = False,
        allow_cover_cursor: bool = False,
        z_index: int = 1,
        transparent: bool = False,
    ):
        """
        Float(content=%r)
        """
def WindowRenderInfo:
    """

        Render information for the last render time of this control.
        It stores mapping information between the input buffers (in case of a
        :class:`~prompt_toolkit.layout.controls.BufferControl`) and the actual
        render position on the output screen.

        (Could be used for implementation of the Vi 'H' and 'L' key bindings as
        well as implementing mouse support.)

        :param ui_content: The original :class:`.UIContent` instance that contains
            the whole input, without clipping. (ui_content)
        :param horizontal_scroll: The horizontal scroll of the :class:`.Window` instance.
        :param vertical_scroll: The vertical scroll of the :class:`.Window` instance.
        :param window_width: The width of the window that displays the content,
            without the margins.
        :param window_height: The height of the window that displays the content.
        :param configured_scroll_offsets: The scroll offsets as configured for the
            :class:`Window` instance.
        :param visible_line_to_row_col: Mapping that maps the row numbers on the
            displayed screen (starting from zero for the first visible line) to
            (row, col) tuples pointing to the row and column of the :class:`.UIContent`.
        :param rowcol_to_yx: Mapping that maps (row, column) tuples representing
            coordinates of the :class:`UIContent` to (y, x) absolute coordinates at
            the rendered screen.
    
    """
2021-03-02 20:51:36,134 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:36,134 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:36,134 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:36,134 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:36,134 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:36,134 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:36,135 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:36,135 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:36,135 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:36,135 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:36,135 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:36,135 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:36,135 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:36,135 : INFO : tokenize_signature : --> do i ever get here?
    def __init__(
        self,
        window: "Window",
        ui_content: UIContent,
        horizontal_scroll: int,
        vertical_scroll: int,
        window_width: int,
        window_height: int,
        configured_scroll_offsets: "ScrollOffsets",
        visible_line_to_row_col: Dict[int, Tuple[int, int]],
        rowcol_to_yx: Dict[Tuple[int, int], Tuple[int, int]],
        x_offset: int,
        y_offset: int,
        wrap_lines: bool,
    ) -> None:
        """
         Width without margins.
        """
    def visible_line_to_input_line(self) -> Dict[int, int]:
        """

                Return the cursor position coordinates, relative to the left/top corner
                of the rendered screen.
        
        """
    def applied_scroll_offsets(self) -> "ScrollOffsets":
        """

                Return a :class:`.ScrollOffsets` instance that indicates the actual
                offset. This can be less than or equal to what's configured. E.g, when
                the cursor is completely at the top, the top offset will be zero rather
                than what's configured.
        
        """
    def displayed_lines(self) -> List[int]:
        """

                List of all the visible rows. (Line numbers of the input buffer.)
                The last line may not be entirely visible.
        
        """
    def input_line_to_visible_line(self) -> Dict[int, int]:
        """

                Return the dictionary mapping the line numbers of the input buffer to
                the lines of the screen. When a line spans several rows at the screen,
                the first row appears in the dictionary.
        
        """
    def first_visible_line(self, after_scroll_offset: bool = False) -> int:
        """

                Return the line number (0 based) of the input document that corresponds
                with the first visible line.
        
        """
    def last_visible_line(self, before_scroll_offset: bool = False) -> int:
        """

                Like `first_visible_line`, but for the last visible line.
        
        """
2021-03-02 20:51:36,138 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:36,138 : INFO : tokenize_signature : --> do i ever get here?
    def center_visible_line(
        self, before_scroll_offset: bool = False, after_scroll_offset: bool = False
    ) -> int:
        """

                Like `first_visible_line`, but for the center visible line.
        
        """
    def content_height(self) -> int:
        """

                The full height of the user control.
        
        """
    def full_height_visible(self) -> bool:
        """

                True when the full height is visible (There is no vertical scroll.)
        
        """
    def top_visible(self) -> bool:
        """

                True when the top of the buffer is visible.
        
        """
    def bottom_visible(self) -> bool:
        """

                True when the bottom of the buffer is visible.
        
        """
    def vertical_scroll_percentage(self) -> int:
        """

                Vertical scroll as a percentage. (0 means: the top is visible,
                100 means: the bottom is visible.)
        
        """
    def get_height_for_line(self, lineno: int) -> int:
        """

                Return the height of the given line.
                (The height that it would take, if this line became visible.)
        
        """
def ScrollOffsets:
    """

        Scroll offsets for the :class:`.Window` class.

        Note that left/right offsets only make sense if line wrapping is disabled.
    
    """
2021-03-02 20:51:36,139 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:36,139 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:36,139 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:36,139 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:36,139 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:36,140 : INFO : tokenize_signature : --> do i ever get here?
    def __init__(
        self,
        top: Union[int, Callable[[], int]] = 0,
        bottom: Union[int, Callable[[], int]] = 0,
        left: Union[int, Callable[[], int]] = 0,
        right: Union[int, Callable[[], int]] = 0,
    ) -> None:
        """
        ScrollOffsets(top=%r, bottom=%r, left=%r, right=%r)
        """
def ColorColumn:
    """

        Column for a :class:`.Window` to be colored.
    
    """
    def __init__(self, position: int, style: str = "class:color-column") -> None:
        """

            Alignment of the Window content.

            Note that this is different from `HorizontalAlign` and `VerticalAlign`,
            which are used for the alignment of the child containers in respectively
            `VSplit` and `HSplit`.
    
        """
def Window(Container):
    """

        Container that holds a control.

        :param content: :class:`.UIControl` instance.
        :param width: :class:`.Dimension` instance or callable.
        :param height: :class:`.Dimension` instance or callable.
        :param z_index: When specified, this can be used to bring element in front
            of floating elements.
        :param dont_extend_width: When `True`, don't take up more width then the
                                  preferred width reported by the control.
        :param dont_extend_height: When `True`, don't take up more width then the
                                   preferred height reported by the control.
        :param ignore_content_width: A `bool` or :class:`.Filter` instance. Ignore
            the :class:`.UIContent` width when calculating the dimensions.
        :param ignore_content_height: A `bool` or :class:`.Filter` instance. Ignore
            the :class:`.UIContent` height when calculating the dimensions.
        :param left_margins: A list of :class:`.Margin` instance to be displayed on
            the left. For instance: :class:`~prompt_toolkit.layout.NumberedMargin`
            can be one of them in order to show line numbers.
        :param right_margins: Like `left_margins`, but on the other side.
        :param scroll_offsets: :class:`.ScrollOffsets` instance, representing the
            preferred amount of lines/columns to be always visible before/after the
            cursor. When both top and bottom are a very high number, the cursor
            will be centered vertically most of the time.
        :param allow_scroll_beyond_bottom: A `bool` or
            :class:`.Filter` instance. When True, allow scrolling so far, that the
            top part of the content is not visible anymore, while there is still
            empty space available at the bottom of the window. In the Vi editor for
            instance, this is possible. You will see tildes while the top part of
            the body is hidden.
        :param wrap_lines: A `bool` or :class:`.Filter` instance. When True, don't
            scroll horizontally, but wrap lines instead.
        :param get_vertical_scroll: Callable that takes this window
            instance as input and returns a preferred vertical scroll.
            (When this is `None`, the scroll is only determined by the last and
            current cursor position.)
        :param get_horizontal_scroll: Callable that takes this window
            instance as input and returns a preferred vertical scroll.
        :param always_hide_cursor: A `bool` or
            :class:`.Filter` instance. When True, never display the cursor, even
            when the user control specifies a cursor position.
        :param cursorline: A `bool` or :class:`.Filter` instance. When True,
            display a cursorline.
        :param cursorcolumn: A `bool` or :class:`.Filter` instance. When True,
            display a cursorcolumn.
        :param colorcolumns: A list of :class:`.ColorColumn` instances that
            describe the columns to be highlighted, or a callable that returns such
            a list.
        :param align: :class:`.WindowAlign` value or callable that returns an
            :class:`.WindowAlign` value. alignment of content.
        :param style: A style string. Style to be applied to all the cells in this
            window. (This can be a callable that returns a string.)
        :param char: (string) Character to be used for filling the background. This
            can also be a callable that returns a character.
        :param get_line_prefix: None or a callable that returns formatted text to
            be inserted before a line. It takes a line number (int) and a
            wrap_count and returns formatted text. This can be used for
            implementation of line continuations, things like Vim "breakindent" and
            so on.
    
    """
2021-03-02 20:51:36,141 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:36,141 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:36,141 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:36,141 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:36,141 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:36,141 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:36,141 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:36,141 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:36,141 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:36,141 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:36,142 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:36,142 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:36,142 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:36,142 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:36,142 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:36,142 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:36,142 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:36,142 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:36,142 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:36,142 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:36,143 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:36,143 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:36,143 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:36,143 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:36,143 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:36,143 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:36,143 : INFO : tokenize_signature : --> do i ever get here?
    def __init__(
        self,
        content: Optional[UIControl] = None,
        width: AnyDimension = None,
        height: AnyDimension = None,
        z_index: Optional[int] = None,
        dont_extend_width: FilterOrBool = False,
        dont_extend_height: FilterOrBool = False,
        ignore_content_width: FilterOrBool = False,
        ignore_content_height: FilterOrBool = False,
        left_margins: Optional[Sequence[Margin]] = None,
        right_margins: Optional[Sequence[Margin]] = None,
        scroll_offsets: Optional[ScrollOffsets] = None,
        allow_scroll_beyond_bottom: FilterOrBool = False,
        wrap_lines: FilterOrBool = False,
        get_vertical_scroll: Optional[Callable[["Window"], int]] = None,
        get_horizontal_scroll: Optional[Callable[["Window"], int]] = None,
        always_hide_cursor: FilterOrBool = False,
        cursorline: FilterOrBool = False,
        cursorcolumn: FilterOrBool = False,
        colorcolumns: Union[
            None, List[ColorColumn], Callable[[], List[ColorColumn]]
        ] = None,
        align: Union[WindowAlign, Callable[[], WindowAlign]] = WindowAlign.LEFT,
        style: Union[str, Callable[[], str]] = "",
        char: Union[None, str, Callable[[], str]] = None,
        get_line_prefix: Optional[GetLinePrefixCallable] = None,
    ) -> None:
        """
         Cache for the screens generated by the margin.

        """
    def __repr__(self) -> str:
        """
        Window(content=%r)
        """
    def reset(self) -> None:
        """
        : Scrolling position of the main content.

        """
    def _get_margin_width(self, margin: Margin) -> int:
        """

                Return the width for this margin.
                (Calculate only once per render time.)
        
        """
        def get_ui_content() -> UIContent:
            """

                    Calculate and return the width of the margin (left + right).
        
            """
    def preferred_width(self, max_available_width: int) -> Dimension:
        """

                Calculate the preferred width for this window.
        
        """
        def preferred_content_width() -> Optional[int]:
            """
            Content width: is only calculated if no exact width for the
                        window was given.
            """
    def preferred_height(self, width: int, max_available_height: int) -> Dimension:
        """

                Calculate the preferred height for this window.
        
        """
        def preferred_content_height() -> Optional[int]:
            """
            Content height: is only calculated if no exact height for the
                        window was given.
            """
2021-03-02 20:51:36,146 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:36,146 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:36,147 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:36,147 : INFO : tokenize_signature : --> do i ever get here?
    def _merge_dimensions(
        dimension: Optional[Dimension],
        get_preferred: Callable[[], Optional[int]],
        dont_extend: bool = False,
    ) -> Dimension:
        """

                Take the Dimension from this `Window` class and the received preferred
                size from the `UIControl` and return a `Dimension` to report to the
                parent container.
        
        """
    def _get_ui_content(self, width: int, height: int) -> UIContent:
        """

                Create a `UIContent` instance.
        
        """
        def get_content() -> UIContent:
            """
             Return `False`, or the Digraph symbol to be used. 
            """
2021-03-02 20:51:36,148 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:36,148 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:36,148 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:36,148 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:36,148 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:36,148 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:36,149 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:36,149 : INFO : tokenize_signature : --> do i ever get here?
    def write_to_screen(
        self,
        screen: Screen,
        mouse_handlers: MouseHandlers,
        write_position: WritePosition,
        parent_style: str,
        erase_bg: bool,
        z_index: Optional[int],
    ) -> None:
        """

                Write window to screen. This renders the user control, the margins and
                copies everything over to the absolute position at the given screen.
        
        """
2021-03-02 20:51:36,149 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:36,149 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:36,149 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:36,149 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:36,149 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:36,149 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:36,149 : INFO : tokenize_signature : --> do i ever get here?
    def _write_to_screen_at_index(
        self,
        screen: Screen,
        mouse_handlers: MouseHandlers,
        write_position: WritePosition,
        parent_style: str,
        erase_bg: bool,
    ) -> None:
        """
         Don't bother writing invisible windows.
         (We save some time, but also avoid applying last-line styling.)

        """
        def mouse_handler(mouse_event: MouseEvent) -> None:
            """
            Wrapper around the mouse_handler of the `UIControl` that turns
                        screen coordinates into line coordinates.
            """
        def render_margin(m: Margin, width: int) -> UIContent:
            """
             Render margin. Return `Screen`. 
            """
2021-03-02 20:51:36,152 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:36,153 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:36,153 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:36,153 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:36,153 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:36,153 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:36,153 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:36,153 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:36,153 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:36,153 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:36,153 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:36,153 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:36,153 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:36,153 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:36,153 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:36,153 : INFO : tokenize_signature : --> do i ever get here?
    def _copy_body(
        self,
        ui_content: UIContent,
        new_screen: Screen,
        write_position: WritePosition,
        move_x: int,
        width: int,
        vertical_scroll: int = 0,
        horizontal_scroll: int = 0,
        wrap_lines: bool = False,
        highlight_lines: bool = False,
        vertical_scroll_2: int = 0,
        always_hide_cursor: bool = False,
        has_focus: bool = False,
        align: WindowAlign = WindowAlign.LEFT,
        get_line_prefix: Optional[Callable[[int, int], AnyFormattedText]] = None,
    ) -> Tuple[Dict[int, Tuple[int, int]], Dict[Tuple[int, int], Tuple[int, int]]]:
        """

                Copy the UIContent into the output screen.
                Return (visible_line_to_row_col, rowcol_to_yx) tuple.

                :param get_line_prefix: None or a callable that takes a line number
                    (int) and a wrap_count (int) and returns formatted text.
        
        """
2021-03-02 20:51:36,154 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:36,154 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:36,154 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:36,154 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:36,154 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:36,154 : INFO : tokenize_signature : --> do i ever get here?
        def copy_line(
            line: StyleAndTextTuples,
            lineno: int,
            x: int,
            y: int,
            is_input: bool = False,
        ) -> Tuple[int, int]:
            """

                        Copy over a single line to the output screen. This can wrap over
                        multiple lines in the output. It will call the prefix (prompt)
                        function before every line.
            
            """
        def copy() -> int:
            """
             Take the next line and copy it in the real screen.

            """
        def cursor_pos_to_screen_pos(row: int, col: int) -> Point:
            """
             Translate row/col from UIContent to real Screen coordinates. 
            """
2021-03-02 20:51:36,158 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:36,158 : INFO : tokenize_signature : --> do i ever get here?
    def _fill_bg(
        self, screen: Screen, write_position: WritePosition, erase_bg: bool
    ) -> None:
        """

                Erase/fill the background.
                (Useful for floats and when a `char` has been given.)
        
        """
2021-03-02 20:51:36,159 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:36,159 : INFO : tokenize_signature : --> do i ever get here?
    def _apply_style(
        self, new_screen: Screen, write_position: WritePosition, parent_style: str
    ) -> None:
        """
         Apply `self.style`.

        """
    def _highlight_digraph(self, new_screen: Screen) -> None:
        """

                When we are in Vi digraph mode, put a question mark underneath the
                cursor.
        
        """
    def _show_key_processor_key_buffer(self, new_screen: Screen) -> None:
        """

                When the user is typing a key binding that consists of several keys,
                display the last pressed key if the user is in insert mode and the key
                is meaningful to be displayed.
                E.g. Some people want to bind 'jj' to escape in Vi insert mode. But the
                     first 'j' needs to be displayed in order to get some feedback.
        
        """
2021-03-02 20:51:36,160 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:36,160 : INFO : tokenize_signature : --> do i ever get here?
    def _highlight_cursorlines(
        self, new_screen: Screen, cpos: Point, x: int, y: int, width: int, height: int
    ) -> None:
        """

                Highlight cursor row/column.
        
        """
2021-03-02 20:51:36,161 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:36,161 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:36,161 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:36,161 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:36,162 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:36,162 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:36,162 : INFO : tokenize_signature : --> do i ever get here?
    def _copy_margin(
        self,
        margin_content: UIContent,
        new_screen: Screen,
        write_position: WritePosition,
        move_x: int,
        width: int,
    ) -> None:
        """

                Copy characters from the margin screen to the real screen.
        
        """
    def _scroll(self, ui_content: UIContent, width: int, height: int) -> None:
        """

                Scroll body. Ensure that the cursor is visible.
        
        """
2021-03-02 20:51:36,162 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:36,163 : INFO : tokenize_signature : --> do i ever get here?
    def _scroll_when_linewrapping(
        self, ui_content: UIContent, width: int, height: int
    ) -> None:
        """

                Scroll to make sure the cursor position is visible and that we maintain
                the requested scroll offset.

                Set `self.horizontal_scroll/vertical_scroll`.
        
        """
        def get_line_height(lineno: int) -> int:
            """
             When there is no space, reset `vertical_scroll_2` to zero and abort.
             This can happen if the margin is bigger than the window width.
             Otherwise the text height will become "infinite" (a big number) and
             the copy_line will spend a huge amount of iterations trying to render
             nothing.

            """
        def get_min_vertical_scroll() -> int:
            """
             Make sure that the cursor line is not below the bottom.
             (Calculate how many lines can be shown between the cursor and the .)

            """
        def get_max_vertical_scroll() -> int:
            """
             Make sure that the cursor line is not above the top.

            """
        def get_topmost_visible() -> int:
            """

                        Calculate the upper most line that can be visible, while the bottom
                        is still visible. We should not allow scroll more than this if
                        `allow_scroll_beyond_bottom` is false.
            
            """
2021-03-02 20:51:36,165 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:36,165 : INFO : tokenize_signature : --> do i ever get here?
    def _scroll_without_linewrapping(
        self, ui_content: UIContent, width: int, height: int
    ) -> None:
        """

                Scroll to make sure the cursor position is visible and that we maintain
                the requested scroll offset.

                Set `self.horizontal_scroll/vertical_scroll`.
        
        """
2021-03-02 20:51:36,166 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:36,166 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:36,166 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:36,166 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:36,166 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:36,166 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:36,166 : INFO : tokenize_signature : --> do i ever get here?
        def do_scroll(
            current_scroll: int,
            scroll_offset_start: int,
            scroll_offset_end: int,
            cursor_pos: int,
            window_size: int,
            content_size: int,
        ) -> int:
            """
             Scrolling algorithm. Used for both horizontal and vertical scrolling. 
            """
    def _mouse_handler(self, mouse_event: MouseEvent) -> None:
        """

                Mouse handler. Called when the UI control doesn't handle this
                particular event.
        
        """
    def _scroll_down(self) -> None:
        """
         Scroll window down. 
        """
    def _scroll_up(self) -> None:
        """
         Scroll window up. 
        """
    def get_key_bindings(self) -> Optional[KeyBindingsBase]:
        """

            Wrapper around any other container that can change the visibility. The
            received `filter` determines whether the given container should be
            displayed or not.

            :param content: :class:`.Container` instance.
            :param filter: :class:`.Filter` instance.
    
        """
    def __init__(self, content: AnyContainer, filter: FilterOrBool) -> None:
        """
        ConditionalContainer(%r, filter=%r)
        """
    def reset(self) -> None:
        """

            Container class that dynamically returns any Container.

            :param get_container: Callable that returns a :class:`.Container` instance
                or any widget with a ``__pt_container__`` method.
    
        """
    def __init__(self, get_container: Callable[[], AnyContainer]) -> None:
        """

                Return the current container object.

                We call `to_container`, because `get_container` can also return a
                widget with a ``__pt_container__`` method.
        
        """
    def reset(self) -> None:
        """
         Key bindings will be collected when `layout.walk()` finds the child
         container.

        """
    def get_children(self) -> List[Container]:
        """
         Here we have to return the current active container itself, not its
         children. Otherwise, we run into issues where `layout.walk()` will
         never see an object of type `Window` if this contains a window. We
         can't/shouldn't proxy the "isinstance" check.

        """
def to_container(container: AnyContainer) -> Container:
    """

        Make sure that the given object is a :class:`.Container`.
    
    """
def to_window(container: AnyContainer) -> Window:
    """

        Make sure that the given argument is a :class:`.Window`.
    
    """
def is_container(value: object) -> bool:
    """

        Checks whether the given value is a container object
        (for use in assert statements).
    
    """
