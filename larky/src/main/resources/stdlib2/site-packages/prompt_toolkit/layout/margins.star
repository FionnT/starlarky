def Margin(metadef=ABCMeta):
    """

        Base interface for a margin.
    
    """
    def get_width(self, get_ui_content: Callable[[], UIContent]) -> int:
        """

                Return the width that this margin is going to consume.

                :param get_ui_content: Callable that asks the user control to create
                    a :class:`.UIContent` instance. This can be used for instance to
                    obtain the number of lines.
        
        """
2021-03-02 20:51:36,680 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:36,680 : INFO : tokenize_signature : --> do i ever get here?
    def create_margin(
        self, window_render_info: "WindowRenderInfo", width: int, height: int
    ) -> StyleAndTextTuples:
        """

                Creates a margin.
                This should return a list of (style_str, text) tuples.

                :param window_render_info:
                    :class:`~prompt_toolkit.layout.containers.WindowRenderInfo`
                    instance, generated after rendering and copying the visible part of
                    the :class:`~prompt_toolkit.layout.controls.UIControl` into the
                    :class:`~prompt_toolkit.layout.containers.Window`.
                :param width: The width that's available for this margin. (As reported
                    by :meth:`.get_width`.)
                :param height: The height that's available for this margin. (The height
                    of the :class:`~prompt_toolkit.layout.containers.Window`.)
        
        """
def NumberedMargin(Margin):
    """

        Margin that displays the line numbers.

        :param relative: Number relative to the cursor position. Similar to the Vi
                         'relativenumber' option.
        :param display_tildes: Display tildes after the end of the document, just
            like Vi does.
    
    """
2021-03-02 20:51:36,680 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:36,680 : INFO : tokenize_signature : --> do i ever get here?
    def __init__(
        self, relative: FilterOrBool = False, display_tildes: FilterOrBool = False
    ) -> None:
        """
        %s
        """
2021-03-02 20:51:36,681 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:36,681 : INFO : tokenize_signature : --> do i ever get here?
    def create_margin(
        self, window_render_info: "WindowRenderInfo", width: int, height: int
    ) -> StyleAndTextTuples:
        """
        class:line-number
        """
def ConditionalMargin(Margin):
    """

        Wrapper around other :class:`.Margin` classes to show/hide them.
    
    """
    def __init__(self, margin: Margin, filter: FilterOrBool) -> None:
        """
        WindowRenderInfo
        """
def ScrollbarMargin(Margin):
    """

        Margin displaying a scrollbar.

        :param display_arrows: Display scroll up/down arrows.
    
    """
2021-03-02 20:51:36,683 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:36,683 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:36,683 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:36,683 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:36,683 : INFO : tokenize_signature : --> do i ever get here?
    def __init__(
        self,
        display_arrows: FilterOrBool = False,
        up_arrow_symbol: str = "^",
        down_arrow_symbol: str = "v",
    ) -> None:
        """
        WindowRenderInfo
        """
            def is_scroll_button(row: int) -> bool:
                """
                 True if we should display a button on this row. 
                """
def PromptMargin(Margin):
    """

        [Deprecated]

        Create margin that displays a prompt.
        This can display one prompt at the first line, and a continuation prompt
        (e.g, just dots) on all the following lines.

        This `PromptMargin` implementation has been largely superseded in favor of
        the `get_line_prefix` attribute of `Window`. The reason is that a margin is
        always a fixed width, while `get_line_prefix` can return a variable width
        prefix in front of every line, making it more powerful, especially for line
        continuations.

        :param get_prompt: Callable returns formatted text or a list of
            `(style_str, type)` tuples to be shown as the prompt at the first line.
        :param get_continuation: Callable that takes three inputs. The width (int),
            line_number (int), and is_soft_wrap (bool). It should return formatted
            text or a list of `(style_str, type)` tuples for the next lines of the
            input.
    
    """
2021-03-02 20:51:36,685 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:36,685 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:36,685 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:36,685 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:36,685 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:36,686 : INFO : tokenize_signature : --> do i ever get here?
    def __init__(
        self,
        get_prompt: Callable[[], StyleAndTextTuples],
        get_continuation: Optional[
            Callable[[int, int, bool], StyleAndTextTuples]
        ] = None,
    ) -> None:
        """
         Width to report to the `Window`. 
        """
2021-03-02 20:51:36,686 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:36,686 : INFO : tokenize_signature : --> do i ever get here?
    def create_margin(
        self, window_render_info: "WindowRenderInfo", width: int, height: int
    ) -> StyleAndTextTuples:
        """
         First line.

        """
