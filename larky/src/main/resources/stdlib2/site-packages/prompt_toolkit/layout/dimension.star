def Dimension:
    """

        Specified dimension (width/height) of a user control or window.

        The layout engine tries to honor the preferred size. If that is not
        possible, because the terminal is larger or smaller, it tries to keep in
        between min and max.

        :param min: Minimum size.
        :param max: Maximum size.
        :param weight: For a VSplit/HSplit, the actual size will be determined
                       by taking the proportion of weights from all the children.
                       E.g. When there are two children, one with a weight of 1,
                       and the other with a weight of 2, the second will always be
                       twice as big as the first, if the min/max values allow it.
        :param preferred: Preferred size.
    
    """
2021-03-02 20:51:37,678 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:37,679 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:37,679 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:37,679 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:37,679 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:37,679 : INFO : tokenize_signature : --> do i ever get here?
    def __init__(
        self,
        min: Optional[int] = None,
        max: Optional[int] = None,
        weight: Optional[int] = None,
        preferred: Optional[int] = None,
    ):
        """
         Also cannot be a float.
        """
    def exact(cls, amount: int) -> "Dimension":
        """

                Return a :class:`.Dimension` with an exact size. (min, max and
                preferred set to ``amount``).
        
        """
    def zero(cls) -> "Dimension":
        """

                Create a dimension that represents a zero size. (Used for 'invisible'
                controls.)
        
        """
    def is_zero(self) -> bool:
        """
         True if this `Dimension` represents a zero size. 
        """
    def __repr__(self) -> str:
        """
        min=%r
        """
def sum_layout_dimensions(dimensions: List[Dimension]) -> Dimension:
    """

        Sum a list of :class:`.Dimension` instances.
    
    """
def max_layout_dimensions(dimensions: List[Dimension]) -> Dimension:
    """

        Take the maximum of a list of :class:`.Dimension` instances.
        Used when we have a HSplit/VSplit, and we want to get the best width/height.)
    
    """
def to_dimension(value: AnyDimension) -> Dimension:
    """

        Turn the given object into a `Dimension` object.
    
    """
def is_dimension(value: object) -> bool:
    """

        Test whether the given value could be a valid dimension.
        (For usage in an assertion. It's not guaranteed in case of a callable.)
    
    """
