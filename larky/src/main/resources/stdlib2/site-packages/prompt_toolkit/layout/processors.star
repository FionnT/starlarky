def Processor(metadef=ABCMeta):
    """

        Manipulate the fragments for a given line in a
        :class:`~prompt_toolkit.layout.controls.BufferControl`.
    
    """
2021-03-02 20:51:37,042 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:37,042 : INFO : tokenize_signature : --> do i ever get here?
    def apply_transformation(
        self, transformation_input: "TransformationInput"
    ) -> "Transformation":
        """

                Apply transformation. Returns a :class:`.Transformation` instance.

                :param transformation_input: :class:`.TransformationInput` object.
        
        """
def TransformationInput:
    """

        :param control: :class:`.BufferControl` instance.
        :param lineno: The number of the line to which we apply the processor.
        :param source_to_display: A function that returns the position in the
            `fragments` for any position in the source string. (This takes
            previous processors into account.)
        :param fragments: List of fragments that we can transform. (Received from the
            previous processor.)
    
    """
2021-03-02 20:51:37,042 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:37,042 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:37,042 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:37,042 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:37,042 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:37,042 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:37,042 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:37,043 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:37,043 : INFO : tokenize_signature : --> do i ever get here?
    def __init__(
        self,
        buffer_control: "BufferControl",
        document: Document,
        lineno: int,
        source_to_display: SourceToDisplay,
        fragments: StyleAndTextTuples,
        width: int,
        height: int,
    ) -> None:
        """
        BufferControl
        """
def Transformation:
    """

        Transformation result, as returned by :meth:`.Processor.apply_transformation`.

        Important: Always make sure that the length of `document.text` is equal to
                   the length of all the text in `fragments`!

        :param fragments: The transformed fragments. To be displayed, or to pass to
            the next processor.
        :param source_to_display: Cursor position transformation from original
            string to transformed string.
        :param display_to_source: Cursor position transformed from source string to
            original string.
    
    """
2021-03-02 20:51:37,043 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:37,043 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:37,044 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:37,044 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:37,044 : INFO : tokenize_signature : --> do i ever get here?
    def __init__(
        self,
        fragments: StyleAndTextTuples,
        source_to_display: Optional[SourceToDisplay] = None,
        display_to_source: Optional[DisplayToSource] = None,
    ) -> None:
        """

            A `Processor` that doesn't do anything.
    
        """
2021-03-02 20:51:37,044 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:37,044 : INFO : tokenize_signature : --> do i ever get here?
    def apply_transformation(
        self, transformation_input: TransformationInput
    ) -> Transformation:
        """

            Processor that highlights search matches in the document.
            Note that this doesn't support multiline search matches yet.

            The style classes 'search' and 'search.current' will be applied to the
            content.
    
        """
    def _get_search_text(self, buffer_control: "BufferControl") -> str:
        """

                The text we are searching for.
        
        """
2021-03-02 20:51:37,044 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:37,045 : INFO : tokenize_signature : --> do i ever get here?
    def apply_transformation(
        self, transformation_input: TransformationInput
    ) -> Transformation:
        """
         class:%s 
        """
def HighlightIncrementalSearchProcessor(HighlightSearchProcessor):
    """

        Highlight the search terms that are used for highlighting the incremental
        search. The style class 'incsearch' will be applied to the content.

        Important: this requires the `preview_search=True` flag to be set for the
        `BufferControl`. Otherwise, the cursor position won't be set to the search
        match while searching, and nothing happens.
    
    """
    def _get_search_text(self, buffer_control: "BufferControl") -> str:
        """

                The text we are searching for.
        
        """
def HighlightSelectionProcessor(Processor):
    """

        Processor that highlights the selection in the document.
    
    """
2021-03-02 20:51:37,046 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:37,046 : INFO : tokenize_signature : --> do i ever get here?
    def apply_transformation(
        self, transformation_input: TransformationInput
    ) -> Transformation:
        """
         class:selected 
        """
def PasswordProcessor(Processor):
    """

        Processor that turns masks the input. (For passwords.)

        :param char: (string) Character to be used. "*" by default.
    
    """
    def __init__(self, char: str = "*") -> None:
        """

            When the cursor is on or right after a bracket, it highlights the matching
            bracket.

            :param max_cursor_distance: Only highlight matching brackets when the
                cursor is within this distance. (From inside a `Processor`, we can't
                know which lines will be visible on the screen. But we also don't want
                to scan the whole document for matching brackets on each key press, so
                we limit to this value.)
    
        """
2021-03-02 20:51:37,048 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:37,048 : INFO : tokenize_signature : --> do i ever get here?
    def __init__(
        self, chars: str = "[](){}<>", max_cursor_distance: int = 1000
    ) -> None:
        """

                Return a list of (row, col) tuples that need to be highlighted.
        
        """
2021-03-02 20:51:37,049 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:37,049 : INFO : tokenize_signature : --> do i ever get here?
    def apply_transformation(
        self, transformation_input: TransformationInput
    ) -> Transformation:
        """
         When the application is in the 'done' state, don't highlight.

        """
def DisplayMultipleCursors(Processor):
    """

        When we're in Vi block insert mode, display all the cursors.
    
    """
2021-03-02 20:51:37,050 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:37,050 : INFO : tokenize_signature : --> do i ever get here?
    def apply_transformation(
        self, transformation_input: TransformationInput
    ) -> Transformation:
        """
         If any cursor appears on the current line, highlight that.

        """
def BeforeInput(Processor):
    """

        Insert text before the input.

        :param text: This can be either plain text or formatted text
            (or a callable that returns any of those).
        :param style: style to be applied to this prompt/prefix.
    
    """
    def __init__(self, text: AnyFormattedText, style: str = "") -> None:
        """
         Get fragments.

        """
    def __repr__(self) -> str:
        """
        BeforeInput(%r, %r)
        """
def ShowArg(BeforeInput):
    """

        Display the 'arg' in front of the input.

        This was used by the `PromptSession`, but now it uses the
        `Window.get_line_prefix` function instead.
    
    """
    def __init__(self) -> None:
        """
        class:prompt.arg
        """
    def __repr__(self) -> str:
        """
        ShowArg()
        """
def AfterInput(Processor):
    """

        Insert text after the input.

        :param text: This can be either plain text or formatted text
            (or a callable that returns any of those).
        :param style: style to be applied to this prompt/prefix.
    
    """
    def __init__(self, text: AnyFormattedText, style: str = "") -> None:
        """
         Insert fragments after the last line.

        """
    def __repr__(self) -> str:
        """
        %s(%r, style=%r)
        """
def AppendAutoSuggestion(Processor):
    """

        Append the auto suggestion to the input.
        (The user can then press the right arrow the insert the suggestion.)
    
    """
    def __init__(self, style: str = "class:auto-suggestion") -> None:
        """
         Insert fragments after the last line.

        """
def ShowLeadingWhiteSpaceProcessor(Processor):
    """

        Make leading whitespace visible.

        :param get_char: Callable that returns one character.
    
    """
2021-03-02 20:51:37,053 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:37,054 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:37,054 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:37,054 : INFO : tokenize_signature : --> do i ever get here?
    def __init__(
        self,
        get_char: Optional[Callable[[], str]] = None,
        style: str = "class:leading-whitespace",
    ) -> None:
        """
        \xb7
        """
    def apply_transformation(self, ti: TransformationInput) -> Transformation:
        """
         Walk through all te fragments.

        """
def ShowTrailingWhiteSpaceProcessor(Processor):
    """

        Make trailing whitespace visible.

        :param get_char: Callable that returns one character.
    
    """
2021-03-02 20:51:37,055 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:37,055 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:37,055 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:37,055 : INFO : tokenize_signature : --> do i ever get here?
    def __init__(
        self,
        get_char: Optional[Callable[[], str]] = None,
        style: str = "class:training-whitespace",
    ) -> None:
        """
        \xb7
        """
    def apply_transformation(self, ti: TransformationInput) -> Transformation:
        """
 
        """
def TabsProcessor(Processor):
    """

        Render tabs as spaces (instead of ^I) or make them visible (for instance,
        by replacing them with dots.)

        :param tabstop: Horizontal space taken by a tab. (`int` or callable that
            returns an `int`).
        :param char1: Character or callable that returns a character (text of
            length one). This one is used for the first space taken by the tab.
        :param char2: Like `char1`, but for the rest of the space.
    
    """
2021-03-02 20:51:37,056 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:37,056 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:37,056 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:37,056 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:37,056 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:37,056 : INFO : tokenize_signature : --> do i ever get here?
    def __init__(
        self,
        tabstop: Union[int, Callable[[], int]] = 4,
        char1: Union[str, Callable[[], str]] = "|",
        char2: Union[str, Callable[[], str]] = "\u2508",
        style: str = "class:tab",
    ) -> None:
        """
         Create separator for tabs.

        """
        def source_to_display(from_position: int) -> int:
            """
             Maps original cursor position to the new one. 
            """
        def display_to_source(display_pos: int) -> int:
            """
             Maps display cursor position to the original one. 
            """
def ReverseSearchProcessor(Processor):
    """

        Process to display the "(reverse-i-search)`...`:..." stuff around
        the search buffer.

        Note: This processor is meant to be applied to the BufferControl that
        contains the search buffer, it's not meant for the original input.
    
    """
2021-03-02 20:51:37,058 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:37,058 : INFO : tokenize_signature : --> do i ever get here?
    def _get_main_buffer(
        self, buffer_control: "BufferControl"
    ) -> Optional["BufferControl"]:
        """
        BufferControl
        """
        def filter_processor(item: Processor) -> Optional[Processor]:
            """
            Filter processors from the main control that we want to disable
                        here. This returns either an accepted processor or None.
            """
    def apply_transformation(self, ti: TransformationInput) -> Transformation:
        """
        `ReverseSearchProcessor` should be applied to a `SearchBufferControl` only.
        """
def ConditionalProcessor(Processor):
    """

        Processor that applies another processor, according to a certain condition.
        Example::

            # Create a function that returns whether or not the processor should
            # currently be applied.
            def highlight_enabled():
                return true_or_false

            # Wrapped it in a `ConditionalProcessor` for usage in a `BufferControl`.
            BufferControl(input_processors=[
                ConditionalProcessor(HighlightSearchProcessor(),
                                     Condition(highlight_enabled))])

        :param processor: :class:`.Processor` instance.
        :param filter: :class:`~prompt_toolkit.filters.Filter` instance.
    
    """
    def __init__(self, processor: Processor, filter: FilterOrBool) -> None:
        """
         Run processor when enabled.

        """
    def __repr__(self) -> str:
        """
        %s(processor=%r, filter=%r)
        """
def DynamicProcessor(Processor):
    """

        Processor class that can dynamically returns any Processor.

        :param get_processor: Callable that returns a :class:`.Processor` instance.
    
    """
    def __init__(self, get_processor: Callable[[], Optional[Processor]]) -> None:
        """

            Merge multiple `Processor` objects into one.
    
        """
def _MergedProcessor(Processor):
    """

        Processor that groups multiple other `Processor` objects, but exposes an
        API as if it is one `Processor`.
    
    """
    def __init__(self, processors: List[Processor]):
        """
        Translate x position from the buffer to the x position in the
                    processor fragments list.
        """
        def display_to_source(i: int) -> int:
            """
             In the case of a nested _MergedProcessor, each processor wants to
             receive a 'source_to_display' function (as part of the
             TransformationInput) that has everything in the chain before
             included, because it can be called as part of the
             `apply_transformation` function. However, this first
             `source_to_display` should not be part of the output that we are
             returning. (This is the most consistent with `display_to_source`.)

            """
