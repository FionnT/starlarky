def Completion:
    """

        :param text: The new string that will be inserted into the document.
        :param start_position: Position relative to the cursor_position where the
            new text will start. The text will be inserted between the
            start_position and the original cursor position.
        :param display: (optional string or formatted text) If the completion has
            to be displayed differently in the completion menu.
        :param display_meta: (Optional string or formatted text) Meta information
            about the completion, e.g. the path or source where it's coming from.
            This can also be a callable that returns a string.
        :param style: Style string.
        :param selected_style: Style string, used for a selected completion.
            This can override the `style` parameter.
    
    """
2021-03-02 20:51:40,302 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:40,302 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:40,302 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:40,302 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:40,302 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:40,302 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:40,302 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:40,303 : INFO : tokenize_signature : --> do i ever get here?
    def __init__(
        self,
        text: str,
        start_position: int = 0,
        display: Optional[AnyFormattedText] = None,
        display_meta: Optional[AnyFormattedText] = None,
        style: str = "",
        selected_style: str = "",
    ) -> None:
        """
        %s(text=%r, start_position=%r)
        """
    def __eq__(self, other: object) -> bool:
        """
         The 'display' field as plain text. 
        """
    def display_meta(self) -> StyleAndTextTuples:
        """
         Return meta-text. (This is lazy when using a callable). 
        """
    def display_meta_text(self) -> str:
        """
         The 'meta' field as plain text. 
        """
    def new_completion_from_position(self, position: int) -> "Completion":
        """

                (Only for internal use!)
                Get a new completion by splitting this one. Used by `Application` when
                it needs to have a list of new completions after inserting the common
                prefix.
        
        """
def CompleteEvent:
    """

        Event that called the completer.

        :param text_inserted: When True, it means that completions are requested
            because of a text insert. (`Buffer.complete_while_typing`.)
        :param completion_requested: When True, it means that the user explicitly
            pressed the `Tab` key in order to view the completions.

        These two flags can be used for instance to implement a completer that
        shows some completions when ``Tab`` has been pressed, but not
        automatically when the user presses a space. (Because of
        `complete_while_typing`.)
    
    """
2021-03-02 20:51:40,305 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:40,305 : INFO : tokenize_signature : --> do i ever get here?
    def __init__(
        self, text_inserted: bool = False, completion_requested: bool = False
    ) -> None:
        """
        : Automatic completion while typing.

        """
    def __repr__(self) -> str:
        """
        %s(text_inserted=%r, completion_requested=%r)
        """
def Completer(metadef=ABCMeta):
    """

        Base class for completer implementations.
    
    """
2021-03-02 20:51:40,305 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:40,305 : INFO : tokenize_signature : --> do i ever get here?
    def get_completions(
        self, document: Document, complete_event: CompleteEvent
    ) -> Iterable[Completion]:
        """

                This should be a generator that yields :class:`.Completion` instances.

                If the generation of completions is something expensive (that takes a
                lot of time), consider wrapping this `Completer` class in a
                `ThreadedCompleter`. In that case, the completer algorithm runs in a
                background thread and completions will be displayed as soon as they
                arrive.

                :param document: :class:`~prompt_toolkit.document.Document` instance.
                :param complete_event: :class:`.CompleteEvent` instance.
        
        """
2021-03-02 20:51:40,306 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:40,306 : INFO : tokenize_signature : --> do i ever get here?
    async def get_completions_async(
        self, document: Document, complete_event: CompleteEvent
    ) -> AsyncGenerator[Completion, None]:
            """

                    Asynchronous generator for completions. (Probably, you won't have to
                    override this.)

                    Asynchronous generator of :class:`.Completion` objects.
        
            """
def ThreadedCompleter(Completer):
    """

        Wrapper that runs the `get_completions` generator in a thread.

        (Use this to prevent the user interface from becoming unresponsive if the
        generation of completions takes too much time.)

        The completions will be displayed as soon as they are produced. The user
        can already select a completion, even if not all completions are displayed.
    
    """
    def __init__(self, completer: Completer) -> None:
        """

                Asynchronous generator of completions.
        
        """
    def __repr__(self) -> str:
        """
        ThreadedCompleter(%r)
        """
def DummyCompleter(Completer):
    """

        A completer that doesn't return any completion.
    
    """
2021-03-02 20:51:40,307 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:40,307 : INFO : tokenize_signature : --> do i ever get here?
    def get_completions(
        self, document: Document, complete_event: CompleteEvent
    ) -> Iterable[Completion]:
        """
        DummyCompleter()
        """
def DynamicCompleter(Completer):
    """

        Completer class that can dynamically returns any Completer.

        :param get_completer: Callable that returns a :class:`.Completer` instance.
    
    """
    def __init__(self, get_completer: Callable[[], Optional[Completer]]) -> None:
        """
        DynamicCompleter(%r -> %r)
        """
def _MergedCompleter(Completer):
    """

        Combine several completers into one.
    
    """
    def __init__(self, completers: Sequence[Completer]) -> None:
        """
         Get all completions from the other completers in a blocking way.

        """
2021-03-02 20:51:40,308 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:40,308 : INFO : tokenize_signature : --> do i ever get here?
    async def get_completions_async(
        self, document: Document, complete_event: CompleteEvent
    ) -> AsyncGenerator[Completion, None]:
            """
             Get all completions from the other completers in a blocking way.

            """
def merge_completers(completers: Sequence[Completer]) -> _MergedCompleter:
    """

        Combine several completers into one.
    
    """
2021-03-02 20:51:40,308 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:40,309 : INFO : tokenize_signature : --> do i ever get here?
def get_common_complete_suffix(
    document: Document, completions: Sequence[Completion]
) -> str:
    """

        Return the common prefix for all completions.
    
    """
    def doesnt_change_before_cursor(completion: Completion) -> bool:
        """
         When there is at least one completion that changes the text before the
         cursor, don't return any common part.

        """
    def get_suffix(completion: Completion) -> str:
        """
         Similar to os.path.commonprefix

        """
