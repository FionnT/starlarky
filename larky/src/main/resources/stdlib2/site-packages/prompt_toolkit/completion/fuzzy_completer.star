def FuzzyCompleter(Completer):
    """

        Fuzzy completion.
        This wraps any other completer and turns it into a fuzzy completer.

        If the list of words is: ["leopard" , "gorilla", "dinosaur", "cat", "bee"]
        Then trying to complete "oar" would yield "leopard" and "dinosaur", but not
        the others, because they match the regular expression 'o.*a.*r'.
        Similar, in another application "djm" could expand to "django_migrations".

        The results are sorted by relevance, which is defined as the start position
        and the length of the match.

        Notice that this is not really a tool to work around spelling mistakes,
        like what would be possible with difflib. The purpose is rather to have a
        quicker or more intuitive way to filter the given completions, especially
        when many completions have a common prefix.

        Fuzzy algorithm is based on this post:
        https://blog.amjith.com/fuzzyfinder-in-10-lines-of-python

        :param completer: A :class:`~.Completer` instance.
        :param WORD: When True, use WORD characters.
        :param pattern: Regex pattern which selects the characters before the
            cursor that are considered for the fuzzy matching.
        :param enable_fuzzy: (bool or `Filter`) Enabled the fuzzy behavior. For
            easily turning fuzzyness on or off according to a certain condition.
    
    """
2021-03-02 20:51:39,949 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:39,949 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:39,950 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:39,950 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:39,950 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:39,950 : INFO : tokenize_signature : --> do i ever get here?
    def __init__(
        self,
        completer: Completer,
        WORD: bool = False,
        pattern: Optional[str] = None,
        enable_fuzzy: FilterOrBool = True,
    ):
        """
        ^
        """
2021-03-02 20:51:39,950 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:39,950 : INFO : tokenize_signature : --> do i ever get here?
    def get_completions(
        self, document: Document, complete_event: CompleteEvent
    ) -> Iterable[Completion]:
        """
        r"[^\s]+
        """
2021-03-02 20:51:39,951 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:39,951 : INFO : tokenize_signature : --> do i ever get here?
    def _get_fuzzy_completions(
        self, document: Document, complete_event: CompleteEvent
    ) -> Iterable[Completion]:
        """
         Get completions

        """
        def sort_key(fuzzy_match: "_FuzzyMatch") -> Tuple[int, int]:
            """
             Sort by start position, then by the length of the match. 
            """
2021-03-02 20:51:39,952 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:39,953 : INFO : tokenize_signature : --> do i ever get here?
    def _get_display(
        self, fuzzy_match: "_FuzzyMatch", word_before_cursor: str
    ) -> AnyFormattedText:
        """

                Generate formatted text for the display label.
        
        """
def FuzzyWordCompleter(Completer):
    """

        Fuzzy completion on a list of words.

        (This is basically a `WordCompleter` wrapped in a `FuzzyCompleter`.)

        :param words: List of words or callable that returns a list of words.
        :param meta_dict: Optional dict mapping words to their meta-information.
        :param WORD: When True, use WORD characters.
    
    """
2021-03-02 20:51:39,954 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:39,954 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:39,954 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:39,954 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:39,954 : INFO : tokenize_signature : --> do i ever get here?
    def __init__(
        self,
        words: Union[List[str], Callable[[], List[str]]],
        meta_dict: Optional[Dict[str, str]] = None,
        WORD: bool = False,
    ) -> None:
        """
        _FuzzyMatch
        """
