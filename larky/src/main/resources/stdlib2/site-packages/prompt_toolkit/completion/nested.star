def NestedCompleter(Completer):
    """

        Completer which wraps around several other completers, and calls any the
        one that corresponds with the first word of the input.

        By combining multiple `NestedCompleter` instances, we can achieve multiple
        hierarchical levels of autocompletion. This is useful when `WordCompleter`
        is not sufficient.

        If you need multiple levels, check out the `from_nested_dict` classmethod.
    
    """
2021-03-02 20:51:40,477 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:40,478 : INFO : tokenize_signature : --> do i ever get here?
    def __init__(
        self, options: Dict[str, Optional[Completer]], ignore_case: bool = True
    ) -> None:
        """
        NestedCompleter(%r, ignore_case=%r)
        """
    def from_nested_dict(cls, data: NestedDict) -> "NestedCompleter":
        """

                Create a `NestedCompleter`, starting from a nested dictionary data
                structure, like this:

                .. code::

                    data = {
                        'show': {
                            'version': None,
                            'interfaces': None,
                            'clock': None,
                            'ip': {'interface': {'brief'}}
                        },
                        'exit': None
                        'enable': None
                    }

                The value should be `None` if there is no further completion at some
                point. If all values in the dictionary are None, it is also possible to
                use a set instead.

                Values in this data structure can be a completers as well.
        
        """
2021-03-02 20:51:40,479 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:40,479 : INFO : tokenize_signature : --> do i ever get here?
    def get_completions(
        self, document: Document, complete_event: CompleteEvent
    ) -> Iterable[Completion]:
        """
         Split document.

        """
