def WordCompleter(Completer):
    """

        Simple autocompletion on a list of words.

        :param words: List of words or callable that returns a list of words.
        :param ignore_case: If True, case-insensitive completion.
        :param meta_dict: Optional dict mapping words to their meta-text. (This
            should map strings to strings or formatted text.)
        :param WORD: When True, use WORD characters.
        :param sentence: When True, don't complete by comparing the word before the
            cursor, but by comparing all the text before the cursor. In this case,
            the list of words is just a list of strings, where each string can
            contain spaces. (Can not be used together with the WORD option.)
        :param match_middle: When True, match not only the start, but also in the
                             middle of the word.
        :param pattern: Optional compiled regex for finding the word before
            the cursor to complete. When given, use this regex pattern instead of
            default one (see document._FIND_WORD_RE)
    
    """
2021-03-02 20:51:40,120 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:40,120 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:40,120 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:40,120 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:40,121 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:40,121 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:40,121 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:40,121 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:40,121 : INFO : tokenize_signature : --> do i ever get here?
    def __init__(
        self,
        words: Union[List[str], Callable[[], List[str]]],
        ignore_case: bool = False,
        meta_dict: Optional[Dict[str, str]] = None,
        WORD: bool = False,
        sentence: bool = False,
        match_middle: bool = False,
        pattern: Optional[Pattern[str]] = None,
    ) -> None:
        """
         Get list of words.

        """
        def word_matches(word: str) -> bool:
            """
             True when the word before the cursor matches. 
            """
