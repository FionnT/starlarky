def PathCompleter(Completer):
    """

        Complete for Path variables.

        :param get_paths: Callable which returns a list of directories to look into
                          when the user enters a relative path.
        :param file_filter: Callable which takes a filename and returns whether
                            this file should show up in the completion. ``None``
                            when no filtering has to be done.
        :param min_input_len: Don't do autocompletion when the input string is shorter.
    
    """
2021-03-02 20:51:39,600 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:39,600 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:39,601 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:39,601 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:39,601 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:39,601 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:39,601 : INFO : tokenize_signature : --> do i ever get here?
    def __init__(
        self,
        only_directories: bool = False,
        get_paths: Optional[Callable[[], List[str]]] = None,
        file_filter: Optional[Callable[[str], bool]] = None,
        min_input_len: int = 0,
        expanduser: bool = False,
    ) -> None:
        """
        .
        """
2021-03-02 20:51:39,601 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:39,601 : INFO : tokenize_signature : --> do i ever get here?
    def get_completions(
        self, document: Document, complete_event: CompleteEvent
    ) -> Iterable[Completion]:
        """
         Complete only when we have at least the minimal input length,
         otherwise, we can too many results and autocompletion will become too
         heavy.

        """
def ExecutableCompleter(PathCompleter):
    """

        Complete only executable files in the current path.
    
    """
    def __init__(self) -> None:
        """
        PATH
        """
