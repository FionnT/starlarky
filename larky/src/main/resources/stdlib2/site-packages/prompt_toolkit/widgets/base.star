def Border:
    """
     Box drawing characters. (Thin) 
    """
def TextArea:
    """

        A simple input field.

        This is a higher level abstraction on top of several other classes with
        sane defaults.

        This widget does have the most common options, but it does not intend to
        cover every single use case. For more configurations options, you can
        always build a text area manually, using a
        :class:`~prompt_toolkit.buffer.Buffer`,
        :class:`~prompt_toolkit.layout.BufferControl` and
        :class:`~prompt_toolkit.layout.Window`.

        Buffer attributes:

        :param text: The initial text.
        :param multiline: If True, allow multiline input.
        :param completer: :class:`~prompt_toolkit.completion.Completer` instance
            for auto completion.
        :param complete_while_typing: Boolean.
        :param accept_handler: Called when `Enter` is pressed (This should be a
            callable that takes a buffer as input).
        :param history: :class:`~prompt_toolkit.history.History` instance.
        :param auto_suggest: :class:`~prompt_toolkit.auto_suggest.AutoSuggest`
            instance for input suggestions.

        BufferControl attributes:

        :param password: When `True`, display using asterisks.
        :param focusable: When `True`, allow this widget to receive the focus.
        :param focus_on_click: When `True`, focus after mouse click.
        :param input_processors: `None` or a list of
            :class:`~prompt_toolkit.layout.Processor` objects.

        Window attributes:

        :param lexer: :class:`~prompt_toolkit.lexers.Lexer` instance for syntax
            highlighting.
        :param wrap_lines: When `True`, don't scroll horizontally, but wrap lines.
        :param width: Window width. (:class:`~prompt_toolkit.layout.Dimension` object.)
        :param height: Window height. (:class:`~prompt_toolkit.layout.Dimension` object.)
        :param scrollbar: When `True`, display a scroll bar.
        :param style: A style string.
        :param dont_extend_width: When `True`, don't take up more width then the
                                  preferred width reported by the control.
        :param dont_extend_height: When `True`, don't take up more width then the
                                   preferred height reported by the control.
        :param get_line_prefix: None or a callable that returns formatted text to
            be inserted before a line. It takes a line number (int) and a
            wrap_count and returns formatted text. This can be used for
            implementation of line continuations, things like Vim "breakindent" and
            so on.

        Other attributes:

        :param search_field: An optional `SearchToolbar` object.
    
    """
2021-03-02 20:51:55,329 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:55,329 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:55,329 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:55,329 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:55,329 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:55,329 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:55,329 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:55,329 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:55,329 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:55,329 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:55,329 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:55,329 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:55,330 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:55,330 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:55,330 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:55,330 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:55,330 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:55,330 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:55,330 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:55,330 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:55,330 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:55,330 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:55,330 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:55,330 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:55,330 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:55,330 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:55,330 : INFO : tokenize_signature : --> do i ever get here?
    def __init__(
        self,
        text: str = "",
        multiline: FilterOrBool = True,
        password: FilterOrBool = False,
        lexer: Optional[Lexer] = None,
        auto_suggest: Optional[AutoSuggest] = None,
        completer: Optional[Completer] = None,
        complete_while_typing: FilterOrBool = True,
        accept_handler: Optional[BufferAcceptHandler] = None,
        history: Optional[History] = None,
        focusable: FilterOrBool = True,
        focus_on_click: FilterOrBool = False,
        wrap_lines: FilterOrBool = True,
        read_only: FilterOrBool = False,
        width: AnyDimension = None,
        height: AnyDimension = None,
        dont_extend_height: FilterOrBool = False,
        dont_extend_width: FilterOrBool = False,
        line_numbers: bool = False,
        get_line_prefix: Optional[GetLinePrefixCallable] = None,
        scrollbar: bool = False,
        style: str = "",
        search_field: Optional[SearchToolbar] = None,
        preview_search: FilterOrBool = True,
        prompt: AnyFormattedText = "",
        input_processors: Optional[List[Processor]] = None,
    ) -> None:
        """
         Writeable attributes.

        """
    def text(self) -> str:
        """

                The `Buffer` text.
        
        """
    def text(self, value: str) -> None:
        """

                The `Buffer` document (text + cursor position).
        
        """
    def document(self, value: Document) -> None:
        """

                The accept handler. Called when the user accepts the input.
        
        """
    def accept_handler(self, value: BufferAcceptHandler) -> None:
        """

            Widget that displays the given text. It is not editable or focusable.

            :param text: The text to be displayed. (This can be multiline. This can be
                formatted text as well.)
            :param style: A style string.
            :param width: When given, use this width, rather than calculating it from
                the text size.
    
        """
2021-03-02 20:51:55,334 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:55,334 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:55,334 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:55,334 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:55,334 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:55,334 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:55,334 : INFO : tokenize_signature : --> do i ever get here?
    def __init__(
        self,
        text: AnyFormattedText,
        style: str = "",
        width: AnyDimension = None,
        dont_extend_height: bool = True,
        dont_extend_width: bool = False,
    ) -> None:
        """
        class:label 
        """
    def __pt_container__(self) -> Container:
        """

            Clickable button.

            :param text: The caption for the button.
            :param handler: `None` or callable. Called when the button is clicked. No
                parameters are passed to this callable. Use for instance Python's
                `functools.partial` to pass parameters to this callable if needed.
            :param width: Width of the button.
    
        """
2021-03-02 20:51:55,335 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:55,335 : INFO : tokenize_signature : --> do i ever get here?
    def __init__(
        self, text: str, handler: Optional[Callable[[], None]] = None, width: int = 12
    ) -> None:
        """
        class:button.focused
        """
    def _get_text_fragments(self) -> StyleAndTextTuples:
        """
        {:^%s}
        """
        def handler(mouse_event: MouseEvent) -> None:
            """
            class:button.arrow
            """
    def _get_key_bindings(self) -> KeyBindings:
        """
         Key bindings for the Button. 
        """
        def _(event: E) -> None:
            """

                Draw a border around any container, optionally with a title text.

                Changing the title and body of the frame is possible at runtime by
                assigning to the `body` and `title` attributes of this class.

                :param body: Another container object.
                :param title: Text to be displayed in the top of the frame (can be formatted text).
                :param style: Style string to be applied to this widget.
    
            """
2021-03-02 20:51:55,337 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:55,337 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:55,337 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:55,337 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:55,337 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:55,337 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:55,337 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:55,337 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:55,337 : INFO : tokenize_signature : --> do i ever get here?
    def __init__(
        self,
        body: AnyContainer,
        title: AnyFormattedText = "",
        style: str = "",
        width: AnyDimension = None,
        height: AnyDimension = None,
        key_bindings: Optional[KeyBindings] = None,
        modal: bool = False,
    ) -> None:
        """
        class:frame.border
        """
        def has_title() -> bool:
            """
             Padding is required to make sure that if the content is
             too small, the right frame border is still aligned.

            """
    def __pt_container__(self) -> Container:
        """

            Draw a shadow underneath/behind this container.
            (This applies `class:shadow` the the cells under the shadow. The Style
            should define the colors for the shadow.)

            :param body: Another container object.
    
        """
    def __init__(self, body: AnyContainer) -> None:
        """
        class:shadow
        """
    def __pt_container__(self) -> Container:
        """

            Add padding around a container.

            This also makes sure that the parent can provide more space than required by
            the child. This is very useful when wrapping a small element with a fixed
            size into a ``VSplit`` or ``HSplit`` object. The ``HSplit`` and ``VSplit``
            try to make sure to adapt respectively the width and height, possibly
            shrinking other elements. Wrapping something in a ``Box`` makes it flexible.

            :param body: Another container object.
            :param padding: The margin to be used around the body. This can be
                overridden by `padding_left`, padding_right`, `padding_top` and
                `padding_bottom`.
            :param style: A style string.
            :param char: Character to be used for filling the space around the body.
                (This is supposed to be a character with a terminal width of 1.)
    
        """
2021-03-02 20:51:55,340 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:55,340 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:55,340 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:55,340 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:55,340 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:55,340 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:55,340 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:55,340 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:55,340 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:55,340 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:55,340 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:55,340 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:55,341 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:55,341 : INFO : tokenize_signature : --> do i ever get here?
    def __init__(
        self,
        body: AnyContainer,
        padding: AnyDimension = None,
        padding_left: AnyDimension = None,
        padding_right: AnyDimension = None,
        padding_top: AnyDimension = None,
        padding_bottom: AnyDimension = None,
        width: AnyDimension = None,
        height: AnyDimension = None,
        style: str = "",
        char: Union[None, str, Callable[[], str]] = None,
        modal: bool = False,
        key_bindings: Optional[KeyBindings] = None,
    ) -> None:
        """
        _T
        """
def _DialogList(Generic[_T]):
    """

        Common code for `RadioList` and `CheckboxList`.
    
    """
    def __init__(self, values: Sequence[Tuple[_T, AnyFormattedText]]) -> None:
        """
         current_values will be used in multiple_selection,
         current_value will be used otherwise.

        """
        def _up(event: E) -> None:
            """
            down
            """
        def _down(event: E) -> None:
            """
            pageup
            """
        def _pageup(event: E) -> None:
            """
            pagedown
            """
        def _pagedown(event: E) -> None:
            """
            enter
            """
        def _click(event: E) -> None:
            """
             We first check values after the selected value, then all values.

            """
    def _handle_enter(self) -> None:
        """

                    Set `_selected_index` and `current_value` according to the y
                    position of the mouse click event.
            
        """
    def __pt_container__(self) -> Container:
        """

            List of radio buttons. Only one can be checked at the same time.

            :param values: List of (value, label) tuples.
    
        """
def CheckboxList(_DialogList[_T]):
    """

        List of checkbox buttons. Several can be checked at the same time.

        :param values: List of (value, label) tuples.
    
    """
def Checkbox(CheckboxList[str]):
    """
    Backward compatibility util: creates a 1-sized CheckboxList

        :param text: the text
    
    """
    def __init__(self, text: AnyFormattedText = "", checked: bool = False) -> None:
        """
        value
        """
    def checked(self) -> bool:
        """
        value
        """
    def checked(self, value: bool) -> None:
        """
        value
        """
def VerticalLine(object):
    """

        A simple vertical line with a width of 1.
    
    """
    def __init__(self) -> None:
        """
        class:line,vertical-line
        """
    def __pt_container__(self) -> Container:
        """

            A simple horizontal line with a height of 1.
    
        """
    def __init__(self) -> None:
        """
        class:line,horizontal-line
        """
    def __pt_container__(self) -> Container:
        """
        60%
        """
    def percentage(self) -> int:
        """
        {0}%
        """
    def __pt_container__(self) -> Container:
