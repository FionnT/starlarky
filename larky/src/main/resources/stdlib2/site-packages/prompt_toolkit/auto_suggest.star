def Suggestion:
    """

        Suggestion returned by an auto-suggest algorithm.

        :param text: The suggestion text.
    
    """
    def __init__(self, text: str) -> None:
        """
        Suggestion(%s)
        """
def AutoSuggest(metadef=ABCMeta):
    """

        Base class for auto suggestion implementations.
    
    """
2021-03-02 20:51:37,857 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:37,857 : INFO : tokenize_signature : --> do i ever get here?
    def get_suggestion(
        self, buffer: "Buffer", document: Document
    ) -> Optional[Suggestion]:
        """

                Return `None` or a :class:`.Suggestion` instance.

                We receive both :class:`~prompt_toolkit.buffer.Buffer` and
                :class:`~prompt_toolkit.document.Document`. The reason is that auto
                suggestions are retrieved asynchronously. (Like completions.) The
                buffer text could be changed in the meantime, but ``document`` contains
                the buffer document like it was at the start of the auto suggestion
                call. So, from here, don't access ``buffer.text``, but use
                ``document.text`` instead.

                :param buffer: The :class:`~prompt_toolkit.buffer.Buffer` instance.
                :param document: The :class:`~prompt_toolkit.document.Document` instance.
        
        """
2021-03-02 20:51:37,857 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:37,857 : INFO : tokenize_signature : --> do i ever get here?
    async def get_suggestion_async(
        self, buff: "Buffer", document: Document
    ) -> Optional[Suggestion]:
            """

                    Return a :class:`.Future` which is set when the suggestions are ready.
                    This function can be overloaded in order to provide an asynchronous
                    implementation.
        
            """
def ThreadedAutoSuggest(AutoSuggest):
    """

        Wrapper that runs auto suggestions in a thread.
        (Use this to prevent the user interface from becoming unresponsive if the
        generation of suggestions takes too much time.)
    
    """
    def __init__(self, auto_suggest: AutoSuggest) -> None:
        """
        Buffer
        """
2021-03-02 20:51:37,858 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:37,858 : INFO : tokenize_signature : --> do i ever get here?
    async def get_suggestion_async(
        self, buff: "Buffer", document: Document
    ) -> Optional[Suggestion]:
            """

                    Run the `get_suggestion` function in a thread.
        
            """
        def run_get_suggestion_thread() -> Optional[Suggestion]:
            """

                AutoSuggest class that doesn't return any suggestion.
    
            """
2021-03-02 20:51:37,858 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:37,858 : INFO : tokenize_signature : --> do i ever get here?
    def get_suggestion(
        self, buffer: "Buffer", document: Document
    ) -> Optional[Suggestion]:
        """
         No suggestion
        """
def AutoSuggestFromHistory(AutoSuggest):
    """

        Give suggestions based on the lines in the history.
    
    """
2021-03-02 20:51:37,858 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:37,859 : INFO : tokenize_signature : --> do i ever get here?
    def get_suggestion(
        self, buffer: "Buffer", document: Document
    ) -> Optional[Suggestion]:
        """
         Consider only the last line for the suggestion.

        """
def ConditionalAutoSuggest(AutoSuggest):
    """

        Auto suggest that can be turned on and of according to a certain condition.
    
    """
    def __init__(self, auto_suggest: AutoSuggest, filter: Union[bool, Filter]) -> None:
        """
        Buffer
        """
def DynamicAutoSuggest(AutoSuggest):
    """

        Validator class that can dynamically returns any Validator.

        :param get_validator: Callable that returns a :class:`.Validator` instance.
    
    """
    def __init__(self, get_auto_suggest: Callable[[], Optional[AutoSuggest]]) -> None:
        """
        Buffer
        """
2021-03-02 20:51:37,860 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:37,861 : INFO : tokenize_signature : --> do i ever get here?
    async def get_suggestion_async(
        self, buff: "Buffer", document: Document
    ) -> Optional[Suggestion]:
