def int2byte(number: int) -> bytes:
    """
     Telnet constants.

    """
def TelnetProtocolParser:
    """

        Parser for the Telnet protocol.
        Usage::

            def data_received(data):
                print(data)

            def size_received(rows, columns):
                print(rows, columns)

            p = TelnetProtocolParser(data_received, size_received)
            p.feed(binary_data)
    
    """
2021-03-02 20:51:43,424 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:43,425 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:43,425 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:43,425 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:43,425 : INFO : tokenize_signature : --> do i ever get here?
    def __init__(
        self,
        data_received_callback: Callable[[bytes], None],
        size_received_callback: Callable[[int, int], None],
        ttype_received_callback: Callable[[str], None],
    ) -> None:
        """
         type: ignore
        """
    def received_data(self, data: bytes) -> None:
        """
         Received telnet DO command. 
        """
    def dont_received(self, data: bytes) -> None:
        """
         Received telnet DONT command. 
        """
    def will_received(self, data: bytes) -> None:
        """
         Received telnet WILL command. 
        """
    def wont_received(self, data: bytes) -> None:
        """
         Received telnet WONT command. 
        """
    def command_received(self, command: bytes, data: bytes) -> None:
        """
        command received %r %r
        """
    def naws(self, data: bytes) -> None:
        """

                Received NAWS. (Window dimensions.)
        
        """
    def ttype(self, data: bytes) -> None:
        """

                Received terminal type.
        
        """
    def negotiate(self, data: bytes) -> None:
        """

                Got negotiate data.
        
        """
    def _parse_coroutine(self) -> Generator[None, bytes, None]:
        """

                Parser state machine.
                Every 'yield' expression returns the next byte.
        
        """
    def feed(self, data: bytes) -> None:
        """

                Feed data to the parser.
        
        """
