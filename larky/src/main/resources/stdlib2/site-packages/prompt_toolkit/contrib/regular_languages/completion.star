def GrammarCompleter(Completer):
    """

        Completer which can be used for autocompletion according to variables in
        the grammar. Each variable can have a different autocompleter.

        :param compiled_grammar: `GrammarCompleter` instance.
        :param completers: `dict` mapping variable names of the grammar to the
                           `Completer` instances to be used for each variable.
    
    """
2021-03-02 20:51:41,855 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:41,855 : INFO : tokenize_signature : --> do i ever get here?
    def __init__(
        self, compiled_grammar: _CompiledGrammar, completers: Dict[str, Completer]
    ) -> None:
        """

                Yield all the possible completions for this input string.
                (The completer assumes that the cursor position was at the end of the
                input string.)
        
        """
    def _remove_duplicates(self, items: Iterable[Completion]) -> List[Completion]:
        """

                Remove duplicates, while keeping the order.
                (Sometimes we have duplicates, because the there several matches of the
                same grammar, each yielding similar completions.)
        
        """
