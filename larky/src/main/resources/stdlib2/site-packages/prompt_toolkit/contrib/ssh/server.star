def PromptToolkitSSHSession(asyncssh.SSHServerSession):
    """
    PromptToolkitSSHSession
    """
        def Stdout:
    """
    \n
    """
            def flush(s):
                """

                        Callable that returns the current `Size`, required by Vt100_Output.
        
                """
    def connection_made(self, chan):
        """
         Should not happen.

        """
    def terminal_size_changed(self, width, height, pixwidth, pixheight):
        """
         Send resize event to the current application.

        """
    def data_received(self, data, datatype):
        """

            Run a prompt_toolkit application over an asyncssh server.

            This takes one argument, an `interact` function, which is called for each
            connection. This should be an asynchronous function that runs the
            prompt_toolkit applications. This function runs in an `AppSession`, which
            means that we can have multiple UI interactions concurrently.

            Example usage:

            .. code:: python

                async def interact(ssh_session: PromptToolkitSSHSession) -> None:
                    await yes_no_dialog("my title", "my text").run_async()

                    prompt_session = PromptSession()
                    text = await prompt_session.prompt_async("Type something: ")
                    print_formatted_text('You said: ', text)

                server = PromptToolkitSSHServer(interact=interact)
                loop = get_event_loop()
                loop.run_until_complete(
                    asyncssh.create_server(
                        lambda: MySSHServer(interact),
                        "",
                        port,
                        server_host_keys=["/etc/ssh/..."],
                    )
                )
                loop.run_forever()
    
        """
2021-03-02 20:51:42,722 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:42,722 : INFO : tokenize_signature : --> do i ever get here?
    def __init__(
        self, interact: Callable[[PromptToolkitSSHSession], Awaitable[None]]
    ) -> None:
        """
         No authentication.

        """
    def session_requested(self) -> PromptToolkitSSHSession:
