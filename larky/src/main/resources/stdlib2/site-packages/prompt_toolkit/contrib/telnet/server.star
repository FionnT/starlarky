def int2byte(number: int) -> bytes:
    """
    Initializing telnet connection
    """
def _ConnectionStdout:
    """

        Wrapper around socket which provides `write` and `flush` methods for the
        Vt100_Output output.
    
    """
    def __init__(self, connection: socket.socket, encoding: str) -> None:
        """
        strict
        """
    def write(self, data: str) -> None:
        """
        \n
        """
    def flush(self) -> None:
        """
        b
        """
    def encoding(self) -> str:
        """

            Class that represents one Telnet connection.
    
        """
2021-03-02 20:51:43,063 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:43,063 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:43,063 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:43,063 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:43,064 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:43,064 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:43,064 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:43,064 : INFO : tokenize_signature : --> do i ever get here?
    def __init__(
        self,
        conn: socket.socket,
        addr: Tuple[str, int],
        interact: Callable[["TelnetConnection"], Awaitable[None]],
        server: "TelnetServer",
        encoding: str,
        style: Optional[BaseStyle],
    ) -> None:
        """
         Create "Output" object.

        """
        def get_size() -> Size:
            """
             TelnetProtocolParser 'data_received' callback 
            """
        def size_received(rows: int, columns: int) -> None:
            """
             TelnetProtocolParser 'size_received' callback 
            """
        def ttype_received(ttype: str) -> None:
            """
             TelnetProtocolParser 'ttype_received' callback 
            """
    async def run_application(self) -> None:
            """

                    Run application.
        
            """
        def handle_incoming_data() -> None:
            """
             Connection closed by client.

            """
    def feed(self, data: bytes) -> None:
        """

                Handler for incoming data. (Called by TelnetServer.)
        
        """
    def close(self) -> None:
        """

                Closed by client.
        
        """
    def send(self, formatted_text: AnyFormattedText) -> None:
        """

                Send text to the client.
        
        """
    def send_above_prompt(self, formatted_text: AnyFormattedText) -> None:
        """

                Send text to the client.
                This is asynchronous, returns a `Future`.
        
        """
    def _run_in_terminal(self, func: Callable[[], None]) -> None:
        """
         Make sure that when an application was active for this connection,
         that we print the text above the application.

        """
    def erase_screen(self) -> None:
        """

                Erase the screen and move the cursor to the top.
        
        """
async def _dummy_interact(connection: TelnetConnection) -> None:
        """

            Telnet server implementation.
    
        """
2021-03-02 20:51:43,068 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:43,068 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:43,068 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:43,068 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:43,068 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:43,068 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:43,068 : INFO : tokenize_signature : --> do i ever get here?
    def __init__(
        self,
        host: str = "127.0.0.1",
        port: int = 23,
        interact: Callable[[TelnetConnection], Awaitable[None]] = _dummy_interact,
        encoding: str = "utf-8",
        style: Optional[BaseStyle] = None,
    ) -> None:
        """
         Create and bind socket

        """
    def start(self) -> None:
        """

                Start the telnet server.
                Don't forget to call `loop.run_forever()` after doing this.
        
        """
    async def stop(self) -> None:
            """
             Wait for all applications to finish.

            """
    def _accept(self) -> None:
        """

                Accept new incoming connection.
        
        """
        async def run() -> None:
                """
                Starting interaction %r %r
                """
