def Lexer(metadef=ABCMeta):
    """

        Base class for all lexers.
    
    """
    def lex_document(self, document: Document) -> Callable[[int], StyleAndTextTuples]:
        """

                Takes a :class:`~prompt_toolkit.document.Document` and returns a
                callable that takes a line number and returns a list of
                ``(style_str, text)`` tuples for that line.

                XXX: Note that in the past, this was supposed to return a list
                     of ``(Token, text)`` tuples, just like a Pygments lexer.
        
        """
    def invalidation_hash(self) -> Hashable:
        """

                When this changes, `lex_document` could give a different output.
                (Only used for `DynamicLexer`.)
        
        """
def SimpleLexer(Lexer):
    """

        Lexer that doesn't do any tokenizing and returns the whole input as one
        token.

        :param style: The style string for this lexer.
    
    """
    def __init__(self, style: str = "") -> None:
        """
         Return the tokens for the given line. 
        """
def DynamicLexer(Lexer):
    """

        Lexer class that can dynamically returns any Lexer.

        :param get_lexer: Callable that returns a :class:`.Lexer` instance.
    
    """
    def __init__(self, get_lexer: Callable[[], Optional[Lexer]]) -> None:
