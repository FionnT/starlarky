2021-03-02 20:51:50,285 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:50,285 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:50,285 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:50,285 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:50,285 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:50,285 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:50,285 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:50,285 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:50,286 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:50,286 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:50,286 : INFO : tokenize_signature : --> do i ever get here?
def print_formatted_text(
    *values: Any,
    sep: str = " ",
    end: str = "\n",
    file: Optional[TextIO] = None,
    flush: bool = False,
    style: Optional[BaseStyle] = None,
    output: Optional[Output] = None,
    color_depth: Optional[ColorDepth] = None,
    style_transformation: Optional[StyleTransformation] = None,
    include_default_pygments_style: bool = True,
) -> None:
    """

        ::

            print_formatted_text(*values, sep=' ', end='\\n', file=None, flush=False, style=None, output=None)

        Print text to stdout. This is supposed to be compatible with Python's print
        function, but supports printing of formatted text. You can pass a
        :class:`~prompt_toolkit.formatted_text.FormattedText`,
        :class:`~prompt_toolkit.formatted_text.HTML` or
        :class:`~prompt_toolkit.formatted_text.ANSI` object to print formatted
        text.

        * Print HTML as follows::

            print_formatted_text(HTML('<i>Some italic text</i> <ansired>This is red!</ansired>'))

            style = Style.from_dict({
                'hello': '#ff0066',
                'world': '#884444 italic',
            })
            print_formatted_text(HTML('<hello>Hello</hello> <world>world</world>!'), style=style)

        * Print a list of (style_str, text) tuples in the given style to the
          output.  E.g.::

            style = Style.from_dict({
                'hello': '#ff0066',
                'world': '#884444 italic',
            })
            fragments = FormattedText([
                ('class:hello', 'Hello'),
                ('class:world', 'World'),
            ])
            print_formatted_text(fragments, style=style)

        If you want to print a list of Pygments tokens, wrap it in
        :class:`~prompt_toolkit.formatted_text.PygmentsTokens` to do the
        conversion.

        :param values: Any kind of printable object, or formatted string.
        :param sep: String inserted between values, default a space.
        :param end: String appended after the last value, default a newline.
        :param style: :class:`.Style` instance for the color scheme.
        :param include_default_pygments_style: `bool`. Include the default Pygments
            style when set to `True` (the default).
    
    """
    def to_text(val: Any) -> StyleAndTextTuples:
        """
         Normal lists which are not instances of `FormattedText` are
         considered plain text.

        """
def print_container(container: "Container", file: Optional[TextIO] = None) -> None:
    """

        Print any layout to the output in a non-interactive way.

        Example usage::

            from prompt_toolkit.widgets import Frame, TextArea
            print_container(
                Frame(TextArea(text='Hello world!')))
    
    """
    def exit_immediately() -> None:
        """
         Use `call_from_executor` to exit "soon", so that we still render one
         initial time, before exiting the application.

        """
def clear() -> None:
    """

        Clear the screen.
    
    """
def set_title(text: str) -> None:
    """

        Set the terminal title.
    
    """
def clear_title() -> None:
    """

        Erase the current title.
    
    """
