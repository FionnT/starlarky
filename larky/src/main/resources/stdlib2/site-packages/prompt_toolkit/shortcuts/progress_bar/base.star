def create_key_bindings() -> KeyBindings:
    """

        Key bindings handled by the progress bar.
        (The main thread is not supposed to handle any key bindings.)
    
    """
    def _clear(event: E) -> None:
        """
        c-c
        """
    def _interrupt(event: E) -> None:
        """
         Send KeyboardInterrupt to the main thread.

        """
def ProgressBar:
    """

        Progress bar context manager.

        Usage ::

            with ProgressBar(...) as pb:
                for item in pb(data):
                    ...

        :param title: Text to be displayed above the progress bars. This can be a
            callable or formatted text as well.
        :param formatters: List of :class:`.Formatter` instances.
        :param bottom_toolbar: Text to be displayed in the bottom toolbar. This
            can be a callable or formatted text.
        :param style: :class:`prompt_toolkit.styles.BaseStyle` instance.
        :param key_bindings: :class:`.KeyBindings` instance.
        :param file: The file object used for rendering, by default `sys.stderr` is used.

        :param color_depth: `prompt_toolkit` `ColorDepth` instance.
        :param output: :class:`~prompt_toolkit.output.Output` instance.
        :param input: :class:`~prompt_toolkit.input.Input` instance.
    
    """
2021-03-02 20:51:49,917 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:49,917 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:49,917 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:49,917 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:49,918 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:49,918 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:49,918 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:49,918 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:49,918 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:49,918 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:49,918 : INFO : tokenize_signature : --> do i ever get here?
    def __init__(
        self,
        title: AnyFormattedText = None,
        formatters: Optional[Sequence[Formatter]] = None,
        bottom_toolbar: AnyFormattedText = None,
        style: Optional[BaseStyle] = None,
        key_bindings: Optional[KeyBindings] = None,
        file: Optional[TextIO] = None,
        color_depth: Optional[ColorDepth] = None,
        output: Optional[Output] = None,
        input: Optional[Input] = None,
    ) -> None:
        """
         Note that we use __stderr__ as default error output, because that
         works best with `patch_stdout`.

        """
    def __enter__(self) -> "ProgressBar":
        """
         Create UI Application.

        """
        def width_for_formatter(formatter: Formatter) -> AnyDimension:
            """
             Needs to be passed as callable (partial) to the 'width'
             parameter, because we want to call it on every resize.

            """
        def run() -> None:
            """
             Attach WINCH signal handler in main thread.
             (Interrupt that we receive during resize events.)

            """
    def __exit__(self, *a: object) -> None:
        """
         Quit UI application.

        """
2021-03-02 20:51:49,921 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:49,921 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:49,921 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:49,921 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:49,921 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:49,921 : INFO : tokenize_signature : --> do i ever get here?
    def __call__(
        self,
        data: Optional[Iterable[_T]] = None,
        label: AnyFormattedText = "",
        remove_when_done: bool = False,
        total: Optional[int] = None,
    ) -> "ProgressBarCounter[_T]":
        """

                Start a new counter.

                :param label: Title text or description for this progress. (This can be
                    formatted text as well).
                :param remove_when_done: When `True`, hide this progress bar.
                :param total: Specify the maximum value if it can't be calculated by
                    calling ``len``.
        
        """
    def invalidate(self) -> None:
        """

            User control for the progress bar.
    
        """
    def __init__(self, progress_bar: ProgressBar, formatter: Formatter) -> None:
        """
        ERROR
        """
        def get_line(i: int) -> StyleAndTextTuples:
            """
             Make sure that the key bindings work.
            """
    def get_key_bindings(self) -> KeyBindings:
        """
        _CounterItem
        """
def ProgressBarCounter(Generic[_CounterItem]):
    """

        An individual counter (A progress bar can have multiple counters).
    
    """
2021-03-02 20:51:49,923 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:49,923 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:49,923 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:49,923 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:49,923 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:49,923 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:49,923 : INFO : tokenize_signature : --> do i ever get here?
    def __init__(
        self,
        progress_bar: ProgressBar,
        data: Optional[Iterable[_CounterItem]] = None,
        label: AnyFormattedText = "",
        remove_when_done: bool = False,
        total: Optional[int] = None,
    ) -> None:
        """
         We don't know the total length.
        """
    def __iter__(self) -> Iterable[_CounterItem]:
        """
         Only done if we iterate to the very end.

        """
    def item_completed(self) -> None:
        """

                Start handling the next item.

                (Can be called manually in case we don't have a collection to loop through.)
        
        """
    def done(self) -> bool:
        """
        Whether a counter has been completed.

                Done counter have been stopped (see stopped) and removed depending on
                remove_when_done value.

                Contrast this with stopped. A stopped counter may be terminated before
                100% completion. A done counter has reached its 100% completion.
        
        """
    def done(self, value: bool) -> None:
        """
        Whether a counter has been stopped.

                Stopped counters no longer have increasing time_elapsed. This distinction is
                also used to prevent the Bar formatter with unknown totals from continuing to run.

                A stopped counter (but not done) can be used to signal that a given counter has
                encountered an error but allows other counters to continue
                (e.g. download X of Y failed). Given how only done counters are removed
                (see remove_when_done) this can help aggregate failures from a large number of
                successes.

                Contrast this with done. A done counter has reached its 100% completion.
                A stopped counter may be terminated before 100% completion.
        
        """
    def stopped(self, value: bool) -> None:
        """
         This counter has not already been stopped.

        """
    def percentage(self) -> float:
        """

                Return how much time has been elapsed since the start.
        
        """
    def time_left(self) -> Optional[datetime.timedelta]:
        """

                Timedelta representing the time left.
        
        """
