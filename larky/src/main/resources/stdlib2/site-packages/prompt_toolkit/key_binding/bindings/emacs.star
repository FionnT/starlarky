def load_emacs_bindings() -> KeyBindingsBase:
    """

        Some e-macs extensions.
    
    """
    def _esc(event: E) -> None:
        """

                By default, ignore escape key.

                (If we don't put this here, and Esc is followed by a key which sequence
                is not handled, we'll insert an Escape character in the input stream.
                Something we don't want and happens to easily in emacs mode.
                Further, people can always use ControlQ to do a quoted insert.)
        
        """
    def _next(event: E) -> None:
        """
         Next line. 
        """
    def _prev(event: E) -> None:
        """
         Previous line. 
        """
    def handle_digit(c: str) -> None:
        """

                Handle input of arguments.
                The first number needs to be preceded by escape.
        
        """
        def _(event: E) -> None:
            """
            0123456789
            """
    def _meta_dash(event: E) -> None:
        """

        """
    def _dash(event: E) -> None:
        """

                When '-' is typed again, after exactly '-' has been given as an
                argument, ignore this.
        
        """
    def is_returnable() -> bool:
        """
         Meta + Enter: always accept input.

        """
    def character_search(buff: Buffer, char: str, count: int) -> None:
        """
        c-]
        """
    def _goto_char(event: E) -> None:
        """
         When Ctl-] + a character is pressed. go to that character. 
        """
    def _goto_char_backwards(event: E) -> None:
        """
         Like Ctl-], but backwards. 
        """
    def _prev_sentence(event: E) -> None:
        """
         Previous sentence. 
        """
    def _end_of_sentence(event: E) -> None:
        """
         Move to end of sentence. 
        """
    def _swap_characters(event: E) -> None:
        """

                Swap the last two words before the cursor.
        
        """
    def _insert_all_completions(event: E) -> None:
        """

                `meta-*`: Insert all possible completions of the preceding text.
        
        """
    def _toggle_start_end(event: E) -> None:
        """

                Move cursor back and forth between the start and end of the current
                line.
        
        """
    def _start_selection(event: E) -> None:
        """

                Start of the selection (if the current buffer is not empty).
        
        """
    def _cancel(event: E) -> None:
        """

                Control + G: Cancel completion menu and validation state.
        
        """
    def _cancel_selection(event: E) -> None:
        """

                Cancel selection.
        
        """
    def _cut(event: E) -> None:
        """

                Cut selected text.
        
        """
    def _copy(event: E) -> None:
        """

                Copy selected text.
        
        """
    def _start_of_word(event: E) -> None:
        """

                Cursor to start of previous word.
        
        """
    def _start_next_word(event: E) -> None:
        """

                Cursor to start of next word.
        
        """
    def _complete(event: E) -> None:
        """

                M-/: Complete.
        
        """
    def _indent(event: E) -> None:
        """

                Indent selected text.
        
        """
    def _unindent(event: E) -> None:
        """

                Unindent selected text.
        
        """
def load_emacs_search_bindings() -> KeyBindingsBase:
    """
     NOTE: We don't bind 'Escape' to 'abort_search'. The reason is that we
           want Alt+Enter to accept input directly in incremental search mode.
           Instead, we have double escape.


    """
    def _jump_next(event: E) -> None:
        """
         Jump to next match. 
        """
    def _jump_prev(event: E) -> None:
        """
         Jump to previous match. 
        """
def load_emacs_shift_selection_bindings() -> KeyBindingsBase:
    """

        Bindings to select text with shift + cursor movements
    
    """
    def unshift_move(event: E) -> None:
        """

                Used for the shift selection mode. When called with
                a shift + movement key press event, moves the cursor
                as if shift is not pressed.
        
        """
    def _start_selection(event: E) -> None:
        """

                Start selection with shift + movement.
        
        """
    def _extend_selection(event: E) -> None:
        """

                Extend the selection
        
        """
    def _replace_selection(event: E) -> None:
        """

                Replace selection by what is typed
        
        """
    def _newline(event: E) -> None:
        """

                A newline replaces the selection
        
        """
    def _delete(event: E) -> None:
        """

                Delete selection.
        
        """
    def _yank(event: E) -> None:
        """

                In shift selection mode, yanking (pasting) replace the selection.
        
        """
    def _cancel(event: E) -> None:
        """

                Cancel selection.
        
        """
