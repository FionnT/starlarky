def TextObjectType(Enum):
    """
    EXCLUSIVE
    """
def TextObject:
    """

        Return struct for functions wrapped in ``text_object``.
        Both `start` and `end` are relative to the current cursor position.
    
    """
2021-03-02 20:51:45,525 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:45,525 : INFO : tokenize_signature : --> do i ever get here?
    def __init__(
        self, start: int, end: int = 0, type: TextObjectType = TextObjectType.EXCLUSIVE
    ):
        """

                Return a (start, end) tuple where start <= end.
        
        """
    def operator_range(self, document: Document) -> Tuple[int, int]:
        """

                Return a (start, end) tuple with start <= end that indicates the range
                operators should operate on.
                `buffer` is used to get start and end of line positions.

                This should return something that can be used in a slice, so the `end`
                position is *not* included.
        
        """
    def get_line_numbers(self, buffer: Buffer) -> Tuple[int, int]:
        """

                Return a (start_line, end_line) pair.
        
        """
    def cut(self, buffer: Buffer) -> Tuple[Document, ClipboardData]:
        """

                Turn text object into `ClipboardData` instance.
        
        """
2021-03-02 20:51:45,528 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:45,528 : INFO : tokenize_signature : --> do i ever get here?
def create_text_object_decorator(
    key_bindings: KeyBindings,
) -> Callable[..., Callable[[_TOF], _TOF]]:
    """

        Create a decorator that can be used to register Vi text object implementations.
    
    """
2021-03-02 20:51:45,528 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:45,528 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:45,528 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:45,528 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:45,528 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:45,528 : INFO : tokenize_signature : --> do i ever get here?
    def text_object_decorator(
        *keys: Union[Keys, str],
        filter: Filter = Always(),
        no_move_handler: bool = False,
        no_selection_handler: bool = False,
        eager: bool = False,
    ) -> Callable[[_TOF], _TOF]:
        """

                Register a text object function.

                Usage::

                    @text_object('w', filter=..., no_move_handler=False)
                    def handler(event):
                        # Return a text object for this key.
                        return TextObject(...)

                :param no_move_handler: Disable the move handler in navigation mode.
                    (It's still active in selection mode.)
        
        """
        def decorator(text_object_func: _TOF) -> _TOF:
            """
             Arguments are multiplied.

            """
                def _move_in_navigation_mode(event: E) -> None:
                    """

                                        Move handler for navigation mode.
                    
                    """
                def _move_in_selection_mode(event: E) -> None:
                    """

                                        Move handler for selection mode.
                    
                    """
2021-03-02 20:51:45,530 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:45,530 : INFO : tokenize_signature : --> do i ever get here?
def create_operator_decorator(
    key_bindings: KeyBindings,
) -> Callable[..., Callable[[_OF], _OF]]:
    """

        Create a decorator that can be used for registering Vi operators.
    
    """
2021-03-02 20:51:45,531 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:45,531 : INFO : tokenize_signature : --> do i ever get here?
    def operator_decorator(
        *keys: Union[Keys, str], filter: Filter = Always(), eager: bool = False
    ) -> Callable[[_OF], _OF]:
        """

                Register a Vi operator.

                Usage::

                    @operator('d', filter=...)
                    def handler(event, text_object):
                        # Do something with the text object here.
        
        """
        def decorator(operator_func: _OF) -> _OF:
            """

                            Handle operator in navigation mode.
                
            """
            def _operator_in_selection(event: E) -> None:
                """

                                Handle operator in selection mode.
                
                """
def load_vi_bindings() -> KeyBindingsBase:
    """

        Vi extensions.

        # Overview of Readline Vi commands:
        # http://www.catonmat.net/download/bash-vi-editing-mode-cheat-sheet.pdf
    
    """
    def _back_to_navigation(event: E) -> None:
        """

                Escape goes to vi navigation mode.
        
        """
    def _up_in_selection(event: E) -> None:
        """

                Arrow up in selection mode.
        
        """
    def _down_in_selection(event: E) -> None:
        """

                Arrow down in selection mode.
        
        """
    def _up_in_navigation(event: E) -> None:
        """

                Arrow up and ControlP in navigation mode go up.
        
        """
    def _go_up(event: E) -> None:
        """

                Go up, but if we enter a new history entry, move to the start of the
                line.
        
        """
    def _go_down(event: E) -> None:
        """

                Arrow down and Control-N in navigation mode.
        
        """
    def _go_down2(event: E) -> None:
        """

                Go down, but if we enter a new history entry, go to the start of the line.
        
        """
    def _go_left(event: E) -> None:
        """

                In navigation-mode, move cursor.
        
        """
    def _complete_next(event: E) -> None:
        """
        c-p
        """
    def _complete_prev(event: E) -> None:
        """

                Control-P: To previous completion.
        
        """
    def _accept_completion(event: E) -> None:
        """

                Accept current completion.
        
        """
    def _cancel_completion(event: E) -> None:
        """

                Cancel completion. Go back to originally typed text.
        
        """
    def is_returnable() -> bool:
        """
         In navigation mode, pressing enter will always return the input.

        """
    def _start_of_next_line(event: E) -> None:
        """

                Go to the beginning of next line.
        
        """
    def _insert_mode(event: E) -> None:
        """

                Pressing the Insert key.
        
        """
    def _navigation_mode(event: E) -> None:
        """

                Pressing the Insert key.
        
        """
    def _a(event: E) -> None:
        """
        A
        """
    def _A(event: E) -> None:
        """
        C
        """
    def _change_until_end_of_line(event: E) -> None:
        """

                Change to end of line.
                Same as 'c$' (which is implemented elsewhere.)
        
        """
    def _change_current_line(event: E) -> None:  # TODO: implement 'arg'
        """
         TODO: implement 'arg'
        """
    def _delete_until_end_of_line(event: E) -> None:
        """

                Delete from cursor position until the end of the line.
        
        """
    def _delete_line(event: E) -> None:
        """

                Delete line. (Or the following 'n' lines.)
        
        """
    def _cut(event: E) -> None:
        """

                Cut selection.
                ('x' is not an operator.)
        
        """
    def _i(event: E) -> None:
        """
        I
        """
    def _I(event: E) -> None:
        """
        I
        """
    def insert_in_block_selection(event: E, after: bool = False) -> None:
        """

                Insert in block selection mode.
        
        """
            def get_pos(from_to: Tuple[int, int]) -> int:
                """
                 Go to 'INSERT_MULTIPLE' mode.

                """
    def _append_after_block(event: E) -> None:
        """
        J
        """
    def _join(event: E) -> None:
        """

                Join lines.
        
        """
    def _join_nospace(event: E) -> None:
        """

                Join lines without space.
        
        """
    def _join_selection(event: E) -> None:
        """

                Join selected lines.
        
        """
    def _join_selection_nospace(event: E) -> None:
        """

                Join selected lines without space.
        
        """
    def _paste(event: E) -> None:
        """

                Paste after
        
        """
    def _paste_before(event: E) -> None:
        """

                Paste before
        
        """
    def _paste_register(event: E) -> None:
        """

                Paste from named register.
        
        """
    def _paste_register_before(event: E) -> None:
        """

                Paste (before) from named register.
        
        """
    def _replace(event: E) -> None:
        """

                Go to 'replace-single'-mode.
        
        """
    def _replace_mode(event: E) -> None:
        """

                Go to 'replace'-mode.
        
        """
    def _substitute(event: E) -> None:
        """

                Substitute with new text
                (Delete character(s) and go to insert mode.)
        
        """
    def _undo(event: E) -> None:
        """
        V
        """
    def _visual_line(event: E) -> None:
        """

                Start lines selection.
        
        """
    def _visual_block(event: E) -> None:
        """

                Enter block selection mode.
        
        """
    def _visual_line2(event: E) -> None:
        """

                Exit line selection mode, or go from non line selection mode to line
                selection mode.
        
        """
    def _visual(event: E) -> None:
        """

                Enter character selection mode.
        
        """
    def _visual2(event: E) -> None:
        """

                Exit character selection mode, or go from non-character-selection mode
                to character selection mode.
        
        """
    def _visual_block2(event: E) -> None:
        """

                Exit block selection mode, or go from non block selection mode to block
                selection mode.
        
        """
    def _visual_auto_word(event: E) -> None:
        """

                Switch from visual linewise mode to visual characterwise mode.
        
        """
    def _delete(event: E) -> None:
        """

                Delete character.
        
        """
    def _delete_before_cursor(event: E) -> None:
        """
        y
        """
    def _yank_line(event: E) -> None:
        """

                Yank the whole line.
        
        """
    def _next_line(event: E) -> None:
        """

                Move to first non whitespace of next line
        
        """
    def _prev_line(event: E) -> None:
        """

                Move to first non whitespace of previous line
        
        """
    def _indent(event: E) -> None:
        """

                Indent lines.
        
        """
    def _unindent(event: E) -> None:
        """

                Unindent lines.
        
        """
    def _open_above(event: E) -> None:
        """

                Open line above and enter insertion mode
        
        """
    def _open_below(event: E) -> None:
        """

                Open line below and enter insertion mode
        
        """
    def _reverse_case(event: E) -> None:
        """

                Reverse case of current character and move cursor forward.
        
        """
    def _lowercase_line(event: E) -> None:
        """

                Lowercase current line.
        
        """
    def _uppercase_line(event: E) -> None:
        """

                Uppercase current line.
        
        """
    def _swapcase_line(event: E) -> None:
        """

                Swap case of the current line.
        
        """
    def _prev_occurence(event: E) -> None:
        """

                Go to previous occurrence of this word.
        
        """
    def _next_occurance(event: E) -> None:
        """

                Go to next occurrence of this word.
        
        """
    def _begin_of_sentence(event: E) -> None:
        """
         TODO: go to begin of sentence.
         XXX: should become text_object.

        """
    def _end_of_sentence(event: E) -> None:
        """
         TODO: go to end of sentence.
         XXX: should become text_object.

        """
    def _unknown_text_object(event: E) -> None:
        """

                Unknown key binding while waiting for a text object.
        
        """
2021-03-02 20:51:45,549 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:45,549 : INFO : tokenize_signature : --> do i ever get here?
    def create_delete_and_change_operators(
        delete_only: bool, with_register: bool = False
    ) -> None:
        """

                Delete and change operators.

                :param delete_only: Create an operator that deletes, but doesn't go to insert mode.
                :param with_register: Copy the deleted text to this named register instead of the clipboard.
        
        """
        def delete_or_change_operator(event: E, text_object: TextObject) -> None:
            """
             Set deleted/changed text to clipboard or named register.

            """
2021-03-02 20:51:45,550 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:45,551 : INFO : tokenize_signature : --> do i ever get here?
    def create_transform_handler(
        filter: Filter, transform_func: Callable[[str], str], *a: str
    ) -> None:
        """

                    Apply transformation (uppercase, lowercase, rot13, swap case).
            
        """
    def _yank(event: E, text_object: TextObject) -> None:
        """

                Yank operator. (Copy text.)
        
        """
    def _yank_to_register(event: E, text_object: TextObject) -> None:
        """

                Yank selection to named register.
        
        """
    def _indent_text_object(event: E, text_object: TextObject) -> None:
        """

                Indent.
        
        """
    def _unindent_text_object(event: E, text_object: TextObject) -> None:
        """

                Unindent.
        
        """
    def _reshape(event: E, text_object: TextObject) -> None:
        """

                Reshape text.
        
        """
    def _b(event: E) -> TextObject:
        """

                Move one word or token left.
        
        """
    def _B(event: E) -> TextObject:
        """

                Move one non-blank word left
        
        """
    def _dollar(event: E) -> TextObject:
        """

                'c$', 'd$' and '$':  Delete/change/move until end of line.
        
        """
    def _word_forward(event: E) -> TextObject:
        """

                'word' forward. 'cw', 'dw', 'w': Delete/change/move one word.
        
        """
    def _WORD_forward(event: E) -> TextObject:
        """

                'WORD' forward. 'cW', 'dW', 'W': Delete/change/move one WORD.
        
        """
    def _end_of_word(event: E) -> TextObject:
        """

                End of 'word': 'ce', 'de', 'e'
        
        """
    def _end_of_WORD(event: E) -> TextObject:
        """

                End of 'WORD': 'cE', 'dE', 'E'
        
        """
    def _inner_word(event: E) -> TextObject:
        """

                Inner 'word': ciw and diw
        
        """
    def _a_word(event: E) -> TextObject:
        """

                A 'word': caw and daw
        
        """
    def _inner_WORD(event: E) -> TextObject:
        """

                Inner 'WORD': ciW and diW
        
        """
    def _a_WORD(event: E) -> TextObject:
        """

                A 'WORD': caw and daw
        
        """
    def _paragraph(event: E) -> TextObject:
        """

                Auto paragraph.
        
        """
    def _start_of_line(event: E) -> TextObject:
        """
         'c^', 'd^' and '^': Soft start of line, after whitespace. 
        """
    def _hard_start_of_line(event: E) -> TextObject:
        """

                'c0', 'd0': Hard start of line, before whitespace.
                (The move '0' key is implemented elsewhere, because a '0' could also change the `arg`.)
        
        """
2021-03-02 20:51:45,555 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:45,555 : INFO : tokenize_signature : --> do i ever get here?
    def create_ci_ca_handles(
        ci_start: str, ci_end: str, inner: bool, key: Optional[str] = None
    ) -> None:
        """
         TODO: 'dat', 'dit', (tags (like xml)

        """
        def handler(event: E) -> TextObject:
            """
             Quotes

            """
    def _previous_section(event: E) -> TextObject:
        """

                Move to previous blank-line separated section.
                Implements '{', 'c{', 'd{', 'y{'
        
        """
    def _next_section(event: E) -> TextObject:
        """

                Move to next blank-line separated section.
                Implements '}', 'c}', 'd}', 'y}'
        
        """
    def _next_occurence(event: E) -> TextObject:
        """

                Go to next occurrence of character. Typing 'fx' will move the
                cursor to the next occurrence of character. 'x'.
        
        """
    def _previous_occurance(event: E) -> TextObject:
        """

                Go to previous occurrence of character. Typing 'Fx' will move the
                cursor to the previous occurrence of character. 'x'.
        
        """
    def _t(event: E) -> TextObject:
        """

                Move right to the next occurrence of c, then one char backward.
        
        """
    def _T(event: E) -> TextObject:
        """

                Move left to the previous occurrence of c, then one char forward.
        
        """
    def repeat(reverse: bool) -> None:
        """

                Create ',' and ';' commands.
        
        """
        def _(event: E) -> TextObject:
            """

                        Repeat the last 'f'/'F'/'t'/'T' command.
            
            """
    def _left(event: E) -> TextObject:
        """

                Implements 'ch', 'dh', 'h': Cursor left.
        
        """
    def _down(event: E) -> TextObject:
        """

                Implements 'cj', 'dj', 'j', ... Cursor up.
        
        """
    def _up(event: E) -> TextObject:
        """

                Implements 'ck', 'dk', 'k', ... Cursor up.
        
        """
    def _right(event: E) -> TextObject:
        """

                Implements 'cl', 'dl', 'l', 'c ', 'd ', ' '. Cursor right.
        
        """
    def _top_of_screen(event: E) -> TextObject:
        """

                Moves to the start of the visible region. (Below the scroll offset.)
                Implements 'cH', 'dH', 'H'.
        
        """
    def _middle_of_screen(event: E) -> TextObject:
        """

                Moves cursor to the vertical center of the visible region.
                Implements 'cM', 'dM', 'M'.
        
        """
    def _end_of_screen(event: E) -> TextObject:
        """

                Moves to the end of the visible region. (Above the scroll offset.)
        
        """
    def _search_next(event: E) -> TextObject:
        """

                Search next.
        
        """
    def _search_next2(event: E) -> None:
        """

                Search next in navigation mode. (This goes through the history.)
        
        """
    def _search_previous(event: E) -> TextObject:
        """

                Search previous.
        
        """
    def _search_previous2(event: E) -> None:
        """

                Search previous in navigation mode. (This goes through the history.)
        
        """
    def _scroll_top(event: E) -> None:
        """

                Scrolls the window to makes the current line the first line in the visible region.
        
        """
    def _scroll_bottom(event: E) -> None:
        """

                Scrolls the window to makes the current line the last line in the visible region.
        
        """
    def _scroll_center(event: E) -> None:
        """

                Center Window vertically around cursor.
        
        """
    def _goto_corresponding_bracket(event: E) -> TextObject:
        """

                Implements 'c%', 'd%', '%, 'y%' (Move to corresponding bracket.)
                If an 'arg' has been given, go this this % position in the file.
        
        """
    def _to_column(event: E) -> TextObject:
        """

                Move to the n-th column (you may specify the argument n by typing it on
                number keys, for example, 20|).
        
        """
    def _goto_first_line(event: E) -> TextObject:
        """

                Go to the start of the very first line.
                Implements 'gg', 'cgg', 'ygg'
        
        """
    def _goto_last_line(event: E) -> TextObject:
        """

                Go to last non-blank of line.
                'g_', 'cg_', 'yg_', etc..
        
        """
    def _ge(event: E) -> TextObject:
        """

                Go to last character of previous word.
                'ge', 'cge', 'yge', etc..
        
        """
    def _gE(event: E) -> TextObject:
        """

                Go to last character of previous WORD.
                'gE', 'cgE', 'ygE', etc..
        
        """
    def _gm(event: E) -> TextObject:
        """

                Like g0, but half a screenwidth to the right. (Or as much as possible.)
        
        """
    def _last_line(event: E) -> TextObject:
        """

                Go to the end of the document. (If no arg has been given.)
        
        """
    def _to_nth_history_line(event: E) -> None:
        """

                If an argument is given, move to this line in the  history. (for
                example, 15G)
        
        """
        def _arg(event: E) -> None:
            """

                        Always handle numberics in navigation mode as arg.
            
            """
    def _0_arg(event: E) -> None:
        """

                Zero when an argument was already give.
        
        """
    def _insert_text(event: E) -> None:
        """

                Insert data at cursor position.
        
        """
    def _replace_single(event: E) -> None:
        """

                Replace single character at cursor position.
        
        """
    def _insert_text_multiple_cursors(event: E) -> None:
        """

                Insert data at multiple cursor positions at once.
                (Usually a result of pressing 'I' or 'A' in block-selection mode.)
        
        """
    def _delete_before_multiple_cursors(event: E) -> None:
        """

                Backspace, using multiple cursors.
        
        """
    def _delete_after_multiple_cursors(event):
        """

                Delete, using multiple cursors.
        
        """
    def _left_multiple(event: E) -> None:
        """

                Move all cursors to the left.
                (But keep all cursors on the same line.)
        
        """
    def _right_multiple(event: E) -> None:
        """

                Move all cursors to the right.
                (But keep all cursors on the same line.)
        
        """
    def _updown_multiple(event: E) -> None:
        """

                Ignore all up/down key presses when in multiple cursor mode.
        
        """
    def _complete_line(event: E) -> None:
        """

                Pressing the ControlX - ControlL sequence in Vi mode does line
                completion based on the other lines in the document and the history.
        
        """
    def _complete_filename(event: E) -> None:
        """

                Complete file names.
        
        """
    def _digraph(event: E) -> None:
        """

                Go into digraph mode.
        
        """
    def digraph_symbol_1_given() -> bool:
        """

                First digraph symbol.
        
        """
    def _create_digraph(event: E) -> None:
        """

                Insert digraph.
        
        """
    def _quick_normal_mode(event: E) -> None:
        """

                Go into normal mode for one single action.
        
        """
    def _start_macro(event: E) -> None:
        """

                Start recording macro.
        
        """
    def _stop_macro(event: E) -> None:
        """

                Stop recording macro.
        
        """
    def _execute_macro(event: E) -> None:
        """

                Execute macro.

                Notice that we pass `record_in_macro=False`. This ensures that the `@x`
                keys don't appear in the recording itself. This function inserts the
                body of the called macro back into the KeyProcessor, so these keys will
                be added later on to the macro of their handlers have
                `record_in_macro=True`.
        
        """
def load_vi_search_bindings() -> KeyBindingsBase:
    """
     Returns True when the search buffer is empty. 
    """
