def generate_completions(event: E) -> None:
    """
    r"""
        Tab-completion: where the first tab completes the common suffix and the
        second tab lists all the completions.
    
    """
def display_completions_like_readline(event: E) -> None:
    """

        Key binding handler for readline-style tab completion.
        This is meant to be as similar as possible to the way how readline displays
        completions.

        Generate the completions immediately (blocking) and display them above the
        prompt in columns.

        Usage::

            # Call this handler when 'Tab' has been pressed.
            key_bindings.add(Keys.ControlI)(display_completions_like_readline)
    
    """
2021-03-02 20:51:44,836 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:44,836 : INFO : tokenize_signature : --> do i ever get here?
def _display_completions_like_readline(
    app: "Application", completions: List[Completion]
) -> "asyncio.Task[None]":
    """

        Display the list of completions in columns above the prompt.
        This will ask for a confirmation if there are too many completions to fit
        on a single page and provide a paginator to walk through them.
    
    """
    def display(page: int) -> None:
        """
         Display completions.

        """
    async def run_compl() -> None:
            """
             Coroutine. 
            """
def _create_more_session(message: str = "--MORE--") -> "PromptSession":
    """

        Create a `PromptSession` object for displaying the "--MORE--".
    
    """
    def _yes(event: E) -> None:
        """
        n
        """
    def _no(event: E) -> None:
        """
         Disable inserting of text. 
        """
