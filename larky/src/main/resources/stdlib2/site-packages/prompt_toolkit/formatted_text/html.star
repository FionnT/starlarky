def HTML:
    """

        HTML formatted text.
        Take something HTML-like, for use as a formatted string.

        ::

            # Turn something into red.
            HTML('<style fg="ansired" bg="#00ff44">...</style>')

            # Italic, bold and underline.
            HTML('<i>...</i>')
            HTML('<b>...</b>')
            HTML('<u>...</u>')

        All HTML elements become available as a "class" in the style sheet.
        E.g. ``<username>...</username>`` can be styled, by setting a style for
        ``username``.
    
    """
    def __init__(self, value: str) -> None:
        """
        <html-root>%s</html-root>
        """
        def get_current_style() -> str:
            """
             Build style string for current node. 
            """
        def process_node(node: Any) -> None:
            """
             Process node recursively. 
            """
    def __repr__(self) -> str:
        """
        HTML(%r)
        """
    def __pt_formatted_text__(self) -> StyleAndTextTuples:
        """
        HTML
        """
    def __mod__(self, value: Union[object, Tuple[object, ...]]) -> "HTML":
        """

                HTML('<b>%s</b>') % value
        
        """
def html_escape(text: object) -> str:
    """
     The string interpolation functions also take integers and other types.
     Convert to string first.

    """
