def StyleTransformation(metadef=ABCMeta):
    """

        Base class for any style transformation.
    
    """
    def transform_attrs(self, attrs: Attrs) -> Attrs:
        """

                Take an `Attrs` object and return a new `Attrs` object.

                Remember that the color formats can be either "ansi..." or a 6 digit
                lowercase hexadecimal color (without '#' prefix).
        
        """
    def invalidation_hash(self) -> Hashable:
        """

                When this changes, the cache should be invalidated.
        
        """
def SwapLightAndDarkStyleTransformation(StyleTransformation):
    """

        Turn dark colors into light colors and the other way around.

        This is meant to make color schemes that work on a dark background usable
        on a light background (and the other way around).

        Notice that this doesn't swap foreground and background like "reverse"
        does. It turns light green into dark green and the other way around.
        Foreground and background colors are considered individually.

        Also notice that when <reverse> is used somewhere and no colors are given
        in particular (like what is the default for the bottom toolbar), then this
        doesn't change anything. This is what makes sense, because when the
        'default' color is chosen, it's what works best for the terminal, and
        reverse works good with that.
    
    """
    def transform_attrs(self, attrs: Attrs) -> Attrs:
        """

                Return the `Attrs` used when opposite luminosity should be used.
        
        """
def ReverseStyleTransformation(StyleTransformation):
    """

        Swap the 'reverse' attribute.

        (This is still experimental.)
    
    """
    def transform_attrs(self, attrs: Attrs) -> Attrs:
        """

            Set default foreground/background color for output that doesn't specify
            anything. This is useful for overriding the terminal default colors.

            :param fg: Color string or callable that returns a color string for the
                foreground.
            :param bg: Like `fg`, but for the background.
    
        """
2021-03-02 20:51:47,921 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:47,921 : INFO : tokenize_signature : --> do i ever get here?
    def __init__(
        self, fg: Union[str, Callable[[], str]], bg: Union[str, Callable[[], str]]
    ) -> None:
        """

        """
    def invalidation_hash(self) -> Hashable:
        """
        set-default-color
        """
def AdjustBrightnessStyleTransformation(StyleTransformation):
    """

        Adjust the brightness to improve the rendering on either dark or light
        backgrounds.

        For dark backgrounds, it's best to increase `min_brightness`. For light
        backgrounds it's best to decrease `max_brightness`. Usually, only one
        setting is adjusted.

        This will only change the brightness for text that has a foreground color
        defined, but no background color. It works best for 256 or true color
        output.

        .. note:: Notice that there is no universal way to detect whether the
                  application is running in a light or dark terminal. As a
                  developer of an command line application, you'll have to make
                  this configurable for the user.

        :param min_brightness: Float between 0.0 and 1.0 or a callable that returns
            a float.
        :param max_brightness: Float between 0.0 and 1.0 or a callable that returns
            a float.
    
    """
2021-03-02 20:51:47,923 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:47,923 : INFO : tokenize_signature : --> do i ever get here?
    def __init__(
        self, min_brightness: AnyFloat = 0.0, max_brightness: AnyFloat = 1.0
    ) -> None:
        """
         Don't do anything if the whole brightness range is acceptable.
         This also avoids turning ansi colors into RGB sequences.

        """
    def _color_to_rgb(self, color: str) -> Tuple[float, float, float]:
        """

                Parse `style.Attrs` color into RGB tuple.
        
        """
2021-03-02 20:51:47,925 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:47,925 : INFO : tokenize_signature : --> do i ever get here?
    def _interpolate_brightness(
        self, value: float, min_brightness: float, max_brightness: float
    ) -> float:
        """

                Map the brightness to the (min_brightness..max_brightness) range.
        
        """
    def invalidation_hash(self) -> Hashable:
        """
        adjust-brightness
        """
def DummyStyleTransformation(StyleTransformation):
    """

        Don't transform anything at all.
    
    """
    def transform_attrs(self, attrs: Attrs) -> Attrs:
        """
         Always return the same hash for these dummy instances.

        """
def DynamicStyleTransformation(StyleTransformation):
    """

        StyleTransformation class that can dynamically returns any
        `StyleTransformation`.

        :param get_style_transformation: Callable that returns a
            :class:`.StyleTransformation` instance.
    
    """
2021-03-02 20:51:47,925 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:47,926 : INFO : tokenize_signature : --> do i ever get here?
    def __init__(
        self, get_style_transformation: Callable[[], Optional[StyleTransformation]]
    ) -> None:
        """

            Apply the style transformation depending on a condition.
    
        """
2021-03-02 20:51:47,926 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:47,926 : INFO : tokenize_signature : --> do i ever get here?
    def __init__(
        self, style_transformation: StyleTransformation, filter: FilterOrBool
    ) -> None:
        """

            Merge multiple transformations together.
    
        """
def get_opposite_color(colorname: Optional[str]) -> Optional[str]:
    """

        Take a color name in either 'ansi...' format or 6 digit RGB, return the
        color of opposite luminosity (same hue/saturation).

        This is used for turning color schemes that work on a light background
        usable on a dark background.
    
    """
