def style_from_pygments_cls(pygments_style_cls: Type["PygmentsStyle"]) -> Style:
    """

        Shortcut to create a :class:`.Style` instance from a Pygments style class
        and a style dictionary.

        Example::

            from prompt_toolkit.styles.from_pygments import style_from_pygments_cls
            from pygments.styles import get_style_by_name
            style = style_from_pygments_cls(get_style_by_name('monokai'))

        :param pygments_style_cls: Pygments style class to start from.
    
    """
def style_from_pygments_dict(pygments_dict: Dict["Token", str]) -> Style:
    """

        Create a :class:`.Style` instance from a Pygments style dictionary.
        (One that maps Token objects to style strings.)
    
    """
def pygments_token_to_classname(token: "Token") -> str:
    """

        Turn e.g. `Token.Name.Exception` into `'pygments.name.exception'`.

        (Our Pygments lexer will also turn the tokens that pygments produces in a
        prompt_toolkit list of fragments that match these styling rules.)
    
    """
