def BaseStyle(metadef=ABCMeta):
    """

        Abstract base class for prompt_toolkit styles.
    
    """
2021-03-02 20:51:48,803 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:48,803 : INFO : tokenize_signature : --> do i ever get here?
    def get_attrs_for_style_str(
        self, style_str: str, default: Attrs = DEFAULT_ATTRS
    ) -> Attrs:
        """

                Return :class:`.Attrs` for the given style string.

                :param style_str: The style string. This can contain inline styling as
                    well as classnames (e.g. "class:title").
                :param default: `Attrs` to be used if no styling was defined.
        
        """
    def style_rules(self) -> List[Tuple[str, str]]:
        """

                The list of style rules, used to create this style.
                (Required for `DynamicStyle` and `_MergedStyle` to work.)
        
        """
    def invalidation_hash(self) -> Hashable:
        """

                Invalidation hash for the style. When this changes over time, the
                renderer knows that something in the style changed, and that everything
                has to be redrawn.
        
        """
def DummyStyle(BaseStyle):
    """

        A style that doesn't style anything.
    
    """
2021-03-02 20:51:48,804 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:48,804 : INFO : tokenize_signature : --> do i ever get here?
    def get_attrs_for_style_str(
        self, style_str: str, default: Attrs = DEFAULT_ATTRS
    ) -> Attrs:
        """
         Always the same value.
        """
    def style_rules(self) -> List[Tuple[str, str]]:
        """

            Style class that can dynamically returns an other Style.

            :param get_style: Callable that returns a :class:`.Style` instance.
    
        """
    def __init__(self, get_style: Callable[[], Optional[BaseStyle]]):
