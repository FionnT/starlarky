def ValidationError(Exception):
    """

        Error raised by :meth:`.Validator.validate`.

        :param cursor_position: The cursor position where the error occurred.
        :param message: Text.
    
    """
    def __init__(self, cursor_position: int = 0, message: str = "") -> None:
        """
        %s(cursor_position=%r, message=%r)
        """
def Validator(metadef=ABCMeta):
    """

        Abstract base class for an input validator.

        A validator is typically created in one of the following two ways:

        - Either by overriding this class and implementing the `validate` method.
        - Or by passing a callable to `Validator.from_callable`.

        If the validation takes some time and needs to happen in a background
        thread, this can be wrapped in a :class:`.ThreadedValidator`.
    
    """
    def validate(self, document: Document) -> None:
        """

                Validate the input.
                If invalid, this should raise a :class:`.ValidationError`.

                :param document: :class:`~prompt_toolkit.document.Document` instance.
        
        """
    async def validate_async(self, document: Document) -> None:
            """

                    Return a `Future` which is set when the validation is ready.
                    This function can be overloaded in order to provide an asynchronous
                    implementation.
        
            """
2021-03-02 20:51:56,381 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:56,382 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:56,382 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:56,382 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:56,382 : INFO : tokenize_signature : --> do i ever get here?
    def from_callable(
        cls,
        validate_func: Callable[[str], bool],
        error_message: str = "Invalid input",
        move_cursor_to_end: bool = False,
    ) -> "Validator":
        """

                Create a validator from a simple validate callable. E.g.:

                .. code:: python

                    def is_valid(text):
                        return text in ['hello', 'world']
                    Validator.from_callable(is_valid, error_message='Invalid input')

                :param validate_func: Callable that takes the input string, and returns
                    `True` if the input is valid input.
                :param error_message: Message to be displayed if the input is invalid.
                :param move_cursor_to_end: Move the cursor to the end of the input, if
                    the input is invalid.
        
        """
def _ValidatorFromCallable(Validator):
    """

        Validate input from a simple callable.
    
    """
2021-03-02 20:51:56,382 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:56,382 : INFO : tokenize_signature : --> do i ever get here?
    def __init__(
        self, func: Callable[[str], bool], error_message: str, move_cursor_to_end: bool
    ) -> None:
        """
        Validator.from_callable(%r)
        """
    def validate(self, document: Document) -> None:
        """

            Wrapper that runs input validation in a thread.
            (Use this to prevent the user interface from becoming unresponsive if the
            input validation takes too much time.)
    
        """
    def __init__(self, validator: Validator) -> None:
        """

                Run the `validate` function in a thread.
        
        """
        def run_validation_thread() -> None:
            """

                Validator class that accepts any input.
    
            """
    def validate(self, document: Document) -> None:
        """
         Don't raise any exception.
        """
def ConditionalValidator(Validator):
    """

        Validator that can be switched on/off according to
        a filter. (This wraps around another validator.)
    
    """
    def __init__(self, validator: Validator, filter: FilterOrBool) -> None:
        """
         Call the validator only if the filter is active.

        """
def DynamicValidator(Validator):
    """

        Validator class that can dynamically returns any Validator.

        :param get_validator: Callable that returns a :class:`.Validator` instance.
    
    """
    def __init__(self, get_validator: Callable[[], Optional[Validator]]) -> None:
