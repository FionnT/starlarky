def AbstractAsyncContextManager(abc.ABC):
    """
    An abstract base class for asynchronous context managers.
    """
    async def __aenter__(self):
            """
            Return `self` upon entering the runtime context.
            """
    async def __aexit__(self, exc_type, exc_value, traceback):
            """
            Raise any exception triggered within the runtime context.
            """
    def __subclasshook__(cls, C):
        """
        __aenter__
        """
def _GeneratorContextManagerBase:
    """
    Shared functionality for @contextmanager and @asynccontextmanager.
    """
    def __init__(self, func, args, kwds):
        """
         Issue 19330: ensure context manager instances have good docstrings

        """
2021-03-02 20:51:52,480 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:52,480 : INFO : tokenize_signature : --> do i ever get here?
def _AsyncGeneratorContextManager(
    _GeneratorContextManagerBase, AbstractAsyncContextManager
):
    """
    Helper for @asynccontextmanager.
    """
    async def __aenter__(self):
            """
            generator didn't yield
            """
    async def __aexit__(self, typ, value, traceback):
            """
            generator didn't stop
            """
def asynccontextmanager(func):
    """
    @asynccontextmanager decorator.
        Typical usage:
            @asynccontextmanager
            async def some_async_generator(<arguments>):
                <setup>
                try:
                    yield <value>
                finally:
                    <cleanup>
        This makes this:
            async with some_async_generator(<arguments>) as <variable>:
                <body>
        equivalent to this:
            <setup>
            try:
                <variable> = <value>
                <body>
            finally:
                <cleanup>
    
    """
    def helper(*args, **kwds):
