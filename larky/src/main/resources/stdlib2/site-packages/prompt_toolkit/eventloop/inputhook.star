2021-03-02 20:51:53,372 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:53,372 : INFO : tokenize_signature : --> do i ever get here?
def new_eventloop_with_inputhook(
    inputhook: Callable[["InputHookContext"], None]
) -> AbstractEventLoop:
    """

        Create a new event loop with the given inputhook.
    
    """
2021-03-02 20:51:53,372 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:53,372 : INFO : tokenize_signature : --> do i ever get here?
def set_eventloop_with_inputhook(
    inputhook: Callable[["InputHookContext"], None]
) -> AbstractEventLoop:
    """

        Create a new event loop with the given inputhook, and activate it.
    
    """
def InputHookSelector(BaseSelector):
    """

        Usage:

            selector = selectors.SelectSelector()
            loop = asyncio.SelectorEventLoop(InputHookSelector(selector, inputhook))
            asyncio.set_event_loop(loop)
    
    """
2021-03-02 20:51:53,373 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:53,373 : INFO : tokenize_signature : --> do i ever get here?
    def __init__(
        self, selector: BaseSelector, inputhook: Callable[["InputHookContext"], None]
    ) -> None:
        """
         If there are tasks in the current event loop,
         don't run the input hook.

        """
        def run_selector() -> None:
            """
            b"x
            """
        def input_is_ready() -> bool:
            """
             Call inputhook.
             The inputhook function is supposed to return when our selector
             becomes ready. The inputhook can do that by registering the fd in its
             own loop, or by checking the `input_is_ready` function regularly.

            """
    def close(self) -> None:
        """

                Clean up resources.
        
        """
    def get_map(self):
        """

            Given as a parameter to the inputhook.
    
        """
    def __init__(self, fileno: int, input_is_ready: Callable[[], bool]) -> None:
