def AppSession:
    """

        An AppSession is an interactive session, usually connected to one terminal.
        Within one such session, interaction with many applications can happen, one
        after the other.

        The input/output device is not supposed to change during one session.

        Warning: Always use the `create_app_session` function to create an
        instance, so that it gets activated correctly.

        :param input: Use this as a default input for all applications
            running in this session, unless an input is passed to the `Application`
            explicitely.
        :param output: Use this as a default output.
    
    """
2021-03-02 20:51:54,051 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:54,051 : INFO : tokenize_signature : --> do i ever get here?
    def __init__(
        self, input: Optional["Input"] = None, output: Optional["Output"] = None
    ) -> None:
        """
         The application will be set dynamically by the `set_app` context
         manager. This is called in the application itself.

        """
    def __repr__(self) -> str:
        """
        AppSession(app=%r)
        """
    def input(self) -> "Input":
        """
        Output
        """
def get_app_session() -> AppSession:
    """
    Application[Any]
    """
def get_app_or_none() -> Optional["Application[Any]"]:
    """

        Get the current active (running) Application, or return `None` if no
        application is running.
    
    """
def set_app(app: "Application[Any]") -> Generator[None, None, None]:
    """

        Context manager that sets the given :class:`.Application` active in an
        `AppSession`.

        This should only be called by the `Application` itself.
        The application will automatically be active while its running. If you want
        the application to be active in other threads/coroutines, where that's not
        the case, use `contextvars.copy_context()`, or use `Application.context` to
        run it in the appropriate context.
    
    """
2021-03-02 20:51:54,053 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:54,053 : INFO : tokenize_signature : --> do i ever get here?
def create_app_session(
    input: Optional["Input"] = None, output: Optional["Output"] = None
) -> Generator[AppSession, None, None]:
    """

        Create a separate AppSession.

        This is useful if there can be multiple individual `AppSession`s going on.
        Like in the case of an Telnet/SSH server. This functionality uses
        contextvars and requires at least Python 3.7.
    
    """
