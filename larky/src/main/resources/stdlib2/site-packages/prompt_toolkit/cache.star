def SimpleCache(Generic[_T, _U]):
    """

        Very simple cache that discards the oldest item when the cache size is
        exceeded.

        :param maxsize: Maximum size of the cache. (Don't make it too big.)
    
    """
    def __init__(self, maxsize: int = 8) -> None:
        """

                Get object from the cache.
                If not found, call `getter_func` to resolve it, and put that on the top
                of the cache instead.
        
        """
    def clear(self) -> None:
        """
         Clear cache. 
        """
def FastDictCache(Dict[_K, _V]):
    """

        Fast, lightweight cache which keeps at most `size` items.
        It will discard the oldest items in the cache first.

        The cache is a dictionary, which doesn't keep track of access counts.
        It is perfect to cache little immutable objects which are not expensive to
        create, but where a dictionary lookup is still much faster than an object
        instantiation.

        :param get_value: Callable that's called in case of a missing key.
    
    """
    def __init__(self, get_value: Callable[..., _V], size: int = 1000000) -> None:
        """
         Remove the oldest key when the size is exceeded.

        """
def memoized(maxsize: int = 1024) -> Callable[[_F], _F]:
    """

        Memoization decorator for immutable classes and pure functions.
    
    """
    def decorator(obj: _F) -> _F:
