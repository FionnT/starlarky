def Extension(object):
    """
    Book-keeping object for tracking extensions.

        The arguments passed to the constructor are saved as attributes of
        the instance using the same names, and can be accessed by the
        callables passed to :meth:`map` or when iterating over an
        :class:`ExtensionManager` directly.

        :param name: The entry point name.
        :type name: str
        :param entry_point: The EntryPoint instance returned by
            :mod:`entrypoints`.
        :type entry_point: EntryPoint
        :param plugin: The value returned by entry_point.load()
        :param obj: The object returned by ``plugin(*args, **kwds)`` if the
                    manager invoked the extension on load.

    
    """
    def __init__(self, name, entry_point, plugin, obj):
        """
        The name of the module from which the entry point is loaded.

                :return: A string in 'dotted.module' format.
        
        """
    def extras(self):
        """
        The 'extras' settings for the plugin.
        """
    def attr(self):
        """
        The attribute of the module to be loaded.
        """
    def entry_point_target(self):
        """
        The module and attribute referenced by this extension's entry_point.

                :return: A string representation of the target of the entry point in
                    'dotted.module:object' format.
        
        """
def ExtensionManager(object):
    """
    Base class for all of the other managers.

        :param namespace: The namespace for the entry points.
        :type namespace: str
        :param invoke_on_load: Boolean controlling whether to invoke the
            object returned by the entry point after the driver is loaded.
        :type invoke_on_load: bool
        :param invoke_args: Positional arguments to pass when invoking
            the object returned by the entry point. Only used if invoke_on_load
            is True.
        :type invoke_args: tuple
        :param invoke_kwds: Named arguments to pass when invoking
            the object returned by the entry point. Only used if invoke_on_load
            is True.
        :type invoke_kwds: dict
        :param propagate_map_exceptions: Boolean controlling whether exceptions
            are propagated up through the map call or whether they are logged and
            then ignored
        :type propagate_map_exceptions: bool
        :param on_load_failure_callback: Callback function that will be called when
            an entrypoint can not be loaded. The arguments that will be provided
            when this is called (when an entrypoint fails to load) are
            (manager, entrypoint, exception)
        :type on_load_failure_callback: function
        :param verify_requirements: Use setuptools to enforce the
            dependencies of the plugin(s) being loaded. Defaults to False.
        :type verify_requirements: bool
    
    """
2021-03-02 20:53:31,447 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:53:31,447 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:53:31,447 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:53:31,448 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:53:31,448 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:53:31,448 : INFO : tokenize_signature : --> do i ever get here?
    def __init__(self, namespace,
                 invoke_on_load=False,
                 invoke_args=(),
                 invoke_kwds={},
                 propagate_map_exceptions=False,
                 on_load_failure_callback=None,
                 verify_requirements=False):
        """
        'TESTING'
        """
2021-03-02 20:53:31,448 : INFO : tokenize_signature : --> do i ever get here?
    def _init_attributes(self, namespace, propagate_map_exceptions=False,
                         on_load_failure_callback=None):
        """
        Return the list of entry points for this namespace.

                The entry points are not actually loaded, their list is just read and
                returned.

        
        """
    def entry_points_names(self):
        """
        Return the list of entry points names for this namespace.
        """
2021-03-02 20:53:31,450 : INFO : tokenize_signature : --> do i ever get here?
    def _load_plugins(self, invoke_on_load, invoke_args, invoke_kwds,
                      verify_requirements):
        """
        'found extension %r'
        """
2021-03-02 20:53:31,451 : INFO : tokenize_signature : --> do i ever get here?
    def _load_one_plugin(self, ep, invoke_on_load, invoke_args, invoke_kwds,
                         verify_requirements):
        """
         NOTE(dhellmann): Using require=False is deprecated in
         setuptools 11.3.

        """
    def names(self):
        """
        Returns the names of the discovered extensions
        """
    def map(self, func, *args, **kwds):
        """
        Iterate over the extensions invoking func() for each.

                The signature for func() should be::

                    def func(ext, *args, **kwds):
                        pass

                The first argument to func(), 'ext', is the
                :class:`~stevedore.extension.Extension` instance.

                Exceptions raised from within func() are propagated up and
                processing stopped if self.propagate_map_exceptions is True,
                otherwise they are logged and ignored.

                :param func: Callable to invoke for each extension.
                :param args: Variable arguments to pass to func()
                :param kwds: Keyword arguments to pass to func()
                :returns: List of values returned from func()
        
        """
    def _call_extension_method(extension, method_name, *args, **kwds):
        """
        Iterate over the extensions invoking a method by name.

                This is equivalent of using :meth:`map` with func set to
                `lambda x: x.obj.method_name()`
                while being more convenient.

                Exceptions raised from within the called method are propagated up
                and processing stopped if self.propagate_map_exceptions is True,
                otherwise they are logged and ignored.

                .. versionadded:: 0.12

                :param method_name: The extension method name
                                    to call for each extension.
                :param args: Variable arguments to pass to method
                :param kwds: Keyword arguments to pass to method
                :returns: List of values returned from methods
        
        """
    def _invoke_one_plugin(self, response_callback, func, e, args, kwds):
        """
        'error calling %r: %s'
        """
    def items(self):
        """

                Return an iterator of tuples of the form (name, extension).

                This is analogous to the Mapping.items() method.
        
        """
    def __iter__(self):
        """
        Produce iterator for the manager.

                Iterating over an ExtensionManager produces the :class:`Extension`
                instances in the order they would be invoked.
        
        """
    def __getitem__(self, name):
        """
        Return the named extension.

                Accessing an ExtensionManager as a dictionary (``em['name']``)
                produces the :class:`Extension` instance with the
                specified name.
        
        """
    def __contains__(self, name):
        """
        Return true if name is in list of enabled extensions.
        
        """
