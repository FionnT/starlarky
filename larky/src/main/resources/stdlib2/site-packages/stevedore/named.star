def NamedExtensionManager(ExtensionManager):
    """
    Loads only the named extensions.

        This is useful for explicitly enabling extensions in a
        configuration file, for example.

        :param namespace: The namespace for the entry points.
        :type namespace: str
        :param names: The names of the extensions to load.
        :type names: list(str)
        :param invoke_on_load: Boolean controlling whether to invoke the
            object returned by the entry point after the driver is loaded.
        :type invoke_on_load: bool
        :param invoke_args: Positional arguments to pass when invoking
            the object returned by the entry point. Only used if invoke_on_load
            is True.
        :type invoke_args: tuple
        :param invoke_kwds: Named arguments to pass when invoking
            the object returned by the entry point. Only used if invoke_on_load
            is True.
        :type invoke_kwds: dict
        :param name_order: If true, sort the loaded extensions to match the
            order used in ``names``.
        :type name_order: bool
        :param propagate_map_exceptions: Boolean controlling whether exceptions
            are propagated up through the map call or whether they are logged and
            then ignored
        :type propagate_map_exceptions: bool
        :param on_load_failure_callback: Callback function that will be called when
            an entrypoint can not be loaded. The arguments that will be provided
            when this is called (when an entrypoint fails to load) are
            (manager, entrypoint, exception)
        :type on_load_failure_callback: function
        :param on_missing_entrypoints_callback: Callback function that will be
            called when one or more names cannot be found. The provided argument
            will be a subset of the 'names' parameter.
        :type on_missing_entrypoints_callback: function
        :param verify_requirements: Use setuptools to enforce the
            dependencies of the plugin(s) being loaded. Defaults to False.
        :type verify_requirements: bool
        :param warn_on_missing_entrypoint: Flag to control whether failing
            to load a plugin is reported via a log mess. Only applies if
            on_missing_entrypoints_callback is None.
        :type warn_on_missing_entrypoint: bool

    
    """
2021-03-02 20:53:31,802 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:53:31,802 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:53:31,802 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:53:31,802 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:53:31,802 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:53:31,802 : INFO : tokenize_signature : --> do i ever get here?
    def __init__(self, namespace, names,
                 invoke_on_load=False, invoke_args=(), invoke_kwds={},
                 name_order=False, propagate_map_exceptions=False,
                 on_load_failure_callback=None,
                 on_missing_entrypoints_callback=None,
                 verify_requirements=False,
                 warn_on_missing_entrypoint=True):
        """
        'Could not load %s'
        """
2021-03-02 20:53:31,803 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:53:31,804 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:53:31,804 : INFO : tokenize_signature : --> do i ever get here?
    def make_test_instance(cls, extensions, namespace='TESTING',
                           propagate_map_exceptions=False,
                           on_load_failure_callback=None,
                           verify_requirements=False):
        """
        Construct a test NamedExtensionManager

                Test instances are passed a list of extensions to use rather than
                loading them from entry points.

                :param extensions: Pre-configured Extension instances
                :type extensions: list of :class:`~stevedore.extension.Extension`
                :param namespace: The namespace for the manager; used only for
                    identification since the extensions are passed in.
                :type namespace: str
                :param propagate_map_exceptions: Boolean controlling whether exceptions
                    are propagated up through the map call or whether they are logged
                    and then ignored
                :type propagate_map_exceptions: bool
                :param on_load_failure_callback: Callback function that will
                    be called when an entrypoint can not be loaded. The
                    arguments that will be provided when this is called (when
                    an entrypoint fails to load) are (manager, entrypoint,
                    exception)
                :type on_load_failure_callback: function
                :param verify_requirements: Use setuptools to enforce the
                    dependencies of the plugin(s) being loaded. Defaults to False.
                :type verify_requirements: bool
                :return: The manager instance, initialized for testing

        
        """
2021-03-02 20:53:31,805 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:53:31,805 : INFO : tokenize_signature : --> do i ever get here?
    def _init_attributes(self, namespace, names, name_order=False,
                         propagate_map_exceptions=False,
                         on_load_failure_callback=None):
        """
         Check the name before going any further to prevent
         undesirable code from being loaded at all if we are not
         going to use it.

        """
