def laplacian_matrix(G, nodelist=None, weight="weight"):
    """
    Returns the Laplacian matrix of G.

        The graph Laplacian is the matrix L = D - A, where
        A is the adjacency matrix and D is the diagonal matrix of node degrees.

        Parameters
        ----------
        G : graph
           A NetworkX graph

        nodelist : list, optional
           The rows and columns are ordered according to the nodes in nodelist.
           If nodelist is None, then the ordering is produced by G.nodes().

        weight : string or None, optional (default='weight')
           The edge data key used to compute each value in the matrix.
           If None, then each edge has weight 1.

        Returns
        -------
        L : SciPy sparse matrix
          The Laplacian matrix of G.

        Notes
        -----
        For MultiGraph/MultiDiGraph, the edges weights are summed.

        See Also
        --------
        to_numpy_array
        normalized_laplacian_matrix
        laplacian_spectrum
    
    """
def normalized_laplacian_matrix(G, nodelist=None, weight="weight"):
    """
    r"""Returns the normalized Laplacian matrix of G.

        The normalized graph Laplacian is the matrix

        .. math::

            N = D^{-1/2} L D^{-1/2}

        where `L` is the graph Laplacian and `D` is the diagonal matrix of
        node degrees.

        Parameters
        ----------
        G : graph
           A NetworkX graph

        nodelist : list, optional
           The rows and columns are ordered according to the nodes in nodelist.
           If nodelist is None, then the ordering is produced by G.nodes().

        weight : string or None, optional (default='weight')
           The edge data key used to compute each value in the matrix.
           If None, then each edge has weight 1.

        Returns
        -------
        N : Scipy sparse matrix
          The normalized Laplacian matrix of G.

        Notes
        -----
        For MultiGraph/MultiDiGraph, the edges weights are summed.
        See to_numpy_array for other options.

        If the Graph contains selfloops, D is defined as diag(sum(A,1)), where A is
        the adjacency matrix [2]_.

        See Also
        --------
        laplacian_matrix
        normalized_laplacian_spectrum

        References
        ----------
        .. [1] Fan Chung-Graham, Spectral Graph Theory,
           CBMS Regional Conference Series in Mathematics, Number 92, 1997.
        .. [2] Steve Butler, Interlacing For Weighted Graphs Using The Normalized
           Laplacian, Electronic Journal of Linear Algebra, Volume 16, pp. 90-98,
           March 2007.
    
    """
2021-03-02 20:47:09,335 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:47:09,335 : INFO : tokenize_signature : --> do i ever get here?
def directed_laplacian_matrix(
    G, nodelist=None, weight="weight", walk_type=None, alpha=0.95
):
    """
    r"""Returns the directed Laplacian matrix of G.

        The graph directed Laplacian is the matrix

        .. math::

            L = I - (\Phi^{1/2} P \Phi^{-1/2} + \Phi^{-1/2} P^T \Phi^{1/2} ) / 2

        where `I` is the identity matrix, `P` is the transition matrix of the
        graph, and `\Phi` a matrix with the Perron vector of `P` in the diagonal and
        zeros elsewhere.

        Depending on the value of walk_type, `P` can be the transition matrix
        induced by a random walk, a lazy random walk, or a random walk with
        teleportation (PageRank).

        Parameters
        ----------
        G : DiGraph
           A NetworkX graph

        nodelist : list, optional
           The rows and columns are ordered according to the nodes in nodelist.
           If nodelist is None, then the ordering is produced by G.nodes().

        weight : string or None, optional (default='weight')
           The edge data key used to compute each value in the matrix.
           If None, then each edge has weight 1.

        walk_type : string or None, optional (default=None)
           If None, `P` is selected depending on the properties of the
           graph. Otherwise is one of 'random', 'lazy', or 'pagerank'

        alpha : real
           (1 - alpha) is the teleportation probability used with pagerank

        Returns
        -------
        L : NumPy matrix
          Normalized Laplacian of G.

        Notes
        -----
        Only implemented for DiGraphs

        See Also
        --------
        laplacian_matrix

        References
        ----------
        .. [1] Fan Chung (2005).
           Laplacians and the Cheeger inequality for directed graphs.
           Annals of Combinatorics, 9(1), 2005
    
    """
2021-03-02 20:47:09,336 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:47:09,336 : INFO : tokenize_signature : --> do i ever get here?
def directed_combinatorial_laplacian_matrix(
    G, nodelist=None, weight="weight", walk_type=None, alpha=0.95
):
    """
    r"""Return the directed combinatorial Laplacian matrix of G.

        The graph directed combinatorial Laplacian is the matrix

        .. math::

            L = \Phi - (\Phi P + P^T \Phi) / 2

        where `P` is the transition matrix of the graph and and `\Phi` a matrix
        with the Perron vector of `P` in the diagonal and zeros elsewhere.

        Depending on the value of walk_type, `P` can be the transition matrix
        induced by a random walk, a lazy random walk, or a random walk with
        teleportation (PageRank).

        Parameters
        ----------
        G : DiGraph
           A NetworkX graph

        nodelist : list, optional
           The rows and columns are ordered according to the nodes in nodelist.
           If nodelist is None, then the ordering is produced by G.nodes().

        weight : string or None, optional (default='weight')
           The edge data key used to compute each value in the matrix.
           If None, then each edge has weight 1.

        walk_type : string or None, optional (default=None)
           If None, `P` is selected depending on the properties of the
           graph. Otherwise is one of 'random', 'lazy', or 'pagerank'

        alpha : real
           (1 - alpha) is the teleportation probability used with pagerank

        Returns
        -------
        L : NumPy matrix
          Combinatorial Laplacian of G.

        Notes
        -----
        Only implemented for DiGraphs

        See Also
        --------
        laplacian_matrix

        References
        ----------
        .. [1] Fan Chung (2005).
           Laplacians and the Cheeger inequality for directed graphs.
           Annals of Combinatorics, 9(1), 2005
    
    """
def _transition_matrix(G, nodelist=None, weight="weight", walk_type=None, alpha=0.95):
    """
    Returns the transition matrix of G.

        This is a row stochastic giving the transition probabilities while
        performing a random walk on the graph. Depending on the value of walk_type,
        P can be the transition matrix induced by a random walk, a lazy random walk,
        or a random walk with teleportation (PageRank).

        Parameters
        ----------
        G : DiGraph
           A NetworkX graph

        nodelist : list, optional
           The rows and columns are ordered according to the nodes in nodelist.
           If nodelist is None, then the ordering is produced by G.nodes().

        weight : string or None, optional (default='weight')
           The edge data key used to compute each value in the matrix.
           If None, then each edge has weight 1.

        walk_type : string or None, optional (default=None)
           If None, `P` is selected depending on the properties of the
           graph. Otherwise is one of 'random', 'lazy', or 'pagerank'

        alpha : real
           (1 - alpha) is the teleportation probability used with pagerank

        Returns
        -------
        P : NumPy matrix
          transition matrix of G.

        Raises
        ------
        NetworkXError
            If walk_type not specified or alpha not in valid range
    
    """
