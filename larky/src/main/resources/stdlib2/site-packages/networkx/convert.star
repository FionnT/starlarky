def to_networkx_graph(data, create_using=None, multigraph_input=False):
    """
    Make a NetworkX graph from a known data structure.

        The preferred way to call this is automatically
        from the class constructor

        >>> d = {0: {1: {"weight": 1}}}  # dict-of-dicts single edge (0,1)
        >>> G = nx.Graph(d)

        instead of the equivalent

        >>> G = nx.from_dict_of_dicts(d)

        Parameters
        ----------
        data : object to be converted

            Current known types are:
             any NetworkX graph
             dict-of-dicts
             dict-of-lists
             container (e.g. set, list, tuple) of edges
             iterator (e.g. itertools.chain) that produces edges
             generator of edges
             Pandas DataFrame (row per edge)
             numpy matrix
             numpy ndarray
             scipy sparse matrix
             pygraphviz agraph

        create_using : NetworkX graph constructor, optional (default=nx.Graph)
            Graph type to create. If graph instance, then cleared before populated.

        multigraph_input : bool (default False)
            If True and  data is a dict_of_dicts,
            try to create a multigraph assuming dict_of_dict_of_lists.
            If data and create_using are both multigraphs then create
            a multigraph from a multigraph.

    
    """
def to_dict_of_lists(G, nodelist=None):
    """
    Returns adjacency representation of graph as a dictionary of lists.

        Parameters
        ----------
        G : graph
           A NetworkX graph

        nodelist : list
           Use only nodes specified in nodelist

        Notes
        -----
        Completely ignores edge data for MultiGraph and MultiDiGraph.

    
    """
def from_dict_of_lists(d, create_using=None):
    """
    Returns a graph from a dictionary of lists.

        Parameters
        ----------
        d : dictionary of lists
          A dictionary of lists adjacency representation.

        create_using : NetworkX graph constructor, optional (default=nx.Graph)
            Graph type to create. If graph instance, then cleared before populated.

        Examples
        --------
        >>> dol = {0: [1]}  # single edge (0,1)
        >>> G = nx.from_dict_of_lists(dol)

        or

        >>> G = nx.Graph(dol)  # use Graph constructor

    
    """
def to_dict_of_dicts(G, nodelist=None, edge_data=None):
    """
    Returns adjacency representation of graph as a dictionary of dictionaries.

        Parameters
        ----------
        G : graph
           A NetworkX graph

        nodelist : list
           Use only nodes specified in nodelist

        edge_data : list, optional
           If provided,  the value of the dictionary will be
           set to edge_data for all edges.  This is useful to make
           an adjacency matrix type representation with 1 as the edge data.
           If edgedata is None, the edgedata in G is used to fill the values.
           If G is a multigraph, the edgedata is a dict for each pair (u,v).
    
    """
def from_dict_of_dicts(d, create_using=None, multigraph_input=False):
    """
    Returns a graph from a dictionary of dictionaries.

        Parameters
        ----------
        d : dictionary of dictionaries
          A dictionary of dictionaries adjacency representation.

        create_using : NetworkX graph constructor, optional (default=nx.Graph)
            Graph type to create. If graph instance, then cleared before populated.

        multigraph_input : bool (default False)
           When True, the values of the inner dict are assumed
           to be containers of edge data for multiple edges.
           Otherwise this routine assumes the edge data are singletons.

        Examples
        --------
        >>> dod = {0: {1: {"weight": 1}}}  # single edge (0,1)
        >>> G = nx.from_dict_of_dicts(dod)

        or

        >>> G = nx.Graph(dod)  # use Graph constructor

    
    """
def to_edgelist(G, nodelist=None):
    """
    Returns a list of edges in the graph.

        Parameters
        ----------
        G : graph
           A NetworkX graph

        nodelist : list
           Use only nodes specified in nodelist

    
    """
def from_edgelist(edgelist, create_using=None):
    """
    Returns a graph from a list of edges.

        Parameters
        ----------
        edgelist : list or iterator
          Edge tuples

        create_using : NetworkX graph constructor, optional (default=nx.Graph)
            Graph type to create. If graph instance, then cleared before populated.

        Examples
        --------
        >>> edgelist = [(0, 1)]  # single edge (0,1)
        >>> G = nx.from_edgelist(edgelist)

        or

        >>> G = nx.Graph(edgelist)  # use Graph constructor

    
    """
