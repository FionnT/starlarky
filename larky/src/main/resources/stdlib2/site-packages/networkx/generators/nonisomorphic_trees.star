def nonisomorphic_trees(order, create="graph"):
    """
    Returns a list of nonisomporphic trees

        Parameters
        ----------
        order : int
          order of the desired tree(s)

        create : graph or matrix (default="Graph)
          If graph is selected a list of trees will be returned,
          if matrix is selected a list of adjancency matrix will
          be returned

        Returns
        -------
        G : List of NetworkX Graphs

        M : List of Adjacency matrices

        References
        ----------

    
    """
def number_of_nonisomorphic_trees(order):
    """
    Returns the number of nonisomorphic trees

        Parameters
        ----------
        order : int
          order of the desired tree(s)

        Returns
        -------
        length : Number of nonisomorphic graphs for the given order

        References
        ----------

    
    """
def _next_rooted_tree(predecessor, p=None):
    """
    One iteration of the Beyer-Hedetniemi algorithm.
    """
def _next_tree(candidate):
    """
    One iteration of the Wright, Richmond, Odlyzko and McKay
        algorithm.
    """
def _split_tree(layout):
    """
    Returns a tuple of two layouts, one containing the left
        subtree of the root vertex, and one containing the original tree
        with the left subtree removed.
    """
def _layout_to_matrix(layout):
    """
    Create the adjacency matrix for the tree specified by the
        given layout (level sequence).
    """
def _layout_to_graph(layout):
    """
    Create a NetworkX Graph for the tree specified by the
        given layout(level sequence)
    """
