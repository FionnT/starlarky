def make_small_undirected_graph(graph_description, create_using=None):
    """

        Return a small undirected graph described by graph_description.

        See make_small_graph.
    
    """
def make_small_graph(graph_description, create_using=None):
    """

        Return the small graph described by graph_description.

        graph_description is a list of the form [ltype,name,n,xlist]

        Here ltype is one of "adjacencylist" or "edgelist",
        name is the name of the graph and n the number of nodes.
        This constructs a graph of n nodes with integer labels 0,..,n-1.

        If ltype="adjacencylist"  then xlist is an adjacency list
        with exactly n entries, in with the j'th entry (which can be empty)
        specifies the nodes connected to vertex j.
        e.g. the "square" graph C_4 can be obtained by

        >>> G = nx.make_small_graph(
        ...     ["adjacencylist", "C_4", 4, [[2, 4], [1, 3], [2, 4], [1, 3]]]
        ... )

        or, since we do not need to add edges twice,

        >>> G = nx.make_small_graph(["adjacencylist", "C_4", 4, [[2, 4], [3], [4], []]])

        If ltype="edgelist" then xlist is an edge list
        written as [[v1,w2],[v2,w2],...,[vk,wk]],
        where vj and wj integers in the range 1,..,n
        e.g. the "square" graph C_4 can be obtained by

        >>> G = nx.make_small_graph(
        ...     ["edgelist", "C_4", 4, [[1, 2], [3, 4], [2, 3], [4, 1]]]
        ... )

        Use the create_using argument to choose the graph class/type.
    
    """
def LCF_graph(n, shift_list, repeats, create_using=None):
    """

        Return the cubic graph specified in LCF notation.

        LCF notation (LCF=Lederberg-Coxeter-Fruchte) is a compressed
        notation used in the generation of various cubic Hamiltonian
        graphs of high symmetry. See, for example, dodecahedral_graph,
        desargues_graph, heawood_graph and pappus_graph below.

        n (number of nodes)
          The starting graph is the n-cycle with nodes 0,...,n-1.
          (The null graph is returned if n < 0.)

        shift_list = [s1,s2,..,sk], a list of integer shifts mod n,

        repeats
          integer specifying the number of times that shifts in shift_list
          are successively applied to each v_current in the n-cycle
          to generate an edge between v_current and v_current+shift mod n.

        For v1 cycling through the n-cycle a total of k*repeats
        with shift cycling through shiftlist repeats times connect
        v1 with v1+shift mod n

        The utility graph $K_{3,3}$

        >>> G = nx.LCF_graph(6, [3, -3], 3)

        The Heawood graph

        >>> G = nx.LCF_graph(14, [5, -5], 7)

        See http://mathworld.wolfram.com/LCFNotation.html for a description
        and references.

    
    """
def bull_graph(create_using=None):
    """
    Returns the Bull graph. 
    """
def chvatal_graph(create_using=None):
    """
    Returns the Chv√°tal graph.
    """
def cubical_graph(create_using=None):
    """
    Returns the 3-regular Platonic Cubical graph.
    """
def desargues_graph(create_using=None):
    """
     Return the Desargues graph.
    """
def diamond_graph(create_using=None):
    """
    Returns the Diamond graph. 
    """
def dodecahedral_graph(create_using=None):
    """
     Return the Platonic Dodecahedral graph. 
    """
def frucht_graph(create_using=None):
    """
    Returns the Frucht Graph.

        The Frucht Graph is the smallest cubical graph whose
        automorphism group consists only of the identity element.

    
    """
def heawood_graph(create_using=None):
    """
     Return the Heawood graph, a (3,6) cage. 
    """
def hoffman_singleton_graph():
    """
    Return the Hoffman-Singleton Graph.
    """
def house_graph(create_using=None):
    """
    Returns the House graph (square with triangle on top).
    """
def house_x_graph(create_using=None):
    """
    Returns the House graph with a cross inside the house square.
    """
def icosahedral_graph(create_using=None):
    """
    Returns the Platonic Icosahedral graph.
    """
def krackhardt_kite_graph(create_using=None):
    """

        Return the Krackhardt Kite Social Network.

        A 10 actor social network introduced by David Krackhardt
        to illustrate: degree, betweenness, centrality, closeness, etc.
        The traditional labeling is:
        Andre=1, Beverley=2, Carol=3, Diane=4,
        Ed=5, Fernando=6, Garth=7, Heather=8, Ike=9, Jane=10.

    
    """
def moebius_kantor_graph(create_using=None):
    """
    Returns the Moebius-Kantor graph.
    """
def octahedral_graph(create_using=None):
    """
    Returns the Platonic Octahedral graph.
    """
def pappus_graph():
    """
     Return the Pappus graph.
    """
def petersen_graph(create_using=None):
    """
    Returns the Petersen graph.
    """
def sedgewick_maze_graph(create_using=None):
    """

        Return a small maze with a cycle.

        This is the maze used in Sedgewick,3rd Edition, Part 5, Graph
        Algorithms, Chapter 18, e.g. Figure 18.2 and following.
        Nodes are numbered 0,..,7
    
    """
def tetrahedral_graph(create_using=None):
    """
     Return the 3-regular Platonic Tetrahedral graph.
    """
def truncated_cube_graph(create_using=None):
    """
    Returns the skeleton of the truncated cube.
    """
def truncated_tetrahedron_graph(create_using=None):
    """
    Returns the skeleton of the truncated Platonic tetrahedron.
    """
def tutte_graph(create_using=None):
    """
    Returns the Tutte graph.
    """
