def write_gexf(G, path, encoding="utf-8", prettyprint=True, version="1.2draft"):
    """
    Write G in GEXF format to path.

        "GEXF (Graph Exchange XML Format) is a language for describing
        complex networks structures, their associated data and dynamics" [1]_.

        Node attributes are checked according to the version of the GEXF
        schemas used for parameters which are not user defined,
        e.g. visualization 'viz' [2]_. See example for usage.

        Parameters
        ----------
        G : graph
           A NetworkX graph
        path : file or string
           File or file name to write.
           File names ending in .gz or .bz2 will be compressed.
        encoding : string (optional, default: 'utf-8')
           Encoding for text data.
        prettyprint : bool (optional, default: True)
           If True use line breaks and indenting in output XML.

        Examples
        --------
        >>> G = nx.path_graph(4)
        >>> nx.write_gexf(G, "test.gexf")

        # visualization data
        >>> G.nodes[0]["viz"] = {"size": 54}
        >>> G.nodes[0]["viz"]["position"] = {"x": 0, "y": 1}
        >>> G.nodes[0]["viz"]["color"] = {"r": 0, "g": 0, "b": 256}


        Notes
        -----
        This implementation does not support mixed graphs (directed and undirected
        edges together).

        The node id attribute is set to be the string of the node label.
        If you want to specify an id use set it as node data, e.g.
        node['a']['id']=1 to set the id of node 'a' to 1.

        References
        ----------
        .. [1] GEXF File Format, https://gephi.org/gexf/format/
        .. [2] GEXF viz schema 1.1, https://gephi.org/gexf/1.1draft/viz
    
    """
def generate_gexf(G, encoding="utf-8", prettyprint=True, version="1.2draft"):
    """
    Generate lines of GEXF format representation of G.

        "GEXF (Graph Exchange XML Format) is a language for describing
        complex networks structures, their associated data and dynamics" [1]_.

        Parameters
        ----------
        G : graph
        A NetworkX graph
        encoding : string (optional, default: 'utf-8')
        Encoding for text data.
        prettyprint : bool (optional, default: True)
        If True use line breaks and indenting in output XML.
        version : string (default: 1.2draft)
        Version of GEFX File Format (see https://gephi.org/gexf/format/schema.html)
        Supported values: "1.1draft", "1.2draft"


        Examples
        --------
        >>> G = nx.path_graph(4)
        >>> linefeed = chr(10)  # linefeed=\n
        >>> s = linefeed.join(nx.generate_gexf(G))  # doctest: +SKIP
        >>> for line in nx.generate_gexf(G):  # doctest: +SKIP
        ...     print(line)

        Notes
        -----
        This implementation does not support mixed graphs (directed and undirected
        edges together).

        The node id attribute is set to be the string of the node label.
        If you want to specify an id use set it as node data, e.g.
        node['a']['id']=1 to set the id of node 'a' to 1.

        References
        ----------
        .. [1] GEXF File Format, https://gephi.org/gexf/format/
    
    """
def read_gexf(path, node_type=None, relabel=False, version="1.2draft"):
    """
    Read graph in GEXF format from path.

        "GEXF (Graph Exchange XML Format) is a language for describing
        complex networks structures, their associated data and dynamics" [1]_.

        Parameters
        ----------
        path : file or string
           File or file name to read.
           File names ending in .gz or .bz2 will be decompressed.
        node_type: Python type (default: None)
           Convert node ids to this type if not None.
        relabel : bool (default: False)
           If True relabel the nodes to use the GEXF node "label" attribute
           instead of the node "id" attribute as the NetworkX node label.
        version : string (default: 1.2draft)
        Version of GEFX File Format (see https://gephi.org/gexf/format/schema.html)
           Supported values: "1.1draft", "1.2draft"

        Returns
        -------
        graph: NetworkX graph
            If no parallel edges are found a Graph or DiGraph is returned.
            Otherwise a MultiGraph or MultiDiGraph is returned.

        Notes
        -----
        This implementation does not support mixed graphs (directed and undirected
        edges together).

        References
        ----------
        .. [1] GEXF File Format, https://gephi.org/gexf/format/
    
    """
def GEXF:
    """
    NS_GEXF
    """
    def set_version(self, version):
        """
        f"Unknown GEXF version {version}.
        """
def GEXFWriter(GEXF):
    """
     class for writing GEXF format files
     use write_gexf() function

    """
2021-03-02 20:47:03,597 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:47:03,597 : INFO : tokenize_signature : --> do i ever get here?
    def __init__(
        self, graph=None, encoding="utf-8", prettyprint=True, version="1.2draft"
    ):
        """
        gexf
        """
    def __str__(self):
        """
         first pass through G collecting edge ids

        """
    def add_nodes(self, G, graph_element):
        """
        nodes
        """
    def add_edges(self, G, graph_element):
        """
         helper function to unify multigraph and graph edge iterator

        """
    def add_attributes(self, node_or_edge, xml_obj, data, default):
        """
         Add attrvalues to node or edge

        """
    def get_attr_id(self, title, attr_type, edge_or_node, default, mode):
        """
         find the id of the attribute or generate a new id

        """
    def add_viz(self, element, node_data):
        """
        viz
        """
    def add_parents(self, node_element, node_data):
        """
        parents
        """
    def add_slices(self, node_or_edge_element, node_or_edge_data):
        """
        slices
        """
    def add_spells(self, node_or_edge_element, node_or_edge_data):
        """
        spells
        """
    def alter_graph_mode_timeformat(self, start_or_end):
        """
         If 'start' or 'end' appears, alter Graph mode to dynamic and
         set timeformat

        """
    def write(self, fh):
        """
         Serialize graph G in GEXF to the open fh

        """
    def indent(self, elem, level=0):
        """
         in-place prettyprint formatter

        """
def GEXFReader(GEXF):
    """
     Class to read GEXF format files
     use read_gexf() function

    """
    def __init__(self, node_type=None, version="1.2draft"):
        """
         assume simple graph and test for multigraph on read

        """
    def __call__(self, stream):
        """
        f"{{{self.NS_GEXF}}}graph
        """
    def make_graph(self, graph_xml):
        """
         start with empty DiGraph or MultiDiGraph

        """
    def add_node(self, G, node_xml, node_attr, node_pid=None):
        """
         add a single node with attributes to the graph

         get attributes and subattributues for node

        """
    def add_start_end(self, data, xml):
        """
         start and end times

        """
    def add_viz(self, data, node_xml):
        """
         add viz element for node

        """
    def add_parents(self, data, node_xml):
        """
        f"{{{self.NS_GEXF}}}parents
        """
    def add_slices(self, data, node_or_edge_xml):
        """
        f"{{{self.NS_GEXF}}}slices
        """
    def add_spells(self, data, node_or_edge_xml):
        """
        f"{{{self.NS_GEXF}}}spells
        """
    def add_edge(self, G, edge_element, edge_attr):
        """
         add an edge to the graph

         raise error if we find mixed directed and undirected edges

        """
    def decode_attr_elements(self, gexf_keys, obj_xml):
        """
         Use the key information to decode the attr XML

        """
    def find_gexf_attributes(self, attributes_element):
        """
         Extract all the attributes and defaults

        """
def relabel_gexf_graph(G):
    """
    Relabel graph using "label" node keyword for node label.

        Parameters
        ----------
        G : graph
           A NetworkX graph read from GEXF data

        Returns
        -------
        H : graph
          A NetworkX graph with relabed nodes

        Raises
        ------
        NetworkXError
            If node labels are missing or not unique while relabel=True.

        Notes
        -----
        This function relabels the nodes in a NetworkX graph with the
        "label" attribute.  It also handles relabeling the specific GEXF
        node attributes "parents", and "pid".
    
    """
