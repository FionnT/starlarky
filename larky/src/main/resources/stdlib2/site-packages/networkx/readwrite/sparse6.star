def _generate_sparse6_bytes(G, nodes, header):
    """
    Yield bytes in the sparse6 encoding of a graph.

        `G` is an undirected simple graph. `nodes` is the list of nodes for
        which the node-induced subgraph will be encoded; if `nodes` is the
        list of all nodes in the graph, the entire graph will be
        encoded. `header` is a Boolean that specifies whether to generate
        the header ``b'>>sparse6<<'`` before the remaining data.

        This function generates `bytes` objects in the following order:

        1. the header (if requested),
        2. the encoding of the number of nodes,
        3. each character, one-at-a-time, in the encoding of the requested
           node-induced subgraph,
        4. a newline character.

        This function raises :exc:`ValueError` if the graph is too large for
        the graph6 format (that is, greater than ``2 ** 36`` nodes).

    
    """
    def enc(x):
        """
        Big endian k-bit encoding of x
        """
def from_sparse6_bytes(string):
    """
    Read an undirected graph in sparse6 format from string.

        Parameters
        ----------
        string : string
           Data in sparse6 format

        Returns
        -------
        G : Graph

        Raises
        ------
        NetworkXError
            If the string is unable to be parsed in sparse6 format

        Examples
        --------
        >>> G = nx.from_sparse6_bytes(b":A_")
        >>> sorted(G.edges())
        [(0, 1), (0, 1), (0, 1)]

        See Also
        --------
        read_sparse6, write_sparse6

        References
        ----------
        .. [1] Sparse6 specification
               <http://users.cecs.anu.edu.au/~bdm/data/formats.html>

    
    """
    def parseData():
        """
        Returns stream of pairs b[i], x[i] for sparse6 format.
        """
def to_sparse6_bytes(G, nodes=None, header=True):
    """
    Convert an undirected graph to bytes in sparse6 format.

        Parameters
        ----------
        G : Graph (undirected)

        nodes: list or iterable
           Nodes are labeled 0...n-1 in the order provided.  If None the ordering
           given by ``G.nodes()`` is used.

        header: bool
           If True add '>>sparse6<<' bytes to head of data.

        Raises
        ------
        NetworkXNotImplemented
            If the graph is directed.

        ValueError
            If the graph has at least ``2 ** 36`` nodes; the sparse6 format
            is only defined for graphs of order less than ``2 ** 36``.

        Examples
        --------
        >>> nx.to_sparse6_bytes(nx.path_graph(2))
        b'>>sparse6<<:An\\n'

        See Also
        --------
        to_sparse6_bytes, read_sparse6, write_sparse6_bytes

        Notes
        -----
        The returned bytes end with a newline character.

        The format does not support edge or node labels.

        References
        ----------
        .. [1] Graph6 specification
               <http://users.cecs.anu.edu.au/~bdm/data/formats.html>

    
    """
def read_sparse6(path):
    """
    Read an undirected graph in sparse6 format from path.

        Parameters
        ----------
        path : file or string
           File or filename to write.

        Returns
        -------
        G : Graph/Multigraph or list of Graphs/MultiGraphs
           If the file contains multiple lines then a list of graphs is returned

        Raises
        ------
        NetworkXError
            If the string is unable to be parsed in sparse6 format

        Examples
        --------
        You can read a sparse6 file by giving the path to the file::

            >>> import tempfile
            >>> with tempfile.NamedTemporaryFile() as f:
            ...     _ = f.write(b">>sparse6<<:An\\n")
            ...     _ = f.seek(0)
            ...     G = nx.read_sparse6(f.name)
            >>> list(G.edges())
            [(0, 1)]

        You can also read a sparse6 file by giving an open file-like object::

            >>> import tempfile
            >>> with tempfile.NamedTemporaryFile() as f:
            ...     _ = f.write(b">>sparse6<<:An\\n")
            ...     _ = f.seek(0)
            ...     G = nx.read_sparse6(f)
            >>> list(G.edges())
            [(0, 1)]

        See Also
        --------
        read_sparse6, from_sparse6_bytes

        References
        ----------
        .. [1] Sparse6 specification
               <http://users.cecs.anu.edu.au/~bdm/data/formats.html>

    
    """
def write_sparse6(G, path, nodes=None, header=True):
    """
    Write graph G to given path in sparse6 format.

        Parameters
        ----------
        G : Graph (undirected)

        path : file or string
           File or filename to write

        nodes: list or iterable
           Nodes are labeled 0...n-1 in the order provided.  If None the ordering
           given by G.nodes() is used.

        header: bool
           If True add '>>sparse6<<' string to head of data

        Raises
        ------
        NetworkXError
            If the graph is directed

        Examples
        --------
        You can write a sparse6 file by giving the path to the file::

            >>> import tempfile
            >>> with tempfile.NamedTemporaryFile() as f:
            ...     nx.write_sparse6(nx.path_graph(2), f.name)
            ...     print(f.read())
            b'>>sparse6<<:An\\n'

        You can also write a sparse6 file by giving an open file-like object::

            >>> with tempfile.NamedTemporaryFile() as f:
            ...     nx.write_sparse6(nx.path_graph(2), f)
            ...     _ = f.seek(0)
            ...     print(f.read())
            b'>>sparse6<<:An\\n'

        See Also
        --------
        read_sparse6, from_sparse6_bytes

        Notes
        -----
        The format does not support edge or node labels.

        References
        ----------
        .. [1] Sparse6 specification
               <http://users.cecs.anu.edu.au/~bdm/data/formats.html>

    
    """
