def node_link_data(G, attrs=None):
    """
    Returns data in node-link format that is suitable for JSON serialization
        and use in Javascript documents.

        Parameters
        ----------
        G : NetworkX graph

        attrs : dict
            A dictionary that contains five keys 'source', 'target', 'name',
            'key' and 'link'.  The corresponding values provide the attribute
            names for storing NetworkX-internal graph data.  The values should
            be unique.  Default value::

                dict(source='source', target='target', name='id',
                     key='key', link='links')

            If some user-defined graph data use these attribute names as data keys,
            they may be silently dropped.

        Returns
        -------
        data : dict
           A dictionary with node-link formatted data.

        Raises
        ------
        NetworkXError
            If values in attrs are not unique.

        Examples
        --------
        >>> from networkx.readwrite import json_graph
        >>> G = nx.Graph([("A", "B")])
        >>> data1 = json_graph.node_link_data(G)
        >>> H = nx.gn_graph(2)
        >>> data2 = json_graph.node_link_data(
        ...     H, {"link": "edges", "source": "from", "target": "to"}
        ... )

        To serialize with json

        >>> import json
        >>> s1 = json.dumps(data1)
        >>> s2 = json.dumps(
        ...     data2, default={"link": "edges", "source": "from", "target": "to"}
        ... )

        Notes
        -----
        Graph, node, and link attributes are stored in this format.  Note that
        attribute keys will be converted to strings in order to comply with JSON.

        Attribute 'key' is only used for multigraphs.

        See Also
        --------
        node_link_graph, adjacency_data, tree_data
    
    """
def node_link_graph(data, directed=False, multigraph=True, attrs=None):
    """
    Returns graph from node-link data format.

        Parameters
        ----------
        data : dict
            node-link formatted graph data

        directed : bool
            If True, and direction not specified in data, return a directed graph.

        multigraph : bool
            If True, and multigraph not specified in data, return a multigraph.

        attrs : dict
            A dictionary that contains five keys 'source', 'target', 'name',
            'key' and 'link'.  The corresponding values provide the attribute
            names for storing NetworkX-internal graph data.  Default value:

                dict(source='source', target='target', name='id',
                    key='key', link='links')

        Returns
        -------
        G : NetworkX graph
            A NetworkX graph object

        Examples
        --------
        >>> from networkx.readwrite import json_graph
        >>> G = nx.Graph([("A", "B")])
        >>> data = json_graph.node_link_data(G)
        >>> H = json_graph.node_link_graph(data)

        Notes
        -----
        Attribute 'key' is only used for multigraphs.

        See Also
        --------
        node_link_data, adjacency_data, tree_data
    
    """
