def escape(text):
    """
    Use XML character references to escape characters.

        Use XML character references for unprintable or non-ASCII
        characters, double quotes and ampersands in a string
    
    """
    def fixup(m):
        """
        &#
        """
def unescape(text):
    """
    Replace XML character references with the referenced characters
    """
    def fixup(m):
        """

        """
def literal_destringizer(rep):
    """
    Convert a Python literal to the value it represents.

        Parameters
        ----------
        rep : string
            A Python literal.

        Returns
        -------
        value : object
            The value of the Python literal.

        Raises
        ------
        ValueError
            If `rep` is not a Python literal.
    
    """
def read_gml(path, label="label", destringizer=None):
    """
    Read graph in GML format from `path`.

        Parameters
        ----------
        path : filename or filehandle
            The filename or filehandle to read from.

        label : string, optional
            If not None, the parsed nodes will be renamed according to node
            attributes indicated by `label`. Default value: 'label'.

        destringizer : callable, optional
            A `destringizer` that recovers values stored as strings in GML. If it
            cannot convert a string to a value, a `ValueError` is raised. Default
            value : None.

        Returns
        -------
        G : NetworkX graph
            The parsed graph.

        Raises
        ------
        NetworkXError
            If the input cannot be parsed.

        See Also
        --------
        write_gml, parse_gml

        Notes
        -----
        GML files are stored using a 7-bit ASCII encoding with any extended
        ASCII characters (iso8859-1) appearing as HTML character entities.
        Without specifying a `stringizer`/`destringizer`, the code is capable of
        handling `int`/`float`/`str`/`dict`/`list` data as required by the GML
        specification.  For other data types, you need to explicitly supply a
        `stringizer`/`destringizer`.

        For additional documentation on the GML file format, please see the
        `GML url <http://www.infosun.fim.uni-passau.de/Graphlet/GML/gml-tr.html>`_.

        See the module docstring :mod:`networkx.readwrite.gml` for more details.

        Examples
        --------
        >>> G = nx.path_graph(4)
        >>> nx.write_gml(G, "test.gml")
        >>> H = nx.read_gml("test.gml")
    
    """
    def filter_lines(lines):
        """
        ascii
        """
def parse_gml(lines, label="label", destringizer=None):
    """
    Parse GML graph from a string or iterable.

        Parameters
        ----------
        lines : string or iterable of strings
           Data in GML format.

        label : string, optional
            If not None, the parsed nodes will be renamed according to node
            attributes indicated by `label`. Default value: 'label'.

        destringizer : callable, optional
            A `destringizer` that recovers values stored as strings in GML. If it
            cannot convert a string to a value, a `ValueError` is raised. Default
            value : None.

        Returns
        -------
        G : NetworkX graph
            The parsed graph.

        Raises
        ------
        NetworkXError
            If the input cannot be parsed.

        See Also
        --------
        write_gml, read_gml

        Notes
        -----
        This stores nested GML attributes as dictionaries in the NetworkX graph,
        node, and edge attribute structures.

        GML files are stored using a 7-bit ASCII encoding with any extended
        ASCII characters (iso8859-1) appearing as HTML character entities.
        Without specifying a `stringizer`/`destringizer`, the code is capable of
        handling `int`/`float`/`str`/`dict`/`list` data as required by the GML
        specification.  For other data types, you need to explicitly supply a
        `stringizer`/`destringizer`.

        For additional documentation on the GML file format, please see the
        `GML url <http://www.infosun.fim.uni-passau.de/Graphlet/GML/gml-tr.html>`_.

        See the module docstring :mod:`networkx.readwrite.gml` for more details.
    
    """
    def decode_line(line):
        """
        ascii
        """
    def filter_lines(lines):
        """
        \n
        """
def Pattern(Enum):
    """
     encodes the index of each token-matching pattern in `tokenize`. 
    """
def Token(NamedTuple):
    """
    _networkx_list_start
    """
def parse_gml_lines(lines, label, destringizer):
    """
    Parse GML `lines` into a graph.
    
    """
    def tokenize():
        """
        r"[A-Za-z][0-9A-Za-z_]*\b
        """
    def unexpected(curr_token, expected):
        """
        EOF
        """
    def consume(curr_token, category, expected):
        """
         Allow for string convertible id and label values

        """
        def clean_dict_value(value):
            """
             dict start

            """
    def parse_graph():
        """
         EOF
        """
    def pop_attr(dct, category, attr, i):
        """
        f"{category} #{i} has no '{attr}' attribute
        """
def literal_stringizer(value):
    """
    Convert a `value` to a Python literal in GML representation.

        Parameters
        ----------
        value : object
            The `value` to be converted to GML representation.

        Returns
        -------
        rep : string
            A double-quoted Python literal representing value. Unprintable
            characters are replaced by XML character references.

        Raises
        ------
        ValueError
            If `value` cannot be converted to GML.

        Notes
        -----
        `literal_stringizer` is largely the same as `repr` in terms of
        functionality but attempts prefix `unicode` and `bytes` literals with
        `u` and `b` to provide better interoperability of data generated by
        Python 2 and Python 3.

        The original value can be recovered using the
        :func:`networkx.readwrite.gml.literal_destringizer` function.
    
    """
    def stringize(value):
        """
         GML uses 1/0 for boolean values.
        """
def generate_gml(G, stringizer=None):
    """
    r"""Generate a single entry of the graph `G` in GML format.

        Parameters
        ----------
        G : NetworkX graph
            The graph to be converted to GML.

        stringizer : callable, optional
            A `stringizer` which converts non-int/non-float/non-dict values into
            strings. If it cannot convert a value into a string, it should raise a
            `ValueError` to indicate that. Default value: None.

        Returns
        -------
        lines: generator of strings
            Lines of GML data. Newlines are not appended.

        Raises
        ------
        NetworkXError
            If `stringizer` cannot convert a value into a string, or the value to
            convert is not a string while `stringizer` is None.

        Notes
        -----
        Graph attributes named 'directed', 'multigraph', 'node' or
        'edge', node attributes named 'id' or 'label', edge attributes
        named 'source' or 'target' (or 'key' if `G` is a multigraph)
        are ignored because these attribute names are used to encode the graph
        structure.

        GML files are stored using a 7-bit ASCII encoding with any extended
        ASCII characters (iso8859-1) appearing as HTML character entities.
        Without specifying a `stringizer`/`destringizer`, the code is capable of
        handling `int`/`float`/`str`/`dict`/`list` data as required by the GML
        specification.  For other data types, you need to explicitly supply a
        `stringizer`/`destringizer`.

        For additional documentation on the GML file format, please see the
        `GML url <http://www.infosun.fim.uni-passau.de/Graphlet/GML/gml-tr.html>`_.

        See the module docstring :mod:`networkx.readwrite.gml` for more details.

        Examples
        --------
        >>> G = nx.Graph()
        >>> G.add_node("1")
        >>> print("\n".join(nx.generate_gml(G)))
        graph [
          node [
            id 0
            label "1"
          ]
        ]
        >>> G = nx.OrderedMultiGraph([("a", "b"), ("a", "b")])
        >>> print("\n".join(nx.generate_gml(G)))
        graph [
          multigraph 1
          node [
            id 0
            label "a"
          ]
          node [
            id 1
            label "b"
          ]
          edge [
            source 0
            target 1
            key 0
          ]
          edge [
            source 0
            target 1
            key 1
          ]
        ]
    
    """
    def stringize(key, value, ignored_keys, indent, in_list=False):
        """
        f"{key!r} is not a string
        """
def write_gml(G, path, stringizer=None):
    """
    Write a graph `G` in GML format to the file or file handle `path`.

        Parameters
        ----------
        G : NetworkX graph
            The graph to be converted to GML.

        path : filename or filehandle
            The filename or filehandle to write. Files whose names end with .gz or
            .bz2 will be compressed.

        stringizer : callable, optional
            A `stringizer` which converts non-int/non-float/non-dict values into
            strings. If it cannot convert a value into a string, it should raise a
            `ValueError` to indicate that. Default value: None.

        Raises
        ------
        NetworkXError
            If `stringizer` cannot convert a value into a string, or the value to
            convert is not a string while `stringizer` is None.

        See Also
        --------
        read_gml, generate_gml

        Notes
        -----
        Graph attributes named 'directed', 'multigraph', 'node' or
        'edge', node attributes named 'id' or 'label', edge attributes
        named 'source' or 'target' (or 'key' if `G` is a multigraph)
        are ignored because these attribute names are used to encode the graph
        structure.

        GML files are stored using a 7-bit ASCII encoding with any extended
        ASCII characters (iso8859-1) appearing as HTML character entities.
        Without specifying a `stringizer`/`destringizer`, the code is capable of
        handling `int`/`float`/`str`/`dict`/`list` data as required by the GML
        specification.  For other data types, you need to explicitly supply a
        `stringizer`/`destringizer`.

        Note that while we allow non-standard GML to be read from a file, we make
        sure to write GML format. In particular, underscores are not allowed in
        attribute names.
        For additional documentation on the GML file format, please see the
        `GML url <http://www.infosun.fim.uni-passau.de/Graphlet/GML/gml-tr.html>`_.

        See the module docstring :mod:`networkx.readwrite.gml` for more details.

        Examples
        --------
        >>> G = nx.path_graph(4)
        >>> nx.write_gml(G, "test.gml")

        Filenames ending in .gz or .bz2 will be compressed.

        >>> nx.write_gml(G, "test.gml.gz")
    
    """
