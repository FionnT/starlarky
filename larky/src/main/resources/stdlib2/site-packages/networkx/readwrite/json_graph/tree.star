def tree_data(G, root, attrs=_attrs):
    """
    Returns data in tree format that is suitable for JSON serialization
        and use in Javascript documents.

        Parameters
        ----------
        G : NetworkX graph
           G must be an oriented tree

        root : node
           The root of the tree

        attrs : dict
            A dictionary that contains two keys 'id' and 'children'. The
            corresponding values provide the attribute names for storing
            NetworkX-internal graph data. The values should be unique. Default
            value: :samp:`dict(id='id', children='children')`.

            If some user-defined graph data use these attribute names as data keys,
            they may be silently dropped.

        Returns
        -------
        data : dict
           A dictionary with node-link formatted data.

        Raises
        ------
        NetworkXError
            If values in attrs are not unique.

        Examples
        --------
        >>> from networkx.readwrite import json_graph
        >>> G = nx.DiGraph([(1, 2)])
        >>> data = json_graph.tree_data(G, root=1)

        To serialize with json

        >>> import json
        >>> s = json.dumps(data)

        Notes
        -----
        Node attributes are stored in this format but keys
        for attributes must be strings if you want to serialize with JSON.

        Graph and edge attributes are not stored.

        The default value of attrs will be changed in a future release of NetworkX.

        See Also
        --------
        tree_graph, node_link_data, node_link_data
    
    """
    def add_children(n, G):
        """
        Returns graph from tree data format.

            Parameters
            ----------
            data : dict
                Tree formatted graph data

            Returns
            -------
            G : NetworkX DiGraph

            attrs : dict
                A dictionary that contains two keys 'id' and 'children'. The
                corresponding values provide the attribute names for storing
                NetworkX-internal graph data. The values should be unique. Default
                value: :samp:`dict(id='id', children='children')`.

            Examples
            --------
            >>> from networkx.readwrite import json_graph
            >>> G = nx.DiGraph([(1, 2)])
            >>> data = json_graph.tree_data(G, root=1)
            >>> H = json_graph.tree_graph(data)

            Notes
            -----
            The default value of attrs will be changed in a future release of NetworkX.

            See Also
            --------
            tree_graph, node_link_data, adjacency_data
    
        """
    def add_children(parent, children_):
