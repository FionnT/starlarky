def generate_multiline_adjlist(G, delimiter=" "):
    """
    Generate a single line of the graph G in multiline adjacency list format.

        Parameters
        ----------
        G : NetworkX graph

        delimiter : string, optional
           Separator for node labels

        Returns
        -------
        lines : string
            Lines of data in multiline adjlist format.

        Examples
        --------
        >>> G = nx.lollipop_graph(4, 3)
        >>> for line in nx.generate_multiline_adjlist(G):
        ...     print(line)
        0 3
        1 {}
        2 {}
        3 {}
        1 2
        2 {}
        3 {}
        2 1
        3 {}
        3 1
        4 {}
        4 1
        5 {}
        5 1
        6 {}
        6 0

        See Also
        --------
        write_multiline_adjlist, read_multiline_adjlist
    
    """
def write_multiline_adjlist(G, path, delimiter=" ", comments="#", encoding="utf-8"):
    """
     Write the graph G in multiline adjacency list format to path

        Parameters
        ----------
        G : NetworkX graph

        comments : string, optional
           Marker for comment lines

        delimiter : string, optional
           Separator for node labels

        encoding : string, optional
           Text encoding.

        Examples
        --------
        >>> G = nx.path_graph(4)
        >>> nx.write_multiline_adjlist(G, "test.adjlist")

        The path can be a file handle or a string with the name of the file. If a
        file handle is provided, it has to be opened in 'wb' mode.

        >>> fh = open("test.adjlist", "wb")
        >>> nx.write_multiline_adjlist(G, fh)

        Filenames ending in .gz or .bz2 will be compressed.

        >>> nx.write_multiline_adjlist(G, "test.adjlist.gz")

        See Also
        --------
        read_multiline_adjlist
    
    """
2021-03-02 20:47:05,899 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:47:05,899 : INFO : tokenize_signature : --> do i ever get here?
def parse_multiline_adjlist(
    lines, comments="#", delimiter=None, create_using=None, nodetype=None, edgetype=None
):
    """
    Parse lines of a multiline adjacency list representation of a graph.

        Parameters
        ----------
        lines : list or iterator of strings
            Input data in multiline adjlist format

        create_using : NetworkX graph constructor, optional (default=nx.Graph)
           Graph type to create. If graph instance, then cleared before populated.

        nodetype : Python type, optional
           Convert nodes to this type.

        comments : string, optional
           Marker for comment lines

        delimiter : string, optional
           Separator for node labels.  The default is whitespace.

        Returns
        -------
        G: NetworkX graph
            The graph corresponding to the lines in multiline adjacency list format.

        Examples
        --------
        >>> lines = [
        ...     "1 2",
        ...     "2 {'weight':3, 'name': 'Frodo'}",
        ...     "3 {}",
        ...     "2 1",
        ...     "5 {'weight':6, 'name': 'Saruman'}",
        ... ]
        >>> G = nx.parse_multiline_adjlist(iter(lines), nodetype=int)
        >>> list(G)
        [1, 2, 3, 5]

    
    """
2021-03-02 20:47:05,901 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:47:05,901 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:47:05,901 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:47:05,901 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:47:05,901 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:47:05,901 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:47:05,901 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:47:05,901 : INFO : tokenize_signature : --> do i ever get here?
def read_multiline_adjlist(
    path,
    comments="#",
    delimiter=None,
    create_using=None,
    nodetype=None,
    edgetype=None,
    encoding="utf-8",
):
    """
    Read graph in multi-line adjacency list format from path.

        Parameters
        ----------
        path : string or file
           Filename or file handle to read.
           Filenames ending in .gz or .bz2 will be uncompressed.

        create_using : NetworkX graph constructor, optional (default=nx.Graph)
           Graph type to create. If graph instance, then cleared before populated.

        nodetype : Python type, optional
           Convert nodes to this type.

        edgetype : Python type, optional
           Convert edge data to this type.

        comments : string, optional
           Marker for comment lines

        delimiter : string, optional
           Separator for node labels.  The default is whitespace.

        Returns
        -------
        G: NetworkX graph

        Examples
        --------
        >>> G = nx.path_graph(4)
        >>> nx.write_multiline_adjlist(G, "test.adjlist")
        >>> G = nx.read_multiline_adjlist("test.adjlist")

        The path can be a file or a string with the name of the file. If a
        file s provided, it has to be opened in 'rb' mode.

        >>> fh = open("test.adjlist", "rb")
        >>> G = nx.read_multiline_adjlist(fh)

        Filenames ending in .gz or .bz2 will be compressed.

        >>> nx.write_multiline_adjlist(G, "test.adjlist.gz")
        >>> G = nx.read_multiline_adjlist("test.adjlist.gz")

        The optional nodetype is a function to convert node strings to nodetype.

        For example

        >>> G = nx.read_multiline_adjlist("test.adjlist", nodetype=int)

        will attempt to convert all nodes to integer type.

        The optional edgetype is a function to convert edge data strings to
        edgetype.

        >>> G = nx.read_multiline_adjlist("test.adjlist")

        The optional create_using parameter is a NetworkX graph container.
        The default is Graph(), an undirected graph.  To read the data as
        a directed graph use

        >>> G = nx.read_multiline_adjlist("test.adjlist", create_using=nx.DiGraph)

        Notes
        -----
        This format does not store graph, node, or edge data.

        See Also
        --------
        write_multiline_adjlist
    
    """
