def NodeView(Mapping, Set):
    """
    A NodeView class to act as G.nodes for a NetworkX Graph

        Set operations act on the nodes without considering data.
        Iteration is over nodes. Node data can be looked up like a dict.
        Use NodeDataView to iterate over node data or to specify a data
        attribute for lookup. NodeDataView is created by calling the NodeView.

        Parameters
        ----------
        graph : NetworkX graph-like class

        Examples
        --------
        >>> G = nx.path_graph(3)
        >>> NV = G.nodes()
        >>> 2 in NV
        True
        >>> for n in NV:
        ...     print(n)
        0
        1
        2
        >>> assert NV & {1, 2, 3} == {1, 2}

        >>> G.add_node(2, color="blue")
        >>> NV[2]
        {'color': 'blue'}
        >>> G.add_node(8, color="red")
        >>> NDV = G.nodes(data=True)
        >>> (2, NV[2]) in NDV
        True
        >>> for n, dd in NDV:
        ...     print((n, dd.get("color", "aqua")))
        (0, 'aqua')
        (1, 'aqua')
        (2, 'blue')
        (8, 'red')
        >>> NDV[2] == NV[2]
        True

        >>> NVdata = G.nodes(data="color", default="aqua")
        >>> (2, NVdata[2]) in NVdata
        True
        >>> for n, dd in NVdata:
        ...     print((n, dd))
        (0, 'aqua')
        (1, 'aqua')
        (2, 'blue')
        (8, 'red')
        >>> NVdata[2] == NV[2]  # NVdata gets 'color', NV gets datadict
        False
    
    """
    def __getstate__(self):
        """
        _nodes
        """
    def __setstate__(self, state):
        """
        _nodes
        """
    def __init__(self, graph):
        """
         Mapping methods

        """
    def __len__(self):
        """
         Set methods

        """
    def __contains__(self, n):
        """
         DataView method

        """
    def __call__(self, data=False, default=None):
        """
        f"{self.__class__.__name__}({tuple(self)})
        """
def NodeDataView(Set):
    """
    A DataView class for nodes of a NetworkX Graph

        The main use for this class is to iterate through node-data pairs.
        The data can be the entire data-dictionary for each node, or it
        can be a specific attribute (with default) for each node.
        Set operations are enabled with NodeDataView, but don't work in
        cases where the data is not hashable. Use with caution.
        Typically, set operations on nodes use NodeView, not NodeDataView.
        That is, they use `G.nodes` instead of `G.nodes(data='foo')`.

        Parameters
        ==========
        graph : NetworkX graph-like class
        data : bool or string (default=False)
        default : object (default=None)
    
    """
    def __getstate__(self):
        """
        _nodes
        """
    def __setstate__(self, state):
        """
        _nodes
        """
    def __init__(self, nodedict, data=False, default=None):
        """
        unhashable
        """
    def __len__(self):
        """
        f"{name}({tuple(self)})
        """
def DiDegreeView:
    """
    A View class for degree of nodes in a NetworkX Graph

        The functionality is like dict.items() with (node, degree) pairs.
        Additional functionality includes read-only lookup of node degree,
        and calling with optional features nbunch (for only a subset of nodes)
        and weight (use edge weights to compute degree).

        Parameters
        ==========
        graph : NetworkX graph-like class
        nbunch : node, container of nodes, or None meaning all nodes (default=None)
        weight : bool or string (default=None)

        Notes
        -----
        DegreeView can still lookup any node even if nbunch is specified.

        Examples
        --------
        >>> G = nx.path_graph(3)
        >>> DV = G.degree()
        >>> assert DV[2] == 1
        >>> assert sum(deg for n, deg in DV) == 4

        >>> DVweight = G.degree(weight="span")
        >>> G.add_edge(1, 2, span=34)
        >>> DVweight[2]
        34
        >>> DVweight[0]  #  default edge weight is 1
        1
        >>> sum(span for n, span in DVweight)  # sum weighted degrees
        70

        >>> DVnbunch = G.degree(nbunch=(1, 2))
        >>> assert len(list(DVnbunch)) == 2  # iteration over nbunch only
    
    """
    def __init__(self, G, nbunch=None, weight=None):
        """
        _succ
        """
    def __call__(self, nbunch=None, weight=None):
        """
        f"{self.__class__.__name__}({dict(self)})
        """
def DegreeView(DiDegreeView):
    """
    A DegreeView class to act as G.degree for a NetworkX Graph

        Typical usage focuses on iteration over `(node, degree)` pairs.
        The degree is by default the number of edges incident to the node.
        Optional argument `weight` enables weighted degree using the edge
        attribute named in the `weight` argument.  Reporting and iteration
        can also be restricted to a subset of nodes using `nbunch`.

        Additional functionality include node lookup so that `G.degree[n]`
        reported the (possibly weighted) degree of node `n`. Calling the
        view creates a view with different arguments `nbunch` or `weight`.

        Parameters
        ==========
        graph : NetworkX graph-like class
        nbunch : node, container of nodes, or None meaning all nodes (default=None)
        weight : string or None (default=None)

        Notes
        -----
        DegreeView can still lookup any node even if nbunch is specified.

        Examples
        --------
        >>> G = nx.path_graph(3)
        >>> DV = G.degree()
        >>> assert DV[2] == 1
        >>> assert G.degree[2] == 1
        >>> assert sum(deg for n, deg in DV) == 4

        >>> DVweight = G.degree(weight="span")
        >>> G.add_edge(1, 2, span=34)
        >>> DVweight[2]
        34
        >>> DVweight[0]  #  default edge weight is 1
        1
        >>> sum(span for n, span in DVweight)  # sum weighted degrees
        70

        >>> DVnbunch = G.degree(nbunch=(1, 2))
        >>> assert len(list(DVnbunch)) == 2  # iteration over nbunch only
    
    """
    def __getitem__(self, n):
        """
        A DegreeView class to report out_degree for a DiGraph; See DegreeView
        """
    def __getitem__(self, n):
        """
        A DegreeView class to report in_degree for a DiGraph; See DegreeView
        """
    def __getitem__(self, n):
        """
        A DegreeView class for undirected multigraphs; See DegreeView
        """
    def __getitem__(self, n):
        """
         edge weighted graph - degree is sum of nbr edge weights

        """
    def __iter__(self):
        """
        A DegreeView class for MultiDiGraph; See DegreeView
        """
    def __getitem__(self, n):
        """
         edge weighted graph - degree is sum of nbr edge weights

        """
    def __iter__(self):
        """
        A DegreeView class for inward degree of MultiDiGraph; See DegreeView
        """
    def __getitem__(self, n):
        """
         edge weighted graph - degree is sum of nbr edge weights

        """
    def __iter__(self):
        """
        A DegreeView class for outward degree of MultiDiGraph; See DegreeView
        """
    def __getitem__(self, n):
        """
         edge weighted graph - degree is sum of nbr edge weights

        """
    def __iter__(self):
        """
         EdgeDataViews

        """
def OutEdgeDataView:
    """
    EdgeDataView for outward edges of DiGraph; See EdgeDataView
    """
    def __getstate__(self):
        """
        viewer
        """
    def __setstate__(self, state):
        """
         dict retains order of nodes but acts like a set

        """
    def __len__(self):
        """
         this edge doesn't start in nbunch
        """
    def __str__(self):
        """
        f"{self.__class__.__name__}({list(self)})
        """
def EdgeDataView(OutEdgeDataView):
    """
    A EdgeDataView class for edges of Graph

        This view is primarily used to iterate over the edges reporting
        edges as node-tuples with edge data optionally reported. The
        argument `nbunch` allows restriction to edges incident to nodes
        in that container/singleton. The default (nbunch=None)
        reports all edges. The arguments `data` and `default` control
        what edge data is reported. The default `data is False` reports
        only node-tuples for each edge. If `data is True` the entire edge
        data dict is returned. Otherwise `data` is assumed to hold the name
        of the edge attribute to report with default `default` if  that
        edge attribute is not present.

        Parameters
        ----------
        nbunch : container of nodes, node or None (default None)
        data : False, True or string (default False)
        default : default value (default None)

        Examples
        --------
        >>> G = nx.path_graph(3)
        >>> G.add_edge(1, 2, foo="bar")
        >>> list(G.edges(data="foo", default="biz"))
        [(0, 1, 'biz'), (1, 2, 'bar')]
        >>> assert (0, 1, "biz") in G.edges(data="foo", default="biz")
    
    """
    def __len__(self):
        """
         this edge doesn't start and it doesn't end in nbunch
        """
def InEdgeDataView(OutEdgeDataView):
    """
    An EdgeDataView class for outward edges of DiGraph; See EdgeDataView
    """
    def __iter__(self):
        """
         this edge doesn't end in nbunch
        """
def OutMultiEdgeDataView(OutEdgeDataView):
    """
    An EdgeDataView for outward edges of MultiDiGraph; See EdgeDataView
    """
    def __getstate__(self):
        """
        viewer
        """
    def __setstate__(self, state):
        """
         dict retains order of nodes but acts like a set

        """
    def __len__(self):
        """
         this edge doesn't start in nbunch
        """
def MultiEdgeDataView(OutMultiEdgeDataView):
    """
    An EdgeDataView class for edges of MultiGraph; See EdgeDataView
    """
    def __iter__(self):
        """
         this edge doesn't start and doesn't end in nbunch
        """
def InMultiEdgeDataView(OutMultiEdgeDataView):
    """
    An EdgeDataView for inward edges of MultiDiGraph; See EdgeDataView
    """
    def __iter__(self):
        """
         this edge doesn't end in nbunch
        """
def OutEdgeView(Set, Mapping):
    """
    A EdgeView class for outward edges of a DiGraph
    """
    def __getstate__(self):
        """
        _graph
        """
    def __setstate__(self, state):
        """
        _graph
        """
    def _from_iterable(cls, it):
        """
        succ
        """
    def __len__(self):
        """
         Mapping Methods

        """
    def __getitem__(self, e):
        """
         EdgeDataView methods

        """
    def __call__(self, nbunch=None, data=False, default=None):
        """
         String Methods

        """
    def __str__(self):
        """
        f"{self.__class__.__name__}({list(self)})
        """
def EdgeView(OutEdgeView):
    """
    A EdgeView class for edges of a Graph

        This densely packed View allows iteration over edges, data lookup
        like a dict and set operations on edges represented by node-tuples.
        In addition, edge data can be controlled by calling this object
        possibly creating an EdgeDataView. Typically edges are iterated over
        and reported as `(u, v)` node tuples or `(u, v, key)` node/key tuples
        for multigraphs. Those edge representations can also be using to
        lookup the data dict for any edge. Set operations also are available
        where those tuples are the elements of the set.
        Calling this object with optional arguments `data`, `default` and `keys`
        controls the form of the tuple (see EdgeDataView). Optional argument
        `nbunch` allows restriction to edges only involving certain nodes.

        If `data is False` (the default) then iterate over 2-tuples `(u, v)`.
        If `data is True` iterate over 3-tuples `(u, v, datadict)`.
        Otherwise iterate over `(u, v, datadict.get(data, default))`.
        For Multigraphs, if `keys is True`, replace `u, v` with `u, v, key` above.

        Parameters
        ==========
        graph : NetworkX graph-like class
        nbunch : (default= all nodes in graph) only report edges with these nodes
        keys : (only for MultiGraph. default=False) report edge key in tuple
        data : bool or string (default=False) see above
        default : object (default=None)

        Examples
        ========
        >>> G = nx.path_graph(4)
        >>> EV = G.edges()
        >>> (2, 3) in EV
        True
        >>> for u, v in EV:
        ...     print((u, v))
        (0, 1)
        (1, 2)
        (2, 3)
        >>> assert EV & {(1, 2), (3, 4)} == {(1, 2)}

        >>> EVdata = G.edges(data="color", default="aqua")
        >>> G.add_edge(2, 3, color="blue")
        >>> assert (2, 3, "blue") in EVdata
        >>> for u, v, c in EVdata:
        ...     print(f"({u}, {v}) has color: {c}")
        (0, 1) has color: aqua
        (1, 2) has color: aqua
        (2, 3) has color: blue

        >>> EVnbunch = G.edges(nbunch=2)
        >>> assert (2, 3) in EVnbunch
        >>> assert (0, 1) not in EVnbunch
        >>> for u, v in EVnbunch:
        ...     assert u == 2 or v == 2

        >>> MG = nx.path_graph(4, create_using=nx.MultiGraph)
        >>> EVmulti = MG.edges(keys=True)
        >>> (2, 3, 0) in EVmulti
        True
        >>> (2, 3) in EVmulti  # 2-tuples work even when keys is True
        True
        >>> key = MG.add_edge(2, 3)
        >>> for u, v, k in EVmulti:
        ...     print((u, v, k))
        (0, 1, 0)
        (1, 2, 0)
        (2, 3, 0)
        (2, 3, 1)
    
    """
    def __len__(self):
        """
        A EdgeView class for inward edges of a DiGraph
        """
    def __setstate__(self, state):
        """
        _graph
        """
    def __init__(self, G):
        """
        pred
        """
    def __iter__(self):
        """
        A EdgeView class for outward edges of a MultiDiGraph
        """
    def __len__(self):
        """
        MultiEdge must have length 2 or 3
        """
    def __getitem__(self, e):
        """
        A EdgeView class for edges of a MultiGraph
        """
    def __len__(self):
        """
        A EdgeView class for inward edges of a MultiDiGraph
        """
    def __setstate__(self, state):
        """
        _graph
        """
    def __init__(self, G):
        """
        pred
        """
    def __iter__(self):
        """
        MultiEdge must have length 2 or 3
        """
    def __getitem__(self, e):
