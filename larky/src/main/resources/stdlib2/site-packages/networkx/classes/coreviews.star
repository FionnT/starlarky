def AtlasView(Mapping):
    """
    An AtlasView is a Read-only Mapping of Mappings.

        It is a View into a dict-of-dict data structure.
        The inner level of dict is read-write. But the
        outer level is read-only.

        See Also
        ========
        AdjacencyView - View into dict-of-dict-of-dict
        MultiAdjacencyView - View into dict-of-dict-of-dict-of-dict
    
    """
    def __getstate__(self):
        """
        _atlas
        """
    def __setstate__(self, state):
        """
        _atlas
        """
    def __init__(self, d):
        """
         {nbr: self[nbr] for nbr in self})
        """
    def __repr__(self):
        """
        f"{self.__class__.__name__}({self._atlas!r})
        """
def AdjacencyView(AtlasView):
    """
    An AdjacencyView is a Read-only Map of Maps of Maps.

        It is a View into a dict-of-dict-of-dict data structure.
        The inner level of dict is read-write. But the
        outer levels are read-only.

        See Also
        ========
        AtlasView - View into dict-of-dict
        MultiAdjacencyView - View into dict-of-dict-of-dict-of-dict
    
    """
    def __getitem__(self, name):
        """
        An MultiAdjacencyView is a Read-only Map of Maps of Maps of Maps.

            It is a View into a dict-of-dict-of-dict-of-dict data structure.
            The inner level of dict is read-write. But the
            outer levels are read-only.

            See Also
            ========
            AtlasView - View into dict-of-dict
            AdjacencyView - View into dict-of-dict-of-dict
    
        """
    def __getitem__(self, name):
        """
        A read-only union of two atlases (dict-of-dict).

            The two dict-of-dicts represent the inner dict of
            an Adjacency:  `G.succ[node]` and `G.pred[node]`.
            The inner level of dict of both hold attribute key:value
            pairs and is read-write. But the outer level is read-only.

            See Also
            ========
            UnionAdjacency - View into dict-of-dict-of-dict
            UnionMultiAdjacency - View into dict-of-dict-of-dict-of-dict
    
        """
    def __getstate__(self):
        """
        _succ
        """
    def __setstate__(self, state):
        """
        _succ
        """
    def __init__(self, succ, pred):
        """
        f"{self.__class__.__name__}({self._succ!r}, {self._pred!r})
        """
def UnionAdjacency(Mapping):
    """
    A read-only union of dict Adjacencies as a Map of Maps of Maps.

        The two input dict-of-dict-of-dicts represent the union of
        `G.succ` and `G.pred`. Return values are UnionAtlas
        The inner level of dict is read-write. But the
        middle and outer levels are read-only.

        succ : a dict-of-dict-of-dict {node: nbrdict}
        pred : a dict-of-dict-of-dict {node: nbrdict}
        The keys for the two dicts should be the same

        See Also
        ========
        UnionAtlas - View into dict-of-dict
        UnionMultiAdjacency - View into dict-of-dict-of-dict-of-dict
    
    """
    def __getstate__(self):
        """
        _succ
        """
    def __setstate__(self, state):
        """
        _succ
        """
    def __init__(self, succ, pred):
        """
         keys must be the same for two input dicts

        """
    def __len__(self):
        """
         length of each dict should be the same
        """
    def __iter__(self):
        """
        f"{self.__class__.__name__}({self._succ!r}, {self._pred!r})
        """
def UnionMultiInner(UnionAtlas):
    """
    A read-only union of two inner dicts of MultiAdjacencies.

        The two input dict-of-dict-of-dicts represent the union of
        `G.succ[node]` and `G.pred[node]` for MultiDiGraphs.
        Return values are UnionAtlas.
        The inner level of dict is read-write. But the outer levels are read-only.

        See Also
        ========
        UnionAtlas - View into dict-of-dict
        UnionAdjacency - View into dict-of-dict-of-dict
        UnionMultiAdjacency - View into dict-of-dict-of-dict-of-dict
    
    """
    def __getitem__(self, node):
        """
        A read-only union of two dict MultiAdjacencies.

            The two input dict-of-dict-of-dict-of-dicts represent the union of
            `G.succ` and `G.pred` for MultiDiGraphs. Return values are UnionAdjacency.
            The inner level of dict is read-write. But the outer levels are read-only.

            See Also
            ========
            UnionAtlas - View into dict-of-dict
            UnionMultiInner - View into dict-of-dict-of-dict
    
        """
    def __getitem__(self, node):
        """
         nodedict, nbrdict, keydict
        """
    def __init__(self, d, NODE_OK):
        """
         check that NODE_OK has attr 'nodes'
        """
    def __getitem__(self, key):
        """
        f"Key {key} not found
        """
    def copy(self):
        """
         check that NODE_OK has attr 'nodes'
        """
    def __str__(self):
        """
        f"{self.__class__.__name__}({self._atlas!r}, {self.NODE_OK!r})
        """
def FilterAdjacency(Mapping):  # edgedict
    """
     edgedict
    """
    def __init__(self, d, NODE_OK, EDGE_OK):
        """
         check that NODE_OK has attr 'nodes'
        """
    def __getitem__(self, node):
        """
        f"Key {node} not found
        """
    def copy(self):
        """
         check that NODE_OK has attr 'nodes'
        """
    def __str__(self):
        """
        f"{name}({self._atlas!r}, {self.NODE_OK!r}, {self.EDGE_OK!r})
        """
def FilterMultiInner(FilterAdjacency):  # muliedge_seconddict
    """
     muliedge_seconddict
    """
    def __iter__(self):
        """
         check that NODE_OK has attr 'nodes'
        """
    def __getitem__(self, nbr):
        """
        f"Key {nbr} not found
        """
    def copy(self):
        """
         check that NODE_OK has attr 'nodes'
        """
def FilterMultiAdjacency(FilterAdjacency):  # multiedgedict
    """
     multiedgedict
    """
    def __getitem__(self, node):
        """
        f"Key {node} not found
        """
    def copy(self):
        """
         check that NODE_OK has attr 'nodes'
        """
