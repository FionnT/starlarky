def MinHeap:
    """
    Base class for min-heaps.

        A MinHeap stores a collection of key-value pairs ordered by their values.
        It supports querying the minimum pair, inserting a new pair, decreasing the
        value in an existing pair and deleting the minimum pair.
    
    """
    def _Item:
    """
    Used by subclassess to represent a key-value pair.
        
    """
        def __init__(self, key, value):
            """
            Initialize a new min-heap.
        
            """
    def min(self):
        """
        Query the minimum key-value pair.

                Returns
                -------
                key, value : tuple
                    The key-value pair with the minimum value in the heap.

                Raises
                ------
                NetworkXError
                    If the heap is empty.
        
        """
    def pop(self):
        """
        Delete the minimum pair in the heap.

                Returns
                -------
                key, value : tuple
                    The key-value pair with the minimum value in the heap.

                Raises
                ------
                NetworkXError
                    If the heap is empty.
        
        """
    def get(self, key, default=None):
        """
        Returns the value associated with a key.

                Parameters
                ----------
                key : hashable object
                    The key to be looked up.

                default : object
                    Default value to return if the key is not present in the heap.
                    Default value: None.

                Returns
                -------
                value : object.
                    The value associated with the key.
        
        """
    def insert(self, key, value, allow_increase=False):
        """
        Insert a new key-value pair or modify the value in an existing
                pair.

                Parameters
                ----------
                key : hashable object
                    The key.

                value : object comparable with existing values.
                    The value.

                allow_increase : bool
                    Whether the value is allowed to increase. If False, attempts to
                    increase an existing value have no effect. Default value: False.

                Returns
                -------
                decreased : bool
                    True if a pair is inserted or the existing value is decreased.
        
        """
    def __nonzero__(self):
        """
        Returns whether the heap if empty.
        
        """
    def __bool__(self):
        """
        Returns whether the heap if empty.
        
        """
    def __len__(self):
        """
        Returns the number of key-value pairs in the heap.
        
        """
    def __contains__(self, key):
        """
        Returns whether a key exists in the heap.

                Parameters
                ----------
                key : any hashable object.
                    The key to be looked up.
        
        """
def _inherit_doc(cls):
    """
    Decorator for inheriting docstrings from base classes.
    
    """
    def func(fn):
        """
        A pairing heap.
    
        """
    def _Node(MinHeap._Item):
    """
    A node in a pairing heap.

            A tree in a pairing heap is stored using the left-child, right-sibling
            representation.
        
    """
        def __init__(self, key, value):
            """
             The leftmost child.

            """
    def __init__(self):
        """
        Initialize a pairing heap.
        
        """
    def min(self):
        """
        heap is empty.
        """
    def pop(self):
        """
        heap is empty.
        """
    def get(self, key, default=None):
        """
         Nonstandard step: Link the merged subtree with the root. See
         below for the standard step.

        """
    def _link(self, root, other):
        """
        Link two nodes, making the one with the smaller value the parent of
                the other.
        
        """
    def _merge_children(self, root):
        """
        Merge the subtrees of the root using the standard two-pass method.
                The resulting subtree is detached from the root.
        
        """
    def _cut(self, node):
        """
        Cut a node from its parent.
        
        """
def BinaryHeap(MinHeap):
    """
    A binary heap.
    
    """
    def __init__(self):
        """
        Initialize a binary heap.
        
        """
    def min(self):
        """
        heap is empty
        """
    def pop(self):
        """
        heap is empty
        """
    def get(self, key, default=None):
        """
         Since there is no way to efficiently obtain the location of a
         key-value pair in the heap, insert a new pair even if ones
         with the same key may already be present. Deem the old ones
         as stale and skip them when the minimum pair is queried.

        """
