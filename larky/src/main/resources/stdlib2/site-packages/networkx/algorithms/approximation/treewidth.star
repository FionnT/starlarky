def treewidth_min_degree(G):
    """
     Returns a treewidth decomposition using the Minimum Degree heuristic.

        The heuristic chooses the nodes according to their degree, i.e., first
        the node with the lowest degree is chosen, then the graph is updated
        and the corresponding node is removed. Next, a new node with the lowest
        degree is chosen, and so on.

        Parameters
        ----------
        G : NetworkX graph

        Returns
        -------
        Treewidth decomposition : (int, Graph) tuple
              2-tuple with treewidth and the corresponding decomposed tree.
    
    """
def treewidth_min_fill_in(G):
    """
     Returns a treewidth decomposition using the Minimum Fill-in heuristic.

        The heuristic chooses a node from the graph, where the number of edges
        added turning the neighbourhood of the chosen node into clique is as
        small as possible.

        Parameters
        ----------
        G : NetworkX graph

        Returns
        -------
        Treewidth decomposition : (int, Graph) tuple
            2-tuple with treewidth and the corresponding decomposed tree.
    
    """
def MinDegreeHeuristic:
    """
     Implements the Minimum Degree heuristic.

        The heuristic chooses the nodes according to their degree
        (number of neighbours), i.e., first the node with the lowest degree is
        chosen, then the graph is updated and the corresponding node is
        removed. Next, a new node with the lowest degree is chosen, and so on.
    
    """
    def __init__(self, graph):
        """
         nodes that have to be updated in the heap before each iteration

        """
    def best_node(self, graph):
        """
         update nodes in self._update_nodes

        """
def min_fill_in_heuristic(graph):
    """
     Implements the Minimum Degree heuristic.

        Returns the node from the graph, where the number of edges added when
        turning the neighbourhood of the chosen node into clique is as small as
        possible. This algorithm chooses the nodes using the Minimum Fill-In
        heuristic. The running time of the algorithm is :math:`O(V^3)` and it uses
        additional constant memory.
    """
def treewidth_decomp(G, heuristic=min_fill_in_heuristic):
    """
     Returns a treewidth decomposition using the passed heuristic.

        Parameters
        ----------
        G : NetworkX graph
        heuristic : heuristic function

        Returns
        -------
        Treewidth decomposition : (int, Graph) tuple
            2-tuple with treewidth and the corresponding decomposed tree.
    
    """
