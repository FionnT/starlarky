def is_regular(G):
    """
    Determines whether the graph ``G`` is a regular graph.

        A regular graph is a graph where each vertex has the same degree. A
        regular digraph is a graph where the indegree and outdegree of each
        vertex are equal.

        Parameters
        ----------
        G : NetworkX graph

        Returns
        -------
        bool
            Whether the given graph or digraph is regular.

    
    """
def is_k_regular(G, k):
    """
    Determines whether the graph ``G`` is a k-regular graph.

        A k-regular graph is a graph where each vertex has degree k.

        Parameters
        ----------
        G : NetworkX graph

        Returns
        -------
        bool
            Whether the given graph is k-regular.

    
    """
def k_factor(G, k, matching_weight="weight"):
    """
    Compute a k-factor of G

        A k-factor of a graph is a spanning k-regular subgraph.
        A spanning k-regular subgraph of G is a subgraph that contains
        each vertex of G and a subset of the edges of G such that each
        vertex has degree k.

        Parameters
        ----------
        G : NetworkX graph
          Undirected graph

        weight: string, optional (default='weight')
           Edge data key corresponding to the edge weight.
           Used for finding the max-weighted perfect matching.
           If key not found, uses 1 as weight.

        Returns
        -------
        G2 : NetworkX graph
            A k-factor of G

        References
        ----------
        .. [1] "An algorithm for computing simple k-factors.",
           Meijer, Henk, Yurai Núñez-Rodríguez, and David Rappaport,
           Information processing letters, 2009.
    
    """
    def LargeKGadget:
    """
     Step 1

    """
