def min_weighted_dominating_set(G, weight=None):
    """
    r"""Returns a dominating set that approximates the minimum weight node
        dominating set.

        Parameters
        ----------
        G : NetworkX graph
            Undirected graph.

        weight : string
            The node attribute storing the weight of an node. If provided,
            the node attribute with this key must be a number for each
            node. If not provided, each node is assumed to have weight one.

        Returns
        -------
        min_weight_dominating_set : set
            A set of nodes, the sum of whose weights is no more than `(\log
            w(V)) w(V^*)`, where `w(V)` denotes the sum of the weights of
            each node in the graph and `w(V^*)` denotes the sum of the
            weights of each node in the minimum weight dominating set.

        Notes
        -----
        This algorithm computes an approximate minimum weighted dominating
        set for the graph `G`. The returned solution has weight `(\log
        w(V)) w(V^*)`, where `w(V)` denotes the sum of the weights of each
        node in the graph and `w(V^*)` denotes the sum of the weights of
        each node in the minimum weight dominating set for the graph.

        This implementation of the algorithm runs in $O(m)$ time, where $m$
        is the number of edges in the graph.

        References
        ----------
        .. [1] Vazirani, Vijay V.
               *Approximation Algorithms*.
               Springer Science & Business Media, 2001.

    
    """
    def _cost(node_and_neighborhood):
        """
        Returns the cost-effectiveness of greedily choosing the given
                node.

                `node_and_neighborhood` is a two-tuple comprising a node and its
                closed neighborhood.

        
        """
def min_edge_dominating_set(G):
    """
    r"""Returns minimum cardinality edge dominating set.

        Parameters
        ----------
        G : NetworkX graph
          Undirected graph

        Returns
        -------
        min_edge_dominating_set : set
          Returns a set of dominating edges whose size is no more than 2 * OPT.

        Notes
        -----
        The algorithm computes an approximate solution to the edge dominating set
        problem. The result is no more than 2 * OPT in terms of size of the set.
        Runtime of the algorithm is $O(|E|)$.
    
    """
