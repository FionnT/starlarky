def Node:
    """
    node_id
    """
    def __init__(self, node_id, n):
        """
        f"Node_id: {self.node_id}, Color: {self.color}, 
        f"Adj_list: ({self.adj_list}), adj_color: ({self.adj_color})

        """
    def assign_color(self, adj_entry, color):
        """
        node_id
        """
    def __init__(self, node_id):
        """
        f"Node_id: {self.node_id}, Next: ({self.next}), 
        f"Mate: ({self.mate.node_id}), 
        f"col_next: ({col_next}), col_prev: ({col_prev})

        """
def greedy_coloring_with_interchange(original_graph, nodes):
    """

            This procedure is an adaption of the algorithm described by [1]_,
            and is an implementation of coloring with interchange. Please be
            advised, that the datastructures used are rather complex because
            they are optimized to minimize the time spent identifying
            subcomponents of the graph, which are possible candidates for color
            interchange.

        References
        ----------
        .. [1] Maciej M. Syslo, Marsingh Deo, Janusz S. Kowalik,
           Discrete Optimization Algorithms with Pascal Programs, 415-424, 1983.
           ISBN 0-486-45353-7.
    
    """
