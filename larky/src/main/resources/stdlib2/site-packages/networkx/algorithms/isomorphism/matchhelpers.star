def copyfunc(f, name=None):
    """
    Returns a deepcopy of a function.
    """
def allclose(x, y, rtol=1.0000000000000001e-05, atol=1e-08):
    """
    Returns True if x and y are sufficiently close, elementwise.

        Parameters
        ----------
        rtol : float
            The relative error tolerance.
        atol : float
            The absolute error tolerance.

    
    """
def close(x, y, rtol=1.0000000000000001e-05, atol=1e-08):
    """
    Returns True if x and y are sufficiently close.

        Parameters
        ----------
        rtol : float
            The relative error tolerance.
        atol : float
            The absolute error tolerance.

    
    """
def categorical_node_match(attr, default):
    """
     Python 3
    """
        def match(data1, data2):
            """
            categorical_edge_match
            """
    def categorical_edge_match(*args, **kwargs):
        """
         Python 3
        """
        def match(datasets1, datasets2):
            """
             Docstrings for categorical functions.

            """
def numerical_node_match(attr, default, rtol=1.0000000000000001e-05, atol=1e-08):
    """
     Python 3
    """
        def match(data1, data2):
            """
            numerical_edge_match
            """
    def numerical_edge_match(*args, **kwargs):
        """
         Python 3
        """
        def match(datasets1, datasets2):
            """
             Docstrings for numerical functions.

            """
def generic_node_match(attr, default, op):
    """
     Python 3
    """
        def match(data1, data2):
            """
            generic_edge_match
            """
    def generic_edge_match(*args, **kwargs):
        """
        Returns a comparison function for a generic attribute.

            The value(s) of the attr(s) are compared using the specified
            operators. If all the attributes are equal, then the constructed
            function returns True. Potentially, the constructed edge_match
            function can be slow since it must verify that no isomorphism
            exists between the multiedges before it returns False.

            Parameters
            ----------
            attr : string | list
                The edge attribute to compare, or a list of node attributes
                to compare.
            default : value | list
                The default value for the edge attribute, or a list of
                default values for the dgeattributes.
            op : callable | list
                The operator to use when comparing attribute values, or a list
                of operators to use when comparing values for each attribute.

            Returns
            -------
            match : function
                The customized, generic `edge_match` function.

            Examples
            --------
            >>> from operator import eq
            >>> from networkx.algorithms.isomorphism.matchhelpers import close
            >>> from networkx.algorithms.isomorphism import generic_node_match
            >>> nm = generic_node_match("weight", 1.0, close)
            >>> nm = generic_node_match("color", "red", eq)
            >>> nm = generic_node_match(["weight", "color"], [1.0, "red"], [close, eq])
            ...

    
        """
    def match(datasets1, datasets2):
        """
         This is not an isomorphism, go to next permutation.

        """
