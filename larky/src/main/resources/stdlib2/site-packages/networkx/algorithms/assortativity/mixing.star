def attribute_mixing_dict(G, attribute, nodes=None, normalized=False):
    """
    Returns dictionary representation of mixing matrix for attribute.

        Parameters
        ----------
        G : graph
           NetworkX graph object.

        attribute : string
           Node attribute key.

        nodes: list or iterable (optional)
            Unse nodes in container to build the dict. The default is all nodes.

        normalized : bool (default=False)
           Return counts if False or probabilities if True.

        Examples
        --------
        >>> G = nx.Graph()
        >>> G.add_nodes_from([0, 1], color="red")
        >>> G.add_nodes_from([2, 3], color="blue")
        >>> G.add_edge(1, 3)
        >>> d = nx.attribute_mixing_dict(G, "color")
        >>> print(d["red"]["blue"])
        1
        >>> print(d["blue"]["red"])  # d symmetric for undirected graphs
        1

        Returns
        -------
        d : dictionary
           Counts or joint probability of occurrence of attribute pairs.
    
    """
def attribute_mixing_matrix(G, attribute, nodes=None, mapping=None, normalized=True):
    """
    Returns mixing matrix for attribute.

        Parameters
        ----------
        G : graph
           NetworkX graph object.

        attribute : string
           Node attribute key.

        nodes: list or iterable (optional)
            Use only nodes in container to build the matrix. The default is
            all nodes.

        mapping : dictionary, optional
           Mapping from node attribute to integer index in matrix.
           If not specified, an arbitrary ordering will be used.

        normalized : bool (default=True)
           Return counts if False or probabilities if True.

        Returns
        -------
        m: numpy array
           Counts or joint probability of occurrence of attribute pairs.
    
    """
def degree_mixing_dict(G, x="out", y="in", weight=None, nodes=None, normalized=False):
    """
    Returns dictionary representation of mixing matrix for degree.

        Parameters
        ----------
        G : graph
            NetworkX graph object.

        x: string ('in','out')
           The degree type for source node (directed graphs only).

        y: string ('in','out')
           The degree type for target node (directed graphs only).

        weight: string or None, optional (default=None)
           The edge attribute that holds the numerical value used
           as a weight.  If None, then each edge has weight 1.
           The degree is the sum of the edge weights adjacent to the node.

        normalized : bool (default=False)
            Return counts if False or probabilities if True.

        Returns
        -------
        d: dictionary
           Counts or joint probability of occurrence of degree pairs.
    
    """
def degree_mixing_matrix(G, x="out", y="in", weight=None, nodes=None, normalized=True):
    """
    Returns mixing matrix for attribute.

        Parameters
        ----------
        G : graph
           NetworkX graph object.

        x: string ('in','out')
           The degree type for source node (directed graphs only).

        y: string ('in','out')
           The degree type for target node (directed graphs only).

        nodes: list or iterable (optional)
            Build the matrix using only nodes in container.
            The default is all nodes.

        weight: string or None, optional (default=None)
           The edge attribute that holds the numerical value used
           as a weight.  If None, then each edge has weight 1.
           The degree is the sum of the edge weights adjacent to the node.

        normalized : bool (default=True)
           Return counts if False or probabilities if True.

        Returns
        -------
        m: numpy array
           Counts, or joint probability, of occurrence of node degree.
    
    """
def numeric_mixing_matrix(G, attribute, nodes=None, normalized=True):
    """
    Returns numeric mixing matrix for attribute.

        The attribute must be an integer.

        Parameters
        ----------
        G : graph
           NetworkX graph object.

        attribute : string
           Node attribute key.  The corresponding attribute must be an integer.

        nodes: list or iterable (optional)
            Build the matrix only with nodes in container. The default is all nodes.

        normalized : bool (default=True)
           Return counts if False or probabilities if True.

        Returns
        -------
        m: numpy array
           Counts, or joint, probability of occurrence of node attribute pairs.
    
    """
def mixing_dict(xy, normalized=False):
    """
    Returns a dictionary representation of mixing matrix.

        Parameters
        ----------
        xy : list or container of two-tuples
           Pairs of (x,y) items.

        attribute : string
           Node attribute key

        normalized : bool (default=False)
           Return counts if False or probabilities if True.

        Returns
        -------
        d: dictionary
           Counts or Joint probability of occurrence of values in xy.
    
    """
