2021-03-02 20:47:26,137 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:47:26,138 : INFO : tokenize_signature : --> do i ever get here?
def betweenness_centrality(
    G, k=None, normalized=True, weight=None, endpoints=False, seed=None
):
    """
    r"""Compute the shortest-path betweenness centrality for nodes.

        Betweenness centrality of a node $v$ is the sum of the
        fraction of all-pairs shortest paths that pass through $v$

        .. math::

           c_B(v) =\sum_{s,t \in V} \frac{\sigma(s, t|v)}{\sigma(s, t)}

        where $V$ is the set of nodes, $\sigma(s, t)$ is the number of
        shortest $(s, t)$-paths,  and $\sigma(s, t|v)$ is the number of
        those paths  passing through some  node $v$ other than $s, t$.
        If $s = t$, $\sigma(s, t) = 1$, and if $v \in {s, t}$,
        $\sigma(s, t|v) = 0$ [2]_.

        Parameters
        ----------
        G : graph
          A NetworkX graph.

        k : int, optional (default=None)
          If k is not None use k node samples to estimate betweenness.
          The value of k <= n where n is the number of nodes in the graph.
          Higher values give better approximation.

        normalized : bool, optional
          If True the betweenness values are normalized by `2/((n-1)(n-2))`
          for graphs, and `1/((n-1)(n-2))` for directed graphs where `n`
          is the number of nodes in G.

        weight : None or string, optional (default=None)
          If None, all edge weights are considered equal.
          Otherwise holds the name of the edge attribute used as weight.

        endpoints : bool, optional
          If True include the endpoints in the shortest path counts.

        seed : integer, random_state, or None (default)
            Indicator of random number generation state.
            See :ref:`Randomness<randomness>`.
            Note that this is only used if k is not None.

        Returns
        -------
        nodes : dictionary
           Dictionary of nodes with betweenness centrality as the value.

        See Also
        --------
        edge_betweenness_centrality
        load_centrality

        Notes
        -----
        The algorithm is from Ulrik Brandes [1]_.
        See [4]_ for the original first published version and [2]_ for details on
        algorithms for variations and related metrics.

        For approximate betweenness calculations set k=#samples to use
        k nodes ("pivots") to estimate the betweenness values. For an estimate
        of the number of pivots needed see [3]_.

        For weighted graphs the edge weights must be greater than zero.
        Zero edge weights can produce an infinite number of equal length
        paths between pairs of nodes.

        The total number of paths between source and target is counted
        differently for directed and undirected graphs. Directed paths
        are easy to count. Undirected paths are tricky: should a path
        from "u" to "v" count as 1 undirected path or as 2 directed paths?

        For betweenness_centrality we report the number of undirected
        paths when G is undirected.

        For betweenness_centrality_subset the reporting is different.
        If the source and target subsets are the same, then we want
        to count undirected paths. But if the source and target subsets
        differ -- for example, if sources is {0} and targets is {1},
        then we are only counting the paths in one direction. They are
        undirected paths but we are counting them in a directed way.
        To count them as undirected paths, each should count as half a path.

        References
        ----------
        .. [1] Ulrik Brandes:
           A Faster Algorithm for Betweenness Centrality.
           Journal of Mathematical Sociology 25(2):163-177, 2001.
           http://www.inf.uni-konstanz.de/algo/publications/b-fabc-01.pdf
        .. [2] Ulrik Brandes:
           On Variants of Shortest-Path Betweenness
           Centrality and their Generic Computation.
           Social Networks 30(2):136-145, 2008.
           http://www.inf.uni-konstanz.de/algo/publications/b-vspbc-08.pdf
        .. [3] Ulrik Brandes and Christian Pich:
           Centrality Estimation in Large Networks.
           International Journal of Bifurcation and Chaos 17(7):2303-2318, 2007.
           http://www.inf.uni-konstanz.de/algo/publications/bp-celn-06.pdf
        .. [4] Linton C. Freeman:
           A set of measures of centrality based on betweenness.
           Sociometry 40: 35â€“41, 1977
           http://moreno.ss.uci.edu/23.pdf
    
    """
def edge_betweenness_centrality(G, k=None, normalized=True, weight=None, seed=None):
    """
    r"""Compute betweenness centrality for edges.

        Betweenness centrality of an edge $e$ is the sum of the
        fraction of all-pairs shortest paths that pass through $e$

        .. math::

           c_B(e) =\sum_{s,t \in V} \frac{\sigma(s, t|e)}{\sigma(s, t)}

        where $V$ is the set of nodes, $\sigma(s, t)$ is the number of
        shortest $(s, t)$-paths, and $\sigma(s, t|e)$ is the number of
        those paths passing through edge $e$ [2]_.

        Parameters
        ----------
        G : graph
          A NetworkX graph.

        k : int, optional (default=None)
          If k is not None use k node samples to estimate betweenness.
          The value of k <= n where n is the number of nodes in the graph.
          Higher values give better approximation.

        normalized : bool, optional
          If True the betweenness values are normalized by $2/(n(n-1))$
          for graphs, and $1/(n(n-1))$ for directed graphs where $n$
          is the number of nodes in G.

        weight : None or string, optional (default=None)
          If None, all edge weights are considered equal.
          Otherwise holds the name of the edge attribute used as weight.

        seed : integer, random_state, or None (default)
            Indicator of random number generation state.
            See :ref:`Randomness<randomness>`.
            Note that this is only used if k is not None.

        Returns
        -------
        edges : dictionary
           Dictionary of edges with betweenness centrality as the value.

        See Also
        --------
        betweenness_centrality
        edge_load

        Notes
        -----
        The algorithm is from Ulrik Brandes [1]_.

        For weighted graphs the edge weights must be greater than zero.
        Zero edge weights can produce an infinite number of equal length
        paths between pairs of nodes.

        References
        ----------
        .. [1]  A Faster Algorithm for Betweenness Centrality. Ulrik Brandes,
           Journal of Mathematical Sociology 25(2):163-177, 2001.
           http://www.inf.uni-konstanz.de/algo/publications/b-fabc-01.pdf
        .. [2] Ulrik Brandes: On Variants of Shortest-Path Betweenness
           Centrality and their Generic Computation.
           Social Networks 30(2):136-145, 2008.
           http://www.inf.uni-konstanz.de/algo/publications/b-vspbc-08.pdf
    
    """
def edge_betweenness(G, k=None, normalized=True, weight=None, seed=None):
    """
    edge_betweeness is replaced by edge_betweenness_centrality
    """
def _single_source_shortest_path_basic(G, s):
    """
     sigma[v]=0 for v in G
    """
def _single_source_dijkstra_path_basic(G, s, weight):
    """
     modified from Eppstein

    """
def _accumulate_basic(betweenness, S, P, sigma, s):
    """
     no normalization
    """
def _rescale_e(betweenness, n, normalized, directed=False, k=None):
    """
     no normalization b=0 for all nodes
    """
