def is_eulerian(G):
    """
    Returns True if and only if `G` is Eulerian.

        A graph is *Eulerian* if it has an Eulerian circuit. An *Eulerian
        circuit* is a closed walk that includes each edge of a graph exactly
        once.

        Parameters
        ----------
        G : NetworkX graph
           A graph, either directed or undirected.

        Examples
        --------
        >>> nx.is_eulerian(nx.DiGraph({0: [3], 1: [2], 2: [3], 3: [0, 1]}))
        True
        >>> nx.is_eulerian(nx.complete_graph(5))
        True
        >>> nx.is_eulerian(nx.petersen_graph())
        False

        Notes
        -----
        If the graph is not connected (or not strongly connected, for
        directed graphs), this function returns False.

    
    """
def is_semieulerian(G):
    """
    Return True iff `G` is semi-Eulerian.

        G is semi-Eulerian if it has an Eulerian path but no Eulerian circuit.
    
    """
def _find_path_start(G):
    """
    Return a suitable starting vertex for an Eulerian path.

        If no path exists, return None.
    
    """
def _simplegraph_eulerian_circuit(G, source):
    """
    Returns an iterator over the edges of an Eulerian circuit in `G`.

        An *Eulerian circuit* is a closed walk that includes each edge of a
        graph exactly once.

        Parameters
        ----------
        G : NetworkX graph
           A graph, either directed or undirected.

        source : node, optional
           Starting node for circuit.

        keys : bool
           If False, edges generated by this function will be of the form
           ``(u, v)``. Otherwise, edges will be of the form ``(u, v, k)``.
           This option is ignored unless `G` is a multigraph.

        Returns
        -------
        edges : iterator
           An iterator over edges in the Eulerian circuit.

        Raises
        ------
        NetworkXError
           If the graph is not Eulerian.

        See Also
        --------
        is_eulerian

        Notes
        -----
        This is a linear time implementation of an algorithm adapted from [1]_.

        For general information about Euler tours, see [2]_.

        References
        ----------
        .. [1] J. Edmonds, E. L. Johnson.
           Matching, Euler tours and the Chinese postman.
           Mathematical programming, Volume 5, Issue 1 (1973), 111-114.
        .. [2] https://en.wikipedia.org/wiki/Eulerian_path

        Examples
        --------
        To get an Eulerian circuit in an undirected graph::

            >>> G = nx.complete_graph(3)
            >>> list(nx.eulerian_circuit(G))
            [(0, 2), (2, 1), (1, 0)]
            >>> list(nx.eulerian_circuit(G, source=1))
            [(1, 2), (2, 0), (0, 1)]

        To get the sequence of vertices in an Eulerian circuit::

            >>> [u for u, v in nx.eulerian_circuit(G)]
            [0, 2, 1]

    
    """
def has_eulerian_path(G):
    """
    Return True iff `G` has an Eulerian path.

        An Eulerian path is a path in a graph which uses each edge of a graph
        exactly once.

        A directed graph has an Eulerian path iff:
            - at most one vertex has out_degree - in_degree = 1,
            - at most one vertex has in_degree - out_degree = 1,
            - every other vertex has equal in_degree and out_degree,
            - and all of its vertices with nonzero degree belong to a
            - single connected component of the underlying undirected graph.

        An undirected graph has an Eulerian path iff:
            - exactly zero or two vertices have odd degree,
            - and all of its vertices with nonzero degree belong to a
            - single connected component.

        Parameters
        ----------
        G : NetworkX Graph
            The graph to find an euler path in.

        Returns
        -------
        Bool : True if G has an eulerian path.

        See Also
        --------
        is_eulerian
        eulerian_path
    
    """
def eulerian_path(G, source=None, keys=False):
    """
    Return an iterator over the edges of an Eulerian path in `G`.

        Parameters
        ----------
        G : NetworkX Graph
            The graph in which to look for an eulerian path.
        source : node or None (default: None)
            The node at which to start the search. None means search over all
            starting nodes.
        keys : Bool (default: False)
            Indicates whether to yield edge 3-tuples (u, v, edge_key).
            The default yields edge 2-tuples

        Yields
        ------
        Edge tuples along the eulerian path.

        Warning: If `source` provided is not the start node of an Euler path
        will raise error even if an Euler Path exists.
    
    """
def eulerize(G):
    """
    Transforms a graph into an Eulerian graph

        Parameters
        ----------
        G : NetworkX graph
           An undirected graph

        Returns
        -------
        G : NetworkX multigraph

        Raises
        ------
        NetworkXError
           If the graph is not connected.

        See Also
        --------
        is_eulerian
        eulerian_circuit

        References
        ----------
        .. [1] J. Edmonds, E. L. Johnson.
           Matching, Euler tours and the Chinese postman.
           Mathematical programming, Volume 5, Issue 1 (1973), 111-114.
           [2] https://en.wikipedia.org/wiki/Eulerian_path
        .. [3] http://web.math.princeton.edu/math_alive/5/Notes1.pdf

        Examples
        --------
            >>> G = nx.complete_graph(10)
            >>> H = nx.eulerize(G)
            >>> nx.is_eulerian(H)
            True

    
    """
