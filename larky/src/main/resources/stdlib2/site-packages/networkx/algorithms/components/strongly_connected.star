def strongly_connected_components(G):
    """
    Generate nodes in strongly connected components of graph.

        Parameters
        ----------
        G : NetworkX Graph
            A directed graph.

        Returns
        -------
        comp : generator of sets
            A generator of sets of nodes, one for each strongly connected
            component of G.

        Raises
        ------
        NetworkXNotImplemented
            If G is undirected.

        Examples
        --------
        Generate a sorted list of strongly connected components, largest first.

        >>> G = nx.cycle_graph(4, create_using=nx.DiGraph())
        >>> nx.add_cycle(G, [10, 11, 12])
        >>> [
        ...     len(c)
        ...     for c in sorted(nx.strongly_connected_components(G), key=len, reverse=True)
        ... ]
        [4, 3]

        If you only want the largest component, it's more efficient to
        use max instead of sort.

        >>> largest = max(nx.strongly_connected_components(G), key=len)

        See Also
        --------
        connected_components
        weakly_connected_components
        kosaraju_strongly_connected_components

        Notes
        -----
        Uses Tarjan's algorithm[1]_ with Nuutila's modifications[2]_.
        Nonrecursive version of algorithm.

        References
        ----------
        .. [1] Depth-first search and linear graph algorithms, R. Tarjan
           SIAM Journal of Computing 1(2):146-160, (1972).

        .. [2] On finding the strongly connected components in a directed graph.
           E. Nuutila and E. Soisalon-Soinen
           Information Processing Letters 49(1): 9-14, (1994)..

    
    """
def kosaraju_strongly_connected_components(G, source=None):
    """
    Generate nodes in strongly connected components of graph.

        Parameters
        ----------
        G : NetworkX Graph
            A directed graph.

        Returns
        -------
        comp : generator of sets
            A genrator of sets of nodes, one for each strongly connected
            component of G.

        Raises
        ------
        NetworkXNotImplemented
            If G is undirected.

        Examples
        --------
        Generate a sorted list of strongly connected components, largest first.

        >>> G = nx.cycle_graph(4, create_using=nx.DiGraph())
        >>> nx.add_cycle(G, [10, 11, 12])
        >>> [
        ...     len(c)
        ...     for c in sorted(
        ...         nx.kosaraju_strongly_connected_components(G), key=len, reverse=True
        ...     )
        ... ]
        [4, 3]

        If you only want the largest component, it's more efficient to
        use max instead of sort.

        >>> largest = max(nx.kosaraju_strongly_connected_components(G), key=len)

        See Also
        --------
        strongly_connected_components

        Notes
        -----
        Uses Kosaraju's algorithm.

    
    """
def strongly_connected_components_recursive(G):
    """
    Generate nodes in strongly connected components of graph.

        Recursive version of algorithm.

        Parameters
        ----------
        G : NetworkX Graph
            A directed graph.

        Returns
        -------
        comp : generator of sets
            A generator of sets of nodes, one for each strongly connected
            component of G.

        Raises
        ------
        NetworkXNotImplemented
            If G is undirected.

        Examples
        --------
        Generate a sorted list of strongly connected components, largest first.

        >>> G = nx.cycle_graph(4, create_using=nx.DiGraph())
        >>> nx.add_cycle(G, [10, 11, 12])
        >>> [
        ...     len(c)
        ...     for c in sorted(
        ...         nx.strongly_connected_components_recursive(G), key=len, reverse=True
        ...     )
        ... ]
        [4, 3]

        If you only want the largest component, it's more efficient to
        use max instead of sort.

        >>> largest = max(nx.strongly_connected_components_recursive(G), key=len)

        To create the induced subgraph of the components use:
        >>> S = [G.subgraph(c).copy() for c in nx.weakly_connected_components(G)]

        See Also
        --------
        connected_components

        Notes
        -----
        Uses Tarjan's algorithm[1]_ with Nuutila's modifications[2]_.

        References
        ----------
        .. [1] Depth-first search and linear graph algorithms, R. Tarjan
           SIAM Journal of Computing 1(2):146-160, (1972).

        .. [2] On finding the strongly connected components in a directed graph.
           E. Nuutila and E. Soisalon-Soinen
           Information Processing Letters 49(1): 9-14, (1994)..

    
    """
    def visit(v, cnt):
        """
         hold nodes in this component
        """
def number_strongly_connected_components(G):
    """
    Returns number of strongly connected components in graph.

        Parameters
        ----------
        G : NetworkX graph
           A directed graph.

        Returns
        -------
        n : integer
           Number of strongly connected components

        Raises
        ------
        NetworkXNotImplemented
            If G is undirected.

        See Also
        --------
        strongly_connected_components
        number_connected_components
        number_weakly_connected_components

        Notes
        -----
        For directed graphs only.
    
    """
def is_strongly_connected(G):
    """
    Test directed graph for strong connectivity.

        A directed graph is strongly connected if and only if every vertex in
        the graph is reachable from every other vertex.

        Parameters
        ----------
        G : NetworkX Graph
           A directed graph.

        Returns
        -------
        connected : bool
          True if the graph is strongly connected, False otherwise.

        Raises
        ------
        NetworkXNotImplemented
            If G is undirected.

        See Also
        --------
        is_weakly_connected
        is_semiconnected
        is_connected
        is_biconnected
        strongly_connected_components

        Notes
        -----
        For directed graphs only.
    
    """
def condensation(G, scc=None):
    """
    Returns the condensation of G.

        The condensation of G is the graph with each of the strongly connected
        components contracted into a single node.

        Parameters
        ----------
        G : NetworkX DiGraph
           A directed graph.

        scc:  list or generator (optional, default=None)
           Strongly connected components. If provided, the elements in
           `scc` must partition the nodes in `G`. If not provided, it will be
           calculated as scc=nx.strongly_connected_components(G).

        Returns
        -------
        C : NetworkX DiGraph
           The condensation graph C of G.  The node labels are integers
           corresponding to the index of the component in the list of
           strongly connected components of G.  C has a graph attribute named
           'mapping' with a dictionary mapping the original nodes to the
           nodes in C to which they belong.  Each node in C also has a node
           attribute 'members' with the set of original nodes in G that
           form the SCC that the node in C represents.

        Raises
        ------
        NetworkXNotImplemented
            If G is undirected.

        Notes
        -----
        After contracting all strongly connected components to a single node,
        the resulting graph is a directed acyclic graph.

    
    """
