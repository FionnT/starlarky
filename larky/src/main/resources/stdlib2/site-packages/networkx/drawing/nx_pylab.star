def draw(G, pos=None, ax=None, **kwds):
    """
    Draw the graph G with Matplotlib.

        Draw the graph as a simple representation with no node
        labels or edge labels and using the full Matplotlib figure area
        and no axis labels by default.  See draw_networkx() for more
        full-featured drawing that allows title, axis labels etc.

        Parameters
        ----------
        G : graph
           A networkx graph

        pos : dictionary, optional
           A dictionary with nodes as keys and positions as values.
           If not specified a spring layout positioning will be computed.
           See :py:mod:`networkx.drawing.layout` for functions that
           compute node positions.

        ax : Matplotlib Axes object, optional
           Draw the graph in specified Matplotlib axes.

        kwds : optional keywords
           See networkx.draw_networkx() for a description of optional keywords.

        Examples
        --------
        >>> G = nx.dodecahedral_graph()
        >>> nx.draw(G)
        >>> nx.draw(G, pos=nx.spring_layout(G))  # use spring layout

        See Also
        --------
        draw_networkx()
        draw_networkx_nodes()
        draw_networkx_edges()
        draw_networkx_labels()
        draw_networkx_edge_labels()

        Notes
        -----
        This function has the same name as pylab.draw and pyplot.draw
        so beware when using `from networkx import *`

        since you might overwrite the pylab.draw function.

        With pyplot use

        >>> import matplotlib.pyplot as plt
        >>> G = nx.dodecahedral_graph()
        >>> nx.draw(G)  # networkx draw()
        >>> plt.draw()  # pyplot draw()

        Also see the NetworkX drawing examples at
        https://networkx.github.io/documentation/latest/auto_examples/index.html
    
    """
def draw_networkx(G, pos=None, arrows=True, with_labels=True, **kwds):
    """
    Draw the graph G using Matplotlib.

        Draw the graph with Matplotlib with options for node positions,
        labeling, titles, and many other drawing features.
        See draw() for simple drawing without labels or axes.

        Parameters
        ----------
        G : graph
           A networkx graph

        pos : dictionary, optional
           A dictionary with nodes as keys and positions as values.
           If not specified a spring layout positioning will be computed.
           See :py:mod:`networkx.drawing.layout` for functions that
           compute node positions.

        arrows : bool, optional (default=True)
           For directed graphs, if True draw arrowheads.
           Note: Arrows will be the same color as edges.

        arrowstyle : str, optional (default='-|>')
            For directed graphs, choose the style of the arrowsheads.
            See :py:class: `matplotlib.patches.ArrowStyle` for more
            options.

        arrowsize : int, optional (default=10)
           For directed graphs, choose the size of the arrow head head's length and
           width. See :py:class: `matplotlib.patches.FancyArrowPatch` for attribute
           `mutation_scale` for more info.

        with_labels :  bool, optional (default=True)
           Set to True to draw labels on the nodes.

        ax : Matplotlib Axes object, optional
           Draw the graph in the specified Matplotlib axes.

        nodelist : list, optional (default G.nodes())
           Draw only specified nodes

        edgelist : list, optional (default=G.edges())
           Draw only specified edges

        node_size : scalar or array, optional (default=300)
           Size of nodes.  If an array is specified it must be the
           same length as nodelist.

        node_color : color or array of colors (default='#1f78b4')
           Node color. Can be a single color or a sequence of colors with the same
           length as nodelist. Color can be string, or rgb (or rgba) tuple of
           floats from 0-1. If numeric values are specified they will be
           mapped to colors using the cmap and vmin,vmax parameters. See
           matplotlib.scatter for more details.

        node_shape :  string, optional (default='o')
           The shape of the node.  Specification is as matplotlib.scatter
           marker, one of 'so^>v<dph8'.

        alpha : float, optional (default=None)
           The node and edge transparency

        cmap : Matplotlib colormap, optional (default=None)
           Colormap for mapping intensities of nodes

        vmin,vmax : float, optional (default=None)
           Minimum and maximum for node colormap scaling

        linewidths : [None | scalar | sequence]
           Line width of symbol border (default =1.0)

        width : float, optional (default=1.0)
           Line width of edges

        edge_color : color or array of colors (default='k')
           Edge color. Can be a single color or a sequence of colors with the same
           length as edgelist. Color can be string, or rgb (or rgba) tuple of
           floats from 0-1. If numeric values are specified they will be
           mapped to colors using the edge_cmap and edge_vmin,edge_vmax parameters.

        edge_cmap : Matplotlib colormap, optional (default=None)
           Colormap for mapping intensities of edges

        edge_vmin,edge_vmax : floats, optional (default=None)
           Minimum and maximum for edge colormap scaling

        style : string, optional (default='solid')
           Edge line style (solid|dashed|dotted,dashdot)

        labels : dictionary, optional (default=None)
           Node labels in a dictionary keyed by node of text labels

        font_size : int, optional (default=12)
           Font size for text labels

        font_color : string, optional (default='k' black)
           Font color string

        font_weight : string, optional (default='normal')
           Font weight

        font_family : string, optional (default='sans-serif')
           Font family

        label : string, optional
           Label for graph legend

        kwds : optional keywords
           See networkx.draw_networkx_nodes(), networkx.draw_networkx_edges(), and
           networkx.draw_networkx_labels() for a description of optional keywords.

        Notes
        -----
        For directed graphs, arrows  are drawn at the head end.  Arrows can be
        turned off with keyword arrows=False.

        Examples
        --------
        >>> G = nx.dodecahedral_graph()
        >>> nx.draw(G)
        >>> nx.draw(G, pos=nx.spring_layout(G))  # use spring layout

        >>> import matplotlib.pyplot as plt
        >>> limits = plt.axis("off")  # turn of axis

        Also see the NetworkX drawing examples at
        https://networkx.github.io/documentation/latest/auto_examples/index.html

        See Also
        --------
        draw()
        draw_networkx_nodes()
        draw_networkx_edges()
        draw_networkx_labels()
        draw_networkx_edge_labels()
    
    """
2021-03-02 20:47:08,206 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:47:08,206 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:47:08,206 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:47:08,206 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:47:08,207 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:47:08,207 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:47:08,207 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:47:08,207 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:47:08,207 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:47:08,207 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:47:08,207 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:47:08,207 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:47:08,207 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:47:08,207 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:47:08,207 : INFO : tokenize_signature : --> do i ever get here?
def draw_networkx_nodes(
    G,
    pos,
    nodelist=None,
    node_size=300,
    node_color="#1f78b4",
    node_shape="o",
    alpha=None,
    cmap=None,
    vmin=None,
    vmax=None,
    ax=None,
    linewidths=None,
    edgecolors=None,
    label=None,
):
    """
    Draw the nodes of the graph G.

        This draws only the nodes of the graph G.

        Parameters
        ----------
        G : graph
           A networkx graph

        pos : dictionary
           A dictionary with nodes as keys and positions as values.
           Positions should be sequences of length 2.

        ax : Matplotlib Axes object, optional
           Draw the graph in the specified Matplotlib axes.

        nodelist : list, optional
           Draw only specified nodes (default G.nodes())

        node_size : scalar or array
           Size of nodes (default=300).  If an array is specified it must be the
           same length as nodelist.

        node_color : color or array of colors (default='#1f78b4')
           Node color. Can be a single color or a sequence of colors with the same
           length as nodelist. Color can be string, or rgb (or rgba) tuple of
           floats from 0-1. If numeric values are specified they will be
           mapped to colors using the cmap and vmin,vmax parameters. See
           matplotlib.scatter for more details.

        node_shape :  string
           The shape of the node.  Specification is as matplotlib.scatter
           marker, one of 'so^>v<dph8' (default='o').

        alpha : float or array of floats
           The node transparency.  This can be a single alpha value (default=None),
           in which case it will be applied to all the nodes of color. Otherwise,
           if it is an array, the elements of alpha will be applied to the colors
           in order (cycling through alpha multiple times if necessary).

        cmap : Matplotlib colormap
           Colormap for mapping intensities of nodes (default=None)

        vmin,vmax : floats
           Minimum and maximum for node colormap scaling (default=None)

        linewidths : [None | scalar | sequence]
           Line width of symbol border (default =1.0)

        edgecolors : [None | scalar | sequence]
           Colors of node borders (default = node_color)

        label : [None| string]
           Label for legend

        Returns
        -------
        matplotlib.collections.PathCollection
            `PathCollection` of the nodes.

        Examples
        --------
        >>> G = nx.dodecahedral_graph()
        >>> nodes = nx.draw_networkx_nodes(G, pos=nx.spring_layout(G))

        Also see the NetworkX drawing examples at
        https://networkx.github.io/documentation/latest/auto_examples/index.html

        See Also
        --------
        draw()
        draw_networkx()
        draw_networkx_edges()
        draw_networkx_labels()
        draw_networkx_edge_labels()
    
    """
2021-03-02 20:47:08,209 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:47:08,209 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:47:08,209 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:47:08,209 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:47:08,209 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:47:08,209 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:47:08,209 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:47:08,209 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:47:08,209 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:47:08,209 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:47:08,209 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:47:08,209 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:47:08,210 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:47:08,210 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:47:08,210 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:47:08,210 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:47:08,210 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:47:08,210 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:47:08,210 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:47:08,210 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:47:08,210 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:47:08,210 : INFO : tokenize_signature : --> do i ever get here?
def draw_networkx_edges(
    G,
    pos,
    edgelist=None,
    width=1.0,
    edge_color="k",
    style="solid",
    alpha=None,
    arrowstyle="-|>",
    arrowsize=10,
    edge_cmap=None,
    edge_vmin=None,
    edge_vmax=None,
    ax=None,
    arrows=True,
    label=None,
    node_size=300,
    nodelist=None,
    node_shape="o",
    connectionstyle=None,
    min_source_margin=0,
    min_target_margin=0,
):
    """
    Draw the edges of the graph G.

        This draws only the edges of the graph G.

        Parameters
        ----------
        G : graph
           A networkx graph

        pos : dictionary
           A dictionary with nodes as keys and positions as values.
           Positions should be sequences of length 2.

        edgelist : collection of edge tuples
           Draw only specified edges(default=G.edges())

        width : float, or array of floats
           Line width of edges (default=1.0)

        edge_color : color or array of colors (default='k')
           Edge color. Can be a single color or a sequence of colors with the same
           length as edgelist. Color can be string, or rgb (or rgba) tuple of
           floats from 0-1. If numeric values are specified they will be
           mapped to colors using the edge_cmap and edge_vmin,edge_vmax parameters.

        style : string
           Edge line style (default='solid') (solid|dashed|dotted,dashdot)

        alpha : float
           The edge transparency (default=None)

        edge_ cmap : Matplotlib colormap
           Colormap for mapping intensities of edges (default=None)

        edge_vmin,edge_vmax : floats
           Minimum and maximum for edge colormap scaling (default=None)

        ax : Matplotlib Axes object, optional
           Draw the graph in the specified Matplotlib axes.

        arrows : bool, optional (default=True)
           For directed graphs, if True draw arrowheads.
           Note: Arrows will be the same color as edges.

        arrowstyle : str, optional (default='-|>')
           For directed graphs, choose the style of the arrow heads.
           See :py:class: `matplotlib.patches.ArrowStyle` for more
           options.

        arrowsize : int, optional (default=10)
           For directed graphs, choose the size of the arrow head head's length and
           width. See :py:class: `matplotlib.patches.FancyArrowPatch` for attribute
           `mutation_scale` for more info.

        connectionstyle : str, optional (default=None)
           Pass the connectionstyle parameter to create curved arc of rounding
           radius rad. For example, connectionstyle='arc3,rad=0.2'.
           See :py:class: `matplotlib.patches.ConnectionStyle` and
           :py:class: `matplotlib.patches.FancyArrowPatch` for more info.

        label : [None| string]
           Label for legend

        min_source_margin : int, optional (default=0)
           The minimum margin (gap) at the begining of the edge at the source.

        min_target_margin : int, optional (default=0)
           The minimum margin (gap) at the end of the edge at the target.

        Returns
        -------
        matplotlib.collection.LineCollection
            `LineCollection` of the edges

        list of matplotlib.patches.FancyArrowPatch
            `FancyArrowPatch` instances of the directed edges

        Depending whether the drawing includes arrows or not.

        Notes
        -----
        For directed graphs, arrows are drawn at the head end.  Arrows can be
        turned off with keyword arrows=False. Be sure to include `node_size` as a
        keyword argument; arrows are drawn considering the size of nodes.

        Examples
        --------
        >>> G = nx.dodecahedral_graph()
        >>> edges = nx.draw_networkx_edges(G, pos=nx.spring_layout(G))

        >>> G = nx.DiGraph()
        >>> G.add_edges_from([(1, 2), (1, 3), (2, 3)])
        >>> arcs = nx.draw_networkx_edges(G, pos=nx.spring_layout(G))
        >>> alphas = [0.3, 0.4, 0.5]
        >>> for i, arc in enumerate(arcs):  # change alpha values of arcs
        ...     arc.set_alpha(alphas[i])

        Also see the NetworkX drawing examples at
        https://networkx.github.io/documentation/latest/auto_examples/index.html

        See Also
        --------
        draw()
        draw_networkx()
        draw_networkx_nodes()
        draw_networkx_labels()
        draw_networkx_edge_labels()
    
    """
        def to_marker_edge(marker_size, marker):
            """
            s^>v<d
            """
2021-03-02 20:47:08,214 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:47:08,214 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:47:08,215 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:47:08,215 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:47:08,215 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:47:08,215 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:47:08,215 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:47:08,215 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:47:08,215 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:47:08,215 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:47:08,215 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:47:08,215 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:47:08,215 : INFO : tokenize_signature : --> do i ever get here?
def draw_networkx_labels(
    G,
    pos,
    labels=None,
    font_size=12,
    font_color="k",
    font_family="sans-serif",
    font_weight="normal",
    alpha=None,
    bbox=None,
    horizontalalignment="center",
    verticalalignment="center",
    ax=None,
):
    """
    Draw node labels on the graph G.

        Parameters
        ----------
        G : graph
           A networkx graph

        pos : dictionary
           A dictionary with nodes as keys and positions as values.
           Positions should be sequences of length 2.

        labels : dictionary, optional (default=None)
           Node labels in a dictionary keyed by node of text labels
           Node-keys in labels should appear as keys in `pos`.
           If needed use: `{n:lab for n,lab in labels.items() if n in pos}`

        font_size : int
           Font size for text labels (default=12)

        font_color : string
           Font color string (default='k' black)

        font_family : string
           Font family (default='sans-serif')

        font_weight : string
           Font weight (default='normal')

        alpha : float or None
           The text transparency (default=None)

        horizontalalignment : {'center', 'right', 'left'}
           Horizontal alignment (default='center')

        verticalalignment : {'center', 'top', 'bottom', 'baseline', 'center_baseline'}
            Vertical alignment (default='center')

        ax : Matplotlib Axes object, optional
           Draw the graph in the specified Matplotlib axes.


        Returns
        -------
        dict
            `dict` of labels keyed on the nodes

        Examples
        --------
        >>> G = nx.dodecahedral_graph()
        >>> labels = nx.draw_networkx_labels(G, pos=nx.spring_layout(G))

        Also see the NetworkX drawing examples at
        https://networkx.github.io/documentation/latest/auto_examples/index.html

        See Also
        --------
        draw()
        draw_networkx()
        draw_networkx_nodes()
        draw_networkx_edges()
        draw_networkx_edge_labels()
    
    """
2021-03-02 20:47:08,216 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:47:08,217 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:47:08,217 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:47:08,217 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:47:08,217 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:47:08,217 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:47:08,217 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:47:08,217 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:47:08,217 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:47:08,217 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:47:08,217 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:47:08,217 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:47:08,217 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:47:08,217 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:47:08,217 : INFO : tokenize_signature : --> do i ever get here?
def draw_networkx_edge_labels(
    G,
    pos,
    edge_labels=None,
    label_pos=0.5,
    font_size=10,
    font_color="k",
    font_family="sans-serif",
    font_weight="normal",
    alpha=None,
    bbox=None,
    horizontalalignment="center",
    verticalalignment="center",
    ax=None,
    rotate=True,
):
    """
    Draw edge labels.

        Parameters
        ----------
        G : graph
           A networkx graph

        pos : dictionary
           A dictionary with nodes as keys and positions as values.
           Positions should be sequences of length 2.

        ax : Matplotlib Axes object, optional
           Draw the graph in the specified Matplotlib axes.

        alpha : float or None
           The text transparency (default=None)

        edge_labels : dictionary
           Edge labels in a dictionary keyed by edge two-tuple of text
           labels (default=None). Only labels for the keys in the dictionary
           are drawn.

        label_pos : float
           Position of edge label along edge (0=head, 0.5=center, 1=tail)

        font_size : int
           Font size for text labels (default=12)

        font_color : string
           Font color string (default='k' black)

        font_weight : string
           Font weight (default='normal')

        font_family : string
           Font family (default='sans-serif')

        bbox : Matplotlib bbox
           Specify text box shape and colors.

        clip_on : bool
           Turn on clipping at axis boundaries (default=True)

        horizontalalignment : {'center', 'right', 'left'}
           Horizontal alignment (default='center')

        verticalalignment : {'center', 'top', 'bottom', 'baseline', 'center_baseline'}
            Vertical alignment (default='center')

        ax : Matplotlib Axes object, optional
           Draw the graph in the specified Matplotlib axes.

        Returns
        -------
        dict
            `dict` of labels keyed on the edges

        Examples
        --------
        >>> G = nx.dodecahedral_graph()
        >>> edge_labels = nx.draw_networkx_edge_labels(G, pos=nx.spring_layout(G))

        Also see the NetworkX drawing examples at
        https://networkx.github.io/documentation/latest/auto_examples/index.html

        See Also
        --------
        draw()
        draw_networkx()
        draw_networkx_nodes()
        draw_networkx_edges()
        draw_networkx_labels()
    
    """
def draw_circular(G, **kwargs):
    """
    Draw the graph G with a circular layout.

        Parameters
        ----------
        G : graph
           A networkx graph

        kwargs : optional keywords
           See networkx.draw_networkx() for a description of optional keywords,
           with the exception of the pos parameter which is not used by this
           function.
    
    """
def draw_kamada_kawai(G, **kwargs):
    """
    Draw the graph G with a Kamada-Kawai force-directed layout.

        Parameters
        ----------
        G : graph
           A networkx graph

        kwargs : optional keywords
           See networkx.draw_networkx() for a description of optional keywords,
           with the exception of the pos parameter which is not used by this
           function.
    
    """
def draw_random(G, **kwargs):
    """
    Draw the graph G with a random layout.

        Parameters
        ----------
        G : graph
           A networkx graph

        kwargs : optional keywords
           See networkx.draw_networkx() for a description of optional keywords,
           with the exception of the pos parameter which is not used by this
           function.
    
    """
def draw_spectral(G, **kwargs):
    """
    Draw the graph G with a spectral 2D layout.

        Using the unnormalized Laplacian, the layout shows possible clusters of
        nodes which are an approximation of the ratio cut. The positions are the
        entries of the second and third eigenvectors corresponding to the
        ascending eigenvalues starting from the second one.

        Parameters
        ----------
        G : graph
           A networkx graph

        kwargs : optional keywords
           See networkx.draw_networkx() for a description of optional keywords,
           with the exception of the pos parameter which is not used by this
           function.
    
    """
def draw_spring(G, **kwargs):
    """
    Draw the graph G with a spring layout.

        Parameters
        ----------
        G : graph
           A networkx graph

        kwargs : optional keywords
           See networkx.draw_networkx() for a description of optional keywords,
           with the exception of the pos parameter which is not used by this
           function.
    
    """
def draw_shell(G, **kwargs):
    """
    Draw networkx graph with shell layout.

        Parameters
        ----------
        G : graph
           A networkx graph

        kwargs : optional keywords
           See networkx.draw_networkx() for a description of optional keywords,
           with the exception of the pos parameter which is not used by this
           function.
    
    """
def draw_planar(G, **kwargs):
    """
    Draw a planar networkx graph with planar layout.

        Parameters
        ----------
        G : graph
           A planar networkx graph

        kwargs : optional keywords
           See networkx.draw_networkx() for a description of optional keywords,
           with the exception of the pos parameter which is not used by this
           function.
    
    """
def apply_alpha(colors, alpha, elem_list, cmap=None, vmin=None, vmax=None):
    """
    Apply an alpha (or list of alphas) to the colors provided.

        Parameters
        ----------

        colors : color string, or array of floats
           Color of element. Can be a single color format string (default='r'),
           or a  sequence of colors with the same length as nodelist.
           If numeric values are specified they will be mapped to
           colors using the cmap and vmin,vmax parameters.  See
           matplotlib.scatter for more details.

        alpha : float or array of floats
           Alpha values for elements. This can be a single alpha value, in
           which case it will be applied to all the elements of color. Otherwise,
           if it is an array, the elements of alpha will be applied to the colors
           in order (cycling through alpha multiple times if necessary).

        elem_list : array of networkx objects
           The list of elements which are being colored. These could be nodes,
           edges or labels.

        cmap : matplotlib colormap
           Color map for use if colors is a list of floats corresponding to points
           on a color mapping.

        vmin, vmax : float
           Minimum and maximum values for normalizing colors if a color mapping is
           used.

        Returns
        -------

        rgba_colors : numpy ndarray
            Array containing RGBA format values for each of the node colours.

    
    """
