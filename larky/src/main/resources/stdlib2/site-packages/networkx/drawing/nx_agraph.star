def from_agraph(A, create_using=None):
    """
    Returns a NetworkX Graph or DiGraph from a PyGraphviz graph.

        Parameters
        ----------
        A : PyGraphviz AGraph
          A graph created with PyGraphviz

        create_using : NetworkX graph constructor, optional (default=None)
           Graph type to create. If graph instance, then cleared before populated.
           If `None`, then the appropriate Graph type is inferred from `A`.

        Examples
        --------
        >>> K5 = nx.complete_graph(5)
        >>> A = nx.nx_agraph.to_agraph(K5)
        >>> G = nx.nx_agraph.from_agraph(A)

        Notes
        -----
        The Graph G will have a dictionary G.graph_attr containing
        the default graphviz attributes for graphs, nodes and edges.

        Default node attributes will be in the dictionary G.node_attr
        which is keyed by node.

        Edge attributes will be returned as edge data in G.  With
        edge_attr=False the edge data will be the Graphviz edge weight
        attribute or the value 1 if no edge weight attribute is found.

    
    """
def to_agraph(N):
    """
    Returns a pygraphviz graph from a NetworkX graph N.

        Parameters
        ----------
        N : NetworkX graph
          A graph created with NetworkX

        Examples
        --------
        >>> K5 = nx.complete_graph(5)
        >>> A = nx.nx_agraph.to_agraph(K5)

        Notes
        -----
        If N has an dict N.graph_attr an attempt will be made first
        to copy properties attached to the graph (see from_agraph)
        and then updated with the calling arguments if any.

    
    """
def write_dot(G, path):
    """
    Write NetworkX graph G to Graphviz dot format on path.

        Parameters
        ----------
        G : graph
           A networkx graph
        path : filename
           Filename or file handle to write
    
    """
def read_dot(path):
    """
    Returns a NetworkX graph from a dot file on path.

        Parameters
        ----------
        path : file or string
           File name or file handle to read.
    
    """
def graphviz_layout(G, prog="neato", root=None, args=""):
    """
    Create node positions for G using Graphviz.

        Parameters
        ----------
        G : NetworkX graph
          A graph created with NetworkX
        prog : string
          Name of Graphviz layout program
        root : string, optional
          Root node for twopi layout
        args : string, optional
          Extra arguments to Graphviz layout program

        Returns
        -------
          Dictionary of x, y, positions keyed by node.

        Examples
        --------
        >>> G = nx.petersen_graph()
        >>> pos = nx.nx_agraph.graphviz_layout(G)
        >>> pos = nx.nx_agraph.graphviz_layout(G, prog="dot")

        Notes
        -----
        This is a wrapper for pygraphviz_layout.
    
    """
def pygraphviz_layout(G, prog="neato", root=None, args=""):
    """
    Create node positions for G using Graphviz.

        Parameters
        ----------
        G : NetworkX graph
          A graph created with NetworkX
        prog : string
          Name of Graphviz layout program
        root : string, optional
          Root node for twopi layout
        args : string, optional
          Extra arguments to Graphviz layout program

        Returns
        -------
        node_pos : dict
          Dictionary of x, y, positions keyed by node.

        Examples
        --------
        >>> G = nx.petersen_graph()
        >>> pos = nx.nx_agraph.graphviz_layout(G)
        >>> pos = nx.nx_agraph.graphviz_layout(G, prog="dot")

        Notes
        -----
        If you use complex node objects, they may have the same string
        representation and GraphViz could treat them as the same node.
        The layout may assign both nodes a single location. See Issue #1568
        If this occurs in your case, consider relabeling the nodes just
        for the layout computation using something similar to::

            >>> H = nx.convert_node_labels_to_integers(G, label_attribute="node_label")
            >>> H_layout = nx.nx_agraph.pygraphviz_layout(G, prog="dot")
            >>> G_layout = {H.nodes[n]["node_label"]: p for n, p in H_layout.items()}

    
    """
2021-03-02 20:47:08,010 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:47:08,010 : INFO : tokenize_signature : --> do i ever get here?
def view_pygraphviz(
    G, edgelabel=None, prog="dot", args="", suffix="", path=None, show=True
):
    """
    Views the graph G using the specified layout algorithm.

        Parameters
        ----------
        G : NetworkX graph
            The machine to draw.
        edgelabel : str, callable, None
            If a string, then it specifes the edge attribute to be displayed
            on the edge labels. If a callable, then it is called for each
            edge and it should return the string to be displayed on the edges.
            The function signature of `edgelabel` should be edgelabel(data),
            where `data` is the edge attribute dictionary.
        prog : string
            Name of Graphviz layout program.
        args : str
            Additional arguments to pass to the Graphviz layout program.
        suffix : str
            If `filename` is None, we save to a temporary file.  The value of
            `suffix` will appear at the tail end of the temporary filename.
        path : str, None
            The filename used to save the image.  If None, save to a temporary
            file.  File formats are the same as those from pygraphviz.agraph.draw.
        show : bool, default = True
            Whether to display the graph with `networkx.utils.default_opener`,
            default is `True`. If `False`, the rendered graph is still available
            at `path`.

        Returns
        -------
        path : str
            The filename of the generated image.
        A : PyGraphviz graph
            The PyGraphviz graph instance used to generate the image.

        Notes
        -----
        If this function is called in succession too quickly, sometimes the
        image is not displayed. So you might consider time.sleep(.5) between
        calls if you experience problems.

    
    """
    def update_attrs(which, attrs):
        """
         Update graph attributes. Return list of those which were added.

        """
    def clean_attrs(which, added):
        """
         Remove added attributes

        """
            def func(data):
                """

                """
def display_pygraphviz(graph, path, format=None, prog=None, args=""):
    """
    Internal function to display a graph in OS dependent manner.

        Parameters
        ----------
        graph : PyGraphviz graph
            A PyGraphviz AGraph instance.
        path :  file object
            An already opened file object that will be closed.
        format : str, None
            An attempt is made to guess the output format based on the extension
            of the filename. If that fails, the value of `format` is used.
        prog : string
            Name of Graphviz layout program.
        args : str
            Additional arguments to pass to the Graphviz layout program.

        Notes
        -----
        If this function is called in succession too quickly, sometimes the
        image is not displayed. So you might consider time.sleep(.5) between
        calls if you experience problems.

    
    """
