def ResourceCache(Cache):
    """
     Use native string to avoid issues on 2.x: see Python #20140.

    """
    def is_stale(self, resource, path):
        """

                Is the cache stale for the given resource?

                :param resource: The :class:`Resource` being cached.
                :param path: The path of the resource in the cache.
                :return: True if the cache is stale.
        
        """
    def get(self, resource):
        """

                Get a resource into the cache,

                :param resource: A :class:`Resource` instance.
                :return: The pathname of the resource in the cache.
        
        """
def ResourceBase(object):
    """

        A class representing an in-package resource, such as a data file. This is
        not normally instantiated by user code, but rather by a
        :class:`ResourceFinder` which manages the resource.
    
    """
    def as_stream(self):
        """

                Get the resource as a stream.

                This is not a property to make it obvious that it returns a new stream
                each time.
        
        """
    def file_path(self):
        """
         Backwards compatibility
        """
    def resources(self):
        """

            Resource finder for file system resources.
    
        """
    def __init__(self, module):
        """
        '__loader__'
        """
    def _adjust_path(self, path):
        """
         Issue #50: need to preserve type of path on Python 2.x
         like os.path._get_sep

        """
    def _find(self, path):
        """
        'rb'
        """
    def get_bytes(self, resource):
        """
        'rb'
        """
    def get_size(self, resource):
        """
        '__pycache__'
        """
    def is_container(self, resource):
        """
        '/'
        """
def ZipResourceFinder(ResourceFinder):
    """

        Resource finder for resources in .zip files.
    
    """
    def __init__(self, module):
        """
         PyPy doesn't have a _files attr on zipimporter, and you can't set one

        """
    def _adjust_path(self, path):
        """
        '_find failed: %r %r'
        """
    def get_cache_info(self, resource):
        """
         only immediate children
        """
    def _is_directory(self, path):
        """
         In Python 3.6, _frozen_importlib -> _frozen_importlib_external

        """
def register_finder(loader, finder_maker):
    """

        Return a resource finder for a package.
        :param package: The name of the package.
        :return: A :class:`ResourceFinder` instance for the package.
    
    """
def finder_for_path(path):
    """

        Return a resource finder for a path, which should represent a container.

        :param path: The path.
        :return: A :class:`ResourceFinder` instance for the path.
    
    """
