def enquote_executable(executable):
    """
    ' '
    """
def ScriptMaker(object):
    """

        A class to copy or create scripts from source scripts or callable
        specifications.
    
    """
2021-03-02 20:48:48,428 : INFO : tokenize_signature : --> do i ever get here?
    def __init__(self, source_dir, target_dir, add_launchers=True,
                 dry_run=False, fileop=None):
        """
         It only makes sense to set mode bits on POSIX.

        """
    def _get_alternate_executable(self, executable, options):
        """
        'gui'
        """
        def _is_shell(self, executable):
            """

                        Determine if the specified executable is a script
                        (contains a #! line)
            
            """
        def _fix_jython_executable(self, executable):
            """
             Workaround for Jython is not needed on Linux systems.

            """
    def _build_shebang(self, executable, post_interp):
        """

                Build a shebang line. In the simple case (on Windows, or a shebang line
                which is not too long or contains spaces) use a simple formulation for
                the shebang. Otherwise, use /bin/sh as the executable, with a contrived
                shebang which allows the script to run either under Python or sh, using
                suitable quoting. Thanks to Harald Nordgren for his input.

                See also: http://www.in-ulm.de/~mascheck/various/shebang/#length
                          https://hg.mozilla.org/mozilla-central/file/tip/mach
        
        """
    def _get_shebang(self, encoding, post_interp=b'', options=None):
        """
         assume this will be taken care of
        """
    def _get_script_text(self, entry):
        """
        '.'
        """
    def get_manifest(self, exename):
        """
        'utf-8'
        """
    def _make_script(self, entry, filenames, options=None):
        """
        b''
        """
    def _copy_script(self, script, filenames):
        """
        'not copying %s (up-to-date)'
        """
    def dry_run(self):
        """
        'nt'
        """
        def _get_launcher(self, kind):
            """
            'P'
            """
    def make(self, specification, options=None):
        """

                Make a script.

                :param specification: The specification, which is either a valid export
                                      entry specification (to make a script from a
                                      callable) or a filename (to make a script by
                                      copying from a source location).
                :param options: A dictionary of options controlling script generation.
                :return: A list of all absolute pathnames written to.
        
        """
    def make_multiple(self, specifications, options=None):
        """

                Take a list of specifications and make scripts from them,
                :param specifications: A list of specifications.
                :return: A list of all absolute pathnames written to,
        
        """
