def UnsupportedVersionError(ValueError):
    """
    This is an unsupported version.
    """
def Version(object):
    """
    'please implement in a subclass'
    """
    def _check_compatible(self, other):
        """
        'cannot compare %r and %r'
        """
    def __eq__(self, other):
        """
         See http://docs.python.org/reference/datamodel#object.__hash__

        """
    def __hash__(self):
        """
        %s('%s')
        """
    def __str__(self):
        """
        'Please implement in subclasses.'
        """
def Matcher(object):
    """
     value is either a callable or the name of a method

    """
    def parse_requirement(self, s):
        """
        'Please specify a version class'
        """
    def match(self, version):
        """

                Check if the provided version matches the constraints.

                :param version: The version to match against this instance.
                :type version: String or :class:`Version` instance.
        
        """
    def exact_version(self):
        """
        '=='
        """
    def _check_compatible(self, other):
        """
        'cannot compare %s and %s'
        """
    def __eq__(self, other):
        """
         See http://docs.python.org/reference/datamodel#object.__hash__

        """
    def __hash__(self):
        """
        %s(%r)
        """
    def __str__(self):
        """
        r'^v?(\d+!)?(\d+(\.\d+)*)((a|b|c|rc)(\d+))?'
        r'(\.(post)(\d+))?(\.(dev)(\d+))?'
        r'(\+([a-zA-Z\d]+(\.[a-zA-Z\d]+)?))?$'
        """
def _pep_440_key(s):
    """
    'Not a valid version: %s'
    """
def NormalizedVersion(Version):
    """
    A rational version.

        Good:
            1.2         # equivalent to "1.2.0"
            1.2.0
            1.2a1
            1.2.3a2
            1.2.3b1
            1.2.3c1
            1.2.3.4
            TODO: fill this out

        Bad:
            1           # minimum two numbers
            1.2a        # release level must have a release serial
            1.2.3b
    
    """
    def parse(self, s):
        """
         _normalized_key loses trailing zeroes in the release
         clause, since that's needed to ensure that X.Y == X.Y.0 == X.Y.0.0
         However, PEP 440 prefix matching needs it: for example,
         (~= 1.4.5.0) matches differently to (~= 1.4.5.0.0).

        """
    def is_prerelease(self):
        """
        '.'
        """
def NormalizedMatcher(Matcher):
    """
     value is either a callable or the name of a method

    """
    def _adjust_local(self, version, constraint, prefix):
        """
        '+'
        """
    def _match_lt(self, version, constraint, prefix):
        """
        '.'
        """
    def _match_gt(self, version, constraint, prefix):
        """
        '.'
        """
    def _match_le(self, version, constraint, prefix):
        """
                if not prefix:
                    return True

        """
def _suggest_semantic_version(s):
    """

        Try to suggest a semantic form for a version for which
        _suggest_normalized_version couldn't come up with anything.
    
    """
def _suggest_normalized_version(s):
    """
    Suggest a normalized version close to the given version string.

        If you have a version string that isn't rational (i.e. NormalizedVersion
        doesn't like it) then you might be able to get an equivalent (or close)
        rational version from this function.

        This does a number of simple normalizations to the given string, based
        on observation of versions currently in use on PyPI. Given a dump of
        those version during PyCon 2009, 4287 of them:
        - 2312 (53.93%) match NormalizedVersion without change
          with the automatic suggestion
        - 3474 (81.04%) match when using this suggestion method

        @param s {str} An irrational version string.
        @returns A rational version string, or None, if couldn't determine one.
    
    """
def _legacy_key(s):
    """
    '0'
    """
def LegacyVersion(Version):
    """
    '*'
    """
def LegacyMatcher(Matcher):
    """
    '~='
    """
    def _match_compatible(self, version, constraint, prefix):
        """
        'Cannot compute compatible match for version %s '
        ' and constraint %s'
        """
def is_semver(s):
    """
    '.'
    """
def SemanticVersion(Version):
    """
    '|'
    """
def SemanticMatcher(Matcher):
    """

            Used for processing some metadata fields
        
    """
    def suggest(self, s):
        """
        'normalized'
        """
def get_scheme(name):
    """
    'unknown scheme name: %r'
    """
