def parse(version):
    """

        Parse the given version string and return either a :class:`Version` object
        or a :class:`LegacyVersion` object depending on if the given version is
        a valid PEP 440 version or a legacy version.
    
    """
def InvalidVersion(ValueError):
    """

        An invalid version was found, users should refer to PEP 440.
    
    """
def _BaseVersion(object):
    """
    <LegacyVersion({0})>
    """
    def public(self):
        """
        r"(\d+ | [a-z]+ | \.| -)
        """
def _parse_version_parts(s):
    """
    .
    """
def _legacy_cmpkey(version):
    """
     We hardcode an epoch of -1 here. A PEP 440 version can only have a epoch
     greater than or equal to 0. This will effectively put the LegacyVersion,
     which uses the defacto standard originally implemented by setuptools,
     as before all PEP 440 versions.

    """
def Version(_BaseVersion):
    """
    r"^\s*
    """
    def __init__(self, version):
        """
         Validate the version and parse it into pieces

        """
    def __repr__(self):
        """
        <Version({0})>
        """
    def __str__(self):
        """
         Epoch

        """
    def public(self):
        """
        +
        """
    def base_version(self):
        """
         Epoch

        """
    def local(self):
        """
        +
        """
    def is_prerelease(self):
        """
         We consider there to be an implicit 0 in a pre-release if there is
         not a numeral associated with it.

        """
def _parse_local_version(local):
    """

        Takes a string like abc.1.twelve and turns it into ("abc", 1, "twelve").
    
    """
def _cmpkey(epoch, release, pre, post, dev, local):
    """
     When we compare a release version, we want to compare it with all of the
     trailing zeros removed. So we'll use a reverse the list, drop all the now
     leading zeros until we come to something non zero, then take the rest
     re-reverse it back into the correct order and make it a tuple and use
     that for our sorting key.

    """
