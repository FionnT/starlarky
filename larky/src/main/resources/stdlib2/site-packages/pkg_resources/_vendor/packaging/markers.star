def InvalidMarker(ValueError):
    """

        An invalid marker was found, users should refer to PEP 508.
    
    """
def UndefinedComparison(ValueError):
    """

        An invalid operation was attempted on a value that doesn't support it.
    
    """
def UndefinedEnvironmentName(ValueError):
    """

        A name was attempted to be used that does not exist inside of the
        environment.
    
    """
def Node(object):
    """
    <{0}({1!r})>
    """
    def serialize(self):
        """
        '"{0}"'
        """
def Op(Node):
    """
    implementation_version
    """
def _coerce_parse_result(results):
    """
     Sometimes we have a structure like [[...]] which is a single item list
     where the single item is itself it's own list. In that case we want skip
     the rest of this function so that we don't get extraneous () on the
     outside.

    """
def _eval_op(lhs, op, rhs):
    """

    """
def _get_env(environment, name):
    """
    {0!r} does not exist in evaluation environment.
    """
def _evaluate_markers(markers, environment):
    """
    and
    """
def format_full_version(info):
    """
    '{0.major}.{0.minor}.{0.micro}'
    """
def default_environment():
    """
    'implementation'
    """
def Marker(object):
    """
    Invalid marker: {0!r}, parse error at {1!r}
    """
    def __str__(self):
        """
        <Marker({0!r})>
        """
    def evaluate(self, environment=None):
        """
        Evaluate a marker.

                Return the boolean from evaluating the given marker against the
                environment. environment is an optional argument to override all or
                part of the determined environment.

                The environment is determined from the current Python process.
        
        """
