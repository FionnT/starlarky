def StaticModule:
    """

        Attempt to load the module by the name
    
    """
    def __init__(self, name):
        """
        {self.name} has no attribute {attr}
        """
def patch_path(path):
    """

        Add path to front of sys.path for the duration of the context.
    
    """
2021-03-02 20:52:25,838 : INFO : tokenize_signature : --> do i ever get here?
def read_configuration(
        filepath, find_others=False, ignore_option_errors=False):
    """
    Read given configuration file and returns options from it as a dict.

        :param str|unicode filepath: Path to configuration file
            to get options from.

        :param bool find_others: Whether to search for other configuration files
            which could be on in various places.

        :param bool ignore_option_errors: Whether to silently ignore
            options, values of which could not be resolved (e.g. due to exceptions
            in directives such as file:, attr:, etc.).
            If False exceptions are propagated as expected.

        :rtype: dict
    
    """
def _get_option(target_obj, key):
    """

        Given a target object and option key, get that option from
        the target object, either through a get_{key} method or
        from an attribute directly.
    
    """
def configuration_to_dict(handlers):
    """
    Returns configuration data gathered by given handlers as a dict.

        :param list[ConfigHandler] handlers: Handlers list,
            usually from parse_configuration()

        :rtype: dict
    
    """
2021-03-02 20:52:25,840 : INFO : tokenize_signature : --> do i ever get here?
def parse_configuration(
        distribution, command_options, ignore_option_errors=False):
    """
    Performs additional parsing of configuration options
        for a distribution.

        Returns a list of used option handlers.

        :param Distribution distribution:
        :param dict command_options:
        :param bool ignore_option_errors: Whether to silently ignore
            options, values of which could not be resolved (e.g. due to exceptions
            in directives such as file:, attr:, etc.).
            If False exceptions are propagated as expected.
        :rtype: list
    
    """
def ConfigHandler:
    """
    Handles metadata supplied in configuration files.
    """
    def __init__(self, target_obj, options, ignore_option_errors=False):
        """
        ''
        """
    def parsers(self):
        """
        Metadata item name to parser function mapping.
        """
    def __setitem__(self, option_name, value):
        """
         Translate alias into real name.

        """
    def _parse_list(cls, value, separator=','):
        """
        Represents value as a list.

                Value is split either by separator (defaults to comma) or by lines.

                :param value:
                :param separator: List items separator character.
                :rtype: list
        
        """
    def _parse_dict(cls, value):
        """
        Represents value as a dict.

                :param value:
                :rtype: dict
        
        """
    def _parse_bool(cls, value):
        """
        Represents value as boolean.

                :param value:
                :rtype: bool
        
        """
    def _exclude_files_parser(cls, key):
        """
        Returns a parser function to make sure field inputs
                are not files.

                Parses a value after getting the key so error messages are
                more informative.

                :param key:
                :rtype: callable
        
        """
        def parser(value):
            """
            'file:'
            """
    def _parse_file(cls, value):
        """
        Represents value as a string, allowing including text
                from nearest files using `file:` directive.

                Directive is sandboxed and won't reach anything outside
                directory with setup.py.

                Examples:
                    file: README.rst, CHANGELOG.md, src/file.txt

                :param str value:
                :rtype: str
        
        """
    def _assert_local(filepath):
        """
        '`file:` directive can not access %s'
        """
    def _read_file(filepath):
        """
        'utf-8'
        """
    def _parse_attr(cls, value, package_dir=None):
        """
        Represents value as a module attribute.

                Examples:
                    attr: package.attr
                    attr: package.module.attr

                :param str value:
                :rtype: str
        
        """
    def _get_parser_compound(cls, *parse_methods):
        """
        Returns parser function to represents value as a list.

                Parses a value applying given methods one after another.

                :param parse_methods:
                :rtype: callable
        
        """
        def parse(value):
            """
            Parses section options into a dictionary.

                    Optionally applies a given parser to values.

                    :param dict section_options:
                    :param callable values_parser:
                    :rtype: dict
        
            """
    def parse_section(self, section_options):
        """
        Parses configuration file section.

                :param dict section_options:
        
        """
    def parse(self):
        """
        Parses configuration file items from one
                or more related sections.

        
        """
    def _deprecated_config_handler(self, func, msg, warning_class):
        """
         this function will wrap around parameters that are deprecated

                :param msg: deprecation message
                :param warning_class: class of warning exception to be raised
                :param func: function to be wrapped around
        
        """
        def config_handler(*args, **kwargs):
            """
            'metadata'
            """
2021-03-02 20:52:25,846 : INFO : tokenize_signature : --> do i ever get here?
    def __init__(self, target_obj, options, ignore_option_errors=False,
                 package_dir=None):
        """
        Metadata item name to parser function mapping.
        """
    def _parse_version(self, value):
        """
        Parses `version` option value.

                :param value:
                :rtype: str

        
        """
def ConfigOptionsHandler(ConfigHandler):
    """
    'options'
    """
    def parsers(self):
        """
        Metadata item name to parser function mapping.
        """
    def _parse_packages(self, value):
        """
        Parses `packages` option value.

                :param value:
                :rtype: list
        
        """
    def parse_section_packages__find(self, section_options):
        """
        Parses `packages.find` configuration file section.

                To be used in conjunction with _parse_packages().

                :param dict section_options:
        
        """
    def parse_section_entry_points(self, section_options):
        """
        Parses `entry_points` configuration file section.

                :param dict section_options:
        
        """
    def _parse_package_data(self, section_options):
        """
        '*'
        """
    def parse_section_package_data(self, section_options):
        """
        Parses `package_data` configuration file section.

                :param dict section_options:
        
        """
    def parse_section_exclude_package_data(self, section_options):
        """
        Parses `exclude_package_data` configuration file section.

                :param dict section_options:
        
        """
    def parse_section_extras_require(self, section_options):
        """
        Parses `extras_require` configuration file section.

                :param dict section_options:
        
        """
    def parse_section_data_files(self, section_options):
        """
        Parses `data_files` configuration file section.

                :param dict section_options:
        
        """
