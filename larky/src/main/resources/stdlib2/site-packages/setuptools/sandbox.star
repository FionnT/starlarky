def _execfile(filename, globals, locals=None):
    """

        Python 3 implementation of execfile.
    
    """
def save_argv(repl=None):
    """

        Monkey-patch tempfile.tempdir with replacement, ensuring it exists
    
    """
def pushd(target):
    """

        An exception representing another Exception that could not be pickled.
    
    """
    def dump(type, exc):
        """

                Always return a dumped (pickled) type and exc. If exc can't be pickled,
                wrap it in UnpickleableException first.
        
        """
def ExceptionSaver:
    """

        A Context Manager that will save an exception, serialized, and restore it
        later.
    
    """
    def __enter__(self):
        """
         dump the exception

        """
    def resume(self):
        """
        restore and re-raise any exception
        """
def save_modules():
    """

        Context in which imported modules are saved.

        Translates exceptions internal to the context into the equivalent exception
        outside the context.
    
    """
def _clear_modules(module_names):
    """
    'temp'
    """
def _needs_hiding(mod_name):
    """

        >>> _needs_hiding('setuptools')
        True
        >>> _needs_hiding('pkg_resources')
        True
        >>> _needs_hiding('setuptools_plugin')
        False
        >>> _needs_hiding('setuptools.__init__')
        True
        >>> _needs_hiding('distutils')
        True
        >>> _needs_hiding('os')
        False
        >>> _needs_hiding('Cython')
        True
    
    """
def hide_setuptools():
    """

        Remove references to setuptools' modules from sys.modules to allow the
        invocation to import the most appropriate setuptools. This technique is
        necessary to avoid issues such as #315 where setuptools upgrading itself
        would fail to find a function declared in the metadata.
    
    """
def run_setup(setup_script, args):
    """
    Run a distutils setup script, sandboxed in its directory
    """
def AbstractSandbox:
    """
    Wrap 'os' module and 'open()' builtin for virtualizing setup scripts
    """
    def __init__(self):
        """
        '_'
        """
    def _copy(self, source):
        """
        Run 'func' under os sandboxing
        """
    def _mk_dual_path_wrapper(name):
        """
        rename
        """
    def _mk_single_path_wrapper(name, original=None):
        """
        'file'
        """
    def _mk_single_with_return(name):
        """
        'readlink'
        """
    def _mk_query(name):
        """
        'getcwd'
        """
    def _validate_path(self, path):
        """
        Called to remap or validate any path, whether input or output
        """
    def _remap_input(self, operation, path, *args, **kw):
        """
        Called for path inputs
        """
    def _remap_output(self, operation, path):
        """
        Called for path outputs
        """
    def _remap_pair(self, operation, src, dst, *args, **kw):
        """
        Called for path pairs like rename, link, and symlink operations
        """
def DirectorySandbox(AbstractSandbox):
    """
    Restrict operations to a single subdirectory - pseudo-chroot
    """
    def __init__(self, sandbox, exceptions=_EXCEPTIONS):
        """
        ''
        """
    def _violation(self, operation, *args, **kw):
        """
        'r'
        """
    def _open(self, path, mode='r', *args, **kw):
        """
        'r'
        """
    def tmpnam(self):
        """
        tmpnam
        """
    def _ok(self, path):
        """
        Called for path inputs
        """
    def _remap_pair(self, operation, src, dst, *args, **kw):
        """
        Called for path pairs like rename, link, and symlink operations
        """
    def open(self, file, flags, mode=0o777, *args, **kw):
        """
        Called for low-level os.open()
        """
def SandboxViolation(DistutilsError):
    """
    A setup script attempted to modify the filesystem outside the sandbox
    """
    def __str__(self):
