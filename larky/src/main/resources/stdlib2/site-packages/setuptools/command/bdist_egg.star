    def _get_purelib():
        """
        purelib
        """
    def _get_purelib():
        """
        '.'
        """
def sorted_walk(dir):
    """
    Do os.walk in a reproducible way,
        independent of indeterministic filesystem readdir order
    
    """
def write_stub(resource, pyfile):
    """

            def __bootstrap__():
                global __bootstrap__, __loader__, __file__
                import sys, pkg_resources, imp
                __file__ = pkg_resources.resource_filename(__name__, %r)
                __loader__ = None; del __bootstrap__, __loader__
                imp.load_dynamic(__name__,__file__)
            __bootstrap__()
        
    """
def bdist_egg(Command):
    """
    create an \"egg\" distribution
    """
    def initialize_options(self):
        """
        egg_info
        """
    def do_install_data(self):
        """
         Hack for packages that install data to install's --install-lib

        """
    def get_outputs(self):
        """
        Invoke reinitialized command `cmdname` with keyword args
        """
    def run(self):
        """
         Generate metadata first

        """
    def zap_pyfiles(self):
        """
        Removing .py files from temporary directory
        """
    def zip_safe(self):
        """
        'zip_safe'
        """
    def gen_header(self):
        """
        ''
        """
    def copy_metadata_to(self, target_dir):
        """
        Copy metadata (egg info) to the target_dir
        """
    def get_ext_outputs(self):
        """
        Get a list of relative paths to C extensions in the output distro
        """
def walk_egg(egg_dir):
    """
    Walk an unpacked egg's contents, skipping the metadata directory
    """
def analyze_egg(egg_dir, stubs):
    """
     check for existing flag in EGG-INFO

    """
def write_safety_flag(egg_dir, safe):
    """
     Write or remove zip safety flag file(s)

    """
def scan_module(egg_dir, base, name, stubs):
    """
    Check whether module possibly uses unsafe-for-zipfile stuff
    """
def iter_symbols(code):
    """
    Yield names and strings used by `code` and its nested code objects
    """
def can_scan():
    """
    'java'
    """
2021-03-02 20:52:31,479 : INFO : tokenize_signature : --> do i ever get here?
def make_zipfile(zip_filename, base_dir, verbose=0, dry_run=0, compress=True,
                 mode='w'):
    """
    Create a zip file from all the files under 'base_dir'.  The output
        zip file will be named 'base_dir' + ".zip".  Uses either the "zipfile"
        Python module (if available) or the InfoZIP "zip" utility (if installed
        and found on the default search path).  If neither tool is available,
        raises DistutilsExecError.  Returns the name of the output zip file.
    
    """
    def visit(z, dirname, names):
        """
        adding '%s'
        """
