def translate_pattern(glob):
    """

        Translate a file path glob like '*.txt' in to a regular expression.
        This differs from fnmatch.translate which allows wildcards to match
        directory separators. It also knows about '**/' which matches any number of
        directories.
    
    """
def InfoCommon:
    """
     egg_info may be called more than once for a distribution,
     in which case the version string already contains all tags.

    """
    def tags(self):
        """
        ''
        """
def egg_info(InfoCommon, Command):
    """
    create a distribution's .egg-info directory
    """
    def initialize_options(self):
        """

         allow the 'tag_svn_revision' to be detected and
         set, supporting sdists built on older Setuptools.

        """
    def tag_svn_revision(self):
        """



        """
    def save_version_info(self, filename):
        """

                Materialize the value of date into the
                build tag. Install build keys in a deterministic order
                to avoid arbitrary reordering on subsequent builds.
        
        """
    def finalize_options(self):
        """
         Note: we need to capture the current value returned
         by `self.tagged_version()`, so we can later update
         `self.distribution.metadata.version` without
         repercussions.

        """
    def write_or_delete_file(self, what, filename, data, force=False):
        """
        Write `data` to `filename` or delete if empty

                If `data` is non-empty, this routine is the same as ``write_file()``.
                If `data` is empty but not ``None``, this is the same as calling
                ``delete_file(filename)`.  If `data` is ``None``, then this is a no-op
                unless `filename` exists, in which case a warning is issued about the
                orphaned file (if `force` is false), or deleted (if `force` is true).
        
        """
    def write_file(self, what, filename, data):
        """
        Write `data` to `filename` (if not a dry run) after announcing it

                `what` is used in a log message to identify what is being written
                to the file.
        
        """
    def delete_file(self, filename):
        """
        Delete `filename` (if not a dry run) after announcing it
        """
    def run(self):
        """
        'egg_info.writers'
        """
    def find_sources(self):
        """
        Generate SOURCES.txt manifest file
        """
    def check_broken_egg_info(self):
        """
        '.egg-info'
        """
def FileList(_FileList):
    """
     Implementations of the various MANIFEST.in commands


    """
    def process_template_line(self, line):
        """
         Parse the line: split it up, make sure the right number of words
         is there, and return the relevant words.  'action' is always
         defined: it's the first word of the line.  Which of the other
         three are defined depends on the action; it'll be either
         patterns, (dir and patterns), or (dir_pattern).

        """
    def _remove_files(self, predicate):
        """

                Remove all files from the file list that match the predicate.
                Return True if any matching files were removed
        
        """
    def include(self, pattern):
        """
        Include files that match 'pattern'.
        """
    def exclude(self, pattern):
        """
        Exclude files that match 'pattern'.
        """
    def recursive_include(self, dir, pattern):
        """

                Include all files anywhere in 'dir/' that match the pattern.
        
        """
    def recursive_exclude(self, dir, pattern):
        """

                Exclude any file anywhere in 'dir/' that match the pattern.
        
        """
    def graft(self, dir):
        """
        Include all files from 'dir/'.
        """
    def prune(self, dir):
        """
        Filter out files from 'dir/'.
        """
    def global_include(self, pattern):
        """

                Include all files anywhere in the current directory that match the
                pattern. This is very inefficient on large file trees.
        
        """
    def global_exclude(self, pattern):
        """

                Exclude all files anywhere that match the pattern.
        
        """
    def append(self, item):
        """
        '\r'
        """
    def extend(self, paths):
        """

                Replace self.files with only safe paths

                Because some owners of FileList manipulate the underlying
                ``files`` attribute directly, this method must be called to
                repair those paths.
        
        """
    def _safe_path(self, path):
        """
        '%s' not %s encodable -- skipping
        """
def manifest_maker(sdist):
    """
    MANIFEST.in
    """
    def initialize_options(self):
        """
         it must exist so it'll get in the list
        """
    def _manifest_normalize(self, path):
        """
        '/'
        """
    def write_manifest(self):
        """

                Write the file list in 'self.filelist' to the manifest file
                named by 'self.manifest'.
        
        """
    def warn(self, msg):
        """

                suppress missing-file warnings from sdist
        
        """
    def add_defaults(self):
        """
        setup.py
        """
    def prune_file_list(self):
        """
        'build'
        """
def write_file(filename, contents):
    """
    Create a file with the specified name and write 'contents' (a
        sequence of strings without line terminators) to it.
    
    """
def write_pkg_info(cmd, basename, filename):
    """
    writing %s
    """
def warn_depends_obsolete(cmd, basename, filename):
    """
    WARNING: 'depends.txt' is not used by setuptools 0.6!\n
    Use the install_requires/extras_require setup() args instead.

    """
def _write_requirements(stream, reqs):
    """
    '\n'
    """
def write_requirements(cmd, basename, filename):
    """
    '\n[{extra}]\n'
    """
def write_setup_requirements(cmd, basename, filename):
    """
    setup-requirements
    """
def write_toplevel_names(cmd, basename, filename):
    """
    '.'
    """
def overwrite_arg(cmd, basename, filename):
    """
    '\n'
    """
def write_entries(cmd, basename, filename):
    """
    '\n'
    """
def get_pkg_info_revision():
    """

        Get a -r### off of PKG-INFO Version in case this is an sdist of
        a subversion revision.
    
    """
def EggInfoDeprecationWarning(SetuptoolsDeprecationWarning):
    """
    Deprecated behavior warning for EggInfo, bypassing suppression.
    """
