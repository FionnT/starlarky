def Tag(object):
    """
    _interpreter
    """
    def __init__(self, interpreter, abi, platform):
        """
        {}-{}-{}
        """
    def __repr__(self):
        """
        <{self} @ {self_id}>
        """
def parse_tag(tag):
    """
    -
    """
def _normalize_string(string):
    """
    .
    """
def _cpython_interpreter(py_version):
    """
     TODO: Is using py_version_nodot for interpreter version critical?

    """
def _cpython_abis(py_version):
    """
    {}{}
    """
def _cpython_tags(py_version, interpreter, abis, platforms):
    """
    abi3
    """
def _pypy_interpreter():
    """
    pp{py_major}{pypy_major}{pypy_minor}
    """
def _generic_abi():
    """
    SOABI
    """
def _pypy_tags(py_version, interpreter, abi, platforms):
    """
    none
    """
def _generic_tags(interpreter, py_version, abi, platforms):
    """
    none
    """
def _py_interpreter_range(py_version):
    """

        Yield Python versions in descending order.

        After the latest version, the major-only version will be yielded, and then
        all following versions up to 'end'.
    
    """
def _independent_tags(interpreter, py_version, platforms):
    """

        Return the sequence of tags that are consistent across implementations.

        The tags consist of:
        - py*-none-<platform>
        - <interpreter>-none-any
        - py*-none-any
    
    """
def _mac_arch(arch, is_32bit=_32_BIT_INTERPRETER):
    """
    ppc
    """
def _mac_binary_formats(version, cpu_arch):
    """
    x86_64
    """
def _mac_platforms(version=None, arch=None):
    """
    .
    """
def _is_manylinux_compatible(name, glibc_version):
    """
     Check for presence of _manylinux module.

    """
def _glibc_version_string():
    """
     Returns glibc version string, or None if not using glibc.

    """
def _check_glibc_version(version_str, required_major, minimum_minor):
    """
     Parse string and check against requested version.

     We use a regexp instead of str.split because we want to discard any
     random junk that might come after the minor version -- this might happen
     in patched/forked versions of glibc (e.g. Linaro's version of glibc
     uses version strings like "2.20-2014.11"). See gh-3588.

    """
def _have_compatible_glibc(required_major, minimum_minor):
    """
    linux_x86_64
    """
def _generic_platforms():
    """
    py_version_nodot
    """
def sys_tags():
    """

        Returns the sequence of tag triples for the running interpreter.

        The order of the sequence corresponds to priority order for the
        interpreter, from most to least important.
    
    """
