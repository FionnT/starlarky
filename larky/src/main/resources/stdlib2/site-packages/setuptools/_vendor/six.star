        def X(object):
    """
     32-bit

    """
def _add_doc(func, doc):
    """
    Add documentation to a function.
    """
def _import_module(name):
    """
    Import module, returning the module after the last dot.
    """
def _LazyDescr(object):
    """
     Invokes __set__.
    """
def MovedModule(_LazyDescr):
    """
    __doc__
    """
def MovedAttribute(_LazyDescr):
    """

        A meta path importer to import six.moves and its submodules.

        This class implements a PEP302 finder and loader. It should be compatible
        with Python 2.5 and all existing versions of Python3
    
    """
    def __init__(self, six_module_name):
        """
        .
        """
    def _get_module(self, fullname):
        """
        .
        """
    def find_module(self, fullname, path=None):
        """
        This loader does not know module 
        """
    def load_module(self, fullname):
        """
         in case of a reload

        """
    def is_package(self, fullname):
        """

                Return true, if the named module is a package.

                We need this method to get correct spec objects with
                Python 3.4 (see PEP451)
        
        """
    def get_code(self, fullname):
        """
        Return None

                Required, if is_package is implemented
        """
def _MovedItems(_LazyModule):
    """
    Lazy loading of moved objects
    """
def Module_six_moves_urllib_parse(_LazyModule):
    """
    Lazy loading of moved objects in six.moves.urllib_parse
    """
def Module_six_moves_urllib_error(_LazyModule):
    """
    Lazy loading of moved objects in six.moves.urllib_error
    """
def Module_six_moves_urllib_request(_LazyModule):
    """
    Lazy loading of moved objects in six.moves.urllib_request
    """
def Module_six_moves_urllib_response(_LazyModule):
    """
    Lazy loading of moved objects in six.moves.urllib_response
    """
def Module_six_moves_urllib_robotparser(_LazyModule):
    """
    Lazy loading of moved objects in six.moves.urllib_robotparser
    """
def Module_six_moves_urllib(types.ModuleType):
    """
    Create a six.moves.urllib namespace that resembles the Python 3 namespace
    """
    def __dir__(self):
        """
        'parse'
        """
def add_move(move):
    """
    Add an item to six.moves.
    """
def remove_move(name):
    """
    Remove item from six.moves.
    """
    def advance_iterator(it):
        """
        __call__
        """
    def get_unbound_function(unbound):
        """
        Get the function out of a possibly unbound function
        """
    def iterkeys(d, **kw):
        """
        keys
        """
    def iterkeys(d, **kw):
        """
        viewkeys
        """
    def b(s):
        """
        latin-1
        """
    def u(s):
        """
        >B
        """
    def b(s):
        """
         Workaround for standalone backslash


        """
    def u(s):
        """
        r'\\'
        """
    def byte2int(bs):
        """
        assertItemsEqual
        """
def assertCountEqual(self, *args, **kwargs):
    """
    exec
    """
    def reraise(tp, value, tb=None):
        """
        Execute code in a namespace.
        """
    def raise_from(value, from_value):
        """
        print
        """
    def print_(*args, **kwargs):
        """
        The new-style print function for Python 2.4 and 2.5.
        """
        def write(data):
            """
             If the file has an encoding, encode unicode with it.

            """
    def print_(*args, **kwargs):
        """
        file
        """
2021-03-02 20:52:28,178 : INFO : tokenize_signature : --> do i ever get here?
    def wraps(wrapped, assigned=functools.WRAPPER_ASSIGNMENTS,
              updated=functools.WRAPPER_UPDATES):
        """
        Create a base class with a metaclass.
        """
    def metadef(meta):
    """
    'temporary_class'
    """
def add_metaclass(metaclass):
    """
    Class decorator for creating a class with a metaclass.
    """
    def wrapper(cls):
        """
        '__slots__'
        """
def python_2_unicode_compatible(klass):
    """

        A decorator that defines __unicode__ and __str__ methods under Python 2.
        Under Python 3 it does nothing.

        To support Python 2 and 3 with a single code base, define a __str__ method
        returning text and apply this decorator to the class.
    
    """
