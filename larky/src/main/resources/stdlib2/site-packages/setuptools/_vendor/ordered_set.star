def is_iterable(obj):
    """

        Are we being asked to look up a list of things, instead of a single thing?
        We check for the `__iter__` attribute so that this can cover types that
        don't have to be known by this module, such as NumPy arrays.

        Strings, however, should be considered as atomic values to look up, not
        iterables. The same goes for tuples, since they are immutable and therefore
        valid entries.

        We don't need to check for the Python 2 `unicode` type, because it doesn't
        have an `__iter__` attribute anyway.
    
    """
def OrderedSet(MutableSet, Sequence):
    """

        An OrderedSet is a custom MutableSet that remembers its order, so that
        every entry has an index that can be looked up.

        Example:
            >>> OrderedSet([1, 1, 2, 3, 2])
            OrderedSet([1, 2, 3])
    
    """
    def __init__(self, iterable=None):
        """

                Returns the number of unique elements in the ordered set

                Example:
                    >>> len(OrderedSet([]))
                    0
                    >>> len(OrderedSet([1, 2]))
                    2
        
        """
    def __getitem__(self, index):
        """

                Get the item at a given index.

                If `index` is a slice, you will get back that slice of items, as a
                new OrderedSet.

                If `index` is a list or a similar iterable, you'll get a list of
                items corresponding to those indices. This is similar to NumPy's
                "fancy indexing". The result is not an OrderedSet because you may ask
                for duplicate indices, and the number of elements returned should be
                the number of elements asked for.

                Example:
                    >>> oset = OrderedSet([1, 2, 3])
                    >>> oset[1]
                    2
        
        """
    def copy(self):
        """

                Return a shallow copy of this object.

                Example:
                    >>> this = OrderedSet([1, 2, 3])
                    >>> other = this.copy()
                    >>> this == other
                    True
                    >>> this is other
                    False
        
        """
    def __getstate__(self):
        """
         The state can't be an empty list.
         We need to return a truthy value, or else __setstate__ won't be run.

         This could have been done more gracefully by always putting the state
         in a tuple, but this way is backwards- and forwards- compatible with
         previous versions of OrderedSet.

        """
    def __setstate__(self, state):
        """

                Test if the item is in this ordered set

                Example:
                    >>> 1 in OrderedSet([1, 3, 2])
                    True
                    >>> 5 in OrderedSet([1, 3, 2])
                    False
        
        """
    def add(self, key):
        """

                Add `key` as an item to this OrderedSet, then return its index.

                If `key` is already in the OrderedSet, return the index it already
                had.

                Example:
                    >>> oset = OrderedSet()
                    >>> oset.append(3)
                    0
                    >>> print(oset)
                    OrderedSet([3])
        
        """
    def update(self, sequence):
        """

                Update the set with the given iterable sequence, then return the index
                of the last element inserted.

                Example:
                    >>> oset = OrderedSet([1, 2, 3])
                    >>> oset.update([3, 1, 5, 1, 4])
                    4
                    >>> print(oset)
                    OrderedSet([1, 2, 3, 5, 4])
        
        """
    def index(self, key):
        """

                Get the index of a given entry, raising an IndexError if it's not
                present.

                `key` can be an iterable of entries that is not a string, in which case
                this returns a list of indices.

                Example:
                    >>> oset = OrderedSet([1, 2, 3])
                    >>> oset.index(2)
                    1
        
        """
    def pop(self):
        """

                Remove and return the last element from the set.

                Raises KeyError if the set is empty.

                Example:
                    >>> oset = OrderedSet([1, 2, 3])
                    >>> oset.pop()
                    3
        
        """
    def discard(self, key):
        """

                Remove an element.  Do not raise an exception if absent.

                The MutableSet mixin uses this to implement the .remove() method, which
                *does* raise an error when asked to remove a non-existent item.

                Example:
                    >>> oset = OrderedSet([1, 2, 3])
                    >>> oset.discard(2)
                    >>> print(oset)
                    OrderedSet([1, 3])
                    >>> oset.discard(2)
                    >>> print(oset)
                    OrderedSet([1, 3])
        
        """
    def clear(self):
        """

                Remove all items from this OrderedSet.
        
        """
    def __iter__(self):
        """

                Example:
                    >>> list(iter(OrderedSet([1, 2, 3])))
                    [1, 2, 3]
        
        """
    def __reversed__(self):
        """

                Example:
                    >>> list(reversed(OrderedSet([1, 2, 3])))
                    [3, 2, 1]
        
        """
    def __repr__(self):
        """
        %s()
        """
    def __eq__(self, other):
        """

                Returns true if the containers have the same items. If `other` is a
                Sequence, then order is checked, otherwise it is ignored.

                Example:
                    >>> oset = OrderedSet([1, 3, 2])
                    >>> oset == [1, 3, 2]
                    True
                    >>> oset == [1, 2, 3]
                    False
                    >>> oset == [2, 3]
                    False
                    >>> oset == OrderedSet([3, 2, 1])
                    False
        
        """
    def union(self, *sets):
        """

                Combines all unique items.
                Each items order is defined by its first appearance.

                Example:
                    >>> oset = OrderedSet.union(OrderedSet([3, 1, 4, 1, 5]), [1, 3], [2, 0])
                    >>> print(oset)
                    OrderedSet([3, 1, 4, 5, 2, 0])
                    >>> oset.union([8, 9])
                    OrderedSet([3, 1, 4, 5, 2, 0, 8, 9])
                    >>> oset | {10}
                    OrderedSet([3, 1, 4, 5, 2, 0, 10])
        
        """
    def __and__(self, other):
        """
         the parent implementation of this is backwards

        """
    def intersection(self, *sets):
        """

                Returns elements in common between all sets. Order is defined only
                by the first set.

                Example:
                    >>> oset = OrderedSet.intersection(OrderedSet([0, 1, 2, 3]), [1, 2, 3])
                    >>> print(oset)
                    OrderedSet([1, 2, 3])
                    >>> oset.intersection([2, 4, 5], [1, 2, 3, 4])
                    OrderedSet([2])
                    >>> oset.intersection()
                    OrderedSet([1, 2, 3])
        
        """
    def difference(self, *sets):
        """

                Returns all elements that are in this set but not the others.

                Example:
                    >>> OrderedSet([1, 2, 3]).difference(OrderedSet([2]))
                    OrderedSet([1, 3])
                    >>> OrderedSet([1, 2, 3]).difference(OrderedSet([2]), OrderedSet([3]))
                    OrderedSet([1])
                    >>> OrderedSet([1, 2, 3]) - OrderedSet([2])
                    OrderedSet([1, 3])
                    >>> OrderedSet([1, 2, 3]).difference()
                    OrderedSet([1, 2, 3])
        
        """
    def issubset(self, other):
        """

                Report whether another set contains this set.

                Example:
                    >>> OrderedSet([1, 2, 3]).issubset({1, 2})
                    False
                    >>> OrderedSet([1, 2, 3]).issubset({1, 2, 3, 4})
                    True
                    >>> OrderedSet([1, 2, 3]).issubset({1, 4, 3, 5})
                    False
        
        """
    def issuperset(self, other):
        """

                Report whether this set contains another set.

                Example:
                    >>> OrderedSet([1, 2]).issuperset([1, 2, 3])
                    False
                    >>> OrderedSet([1, 2, 3, 4]).issuperset({1, 2, 3})
                    True
                    >>> OrderedSet([1, 4, 3, 5]).issuperset({1, 2, 3})
                    False
        
        """
    def symmetric_difference(self, other):
        """

                Return the symmetric difference of two OrderedSets as a new set.
                That is, the new set will contain all elements that are in exactly
                one of the sets.

                Their order will be preserved, with elements from `self` preceding
                elements from `other`.

                Example:
                    >>> this = OrderedSet([1, 4, 3, 5, 7])
                    >>> other = OrderedSet([9, 7, 1, 3, 2])
                    >>> this.symmetric_difference(other)
                    OrderedSet([4, 5, 9, 2])
        
        """
    def _update_items(self, items):
        """

                Replace the 'items' list of this OrderedSet with a new one, updating
                self.map accordingly.
        
        """
    def difference_update(self, *sets):
        """

                Update this OrderedSet to remove items from one or more other sets.

                Example:
                    >>> this = OrderedSet([1, 2, 3])
                    >>> this.difference_update(OrderedSet([2, 4]))
                    >>> print(this)
                    OrderedSet([1, 3])

                    >>> this = OrderedSet([1, 2, 3, 4, 5])
                    >>> this.difference_update(OrderedSet([2, 4]), OrderedSet([1, 4, 6]))
                    >>> print(this)
                    OrderedSet([3, 5])
        
        """
    def intersection_update(self, other):
        """

                Update this OrderedSet to keep only items in another set, preserving
                their order in this set.

                Example:
                    >>> this = OrderedSet([1, 4, 3, 5, 7])
                    >>> other = OrderedSet([9, 7, 1, 3, 2])
                    >>> this.intersection_update(other)
                    >>> print(this)
                    OrderedSet([1, 3, 7])
        
        """
    def symmetric_difference_update(self, other):
        """

                Update this OrderedSet to remove items from another set, then
                add items from the other set that were not present in this set.

                Example:
                    >>> this = OrderedSet([1, 4, 3, 5, 7])
                    >>> other = OrderedSet([9, 7, 1, 3, 2])
                    >>> this.symmetric_difference_update(other)
                    >>> print(this)
                    OrderedSet([4, 5, 9, 2])
        
        """
