    def winreg:
    """
     msvc9compiler isn't available on some platforms

    """
def msvc9_find_vcvarsall(version):
    """

        Patched "distutils.msvc9compiler.find_vcvarsall" to use the standalone
        compiler build for Python
        (VCForPython / Microsoft Visual C++ Compiler for Python 2.7).

        Fall back to original behavior when the standalone compiler is not
        available.

        Redirect the path of "vcvarsall.bat".

        Parameters
        ----------
        version: float
            Required Microsoft Visual C++ version.

        Return
        ------
        str
            vcvarsall.bat path
    
    """
def msvc9_query_vcvarsall(ver, arch='x86', *args, **kwargs):
    """

        Patched "distutils.msvc9compiler.query_vcvarsall" for support extra
        Microsoft Visual C++ 9.0 and 10.0 compilers.

        Set environment without use of "vcvarsall.bat".

        Parameters
        ----------
        ver: float
            Required Microsoft Visual C++ version.
        arch: str
            Target architecture.

        Return
        ------
        dict
            environment
    
    """
def _msvc14_find_vc2015():
    """
    Python 3.8 "distutils/_msvccompiler.py" backport
    """
def _msvc14_find_vc2017():
    """
    Python 3.8 "distutils/_msvccompiler.py" backport

        Returns "15, path" based on the result of invoking vswhere.exe
        If no install is found, returns "None, None"

        The version is returned to avoid unnecessarily changing the function
        result. It may be ignored when the path is not None.

        If vswhere.exe is not available, by definition, VS 2017 is not
        installed.
    
    """
def _msvc14_find_vcvarsall(plat_spec):
    """
    Python 3.8 "distutils/_msvccompiler.py" backport
    """
def _msvc14_get_vc_env(plat_spec):
    """
    Python 3.8 "distutils/_msvccompiler.py" backport
    """
def msvc14_get_vc_env(plat_spec):
    """

        Patched "distutils._msvccompiler._get_vc_env" for support extra
        Microsoft Visual C++ 14.X compilers.

        Set environment without use of "vcvarsall.bat".

        Parameters
        ----------
        plat_spec: str
            Target architecture.

        Return
        ------
        dict
            environment
    
    """
def msvc14_gen_lib_options(*args, **kwargs):
    """

        Patched "distutils._msvccompiler.gen_lib_options" for fix
        compatibility between "numpy.distutils" and "distutils._msvccompiler"
        (for Numpy < 1.11.2)
    
    """
def _augment_exception(exc, version, arch=''):
    """

        Add details to the exception message to help guide the user
        as to what action will resolve it.
    
    """
def PlatformInfo:
    """

        Current and Target Architectures information.

        Parameters
        ----------
        arch: str
            Target architecture.
    
    """
    def __init__(self, arch):
        """
        'x64'
        """
    def target_cpu(self):
        """

                Return Target CPU architecture.

                Return
                ------
                str
                    Target CPU
        
        """
    def target_is_x86(self):
        """

                Return True if target CPU is x86 32 bits..

                Return
                ------
                bool
                    CPU is x86 32 bits
        
        """
    def current_is_x86(self):
        """

                Return True if current CPU is x86 32 bits..

                Return
                ------
                bool
                    CPU is x86 32 bits
        
        """
    def current_dir(self, hidex86=False, x64=False):
        """

                Current platform specific subfolder.

                Parameters
                ----------
                hidex86: bool
                    return '' and not '\x86' if architecture is x86.
                x64: bool
                    return '\x64' and not '\amd64' if architecture is amd64.

                Return
                ------
                str
                    subfolder: '\target', or '' (see hidex86 parameter)
        
        """
    def target_dir(self, hidex86=False, x64=False):
        """
        r"""
                Target platform specific subfolder.

                Parameters
                ----------
                hidex86: bool
                    return '' and not '\x86' if architecture is x86.
                x64: bool
                    return '\x64' and not '\amd64' if architecture is amd64.

                Return
                ------
                str
                    subfolder: '\current', or '' (see hidex86 parameter)
        
        """
    def cross_dir(self, forcex86=False):
        """
        r"""
                Cross platform specific subfolder.

                Parameters
                ----------
                forcex86: bool
                    Use 'x86' as current architecture even if current architecture is
                    not x86.

                Return
                ------
                str
                    subfolder: '' if target architecture is current architecture,
                    '\current_target' if not.
        
        """
def RegistryInfo:
    """

        Microsoft Visual Studio related registry information.

        Parameters
        ----------
        platform_info: PlatformInfo
            "PlatformInfo" instance.
    
    """
    def __init__(self, platform_info):
        """

                Microsoft Visual Studio root registry key.

                Return
                ------
                str
                    Registry key
        
        """
    def sxs(self):
        """

                Microsoft Visual Studio SxS registry key.

                Return
                ------
                str
                    Registry key
        
        """
    def vc(self):
        """

                Microsoft Visual C++ VC7 registry key.

                Return
                ------
                str
                    Registry key
        
        """
    def vs(self):
        """

                Microsoft Visual Studio VS7 registry key.

                Return
                ------
                str
                    Registry key
        
        """
    def vc_for_python(self):
        """

                Microsoft Visual C++ for Python registry key.

                Return
                ------
                str
                    Registry key
        
        """
    def microsoft_sdk(self):
        """

                Microsoft SDK registry key.

                Return
                ------
                str
                    Registry key
        
        """
    def windows_sdk(self):
        """

                Microsoft Windows/Platform SDK registry key.

                Return
                ------
                str
                    Registry key
        
        """
    def netfx_sdk(self):
        """

                Microsoft .NET Framework SDK registry key.

                Return
                ------
                str
                    Registry key
        
        """
    def windows_kits_roots(self):
        """

                Microsoft Windows Kits Roots registry key.

                Return
                ------
                str
                    Registry key
        
        """
    def microsoft(self, key, x86=False):
        """

                Return key in Microsoft software registry.

                Parameters
                ----------
                key: str
                    Registry key path where look.
                x86: str
                    Force x86 software registry.

                Return
                ------
                str
                    Registry key
        
        """
    def lookup(self, key, name):
        """

                Look for values in registry in Microsoft software registry.

                Parameters
                ----------
                key: str
                    Registry key path where look.
                name: str
                    Value name to find.

                Return
                ------
                str
                    value
        
        """
def SystemInfo:
    """

        Microsoft Windows and Visual Studio related system information.

        Parameters
        ----------
        registry_info: RegistryInfo
            "RegistryInfo" instance.
        vc_ver: float
            Required Microsoft Visual C++ version.
    
    """
    def __init__(self, registry_info, vc_ver=None):
        """
         Except for VS15+, VC version is aligned with VS version

        """
    def _find_latest_available_vs_ver(self):
        """

                Find the latest VC version

                Return
                ------
                float
                    version
        
        """
    def find_reg_vs_vers(self):
        """

                Find Microsoft Visual Studio versions available in registry.

                Return
                ------
                list of float
                    Versions
        
        """
    def find_programdata_vs_vers(self):
        """
        r"""
                Find Visual studio 2017+ versions from information in
                "C:\ProgramData\Microsoft\VisualStudio\Packages\_Instances".

                Return
                ------
                dict
                    float version as key, path as value.
        
        """
    def _as_float_version(version):
        """

                Return a string version as a simplified float version (major.minor)

                Parameters
                ----------
                version: str
                    Version.

                Return
                ------
                float
                    version
        
        """
    def VSInstallDir(self):
        """

                Microsoft Visual Studio directory.

                Return
                ------
                str
                    path
        
        """
    def VCInstallDir(self):
        """

                Microsoft Visual C++ directory.

                Return
                ------
                str
                    path
        
        """
    def _guess_vc(self):
        """

                Locate Visual C++ for VS2017+.

                Return
                ------
                str
                    path
        
        """
    def _guess_vc_legacy(self):
        """

                Locate Visual C++ for versions prior to 2017.

                Return
                ------
                str
                    path
        
        """
    def WindowsSdkVersion(self):
        """

                Microsoft Windows SDK versions for specified MSVC++ version.

                Return
                ------
                tuple of str
                    versions
        
        """
    def WindowsSdkLastVersion(self):
        """

                Microsoft Windows SDK last version.

                Return
                ------
                str
                    version
        
        """
    def WindowsSdkDir(self):
        """

                Microsoft Windows SDK directory.

                Return
                ------
                str
                    path
        
        """
    def WindowsSDKExecutablePath(self):
        """

                Microsoft Windows SDK executable directory.

                Return
                ------
                str
                    path
        
        """
    def FSharpInstallDir(self):
        """

                Microsoft Visual F# directory.

                Return
                ------
                str
                    path
        
        """
    def UniversalCRTSdkDir(self):
        """

                Microsoft Universal CRT SDK directory.

                Return
                ------
                str
                    path
        
        """
    def UniversalCRTSdkLastVersion(self):
        """

                Microsoft Universal C Runtime SDK last version.

                Return
                ------
                str
                    version
        
        """
    def NetFxSdkVersion(self):
        """

                Microsoft .NET Framework SDK versions.

                Return
                ------
                tuple of str
                    versions
        
        """
    def NetFxSdkDir(self):
        """

                Microsoft .NET Framework SDK directory.

                Return
                ------
                str
                    path
        
        """
    def FrameworkDir32(self):
        """

                Microsoft .NET Framework 32bit directory.

                Return
                ------
                str
                    path
        
        """
    def FrameworkDir64(self):
        """

                Microsoft .NET Framework 64bit directory.

                Return
                ------
                str
                    path
        
        """
    def FrameworkVersion32(self):
        """

                Microsoft .NET Framework 32bit versions.

                Return
                ------
                tuple of str
                    versions
        
        """
    def FrameworkVersion64(self):
        """

                Microsoft .NET Framework 64bit versions.

                Return
                ------
                tuple of str
                    versions
        
        """
    def _find_dot_net_versions(self, bits):
        """

                Find Microsoft .NET Framework versions.

                Parameters
                ----------
                bits: int
                    Platform number of bits: 32 or 64.

                Return
                ------
                tuple of str
                    versions
        
        """
    def _use_last_dir_name(path, prefix=''):
        """

                Return name of the last dir in path or '' if no dir found.

                Parameters
                ----------
                path: str
                    Use dirs in this path
                prefix: str
                    Use only dirs starting by this prefix

                Return
                ------
                str
                    name
        
        """
def EnvironmentInfo:
    """

        Return environment variables for specified Microsoft Visual C++ version
        and platform : Lib, Include, Path and libpath.

        This function is compatible with Microsoft Visual C++ 9.0 to 14.X.

        Script created by analysing Microsoft environment configuration files like
        "vcvars[...].bat", "SetEnv.Cmd", "vcbuildtools.bat", ...

        Parameters
        ----------
        arch: str
            Target architecture.
        vc_ver: float
            Required Microsoft Visual C++ version. If not set, autodetect the last
            version.
        vc_min_ver: float
            Minimum Microsoft Visual C++ version.
    
    """
    def __init__(self, arch, vc_ver=None, vc_min_ver=0):
        """
        'No suitable Microsoft Visual C++ version found'
        """
    def vs_ver(self):
        """

                Microsoft Visual Studio.

                Return
                ------
                float
                    version
        
        """
    def vc_ver(self):
        """

                Microsoft Visual C++ version.

                Return
                ------
                float
                    version
        
        """
    def VSTools(self):
        """

                Microsoft Visual Studio Tools.

                Return
                ------
                list of str
                    paths
        
        """
    def VCIncludes(self):
        """

                Microsoft Visual C++ & Microsoft Foundation Class Includes.

                Return
                ------
                list of str
                    paths
        
        """
    def VCLibraries(self):
        """

                Microsoft Visual C++ & Microsoft Foundation Class Libraries.

                Return
                ------
                list of str
                    paths
        
        """
    def VCStoreRefs(self):
        """

                Microsoft Visual C++ store references Libraries.

                Return
                ------
                list of str
                    paths
        
        """
    def VCTools(self):
        """

                Microsoft Visual C++ Tools.

                Return
                ------
                list of str
                    paths
        
        """
    def OSLibraries(self):
        """

                Microsoft Windows SDK Libraries.

                Return
                ------
                list of str
                    paths
        
        """
    def OSIncludes(self):
        """

                Microsoft Windows SDK Include.

                Return
                ------
                list of str
                    paths
        
        """
    def OSLibpath(self):
        """

                Microsoft Windows SDK Libraries Paths.

                Return
                ------
                list of str
                    paths
        
        """
    def SdkTools(self):
        """

                Microsoft Windows SDK Tools.

                Return
                ------
                list of str
                    paths
        
        """
    def _sdk_tools(self):
        """

                Microsoft Windows SDK Tools paths generator.

                Return
                ------
                generator of str
                    paths
        
        """
    def _sdk_subdir(self):
        """

                Microsoft Windows SDK version subdir.

                Return
                ------
                str
                    subdir
        
        """
    def SdkSetup(self):
        """

                Microsoft Windows SDK Setup.

                Return
                ------
                list of str
                    paths
        
        """
    def FxTools(self):
        """

                Microsoft .NET Framework Tools.

                Return
                ------
                list of str
                    paths
        
        """
    def NetFxSDKLibraries(self):
        """

                Microsoft .Net Framework SDK Libraries.

                Return
                ------
                list of str
                    paths
        
        """
    def NetFxSDKIncludes(self):
        """

                Microsoft .Net Framework SDK Includes.

                Return
                ------
                list of str
                    paths
        
        """
    def VsTDb(self):
        """

                Microsoft Visual Studio Team System Database.

                Return
                ------
                list of str
                    paths
        
        """
    def MSBuild(self):
        """

                Microsoft Build Engine.

                Return
                ------
                list of str
                    paths
        
        """
    def HTMLHelpWorkshop(self):
        """

                Microsoft HTML Help Workshop.

                Return
                ------
                list of str
                    paths
        
        """
    def UCRTLibraries(self):
        """

                Microsoft Universal C Runtime SDK Libraries.

                Return
                ------
                list of str
                    paths
        
        """
    def UCRTIncludes(self):
        """

                Microsoft Universal C Runtime SDK Include.

                Return
                ------
                list of str
                    paths
        
        """
    def _ucrt_subdir(self):
        """

                Microsoft Universal C Runtime SDK version subdir.

                Return
                ------
                str
                    subdir
        
        """
    def FSharp(self):
        """

                Microsoft Visual F#.

                Return
                ------
                list of str
                    paths
        
        """
    def VCRuntimeRedist(self):
        """

                Microsoft Visual C++ runtime redistributable dll.

                Return
                ------
                str
                    path
        
        """
    def return_env(self, exists=True):
        """

                Return environment dict.

                Parameters
                ----------
                exists: bool
                    It True, only return existing paths.

                Return
                ------
                dict
                    environment
        
        """
    def _build_paths(self, name, spec_path_lists, exists):
        """

                Given an environment variable name and specified paths,
                return a pathsep-separated string of paths containing
                unique, extant, directories from those paths and from
                the environment variable. Raise an error if no paths
                are resolved.

                Parameters
                ----------
                name: str
                    Environment variable name
                spec_path_lists: list of str
                    Paths
                exists: bool
                    It True, only return existing paths.

                Return
                ------
                str
                    Pathsep-separated paths
        
        """
    def _unique_everseen(iterable, key=None):
        """

                List unique elements, preserving order.
                Remember all elements ever seen.

                _unique_everseen('AAAABBBCCDAABBB') --> A B C D

                _unique_everseen('ABBCcAD', str.lower) --> A B C D
        
        """
