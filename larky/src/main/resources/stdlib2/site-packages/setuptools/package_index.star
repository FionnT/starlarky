def parse_requirement_arg(spec):
    """
    Not a URL, existing file, or requirement spec: %r
    """
def parse_bdist_wininst(name):
    """
    Return (base,pyversion) or (None,None) for possible .exe name
    """
def egg_info_for_url(url):
    """
    '/'
    """
def distros_for_url(url, metadata=None):
    """
    Yield egg or source distribution objects that might be found at a URL
    """
def distros_for_location(location, basename, metadata=None):
    """
    Yield egg or source distribution objects based on basename
    """
def distros_for_filename(filename, metadata=None):
    """
    Yield possible egg or source distribution objects based on a filename
    """
2021-03-02 20:52:25,165 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:52:25,166 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:52:25,166 : INFO : tokenize_signature : --> do i ever get here?
def interpret_distro_name(
        location, basename, metadata, py_version=None, precedence=SOURCE_DIST,
        platform=None
):
    """
    Generate alternative interpretations of a source distro name

        Note: if `location` is a filesystem filename, you should call
        ``pkg_resources.normalize_path()`` on it before passing it to this
        routine!
    
    """
def unique_everseen(iterable, key=None):
    """
    List unique elements, preserving order. Remember all elements ever seen.
    """
def unique_values(func):
    """

        Wrap a function returning an iterable such that the resulting iterable
        only ever yields unique items.
    
    """
    def wrapper(*args, **kwargs):
        """
        r"""<([^>]*\srel\s*=\s*['"]?([^'">]+)[^>]*)>
        """
def find_external_links(url, page):
    """
    Find rel="homepage" and rel="download" links in `page`, yielding URLs
    """
def ContentChecker:
    """

        A null content checker that defines the interface for checking content
    
    """
    def feed(self, block):
        """

                Feed a block of data to the hash.
        
        """
    def is_valid(self):
        """

                Check the hash. Return False if validation fails.
        
        """
    def report(self, reporter, template):
        """

                Call reporter with information about the checker (hash name)
                substituted into the template.
        
        """
def HashChecker(ContentChecker):
    """
    r'(?P<hash_name>sha1|sha224|sha384|sha256|sha512|md5)='
    r'(?P<expected>[a-f0-9]+)'

    """
    def __init__(self, hash_name, expected):
        """
        Construct a (possibly null) ContentChecker from a URL
        """
    def feed(self, block):
        """
        A distribution index that scans web pages for download URLs
        """
2021-03-02 20:52:25,169 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:52:25,170 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:52:25,170 : INFO : tokenize_signature : --> do i ever get here?
    def __init__(
            self, index_url="https://pypi.org/simple/", hosts=('*',),
            ca_bundle=None, verify_ssl=True, *args, **kw
    ):
        """
        /
        """
    def process_url(self, url, retrieve=False):
        """
        Evaluate a URL as a possible download, and maybe retrieve it
        """
    def process_filename(self, fn, nested=False):
        """
         process filenames or directories

        """
    def url_ok(self, url, fatal=False):
        """
        'file'
        """
    def scan_egg_links(self, search_path):
        """
        '.egg-link'
        """
    def scan_egg_link(self, path, entry):
        """
         filter non-empty lines

        """
    def process_index(self, url, page):
        """
        Process the contents of a PyPI page
        """
        def scan(link):
            """
             Process a URL to see if it's for a package page

            """
    def need_version_info(self, url):
        """
        Page at %s links to .py file(s) without version info; an index 
        scan is required.
        """
    def scan_all(self, msg=None, *args):
        """
        Scanning index of all packages (this may take a while)

        """
    def find_packages(self, requirement):
        """
        '/'
        """
    def obtain(self, requirement, installer=None):
        """
        %s does not match %s
        """
    def check_hash(self, checker, filename, tfp):
        """

                checker is a ContentChecker
        
        """
    def add_find_links(self, urls):
        """
        Add `urls` to the list that will be prescanned for searches
        """
    def prescan(self):
        """
        Scan urls scheduled for prescanning (e.g. --find-links)
        """
    def not_found_in_index(self, requirement):
        """
         we've seen at least one distro
        """
    def download(self, spec, tmpdir):
        """
        Locate and/or download `spec` to `tmpdir`, returning a local path

                `spec` may be a ``Requirement`` object, or a string containing a URL,
                an existing local filename, or a project/version requirement spec
                (i.e. the string form of a ``Requirement`` object).  If it is the URL
                of a .py file with an unambiguous ``#egg=name-version`` tag (i.e., one
                that escapes ``-`` as ``_`` throughout), a trivial ``setup.py`` is
                automatically created alongside the downloaded file.

                If `spec` is a ``Requirement`` object or a string containing a
                project/version requirement spec, this method returns the location of
                a matching distribution (possibly after downloading it to `tmpdir`).
                If `spec` is a locally existing file or directory name, it is simply
                returned unchanged.  If `spec` is a URL, it is downloaded to a subpath
                of `tmpdir`, and the local filename is returned.  Various errors may be
                raised if a problem occurs during downloading.
        
        """
2021-03-02 20:52:25,178 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:52:25,178 : INFO : tokenize_signature : --> do i ever get here?
    def fetch_distribution(
            self, requirement, tmpdir, force_scan=False, source=False,
            develop_ok=False, local_index=None):
        """
        Obtain a distribution suitable for fulfilling `requirement`

                `requirement` must be a ``pkg_resources.Requirement`` instance.
                If necessary, or if the `force_scan` flag is set, the requirement is
                searched for in the (online) package index as well as the locally
                installed packages.  If a distribution matching `requirement` is found,
                the returned distribution's ``location`` is the value you would have
                gotten from calling the ``download()`` method with the matching
                distribution's URL or filename.  If no matching distribution is found,
                ``None`` is returned.

                If the `source` flag is set, only source distributions and source
                checkout links will be considered.  Unless the `develop_ok` flag is
                set, development and system eggs (i.e., those using the ``.egg-info``
                format) will be ignored.
        
        """
        def find(req, env=None):
            """
             Find a matching distribution; may be called more than once


            """
    def fetch(self, requirement, tmpdir, force_scan=False, source=False):
        """
        Obtain a file suitable for fulfilling `requirement`

                DEPRECATED; use the ``fetch_distribution()`` method now instead.  For
                backward compatibility, this routine is identical but returns the
                ``location`` of the downloaded distribution instead of a distribution
                object.
        
        """
    def gen_setup(self, filename, fragment, tmpdir):
        """
         unambiguous ``#egg`` fragment
        """
    def _download_to(self, url, filename):
        """
        Downloading %s
        """
    def reporthook(self, url, filename, blocknum, blksize, size):
        """
         no-op
        """
    def open_url(self, url, warning=None):
        """
        'file:'
        """
    def _download_url(self, scheme, url, tmpdir):
        """
         Determine download filename


        """
    def scan_url(self, url):
        """
        'html'
        """
    def _download_html(self, url, headers, filename):
        """
         Check for a subversion index page

        """
    def _download_svn(self, url, filename):
        """
        SVN download support is deprecated
        """
    def _vcs_split_rev_from_url(url, pop_prefix=False):
        """
        '+'
        """
    def _download_git(self, url, filename):
        """
        '#'
        """
    def _download_hg(self, url, filename):
        """
        '#'
        """
    def debug(self, msg, *args):
        """
         This pattern matches a character entity reference (a decimal numeric
         references, a hexadecimal numeric reference, or a named reference).

        """
def decode_entity(match):
    """

        Decode HTML entities in the given text.

        >>> htmldecode(
        ...     'https://../package_name-0.1.2.tar.gz'
        ...     '?tokena=A&amp;tokenb=B">package_name-0.1.2.tar.gz')
        'https://../package_name-0.1.2.tar.gz?tokena=A&tokenb=B">package_name-0.1.2.tar.gz'
    
    """
def socket_timeout(timeout=15):
    """

        A function compatible with Python 2.3-3.3 that will encode
        auth from a URL suitable for an HTTP header.
        >>> str(_encode_auth('username%3Apassword'))
        'dXNlcm5hbWU6cGFzc3dvcmQ='

        Long auth strings should not cause a newline to be inserted.
        >>> long_auth = 'username:' + 'password'*10
        >>> chr(10) in str(_encode_auth(long_auth))
        False
    
    """
def Credential:
    """

        A username/password pair. Use like a namedtuple.
    
    """
    def __init__(self, username, password):
        """
        '%(username)s:%(password)s'
        """
def PyPIConfig(configparser.RawConfigParser):
    """

            Load from ~/.pypirc
        
    """
    def creds_by_repository(self):
        """
        'repository'
        """
    def _get_repo_cred(self, section):
        """
        'repository'
        """
    def find_credential(self, url):
        """

                If the URL indicated appears to be a repository defined in this
                config, return the credential for that repository.
        
        """
def open_with_auth(url, opener=urllib.request.urlopen):
    """
    Open a urllib2 request, handling HTTP authentication
    """
def _splituser(host):
    """
    splituser('user[:passwd]@host[:port]')
        --> 'user[:passwd]', 'host[:port]'.
    """
def fix_sf_url(url):
    """
     backward compatibility
    """
def local_open(url):
    """
    Read a local path, with special support for directories
    """
