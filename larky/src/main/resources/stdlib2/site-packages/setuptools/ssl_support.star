    def CertificateError(ValueError):
    """
    Matching according to RFC 6125, section 6.4.3

            https://tools.ietf.org/html/rfc6125#section-6.4.3
        
    """
    def match_hostname(cert, hostname):
        """
        Verify that *cert* (in decoded format as returned by
                SSLSocket.getpeercert()) matches the *hostname*.  RFC 2818 and RFC 6125
                rules are followed, but IP addresses are not accepted for *hostname*.

                CertificateError is raised on failure. On success, the function
                returns nothing.
        
        """
def VerifyingHTTPSHandler(HTTPSHandler):
    """
    Simple verifying handler: no auth, subclasses, timeouts, etc.
    """
    def __init__(self, ca_bundle):
        """
        Simple verifying connection: no auth, subclasses, timeouts, etc.
        """
    def __init__(self, host, ca_bundle, **kw):
        """
        'source_address'
        """
def opener_for(ca_bundle=None):
    """
    Get a urlopen() replacement that uses ca_bundle for verification
    """
def once(func):
    """
    'always_returns'
    """
def get_win_certfile():
    """
    'CA'
    """
def find_ca_bundle():
    """
    Return an existing CA bundle path, or None
    """
def _certifi_where():
    """
    'certifi'
    """
