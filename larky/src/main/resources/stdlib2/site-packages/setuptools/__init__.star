def PackageFinder:
    """

        Generate a list of all Python packages found within a directory
    
    """
    def find(cls, where='.', exclude=(), include=('*',)):
        """
        Return a list all Python packages found within directory 'where'

                'where' is the root directory which will be searched for packages.  It
                should be supplied as a "cross-platform" (i.e. URL-style) path; it will
                be converted to the appropriate local path syntax.

                'exclude' is a sequence of package names to exclude; '*' can be used
                as a wildcard in the names, such that 'foo.*' will exclude all
                subpackages of 'foo' (but not 'foo' itself).

                'include' is a sequence of package names to include.  If it's
                specified, only the named packages will be included.  If it's not
                specified, all found packages will be included.  'include' can contain
                shell style wildcard patterns just like 'exclude'.
        
        """
    def _find_packages_iter(cls, where, exclude, include):
        """

                All the packages found in 'where' that pass the 'include' filter, but
                not the 'exclude' filter.
        
        """
    def _looks_like_package(path):
        """
        Does a directory look like a package?
        """
    def _build_filter(*patterns):
        """

                Given a list of patterns, return a callable that will be true only if
                the input matches at least one of the patterns.
        
        """
def PEP420PackageFinder(PackageFinder):
    """
     Note: do not use `setuptools.Distribution` directly, as
     our PEP 517 backend patch `distutils.core.Distribution`.

    """
def setup(**attrs):
    """
     Make sure we have any requirements needed to interpret 'attrs'.

    """
def Command(_Command):
    """

            Construct the command for dist, updating
            vars(self) with any keyword parameters.
        
    """
    def _ensure_stringlike(self, option, what, default=None):
        """
        '%s' must be a %s (got `%s`)

        """
    def ensure_string_list(self, option):
        """
        r"""Ensure that 'option' is a list of strings.  If 'option' is
                currently a string, we split it either on /,\s*/ or /\s+/, so
                "foo bar baz", "foo,bar,baz", and "foo,   bar baz" all become
                ["foo", "bar", "baz"].
        
        """
    def reinitialize_command(self, command, reinit_subcommands=0, **kw):
        """

            Find all files under 'path'
    
        """
def findall(dir=os.curdir):
    """

        Find all files under 'dir' and return the list of full filenames.
        Unless dir is '.', return full filenames with dir prepended.
    
    """
def sic(str):
    """
    Treat this string as-is (https://en.wikipedia.org/wiki/Sic)
    """
