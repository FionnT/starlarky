def _get_unpatched(cls):
    """
    Do not call this function
    """
def get_metadata_version(self):
    """
    'metadata_version'
    """
def read_pkg_file(self, file):
    """
    Reads the metadata values from a file object.
    """
    def _read_field(name):
        """
        'UNKNOWN'
        """
    def _read_list(name):
        """
        'metadata-version'
        """
def write_pkg_file(self, file):
    """
    Write the PKG-INFO format data to a file object.
    
    """
        def write_field(key, value):
            """
            %s: %s\n
            """
        def write_field(key, value):
            """
            %s: %s\n
            """
def check_importable(dist, attr, value):
    """
    'x='
    """
def assert_string_list(dist, attr, value):
    """
    Verify that value is a string list
    """
def check_nsp(dist, attr, value):
    """
    Verify that namespace packages are valid
    """
def check_extras(dist, attr, value):
    """
    Verify that extras_require mapping is valid
    """
def _check_extra(extra, reqs):
    """
    ':'
    """
def assert_bool(dist, attr, value):
    """
    Verify that value is True, False, 0, or 1
    """
def check_requirements(dist, attr, value):
    """
    Verify that install_requires is a valid requirements list
    """
def check_specifier(dist, attr, value):
    """
    Verify that value is a valid version specifier
    """
def check_entry_points(dist, attr, value):
    """
    Verify that entry_points map is parseable
    """
def check_test_suite(dist, attr, value):
    """
    test_suite must be a string
    """
def check_package_data(dist, attr, value):
    """
    Verify that value is a dictionary of package names to glob lists
    """
def check_packages(dist, attr, value):
    """
    r'\w+(\.\w+)*'
    """
def Distribution(_Distribution):
    """
    Distribution with support for tests and package data

        This is an enhanced version of 'distutils.dist.Distribution' that
        effectively adds the following new optional keyword arguments to 'setup()':

         'install_requires' -- a string or sequence of strings specifying project
            versions that the distribution requires when installed, in the format
            used by 'pkg_resources.require()'.  They will be installed
            automatically when the package is installed.  If you wish to use
            packages that are not available in PyPI, or want to give your users an
            alternate download location, you can add a 'find_links' option to the
            '[easy_install]' section of your project's 'setup.cfg' file, and then
            setuptools will scan the listed web pages for links that satisfy the
            requirements.

         'extras_require' -- a dictionary mapping names of optional "extras" to the
            additional requirement(s) that using those extras incurs. For example,
            this::

                extras_require = dict(reST = ["docutils>=0.3", "reSTedit"])

            indicates that the distribution can optionally provide an extra
            capability called "reST", but it can only be used if docutils and
            reSTedit are installed.  If the user installs your package using
            EasyInstall and requests one of your extras, the corresponding
            additional requirements will be installed if needed.

         'test_suite' -- the name of a test suite to run for the 'test' command.
            If the user runs 'python setup.py test', the package will be installed,
            and the named test suite will be run.  The format is the same as
            would be used on a 'unittest.py' command line.  That is, it is the
            dotted name of an object to import and call to generate a test suite.

         'package_data' -- a dictionary mapping package names to lists of filenames
            or globs to use to find data files contained in the named packages.
            If the dictionary has filenames or globs listed under '""' (the empty
            string), those names will be searched for in every package, in addition
            to any names for the specific package.  Data files found using these
            names/globs will be installed along with the package, in the same
            location as the package.  Note that globs are allowed to reference
            the contents of non-package subdirectories, as long as you use '/' as
            a path separator.  (Globs are automatically converted to
            platform-specific paths at runtime.)

        In addition to these new keywords, this class also has several new methods
        for manipulating the distribution's contents.  For example, the 'include()'
        and 'exclude()' methods can be thought of as in-place add and subtract
        commands that add or remove packages, modules, extensions, and so on from
        the distribution.
    
    """
    def patch_missing_pkg_info(self, attrs):
        """
         Fake up a replacement for the data that would normally come from
         PKG-INFO, but which might not yet be built if this is a fresh
         checkout.


        """
    def __init__(self, attrs=None):
        """
        package_data
        """
    def _normalize_version(version):
        """
        Normalizing '{version}' to '{normalized}'
        """
    def _validate_version(version):
        """
         Some people apparently take "version number" too literally :)

        """
    def _finalize_requires(self):
        """

                Set `metadata.python_requires` and fix environment markers
                in `install_requires` and `extras_require`.
        
        """
    def _convert_extras_requirements(self):
        """

                Convert requirements in `extras_require` of the form
                `"extra": ["barbazquux; {marker}"]` to
                `"extra:{marker}": ["barbazquux"]`.
        
        """
    def _suffix_for(req):
        """

                For a requirement, return the 'extras_require' suffix for
                that requirement.
        
        """
    def _move_install_requirements_markers(self):
        """

                Move requirements in `install_requires` that are using environment
                markers `extras_require`.
        
        """
        def is_simple_req(req):
            """
            'install_requires'
            """
    def _clean_req(self, req):
        """

                Given a Requirement, remove environment markers and return it.
        
        """
    def _parse_config_files(self, filenames=None):
        """

                Adapted from distutils.dist.Distribution.parse_config_files,
                this method provides the same functionality in subtly-improved
                ways.
        
        """
    def _try_str(val):
        """

                On Python 2, much of distutils relies on string values being of
                type 'str' (bytes) and not unicode text. If the value can be safely
                encoded to bytes using the default encoding, prefer that.

                Why the default encoding? Because that value can be implicitly
                decoded back to text if needed.

                Ref #1653
        
        """
    def _set_command_options(self, command_obj, option_dict=None):
        """

                Set the options for 'command_obj' from 'option_dict'.  Basically
                this means copying elements of a dictionary ('option_dict') to
                attributes of an instance ('command').

                'command_obj' must be a Command instance.  If 'option_dict' is not
                supplied, uses the standard option dictionary for this command
                (from 'self.command_options').

                (Adopted from distutils.dist.Distribution._set_command_options)
        
        """
    def parse_config_files(self, filenames=None, ignore_option_errors=False):
        """
        Parses configuration files from various levels
                and loads configuration.

        
        """
    def fetch_build_eggs(self, requires):
        """
        Resolve pre-setup requirements
        """
    def finalize_options(self):
        """

                Allow plugins to apply arbitrary operations to the
                distribution. Each hook may optionally define a 'order'
                to influence the order of execution. Smaller numbers
                go first and the default is 0.
        
        """
        def by_order(hook):
            """
            'order'
            """
    def _finalize_setup_keywords(self):
        """
        'distutils.setup_keywords'
        """
    def _finalize_2to3_doctests(self):
        """
        'convert_2to3_doctests'
        """
    def get_egg_cache_dir(self):
        """
        '.eggs'
        """
    def fetch_build_egg(self, req):
        """
        Fetch an egg needed for building
        """
    def get_command_class(self, command):
        """
        Pluggable version of get_command_class()
        """
    def print_commands(self):
        """
        'distutils.commands'
        """
    def get_command_list(self):
        """
        'distutils.commands'
        """
    def include(self, **attrs):
        """
        Add items to distribution that are named in keyword arguments

                For example, 'dist.include(py_modules=["x"])' would add 'x' to
                the distribution's 'py_modules' attribute, if it was not already
                there.

                Currently, this method only supports inclusion for attributes that are
                lists or tuples.  If you need to add support for adding to other
                attributes in this or a subclass, you can add an '_include_X' method,
                where 'X' is the name of the attribute.  The method will be called with
                the value passed to 'include()'.  So, 'dist.include(foo={"bar":"baz"})'
                will try to call 'dist._include_foo({"bar":"baz"})', which can then
                handle whatever special inclusion logic is needed.
        
        """
    def exclude_package(self, package):
        """
        Remove packages, modules, and extensions in named package
        """
    def has_contents_for(self, package):
        """
        Return true if 'exclude_package(package)' would do something
        """
    def _exclude_misc(self, name, value):
        """
        Handle 'exclude()' for list/tuple attrs without a special handler
        """
    def _include_misc(self, name, value):
        """
        Handle 'include()' for list/tuple attrs without a special handler
        """
    def exclude(self, **attrs):
        """
        Remove items from distribution that are named in keyword arguments

                For example, 'dist.exclude(py_modules=["x"])' would remove 'x' from
                the distribution's 'py_modules' attribute.  Excluding packages uses
                the 'exclude_package()' method, so all of the package's contained
                packages, modules, and extensions are also excluded.

                Currently, this method only supports exclusion from attributes that are
                lists or tuples.  If you need to add support for excluding from other
                attributes in this or a subclass, you can add an '_exclude_X' method,
                where 'X' is the name of the attribute.  The method will be called with
                the value passed to 'exclude()'.  So, 'dist.exclude(foo={"bar":"baz"})'
                will try to call 'dist._exclude_foo({"bar":"baz"})', which can then
                handle whatever special exclusion logic is needed.
        
        """
    def _exclude_packages(self, packages):
        """
        packages: setting must be a list or tuple (%r)
        """
    def _parse_command_opts(self, parser, args):
        """
         Remove --with-X/--without-X options when processing command args

        """
    def get_cmdline_options(self):
        """
        Return a '{cmd: {opt:val}}' map of all command-line options

                Option names are all long, but do not include the leading '--', and
                contain dashes rather than underscores.  If the option doesn't take
                an argument (e.g. '--quiet'), the 'val' is 'None'.

                Note that options provided by config files are intentionally excluded.
        
        """
    def iter_distribution_names(self):
        """
        Yield all packages, modules, and extension names in distribution
        """
    def handle_display_options(self, option_order):
        """
        If there were any non-global "display-only" options
                (--help-commands or the metadata display options) on the command
                line, display the requested info and return true; else return
                false.
        
        """
def DistDeprecationWarning(SetuptoolsDeprecationWarning):
    """
    Class for warning about deprecations in dist in
        setuptools. Not ignored by default, unlike DeprecationWarning.
    """
