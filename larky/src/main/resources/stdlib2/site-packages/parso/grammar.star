def Grammar(object):
    """

        :py:func:`parso.load_grammar` returns instances of this class.

        Creating custom none-python grammars by calling this is not supported, yet.
    
    """
    def __init__(self, text, tokenizer, parser=BaseParser, diff_parser=None):
        """
        utf-8
        """
    def parse(self, code=None, **kwargs):
        """

                If you want to parse a Python file you want to start here, most likely.

                If you need finer grained control over the parsed instance, there will be
                other ways to access it.

                :param str code: A unicode or bytes string. When it's not possible to
                    decode bytes to a string, returns a
                    :py:class:`UnicodeDecodeError`.
                :param bool error_recovery: If enabled, any code will be returned. If
                    it is invalid, it will be returned as an error node. If disabled,
                    you will get a ParseError when encountering syntax errors in your
                    code.
                :param str start_symbol: The grammar rule (nonterminal) that you want
                    to parse. Only allowed to be used when error_recovery is False.
                :param str path: The path to the file you want to open. Only needed for caching.
                :param bool cache: Keeps a copy of the parser tree in RAM and on disk
                    if a path is given. Returns the cached trees if the corresponding
                    files on disk have not changed. Note that this stores pickle files
                    on your file system (e.g. for Linux in ``~/.cache/parso/``).
                :param bool diff_cache: Diffs the cached python module against the new
                    code and tries to parse only the parts that have changed. Returns
                    the same (changed) module that is found in cache. Using this option
                    requires you to not do anything anymore with the cached modules
                    under that path, because the contents of it might change. This
                    option is still somewhat experimental. If you want stability,
                    please don't use it.
                :param bool cache_path: If given saves the parso cache in this
                    directory. If not given, defaults to the default cache places on
                    each platform.

                :return: A subclass of :py:class:`parso.tree.NodeOrLeaf`. Typically a
                    :py:class:`parso.python.tree.Module`.
        
        """
2021-03-02 20:52:42,539 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:52:42,540 : INFO : tokenize_signature : --> do i ever get here?
    def _parse(self, code=None, error_recovery=True, path=None,
               start_symbol=None, cache=False, diff_cache=False,
               cache_path=None, file_io=None, start_pos=(1, 0)):
        """

                Wanted python3.5 * operator and keyword only arguments. Therefore just
                wrap it all.
                start_pos here is just a parameter internally used. Might be public
                sometime in the future.
        
        """
    def _get_token_namespace(self):
        """
        The token namespace should be set.
        """
    def iter_errors(self, node):
        """

                Given a :py:class:`parso.tree.NodeOrLeaf` returns a generator of
                :py:class:`parso.normalizer.Issue` objects. For Python this is
                a list of syntax/indentation errors.
        
        """
    def refactor(self, base_node, node_to_str_map):
        """
        You need to specify a normalizer, because 
        there's no default normalizer for this tree.
        """
    def _normalize(self, node, normalizer_config=None):
        """

                TODO this is not public, yet.
                The returned code will be normalized, e.g. PEP8 for Python.
        
        """
    def _get_normalizer_issues(self, node, normalizer_config=None):
        """
        ' '
        """
def PythonGrammar(Grammar):
    """
    'file_input'
    """
    def __init__(self, version_info, bnf_text):
        """
         Used by Jedi.

        """
def load_grammar(**kwargs):
    """

        Loads a :py:class:`parso.Grammar`. The default version is the current Python
        version.

        :param str version: A python version string, e.g. ``version='3.8'``.
        :param str path: A path to a grammar file
    
    """
    def load_grammar(language='python', version=None, path=None):
        """
        'python'
        """
