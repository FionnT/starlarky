def _NormalizerMeta(type):
    """
    'rule_type_classes'
    """
    def _instantiate_rules(self, attr):
        """
        ''
        """
    def visit_node(self, node):
        """

                Use it as a class decorator::

                    normalizer = Normalizer('grammar', 'config')
                    @normalizer.register_rule(value='foo')
                    class MyRule(Rule):
                        error_code = 42
        
        """
    def _register_rule(cls, value=None, values=(), type=None, types=()):
        """
        You must register at least something.
        """
        def decorator(rule_cls):
            """

                    An integer code that stands for the type of error.
        
            """
    def __eq__(self, other):
        """
        '<%s: %s>'
        """
def Rule(object):
    """
    The message on the class is not set.
    """
    def add_issue(self, node, code=None, message=None):
        """
        The error code on the class is not set.
        """
    def feed_node(self, node):
