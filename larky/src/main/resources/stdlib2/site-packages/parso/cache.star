def _get_default_cache_path():
    """
    'windows'
    """
def _get_cache_clear_lock(cache_path = None):
    """

        The path where the cache lock is stored.

        Cache lock will prevent continous cache clearing and only allow garbage
        collection once a day (can be configured in _CACHE_CLEAR_THRESHOLD).
    
    """
def _NodeCacheItem(object):
    """

        Returns a module or None, if it fails.
    
    """
def _load_from_file_system(hashed_grammar, path, p_time, cache_path=None):
    """
     Cache is outdated

    """
def _set_cache_item(hashed_grammar, path, module_cache_item):
    """
     Garbage collection of old cache files.
     We are basically throwing everything away that hasn't been accessed
     in 10 minutes.

    """
def try_to_save_module(hashed_grammar, file_io, module, lines, pickling=True, cache_path=None):
    """
     It's not really a big issue if the cache cannot be saved to the
     file system. It's still in RAM in that case. However we should
     still warn the user that this is happening.

    """
def _save_to_file_system(hashed_grammar, path, item, cache_path=None):
    """
    'wb'
    """
def clear_cache(cache_path=None):
    """
     silently ignore all failures
    """
def _remove_cache_and_update_lock(cache_path = None):
    """
     first time

    """
def _get_hashed_path(hashed_grammar, path, cache_path=None):
    """
    utf-8
    """
def _get_cache_directory_path(cache_path=None):
