def search_ancestor(node, *node_types):
    """

        Recursively looks at the parents of a node and returns the first found node
        that matches node_types. Returns ``None`` if no matching node is found.

        :param node: The ancestors of this node will be checked.
        :param node_types: type names that are searched for.
        :type node_types: tuple of str
    
    """
def NodeOrLeaf(object):
    """

        The base class for nodes and leaves.
    
    """
    def get_root_node(self):
        """

                Returns the root node of a parser tree. The returned node doesn't have
                a parent node like all the other nodes/leaves.
        
        """
    def get_next_sibling(self):
        """

                Returns the node immediately following this node in this parent's
                children list. If this node does not have a next sibling, it is None
        
        """
    def get_previous_sibling(self):
        """

                Returns the node immediately preceding this node in this parent's
                children list. If this node does not have a previous sibling, it is
                None.
        
        """
    def get_previous_leaf(self):
        """

                Returns the previous leaf in the parser tree.
                Returns `None` if this is the first element in the parser tree.
        
        """
    def get_next_leaf(self):
        """

                Returns the next leaf in the parser tree.
                Returns None if this is the last element in the parser tree.
        
        """
    def start_pos(self):
        """

                Returns the starting position of the prefix as a tuple, e.g. `(3, 4)`.

                :return tuple of int: (line, column)
        
        """
    def end_pos(self):
        """

                Returns the end position of the prefix as a tuple, e.g. `(3, 4)`.

                :return tuple of int: (line, column)
        
        """
    def get_start_pos_of_prefix(self):
        """

                Returns the start_pos of the prefix. This means basically it returns
                the end_pos of the last prefix. The `get_start_pos_of_prefix()` of the
                prefix `+` in `2 + 1` would be `(1, 1)`, while the start_pos is
                `(1, 2)`.

                :return tuple of int: (line, column)
        
        """
    def get_first_leaf(self):
        """

                Returns the first leaf of a node or itself if this is a leaf.
        
        """
    def get_last_leaf(self):
        """

                Returns the last leaf of a node or itself if this is a leaf.
        
        """
    def get_code(self, include_prefix=True):
        """

                Returns the code that was the input for the parser for this node.

                :param include_prefix: Removes the prefix (whitespace and comments) of
                    e.g. a statement.
        
        """
def Leaf(NodeOrLeaf):
    """
    '''
        Leafs are basically tokens with a better API. Leafs exactly know where they
        were defined and what text preceeds them.
        '''
    """
    def __init__(self, value, start_pos, prefix=''):
        """
        '''
                :py:func:`str` The value of the current token.
                '''
        """
    def start_pos(self):
        """
         + 1 is needed because split_lines always returns at least [''].

        """
    def get_first_leaf(self):
        """
         Check for multiline token

        """
    def __repr__(self):
        """
        <%s: %s>
        """
def TypedLeaf(Leaf):
    """
    'type'
    """
    def __init__(self, type, value, start_pos, prefix=''):
        """

            The super class for all nodes.
            A node has children, a type and possibly a parent node.
    
        """
    def __init__(self, children):
        """

                A list of :class:`NodeOrLeaf` child nodes.
        
        """
    def start_pos(self):
        """

        """
    def get_code(self, include_prefix=True):
        """

                Get the :py:class:`parso.tree.Leaf` at ``position``

                :param tuple position: A position tuple, row, column. Rows start from 1
                :param bool include_prefixes: If ``False``, ``None`` will be returned if ``position`` falls
                    on whitespace or comments before a leaf
                :return: :py:class:`parso.tree.Leaf` at ``position``, or ``None``
        
        """
        def binary_search(lower, upper):
            """
             We're on a prefix.

            """
    def get_first_leaf(self):
        """
        '\n'
        """
def Node(BaseNode):
    """
    Concrete implementation for interior nodes.
    """
    def __init__(self, type, children):
        """
        %s(%s, %r)
        """
def ErrorNode(BaseNode):
    """

        A node that contains valid nodes/leaves that we're follow by a token that
        was invalid. This basically means that the leaf after this node is where
        Python would mark a syntax error.
    
    """
def ErrorLeaf(Leaf):
    """

        A leaf that is either completely invalid in a language (like `$` in Python)
        or is invalid at that position. Like the star in `1 +* 1`.
    
    """
    def __init__(self, token_type, value, start_pos, prefix=''):
        """
        <%s: %s:%s, %s>
        """
