def split_lines(string, keepends=False):
    """
    r"""
        Intended for Python code. In contrast to Python's :py:meth:`str.splitlines`,
        looks at form feeds and other special characters as normal text. Just
        splits ``\n`` and ``\r\n``.
        Also different: Returns ``[""]`` for an empty string input.

        In Python 2.7 form feeds are used as normal characters when using
        str.splitlines. However in Python 3 somewhere there was a decision to split
        also on form feeds.
    
    """
def python_bytes_to_unicode(source, encoding='utf-8', errors='strict'):
    """

        Checks for unicode BOMs and PEP 263 encoding declarations. Then returns a
        unicode object like in :py:meth:`bytes.decode`.

        :param encoding: See :py:meth:`bytes.decode` documentation.
        :param errors: See :py:meth:`bytes.decode` documentation. ``errors`` can be
            ``'strict'``, ``'replace'`` or ``'ignore'``.
    
    """
    def detect_encoding():
        """

                For the implementation of encoding definitions in Python, look at:
                - http://www.python.org/dev/peps/pep-0263/
                - http://docs.python.org/2/reference/lexical_analysis.html#encoding-declarations
        
        """
def version_info():
    """

        Returns a namedtuple of parso's version, similar to Python's
        ``sys.version_info``.
    
    """
def _parse_version(version):
    """
    r'(\d+)(?:\.(\d{1,2})(?:\.\d+)?)?((a|b|rc)\d)?$'
    """
def PythonVersionInfo(namedtuple('Version', 'major, minor')):
    """
    Can only compare to tuples of length 2.
    """
    def __eq__(self, other):
        """
        Can only compare to tuples of length 2.
        """
    def __ne__(self, other):
        """

            Checks for a valid version number (e.g. `3.8` or `2.7.1` or `3`) and
            returns a corresponding version info that is always two characters long in
            decimal.
    
        """
