def IndentationTypes(object):
    """
    '<%s>'
    """
    def get_latest_suite_node(self):
        """
         Figure out here what the indentation is. For chained brackets
         we can basically use the previous indentation.

        """
def ImplicitNode(BracketNode):
    """

        Implicit indentation after keyword arguments, default arguments,
        annotations and dict values.
    
    """
    def __init__(self, config, leaf, parent):
        """
        ':'
        """
def BackslashNode(IndentationNode):
    """
    'expr_stmt'
    """
def _is_magic_name(name):
    """
    '__'
    """
def PEP8Normalizer(ErrorFinder):
    """
     The top of stack of the indentation nodes.

    """
    def visit_node(self, node):
        """
        'import_name'
        """
    def _check_tabs_spaces(self, spacing):
        """
        'Indentation contains '
        """
    def _get_wanted_blank_lines_count(self):
        """
         Need to substract one

        """
    def visit_leaf(self, leaf):
        """
        'spacing'
        """
    def _visit_part(self, part, spacing, leaf):
        """
        'error_leaf'
        """
    def _check_line_length(self, part, spacing):
        """
        'backslash'
        """
    def _check_spacing(self, part, spacing):
        """
        'error_leaf'
        """
    def _analyse_non_prefix(self, leaf):
        """
        'name'
        """
    def add_issue(self, node, code, message):
        """
        'error_node'
        """
def PEP8NormalizerConfig(ErrorFinderConfig):
    """

        Normalizing to PEP8. Not really implemented, yet.
    
    """
2021-03-02 20:52:41,448 : INFO : tokenize_signature : --> do i ever get here?
    def __init__(self, indentation=' ' * 4, hanging_indentation=None,
                 max_characters=79, spaces_before_comment=2):
        """
        ''
        """
def BlankLineAtEnd(Rule):
    """
    'Blank line at end of file'
    """
    def is_issue(self, leaf):
