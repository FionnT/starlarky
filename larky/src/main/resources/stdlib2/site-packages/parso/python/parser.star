def Parser(BaseParser):
    """

        This class is used to parse a Python file, it then divides them into a
        class structure of different scopes.

        :param pgen_grammar: The grammar object of pgen2. Loaded by load_grammar.
    
    """
    def __init__(self, pgen_grammar, error_recovery=True, start_nonterminal='file_input'):
        """
        'file_input'
        """
    def convert_node(self, nonterminal, children):
        """

                Convert raw node information to a PythonBaseNode instance.

                This is passed to the parser driver which calls it whenever a reduction of a
                grammar rule produces a new complete node, so that the tree is build
                strictly bottom-up.
        
        """
    def convert_leaf(self, type, value, prefix, start_pos):
        """
         print('leaf', repr(value), token.tok_name[type])

        """
    def error_recovery(self, token):
        """
        'file_input'
        """
        def current_suite(stack):
            """
             For now just discard everything that is not a suite or
             file_input, if we detect an error.

            """
    def _stack_removal(self, start_index):
        """
         We need to count indents, because if we just omit any DEDENT,
         we might omit them in the wrong place.

        """
