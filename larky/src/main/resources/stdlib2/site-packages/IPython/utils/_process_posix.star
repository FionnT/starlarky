def _find_cmd(cmd):
    """
    Find the full path to a command using which.
    """
def ProcessHandler(object):
    """
    Execute subprocesses under the control of pexpect.
    
    """
    def sh(self):
        """
        SHELL
        """
    def __init__(self, logfile=None, read_timeout=None, terminate_timeout=None):
        """
        Arguments are used for pexpect calls.
        """
    def getoutput(self, cmd):
        """
        Run a command and return its stdout/stderr as a string.

                Parameters
                ----------
                cmd : str
                  A command to be executed in the system shell.

                Returns
                -------
                output : str
                  A string containing the combination of stdout and stderr from the
                subprocess, in whatever order the subprocess originally wrote to its
                file descriptors (so the order of the information in this string is the
                correct order as would be seen if running the command in a terminal).
        
        """
    def getoutput_pexpect(self, cmd):
        """
        Run a command and return its stdout/stderr as a string.

                Parameters
                ----------
                cmd : str
                  A command to be executed in the system shell.

                Returns
                -------
                output : str
                  A string containing the combination of stdout and stderr from the
                subprocess, in whatever order the subprocess originally wrote to its
                file descriptors (so the order of the information in this string is the
                correct order as would be seen if running the command in a terminal).
        
        """
    def system(self, cmd):
        """
        Execute a command in a subshell.

                Parameters
                ----------
                cmd : str
                  A command to be executed in the system shell.

                Returns
                -------
                int : child's exitstatus
        
        """
def check_pid(pid):
    """
     Don't have permission to signal the process - probably means it exists

    """
