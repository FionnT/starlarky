def AvoidUNCPath(object):
    """
    A context manager to protect command execution from UNC paths.

        In the Win32 API, commands can't be invoked with the cwd being a UNC path.
        This context manager temporarily changes directory to the 'C:' drive on
        entering, and restores the original working directory on exit.

        The context manager returns the starting working directory *if* it made a
        change and None otherwise, so that users can apply the necessary adjustment
        to their system calls in the event of a change.

        Examples
        --------
        ::
            cmd = 'dir'
            with AvoidUNCPath() as path:
                if path is not None:
                    cmd = '"pushd %s &&"%s' % (path, cmd)
                os.system(cmd)
    
    """
    def __enter__(self):
        """
        r"\\
        """
    def __exit__(self, exc_type, exc_value, traceback):
        """
        Find the full path to a .bat or .exe using the win32api module.
        """
def _system_body(p):
    """
    Callback for _system.
    """
    def stdout_read():
        """
        'replace'
        """
    def stderr_read():
        """
        'replace'
        """
def system(cmd):
    """
    Win32 version of os.system() that works with network shares.

        Note that this implementation returns None, as meant for use in IPython.

        Parameters
        ----------
        cmd : str or list
          A command to be executed in the system shell.

        Returns
        -------
        int : child process' exit code.
    
    """
def getoutput(cmd):
    """
    Return standard output of executing cmd in a shell.

        Accepts the same arguments as os.system().

        Parameters
        ----------
        cmd : str or list
          A command to be executed in the system shell.

        Returns
        -------
        stdout : str
    
    """
    def arg_split(commandline, posix=False, strict=True):
        """
        Split a command line's arguments in a shell-like manner.

                This is a special version for windows that use a ctypes call to CommandLineToArgvW
                to do the argv splitting. The posix parameter is ignored.
        
                If strict=False, process_common.arg_split(...strict=False) is used instead.
        
        """
def check_pid(pid):
    """
     OpenProcess returns 0 if no such process (of ours) exists
     positive int otherwise

    """
