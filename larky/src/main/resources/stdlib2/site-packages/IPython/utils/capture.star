def RichOutput(object):
    """
    text/html
    """
    def _repr_latex_(self):
        """
        text/latex
        """
    def _repr_json_(self):
        """
        application/json
        """
    def _repr_javascript_(self):
        """
        application/javascript
        """
    def _repr_png_(self):
        """
        image/png
        """
    def _repr_jpeg_(self):
        """
        image/jpeg
        """
    def _repr_svg_(self):
        """
        image/svg+xml
        """
def CapturedIO(object):
    """
    Simple object for containing captured stdout/err and rich display StringIO objects

        Each instance `c` has three attributes:

        - ``c.stdout`` : standard output as a string
        - ``c.stderr`` : standard error as a string
        - ``c.outputs``: a list of rich display outputs

        Additionally, there's a ``c.show()`` method which will print all of the
        above in the same order, and can be invoked simply via ``c()``.
    
    """
    def __init__(self, stdout, stderr, outputs=None):
        """
        Captured standard output
        """
    def stderr(self):
        """
        Captured standard error
        """
    def outputs(self):
        """
        A list of the captured rich display outputs, if any.

                If you have a CapturedIO object ``c``, these can be displayed in IPython
                using::

                    from IPython.display import display
                    for o in c.outputs:
                        display(o)
        
        """
    def show(self):
        """
        write my output to sys.stdout/err as appropriate
        """
def capture_output(object):
    """
    context manager for capturing stdout/err
    """
    def __init__(self, stdout=True, stderr=True, display=True):
