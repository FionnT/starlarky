def SECURITY_ATTRIBUTES(ctypes.Structure):
    """
    nLength
    """
def STARTUPINFO(ctypes.Structure):
    """
    cb
    """
def PROCESS_INFORMATION(ctypes.Structure):
    """
    hProcess
    """
def AvoidUNCPath(object):
    """
    A context manager to protect command execution from UNC paths.

        In the Win32 API, commands can't be invoked with the cwd being a UNC path.
        This context manager temporarily changes directory to the 'C:' drive on
        entering, and restores the original working directory on exit.

        The context manager returns the starting working directory *if* it made a
        change and None otherwise, so that users can apply the necessary adjustment
        to their system calls in the event of a change.

        Examples
        --------
        ::
            cmd = 'dir'
            with AvoidUNCPath() as path:
                if path is not None:
                    cmd = '"pushd %s &&"%s' % (path, cmd)
                os.system(cmd)
    
    """
    def __enter__(self):
        """
        r"\\
        """
    def __exit__(self, exc_type, exc_value, traceback):
        """
        Runs a shell command in a 'with' context.

            This implementation is Win32-specific.

            Example:
                # Runs the command interactively with default console stdin/stdout
                with ShellCommandController('python -i') as scc:
                    scc.run()

                # Runs the command using the provided functions for stdin/stdout
                def my_stdout_func(s):
                    # print or save the string 's'
                    write_to_stdout(s)
                def my_stdin_func():
                    # If input is available, return it as a string.
                    if input_available():
                        return get_input()
                    # If no input available, return None after a short delay to
                    # keep from blocking.
                    else:
                        time.sleep(0.01)
                        return None
      
                with ShellCommandController('python -i') as scc:
                    scc.run(my_stdout_func, my_stdin_func)
    
        """
    def __init__(self, cmd, mergeout = True):
        """
        Initializes the shell command controller.

                The cmd is the program to execute, and mergeout is
                whether to blend stdout and stderr into one output
                in stdout. Merging them together in this fashion more
                reliably keeps stdout and stderr in the correct order
                especially for interactive shell usage.
        
        """
    def __enter__(self):
        """
         SECURITY_ATTRIBUTES with inherit handle set to True

        """
            def create_pipe(uninherit):
                """
                Creates a Windows pipe, which consists of two handles.

                                The 'uninherit' parameter controls which handle is not
                                inherited by the child process.
                
                """
    def _stdin_thread(self, handle, hprocess, func, stdout_func):
        """
        print("stdin thread loop start")
         Get the input string (may be bytes or unicode)

        """
    def _stdout_thread(self, handle, func):
        """
         Allocate the output buffer

        """
    def run(self, stdout_func = None, stdin_func = None, stderr_func = None):
        """
        Runs the process, using the provided functions for I/O.

                The function stdin_func should return strings whenever a
                character or characters become available.
                The functions stdout_func and stderr_func are called whenever
                something is printed to stdout or stderr, respectively.
                These functions are called from different threads (but not
                concurrently, because of the GIL).
        
        """
    def _stdin_raw_nonblock(self):
        """
        Use the raw Win32 handle of sys.stdin to do non-blocking reads
        """
    def _stdin_raw_block(self):
        """
        Use a blocking stdin read
        """
    def _stdout_raw(self, s):
        """
        Writes the string to stdout
        """
    def _stderr_raw(self, s):
        """
        Writes the string to stdout
        """
    def _run_stdio(self):
        """
        Runs the process using the system standard I/O.

                IMPORTANT: stdin needs to be asynchronous, so the Python
                           sys.stdin object is not used. Instead,
                           msvcrt.kbhit/getwch are used asynchronously.
        
        """
    def __exit__(self, exc_type, exc_value, traceback):
        """
        Win32 version of os.system() that works with network shares.

            Note that this implementation returns None, as meant for use in IPython.

            Parameters
            ----------
            cmd : str
              A command to be executed in the system shell.

            Returns
            -------
            None : we explicitly do NOT return the subprocess status code, as this
            utility is meant to be used extensively in IPython, where any return value
            would trigger :func:`sys.displayhook` calls.
    
        """
