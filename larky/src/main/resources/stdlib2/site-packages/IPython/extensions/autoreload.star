def ModuleReloader(object):
    """
    Whether this reloader is enabled
    """
    def __init__(self):
        """
         Modules that failed to reload: {module: mtime-on-failed-reload, ...}

        """
    def mark_module_skipped(self, module_name):
        """
        Skip reloading the named module in the future
        """
    def mark_module_reloadable(self, module_name):
        """
        Reload the named module in the future (if it is imported)
        """
    def aimport_module(self, module_name):
        """
        Import a module, and mark it reloadable

                Returns
                -------
                top_module : module
                    The imported module if it is top-level, or the top-level
                top_name : module
                    Name of top_module

        
        """
    def filename_and_mtime(self, module):
        """
        '__file__'
        """
    def check(self, check_all=False, do_reload=True):
        """
        Check whether some modules need to be reloaded.
        """
def update_function(old, new):
    """
    Upgrade the code object of a function
    """
def update_instances(old, new):
    """
    Use garbage collector to find all instances that refer to the old
        class definition and update their __class__ to point to the new class
        definition
    """
def update_class(old, new):
    """
    Replace stuff in the __dict__ of a class, and upgrade
        method code objects, and add new methods, if any
    """
def update_property(old, new):
    """
    Replace get/set/del functions of a property
    """
def isinstance2(a, b, typ):
    """
    Enhanced version of the builtin reload function.

        superreload remembers objects previously in the module, and

        - upgrades the class dictionary of every old class in the module
        - upgrades the code object of every old function and method
        - clears the module's namespace before reloading

    
    """
def AutoreloadMagics(Magics):
    """
    ''
    """
    def aimport(self, parameter_s='', stream=None):
        """
        %aimport => Import modules for automatic reloading.

                %aimport
                List modules to automatically import and not to import.

                %aimport foo
                Import module 'foo' and mark it to be autoreloaded for %autoreload 1

                %aimport foo, bar
                Import modules 'foo', 'bar' and mark them to be autoreloaded for %autoreload 1

                %aimport -foo
                Mark module 'foo' to not be autoreloaded for %autoreload 1
        
        """
    def pre_run_cell(self):
        """
        Cache the modification times of any modules imported in this execution
        
        """
def load_ipython_extension(ip):
    """
    Load the extension in IPython.
    """
