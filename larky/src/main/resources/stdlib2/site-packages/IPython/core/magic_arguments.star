def MagicHelpFormatter(argparse.RawDescriptionHelpFormatter):
    """
    A HelpFormatter with a couple of changes to meet our needs.
    
    """
    def _fill_text(self, text, width, indent):
        """
         Modified to wrap argument placeholders in <> where necessary.

        """
    def _format_action_invocation(self, action):
        """
         if the Optional doesn't take a value, format is:
            -s, --long

        """
    def add_usage(self, usage, actions, groups, prefix="::\n\n  %"):
        """
         An ArgumentParser tweaked for use by IPython magics.
    
        """
2021-03-02 20:49:20,576 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:49:20,576 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:49:20,576 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:49:20,576 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:49:20,576 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:49:20,576 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:49:20,576 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:49:20,576 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:49:20,577 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:49:20,577 : INFO : tokenize_signature : --> do i ever get here?
    def __init__(self,
                 prog=None,
                 usage=None,
                 description=None,
                 epilog=None,
                 parents=None,
                 formatter_class=MagicHelpFormatter,
                 prefix_chars='-',
                 argument_default=None,
                 conflict_handler='error',
                 add_help=False):
        """
         Raise a catchable error instead of exiting.
        
        """
    def parse_argstring(self, argstring):
        """
         Split a string into an argument list and parse that argument list.
        
        """
def construct_parser(magic_func):
    """
     Construct an argument parser using the function decorations.
    
    """
def parse_argstring(magic_func, argstring):
    """
     Parse the string of arguments for the given magic function.
    
    """
def real_name(magic_func):
    """
     Find the real name of the magic.
    
    """
def ArgDecorator(object):
    """
     Base class for decorators to add ArgumentParser information to a method.
    
    """
    def __call__(self, func):
        """
        'has_arguments'
        """
    def add_to_parser(self, parser, group):
        """
         Add this object's information to the parser, if necessary.
        
        """
def magic_arguments(ArgDecorator):
    """
     Mark the magic as having argparse arguments and possibly adjust the
        name.
    
    """
    def __init__(self, name=None):
        """
        'has_arguments'
        """
def ArgMethodWrapper(ArgDecorator):
    """

        Base class to define a wrapper for ArgumentParser method.

        Child class must define either `_method_name` or `add_to_parser`.

    
    """
    def __init__(self, *args, **kwds):
        """
         Add this object's information to the parser.
        
        """
def argument(ArgMethodWrapper):
    """
     Store arguments and keywords to pass to add_argument().

        Instances also serve to decorate command methods.
    
    """
def defaults(ArgMethodWrapper):
    """
     Store arguments and keywords to pass to set_defaults().

        Instances also serve to decorate command methods.
    
    """
def argument_group(ArgMethodWrapper):
    """
     Store arguments and keywords to pass to add_argument_group().

        Instances also serve to decorate command methods.
    
    """
    def add_to_parser(self, parser, group):
        """
         Add this object's information to the parser.
        
        """
def kwds(ArgDecorator):
    """
     Provide other keywords to the sub-parser constructor.
    
    """
    def __init__(self, **kwds):
        """
        'magic_arguments'
        """
