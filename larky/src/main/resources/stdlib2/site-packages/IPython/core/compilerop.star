def code_name(code, number=0):
    """
     Compute a (probably) unique name for code for caching.

        This now expects code to be unicode.
    
    """
def CachingCompiler(codeop.Compile):
    """
    A compiler that caches code compiled from interactive statements.
    
    """
    def __init__(self):
        """
         This is ugly, but it must be done this way to allow multiple
         simultaneous ipython instances to coexist.  Since Python itself
         directly accesses the data structures in the linecache module, and
         the cache therein is global, we must work with that data structure.
         We must hold a reference to the original checkcache routine and call
         that in our own check_cache() below, but the special IPython cache
         must also be shared by all IPython instances.  If we were to hold
         separate caches (one in each CachingCompiler instance), any call made
         by Python itself to linecache.checkcache() would obliterate the
         cached data from the other IPython instances.

        """
    def ast_parse(self, source, filename='<unknown>', symbol='exec'):
        """
        Parse code to an AST with the current compiler flags active.

                Arguments are exactly the same as ast.parse (in the standard library),
                and are passed to the built-in compile function.
        """
    def reset_compiler_flags(self):
        """
        Reset compiler flags to default state.
        """
    def compiler_flags(self):
        """
        Flags currently active in the compilation process.
        
        """
    def cache(self, code, number=0):
        """
        Make a name for a block of code, and cache the code.

                Parameters
                ----------
                code : str
                  The Python source code to cache.
                number : int
                  A number which forms part of the code's name. Used for the execution
                  counter.

                Returns
                -------
                The name of the cached code (as a string). Pass this as the filename
                argument to compilation, so that tracebacks are correctly hooked up.
        
        """
    def extra_flags(self, flags):
        """
         bits that we'll set to 1

        """
def check_linecache_ipython(*args):
    """
    Call linecache.checkcache() safely protecting our cached values.
    
    """
