def InteractiveShellApp(Configurable):
    """
    A Mixin for applications that start InteractiveShell instances.

        Provides configurables for loading extensions and executing files
        as part of configuring a Shell environment.

        The following methods should be called by the :meth:`initialize` method
        of the subclass:

          - :meth:`init_path`
          - :meth:`init_shell` (to be implemented by the subclass)
          - :meth:`init_gui_pylab`
          - :meth:`init_extensions`
          - :meth:`init_code`
    
    """
    def _user_ns_changed(self, change):
        """
        'new'
        """
    def init_path(self):
        """
        Add current working directory, '', to sys.path

                Unlike Python's default, we insert before the first `site-packages`
                or `dist-packages` directory,
                so that it is after the standard library.

                .. versionchanged:: 7.2
                    Try to insert after the standard library, instead of first.
                .. versionchanged:: 8.0
                    Allow optionally not including the current directory in sys.path
        
        """
    def init_shell(self):
        """
        Override in subclasses
        """
    def init_gui_pylab(self):
        """
        Enable GUI event loop integration, taking pylab into account.
        """
    def init_extensions(self):
        """
        Load all IPython extensions in IPythonApp.extensions.

                This uses the :meth:`ExtensionManager.load_extensions` to load all
                the extensions listed in ``self.extensions``.
        
        """
    def init_code(self):
        """
        run the pre-flight code, specified via exec_lines
        """
    def _run_exec_lines(self):
        """
        Run lines of code in IPythonApp.exec_lines in the user's namespace.
        """
    def _exec_file(self, fname, shell_futures=False):
        """
        u'.'
        """
    def _run_startup_files(self):
        """
        Run files from profile startup directory
        """
    def _run_exec_files(self):
        """
        Run files from IPythonApp.exec_files
        """
    def _run_cmd_line_code(self):
        """
        Run code or file specified at the command-line
        """
    def _run_module(self):
        """
        Run module specified at the command-line.
        """
