def DummyDB(object):
    """
    Dummy DB that will act as a black hole for history.
    
        Only used in the absence of sqlite
    """
    def execute(*args, **kwargs):
        """
        Decorator: return an empty list in the absence of sqlite.
        """
    def DatabaseError(Exception):
    """
    Dummy exception when sqlite could not be imported. Should never occur.
    """
    def OperationalError(Exception):
    """
    Dummy exception when sqlite could not be imported. Should never occur.
    """
def catch_corrupt_db(f, self, *a, **kw):
    """
    A decorator which wraps HistoryAccessor method calls to catch errors from
        a corrupt SQLite database, move the old database out of the way, and create
        a new one.

        We avoid clobbering larger databases because this may be triggered due to filesystem issues,
        not just a corrupt file.
    
    """
def HistoryAccessorBase(LoggingConfigurable):
    """
    An abstract class for History Accessors 
    """
    def get_tail(self, n=10, raw=True, output=False, include_latest=False):
        """
        *
        """
    def get_range(self, session, start=1, stop=None, raw=True,output=False):
        """
        Access the history database without adding to it.
    
            This is intended for use by standalone history tools. IPython shells use
            HistoryManager, below, which is a subclass of this.
        """
    def _db_changed(self, change):
        """
        validate the db, since it can be an Instance of two different types
        """
    def __init__(self, profile='default', hist_file=u'', **traits):
        """
        Create a new history accessor.
        
                Parameters
                ----------
                profile : str
                  The name of the profile from which to open history.
                hist_file : str
                  Path to an SQLite history database stored by IPython. If specified,
                  hist_file overrides profile.
                config : :class:`~traitlets.config.loader.Config`
                  Config object. hist_file can also be set through this.
        
        """
    def _get_hist_file_name(self, profile='default'):
        """
        Find the history file for the given profile name.
        
                This is overridden by the HistoryManager subclass, to use the shell's
                active profile.
        
                Parameters
                ----------
                profile : str
                  The name of a profile which has a history file.
        
        """
    def init_db(self):
        """
        Connect to the database, and create tables if necessary.
        """
    def writeout_cache(self):
        """
        Overridden by HistoryManager to dump the cache before certain
                database lookups.
        """
    def _run_sql(self, sql, params, raw=True, output=False):
        """
        Prepares and runs an SQL query for the history database.

                Parameters
                ----------
                sql : str
                  Any filtering expressions to go after SELECT ... FROM ...
                params : tuple
                  Parameters passed to the SQL query (to replace "?")
                raw, output : bool
                  See :meth:`get_range`

                Returns
                -------
                Tuples as :meth:`get_range`
        
        """
    def get_session_info(self, session):
        """
        Get info about a session.

                Parameters
                ----------

                session : int
                    Session number to retrieve.

                Returns
                -------
        
                session_id : int
                   Session ID number
                start : datetime
                   Timestamp for the start of the session.
                end : datetime
                   Timestamp for the end of the session, or None if IPython crashed.
                num_cmds : int
                   Number of commands run, or None if IPython crashed.
                remark : unicode
                   A manually set description.
        
        """
    def get_last_session_id(self):
        """
        Get the last session ID currently in the database.
        
                Within IPython, this should be the same as the value stored in
                :attr:`HistoryManager.session_number`.
        
        """
    def get_tail(self, n=10, raw=True, output=False, include_latest=False):
        """
        Get the last n lines from the history database.

                Parameters
                ----------
                n : int
                  The number of lines to get
                raw, output : bool
                  See :meth:`get_range`
                include_latest : bool
                  If False (default), n+1 lines are fetched, and the latest one
                  is discarded. This is intended to be used where the function
                  is called by a user command, which it should not return.

                Returns
                -------
                Tuples as :meth:`get_range`
        
        """
2021-03-02 20:49:21,450 : INFO : tokenize_signature : --> do i ever get here?
    def search(self, pattern="*", raw=True, search_raw=True,
               output=False, n=None, unique=False):
        """
        Search the database using unix glob-style matching (wildcards
                * and ?).

                Parameters
                ----------
                pattern : str
                  The wildcarded pattern to match when searching
                search_raw : bool
                  If True, search the raw input, otherwise, the parsed input
                raw, output : bool
                  See :meth:`get_range`
                n : None or int
                  If an integer is given, it defines the limit of
                  returned entries.
                unique : bool
                  When it is true, return only unique entries.

                Returns
                -------
                Tuples as :meth:`get_range`
        
        """
    def get_range(self, session, start=1, stop=None, raw=True,output=False):
        """
        Retrieve input by session.

                Parameters
                ----------
                session : int
                    Session number to retrieve.
                start : int
                    First line to retrieve.
                stop : int
                    End of line range (excluded from output itself). If None, retrieve
                    to the end of the session.
                raw : bool
                    If True, return untranslated input
                output : bool
                    If True, attempt to include output. This will be 'real' Python
                    objects for the current session, or text reprs from previous
                    sessions if db_log_output was enabled at the time. Where no output
                    is found, None is used.

                Returns
                -------
                entries
                  An iterator over the desired lines. Each line is a 3-tuple, either
                  (session, line, input) if output is False, or
                  (session, line, (input, output)) if output is True.
        
        """
    def get_range_by_str(self, rangestr, raw=True, output=False):
        """
        Get lines of history from a string of ranges, as used by magic
                commands %hist, %save, %macro, etc.

                Parameters
                ----------
                rangestr : str
                  A string specifying ranges, e.g. "5 ~2/1-4". See
                  :func:`magic_history` for full details.
                raw, output : bool
                  As :meth:`get_range`

                Returns
                -------
                Tuples as :meth:`get_range`
        
        """
def HistoryManager(HistoryAccessor):
    """
    A class to organize all history-related functionality in one place.
    
    """
    def _dir_hist_default(self):
        """
         A dict of output history, keyed with ints from the shell's
         execution count.

        """
    def __init__(self, shell=None, config=None, **traits):
        """
        Create a new history manager associated with a shell instance.
        
        """
    def _get_hist_file_name(self, profile=None):
        """
        Get default history file name based on the Shell's profile.
        
                The profile parameter is ignored, but must exist for compatibility with
                the parent class.
        """
    def new_session(self, conn=None):
        """
        Get a new session number.
        """
    def end_session(self):
        """
        Close the database session, filling in the end time and line count.
        """
    def name_session(self, name):
        """
        Give the current session a name in the history database.
        """
    def reset(self, new_session=True):
        """
        Clear the session history, releasing all object references, and
                optionally open a new session.
        """
    def get_session_info(self, session=0):
        """
        Get info about a session.

                Parameters
                ----------

                session : int
                    Session number to retrieve. The current session is 0, and negative
                    numbers count back from current session, so -1 is the previous session.

                Returns
                -------
        
                session_id : int
                   Session ID number
                start : datetime
                   Timestamp for the start of the session.
                end : datetime
                   Timestamp for the end of the session, or None if IPython crashed.
                num_cmds : int
                   Number of commands run, or None if IPython crashed.
                remark : unicode
                   A manually set description.
        
        """
    def _get_range_session(self, start=1, stop=None, raw=True, output=False):
        """
        Get input and output history from the current session. Called by
                get_range, and takes similar parameters.
        """
    def get_range(self, session=0, start=1, stop=None, raw=True,output=False):
        """
        Retrieve input by session.
        
                Parameters
                ----------
                session : int
                    Session number to retrieve. The current session is 0, and negative
                    numbers count back from current session, so -1 is previous session.
                start : int
                    First line to retrieve.
                stop : int
                    End of line range (excluded from output itself). If None, retrieve
                    to the end of the session.
                raw : bool
                    If True, return untranslated input
                output : bool
                    If True, attempt to include output. This will be 'real' Python
                    objects for the current session, or text reprs from previous
                    sessions if db_log_output was enabled at the time. Where no output
                    is found, None is used.
            
                Returns
                -------
                entries
                  An iterator over the desired lines. Each line is a 3-tuple, either
                  (session, line, input) if output is False, or
                  (session, line, (input, output)) if output is True.
        
        """
    def store_inputs(self, line_num, source, source_raw=None):
        """
        Store source and raw input in history and create input cache
                variables ``_i*``.

                Parameters
                ----------
                line_num : int
                  The prompt number of this input.

                source : str
                  Python input.

                source_raw : str, optional
                  If given, this is the raw input without any IPython transformations
                  applied to it.  If not given, ``source`` is used.
        
        """
    def store_output(self, line_num):
        """
        If database output logging is enabled, this saves all the
                outputs from the indicated prompt number to the database. It's
                called by run_cell after code has been executed.

                Parameters
                ----------
                line_num : int
                  The line number from which to save outputs
        
        """
    def _writeout_input_cache(self, conn):
        """
        INSERT INTO history VALUES (?, ?, ?, ?)
        """
    def _writeout_output_cache(self, conn):
        """
        INSERT INTO output_history VALUES (?, ?, ?)
        """
    def writeout_cache(self, conn=None):
        """
        Write any entries in the cache to the database.
        """
def HistorySavingThread(threading.Thread):
    """
    This thread takes care of writing history to the database, so that
        the UI isn't held up while that happens.

        It waits for the HistoryManager's save_flag to be set, then writes out
        the history cache. The main thread is responsible for setting the flag when
        the cache size reaches a defined threshold.
    """
    def __init__(self, history_manager):
        """
        IPythonHistorySavingThread
        """
    def run(self):
        """
         We need a separate db connection per thread:

        """
    def stop(self):
        """
        This can be called from the main thread to safely stop this thread.

                Note that it does not attempt to write out remaining history before
                exiting. That should be done by calling the HistoryManager's
                end_session method.
        """
def extract_hist_ranges(ranges_str):
    """
    Turn a string of history ranges into 3-tuples of (session, start, stop).

        Examples
        --------
        >>> list(extract_hist_ranges("~8/5-~7/4 2"))
        [(-8, 5, None), (-7, 1, 5), (0, 2, 3)]
    
    """
def _format_lineno(session, line):
    """
    Helper function to format line numbers properly.
    """
