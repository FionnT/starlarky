def CrashHandler(object):
    """
    Customizable crash handlers for IPython applications.

        Instances of this class provide a :meth:`__call__` method which can be
        used as a ``sys.excepthook``.  The :meth:`__call__` signature is::

            def __call__(self, etype, evalue, etb)
    
    """
2021-03-02 20:49:21,094 : INFO : tokenize_signature : --> do i ever get here?
    def __init__(self, app, contact_name=None, contact_email=None,
                 bug_tracker=None, show_crash_traceback=True, call_pdb=False):
        """
        Create a new crash handler

                Parameters
                ----------
                app :  Application
                    A running :class:`Application` instance, which will be queried at
                    crash time for internal information.

                contact_name : str
                    A string with the name of the person to contact.

                contact_email : str
                    A string with the email address of the contact.

                bug_tracker : str
                    A string with the URL for your project's bug tracker.

                show_crash_traceback : bool
                    If false, don't print the crash traceback on stderr, only generate
                    the on-disk report

                Non-argument instance attributes:

                These instances contain some non-argument attributes which allow for
                further customization of the crash handler's behavior. Please see the
                source for further details.
        
        """
    def __call__(self, etype, evalue, etb):
        """
        Handle an exception, call for compatible with sys.excepthook
        """
    def make_report(self,traceback):
        """
        Return a string containing a crash report.
        """
def crash_handler_lite(etype, evalue, tb):
    """
    a light excepthook, adding a small message to the usual traceback
    """
