def ProfileDirError(Exception):
    """
    -----------------------------------------------------------------------------
     Class for managing profile directories
    -----------------------------------------------------------------------------


    """
def ProfileDir(LoggingConfigurable):
    """
    An object to manage the profile directory and its resources.

        The profile directory is used by all IPython applications, to manage
        configuration, logging and security.

        This object knows how to find, create and manage these directories. This
        should be used by any code that wants to handle profiles.
    
    """
    def _location_changed(self, change):
        """
        Cannot set profile location more than once.
        """
    def _mkdir(self, path, mode=None):
        """
        ensure a directory exists at a given path

                This is a version of os.mkdir, with the following differences:

                - returns True if it created the directory, False otherwise
                - ignores EEXIST, protecting against race conditions where
                  the dir may have been created in between the check and
                  the creation
                - sets permissions if requested and the dir already exists
        
        """
    def check_log_dir(self, change=None):
        """
        'startup_dir'
        """
    def check_startup_dir(self, change=None):
        """
        'README'
        """
    def check_security_dir(self, change=None):
        """
        'pid_dir'
        """
    def check_pid_dir(self, change=None):
        """
        Copy a default config file into the active profile directory.

                Default configuration files are kept in :mod:`IPython.core.profile`.
                This function moves these from that location to the working profile
                directory.
        
        """
    def create_profile_dir(cls, profile_dir, config=None):
        """
        Create a new profile directory given a full path.

                Parameters
                ----------
                profile_dir : str
                    The full path to the profile directory.  If it does exist, it will
                    be used.  If not, it will be created.
        
        """
    def create_profile_dir_by_name(cls, path, name=u'default', config=None):
        """
        Create a profile dir by profile name and path.

                Parameters
                ----------
                path : unicode
                    The path (directory) to put the profile directory in.
                name : unicode
                    The name of the profile.  The name of the profile directory will
                    be "profile_<profile>".
        
        """
    def find_profile_dir_by_name(cls, ipython_dir, name=u'default', config=None):
        """
        Find an existing profile dir by profile name, return its ProfileDir.

                This searches through a sequence of paths for a profile dir.  If it
                is not found, a :class:`ProfileDirError` exception will be raised.

                The search path algorithm is:
                1. ``os.getcwd()``
                2. ``ipython_dir``

                Parameters
                ----------
                ipython_dir : unicode or str
                    The IPython directory to use.
                name : unicode or str
                    The name of the profile.  The name of the profile directory
                    will be "profile_<profile>".
        
        """
    def find_profile_dir(cls, profile_dir, config=None):
        """
        Find/create a profile dir and return its ProfileDir.

                This will create the profile directory if it doesn't exist.

                Parameters
                ----------
                profile_dir : unicode or str
                    The path of the profile directory.
        
        """
