def Logger(object):
    """
    A Logfile class with different policies for file creation
    """
2021-03-02 20:49:16,410 : INFO : tokenize_signature : --> do i ever get here?
    def __init__(self, home_dir, logfname='Logger.log', loghead=u'',
                 logmode='over'):
        """
         this is the full ipython instance, we need some attributes from it
         which won't exist until later. What a mess, clean up later...

        """
    def _set_mode(self,mode):
        """
        'append'
        """
    def _get_mode(self):
        """
        Generate a new log-file with a default header.

                Raises RuntimeError if the log has already been started
        """
    def switch_log(self,val):
        """
        Switch logging on/off. val should be ONLY a boolean.
        """
    def logstate(self):
        """
        Print a status message about the logger.
        """
    def log(self, line_mod, line_ori):
        """
        Write the sources to a log.

                Inputs:

                - line_mod: possibly modified input, such as the transformations made
                  by input prefilters or input handlers of various kinds. This should
                  always be valid Python.

                - line_ori: unmodified input line from the user. This is not
                  necessarily valid Python.
        
        """
    def log_write(self, data, kind='input'):
        """
        Write data to the log file, if active
        """
    def logstop(self):
        """
        Fully stop logging and close log file.

                In order to start logging again, a new logstart() call needs to be
                made, possibly (though not necessarily) with a new filename, mode and
                other options.
        """
