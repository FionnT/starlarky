def inspect_error():
    """
    Print a message about internal inspect errors.

        These are unfortunately quite common.
    """
def findsource(object):
    """
    Return the entire source file and starting line number for an object.

        The argument may be a module, class, method, function, traceback, frame,
        or code object.  The source code is returned as a list of all the lines
        in the file and the line number indexes a line in that list.  An IOError
        is raised if the source code cannot be retrieved.

        FIXED version with which we monkeypatch the stdlib to work around a bug.
    """
def getargs(co):
    """
    Get information about the arguments accepted by a code object.

        Three things are returned: (args, varargs, varkw), where 'args' is
        a list of argument names (possibly containing nested lists), and
        'varargs' and 'varkw' are the names of the * and ** arguments or None.
    """
def with_patch_inspect(f):
    """

        Deprecated since IPython 6.0
        decorator for monkeypatching inspect.findsource
    
    """
    def wrapped(*args, **kwargs):
        """
        Try to fix the filenames in each record from inspect.getinnerframes().

            Particularly, modules loaded from within zip files have useless filenames
            attached to their code object, and inspect.getinnerframes() just uses it.
    
        """
def _fixed_getinnerframes(etb, context=1, tb_offset=0):
    """
     If the error is at the console, don't build any context, since it would
     otherwise produce 5 blank lines printed out (there is no file at the
     console)

    """
def _format_traceback_lines(lnum, index, lines, Colors, lvals, _line_format):
    """

        Format tracebacks lines with pointing arrow, leading numbers...

        Parameters
        ==========

        lnum: int
        index: int
        lines: list[string]
        Colors:
            ColorScheme used.
        lvals: bytes
            Values of local variables, already colored, to inject just after the error line.
        _line_format: f (str) -> (str, bool)
            return (colorized version of str, failure to do so)
    
    """
def is_recursion_error(etype, value, records):
    """
     RecursionError is new in Python 3.5

    """
def find_recursion(etype, value, records):
    """
    Identify the repeating stack frames from a RecursionError traceback

        'records' is a list as returned by VerboseTB.get_records()

        Returns (last_unique, repeat_length)
    
    """
def TBTools(colorable.Colorable):
    """
    Basic tools used by all traceback printer classes.
    """
    def __init__(self, color_scheme='NoColor', call_pdb=False, ostream=None, parent=None, config=None):
        """
         Whether to call the interactive pdb debugger after printing
         tracebacks or not

        """
    def _get_ostream(self):
        """
        Output stream that exceptions are written to.

                Valid values are:

                - None: the default, which means that IPython will dynamically resolve
                  to sys.stdout.  This ensures compatibility with most tools, including
                  Windows (where plain stdout doesn't recognize ANSI escapes).

                - Any object with 'write' and 'flush' attributes.
        
        """
    def _set_ostream(self, val):
        """
        'write'
        """
    def get_parts_of_chained_exception(self, evalue):
        """
        '__cause__'
        """
    def prepare_chained_exception_message(self, cause):
        """
        \nThe above exception was the direct cause of the following exception:\n
        """
    def set_colors(self, *args, **kw):
        """
        Shorthand access to the color table scheme selector method.
        """
    def color_toggle(self):
        """
        Toggle between the currently active color scheme and NoColor.
        """
    def stb2text(self, stb):
        """
        Convert a structured traceback (a list) to a string.
        """
    def text(self, etype, value, tb, tb_offset=None, context=5):
        """
        Return formatted traceback.

                Subclasses may override this if they add extra arguments.
        
        """
2021-03-02 20:49:16,971 : INFO : tokenize_signature : --> do i ever get here?
    def structured_traceback(self, etype, evalue, tb, tb_offset=None,
                             context=5, mode=None):
        """
        Return a list of traceback frames.

                Must be implemented by each class.
        
        """
def ListTB(TBTools):
    """
    Print traceback information from a traceback list, with optional color.

        Calling requires 3 arguments: (etype, evalue, elist)
        as would be obtained by::
    
          etype, evalue, tb = sys.exc_info()
          if tb:
            elist = traceback.extract_tb(tb)
          else:
            elist = None

        It can thus be used by programs which need to process the traceback before
        printing (such as console replacements based on the code module from the
        standard library).

        Because they are meant to be called without a full traceback (only a
        list), instances of this class can't call the interactive pdb debugger.
    """
    def __init__(self, color_scheme='NoColor', call_pdb=False, ostream=None, parent=None, config=None):
        """
        '\n'
        """
    def _extract_tb(self, tb):
        """
        Return a color formatted string with the traceback info.

                Parameters
                ----------
                etype : exception type
                  Type of the exception raised.

                evalue : object
                  Data stored in the exception

                etb : object
                  If list: List of frames, see class docstring for details.
                  If Traceback: Traceback of the exception.

                tb_offset : int, optional
                  Number of frames in the traceback to skip.  If not given, the
                  instance evalue is used (set in constructor).

                context : int, optional
                  Number of lines of context information to print.

                Returns
                -------
                String with formatted exception.
        
        """
    def _format_list(self, extracted_list):
        """
        Format a list of traceback entry tuples for printing.

                Given a list of tuples as returned by extract_tb() or
                extract_stack(), return a list of strings ready for printing.
                Each string in the resulting list corresponds to the item with the
                same index in the argument list.  Each string ends in a newline;
                the strings may contain internal newlines as well, for those items
                whose source text line is not None.

                Lifted almost verbatim from traceback.py
        
        """
    def _format_exception_only(self, etype, value):
        """
        Format the exception part of a traceback.

                The arguments are the exception type and value such as given by
                sys.exc_info()[:2]. The return value is a list of strings, each ending
                in a newline.  Normally, the list contains a single string; however,
                for SyntaxError exceptions, it contains several lines that (when
                printed) display detailed information about where the syntax error
                occurred.  The message indicating which exception occurred is the
                always last string in the list.

                Also lifted nearly verbatim from traceback.py
        
        """
    def get_exception_only(self, etype, value):
        """
        Only print the exception type and message, without a traceback.

                Parameters
                ----------
                etype : exception type
                value : exception value
        
        """
    def show_exception_only(self, etype, evalue):
        """
        Only print the exception type and message, without a traceback.

                Parameters
                ----------
                etype : exception type
                value : exception value
        
        """
    def _some_str(self, value):
        """
         Lifted from traceback.py

        """
def VerboseTB(TBTools):
    """
    A port of Ka-Ping Yee's cgitb.py module that outputs color text instead
        of HTML.  Requires inspect and pydoc.  Crazy, man.

        Modified version which optionally strips the topmost entries from the
        traceback, to be used with alternate interpreters (because their own code
        would appear in the traceback).
    """
2021-03-02 20:49:16,977 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:49:16,977 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:49:16,977 : INFO : tokenize_signature : --> do i ever get here?
    def __init__(self, color_scheme='Linux', call_pdb=False, ostream=None,
                 tb_offset=0, long_header=False, include_vars=True,
                 check_cache=None, debugger_cls = None,
                 parent=None, config=None):
        """
        Specify traceback offset, headers and color scheme.

                Define how many frames to drop from the tracebacks. Calling it with
                tb_offset=1 allows use of this handler in interpreters which will have
                their own code at the top of the traceback (VerboseTB will first
                remove that frame before printing the traceback info).
        """
    def format_records(self, records, last_unique, recursion_repeat):
        """
        Format the stack frames of the traceback
        """
    def format_record(self, frame, file, lnum, func, lines, index):
        """
        Format a single stack frame
        """
        def linereader(file=file, lnum=[lnum], getline=linecache.getline):
            """
             Build the list of names on this line of code where the exception
             occurred.

            """
    def prepare_header(self, etype, long_version=False):
        """
         just a shorthand + quicker name lookup
        """
    def format_exception(self, etype, evalue):
        """
         just a shorthand + quicker name lookup
        """
    def format_exception_as_a_whole(self, etype, evalue, etb, number_of_lines_of_context, tb_offset):
        """
        Formats the header, traceback and exception message for a single exception.

                This may be called multiple times by Python 3 exception chaining
                (PEP 3134).
        
        """
    def get_records(self, etb, number_of_lines_of_context, tb_offset):
        """
         Try the default getinnerframes and Alex's: Alex's fixes some
         problems, but it generates empty tracebacks for console errors
         (5 blanks lines) where none should be returned.

        """
2021-03-02 20:49:16,986 : INFO : tokenize_signature : --> do i ever get here?
    def structured_traceback(self, etype, evalue, etb, tb_offset=None,
                             number_of_lines_of_context=5):
        """
        Return a nice text document describing the traceback.
        """
    def debugger(self, force=False):
        """
        Call up the pdb debugger if desired, always clean up the tb
                reference.

                Keywords:

                  - force(False): by default, this routine checks the instance call_pdb
                    flag and does not actually invoke the debugger if the flag is false.
                    The 'force' option forces the debugger to activate even if the flag
                    is false.

                If the call_pdb flag is set, the pdb interactive debugger is
                invoked. In all cases, the self.tb reference to the current traceback
                is deleted to prevent lingering references which hamper memory
                management.

                Note that each call to pdb() does an 'import readline', so if your app
                requires a special setup for the readline completers, you'll have to
                fix that by hand after invoking the exception handler.
        """
    def handler(self, info=None):
        """
        '\n'
        """
    def __call__(self, etype=None, evalue=None, etb=None):
        """
        This hook can replace sys.excepthook (for Python 2.1 or higher).
        """
def FormattedTB(VerboseTB, ListTB):
    """
    Subclass ListTB but allow calling with a traceback.

        It can thus be used as a sys.excepthook for Python > 2.1.

        Also adds 'Context' and 'Verbose' modes, not available in ListTB.

        Allows a tb_offset to be specified. This is useful for situations where
        one needs to remove a number of topmost frames from the traceback (such as
        occurs with python programs that themselves execute other python code,
        like Python shells).  
    """
2021-03-02 20:49:16,991 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:49:16,991 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:49:16,991 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:49:16,992 : INFO : tokenize_signature : --> do i ever get here?
    def __init__(self, mode='Plain', color_scheme='Linux', call_pdb=False,
                 ostream=None,
                 tb_offset=0, long_header=False, include_vars=False,
                 check_cache=None, debugger_cls=None,
                 parent=None, config=None):
        """
         NEVER change the order of this list. Put new modes at the end:

        """
    def structured_traceback(self, etype, value, tb, tb_offset=None, number_of_lines_of_context=5):
        """
         Verbose modes need a full traceback

        """
    def stb2text(self, stb):
        """
        Convert a structured traceback (a list) to a string.
        """
    def set_mode(self, mode=None):
        """
        Switch to the desired mode.

                If mode is not specified, cycles through the available modes.
        """
    def plain(self):
        """
        ----------------------------------------------------------------------------

        """
def AutoFormattedTB(FormattedTB):
    """
    A traceback printer which can be called on the fly.

        It will find out about exceptions by itself.

        A brief example::

            AutoTB = AutoFormattedTB(mode = 'Verbose',color_scheme='Linux')
            try:
              ...
            except:
              AutoTB()  # or AutoTB(out=logfile) where logfile is an open file object
    
    """
2021-03-02 20:49:16,996 : INFO : tokenize_signature : --> do i ever get here?
    def __call__(self, etype=None, evalue=None, etb=None,
                 out=None, tb_offset=None):
        """
        Print out a formatted exception traceback.

                Optional arguments:
                  - out: an open file-like object to direct output to.

                  - tb_offset: the number of frames to skip over in the stack, on a
                  per-call basis (this overrides temporarily the instance's tb_offset
                  given at initialization time.  
        """
2021-03-02 20:49:16,997 : INFO : tokenize_signature : --> do i ever get here?
    def structured_traceback(self, etype=None, value=None, tb=None,
                             tb_offset=None, number_of_lines_of_context=5):
        """
         tb is a tuple if this is a chained exception.

        """
def ColorTB(FormattedTB):
    """
    Shorthand to initialize a FormattedTB in Linux colors mode.
    """
    def __init__(self, color_scheme='Linux', call_pdb=0, **kwargs):
        """
        Extension which holds some state: the last exception value
        """
    def __init__(self, color_scheme='NoColor', parent=None, config=None):
        """
         If the source file has been edited, the line in the syntax error can
         be wrong (retrieved from an outdated cache). This replaces it with
         the current value.

        """
    def clear_err_state(self):
        """
        Return the current error state and clear it
        """
    def stb2text(self, stb):
        """
        Convert a structured traceback (a list) to a string.
        """
def text_repr(value):
    """
    Hopefully pretty robust repr equivalent.
    """
def eqrepr(value, repr=text_repr):
    """
    '=%s'
    """
def nullrepr(value, repr=text_repr):
    """
    ''
    """
