def pylight(code):
    """
     builtin docstrings to ignore

    """
def object_info(**kw):
    """
    Make an object info dict with all fields present.
    """
def get_encoding(obj):
    """
    Get encoding for python source file defining obj

        Returns None if obj is not defined in a sourcefile.
    
    """
def getdoc(obj) -> Union[str,None]:
    """
    Stable wrapper around inspect.getdoc.

        This can't crash because of attribute problems.

        It also attempts to call a getdoc() method on the given object.  This
        allows objects which provide their docstrings via non-standard mechanisms
        (like Pyro proxies) to still be inspected by ipython's ? system.
    
    """
def getsource(obj, oname='') -> Union[str,None]:
    """
    Wrapper around inspect.getsource.

        This can be modified by other projects to provide customized source
        extraction.

        Parameters
        ----------
        obj : object
            an object whose source code we will attempt to extract
        oname : str
            (optional) a name under which the object is known

        Returns
        -------
        src : unicode or None

    
    """
def is_simple_callable(obj):
    """
    True if obj is a function ()
    """
def getargspec(obj):
    """
    Wrapper around :func:`inspect.getfullargspec`

        In addition to functions and methods, this can also handle objects with a
        ``__call__`` attribute.

        DEPRECATED: Deprecated since 7.10. Do not use, will be removed.
    
    """
def format_argspec(argspec):
    """
    Format argspect, convenience wrapper around inspect's.

        This takes a dict instead of ordered arguments and calls
        inspect.format_argspec with the arguments in the necessary order.

        DEPRECATED: Do not use; will be removed in future versions.
    
    """
def call_tip(oinfo, format_call=True):
    """
    DEPRECATED. Extract call tip data from an oinfo dict.
    
    """
def _get_wrapped(obj):
    """
    Get the original object if wrapped in one or more @decorators

        Some objects automatically construct similar objects on any unrecognised
        attribute access (e.g. unittest.mock.call). To protect against infinite loops,
        this will arbitrarily cut off after 100 levels of obj.__wrapped__
        attribute access. --TK, Jan 2016
    
    """
def find_file(obj) -> str:
    """
    Find the absolute path to the file where an object was defined.

        This is essentially a robust wrapper around `inspect.getabsfile`.

        Returns None if no file can be found.

        Parameters
        ----------
        obj : any Python object

        Returns
        -------
        fname : str
          The absolute path to the file where the object was defined.
    
    """
def find_source_lines(obj):
    """
    Find the line number in a file where an object was defined.

        This is essentially a robust wrapper around `inspect.getsourcelines`.

        Returns None if no file can be found.

        Parameters
        ----------
        obj : any Python object

        Returns
        -------
        lineno : int
          The line number where the object definition starts.
    
    """
def Inspector(Colorable):
    """
    'str'
    """
    def _getdef(self,obj,oname='') -> Union[str,None]:
        """
        Return the call signature for any callable object.

                If any exception is generated, None is returned instead and the
                exception is suppressed.
        """
    def __head(self,h) -> str:
        """
        Return a header string with proper colors.
        """
    def set_active_scheme(self, scheme):
        """
        Generic message when no information is found.
        """
    def pdef(self, obj, oname=''):
        """
        Print the call signature for any callable object.

                If the object is a class, print the constructor information.
        """
    def pdoc(self, obj, oname='', formatter=None):
        """
        Print the docstring for any object.

                Optional:
                -formatter: a function to run the docstring through for specially
                formatted docstrings.

                Examples
                --------

                In [1]: class NoInit:
                   ...:     pass

                In [2]: class NoDoc:
                   ...:     def __init__(self):
                   ...:         pass

                In [3]: %pdoc NoDoc
                No documentation found for NoDoc

                In [4]: %pdoc NoInit
                No documentation found for NoInit

                In [5]: obj = NoInit()

                In [6]: %pdoc obj
                No documentation found for obj

                In [5]: obj2 = NoDoc()

                In [6]: %pdoc obj2
                No documentation found for obj2
        
        """
    def psource(self, obj, oname=''):
        """
        Print the source code for an object.
        """
    def pfile(self, obj, oname=''):
        """
        Show the whole file where an object was defined.
        """
    def _mime_format(self, text:str, formatter=None) -> dict:
        """
        Return a mime bundle representation of the input text.

                - if `formatter` is None, the returned mime bundle has
                   a `text/plain` field, with the input text.
                   a `text/html` field with a `<pre>` tag containing the input text.

                - if `formatter` is not None, it must be a callable transforming the
                  input text into a mime bundle. Default values for `text/plain` and
                  `text/html` representations are the ones described above.

                Note:

                Formatters returning strings are supported but this behavior is deprecated.

        
        """
    def format_mime(self, bundle):
        """
        'text/plain'
        """
    def _get_info(self, obj, oname='', formatter=None, info=None, detail_level=0):
        """
        Retrieve an info dict and format it.

                Parameters
                ==========

                obj: any
                    Object to inspect and return info from
                oname: str (default: ''):
                    Name of the variable pointing to `obj`.
                formatter: callable
                info:
                    already computed information
                detail_level: integer
                    Granularity of detail level, if set to 1, give more information.
        
        """
        def append_field(bundle, title:str, key:str, formatter=None):
            """
            'text/plain'
            """
        def code_formatter(text):
            """
            'text/plain'
            """
    def pinfo(self, obj, oname='', formatter=None, info=None, detail_level=0, enable_html_pager=True):
        """
        Show detailed information about an object.

                Optional arguments:

                - oname: name of the variable pointing to the object.

                - formatter: callable (optional)
                      A special formatter for docstrings.

                      The formatter is a callable that takes a string as an input
                      and returns either a formatted string or a mime type bundle
                      in the form of a dictionary.

                      Although the support of custom formatter returning a string
                      instead of a mime type bundle is deprecated.

                - info: a structure with some information fields which may have been
                  precomputed already.

                - detail_level: if set to 1, more information is given.
        
        """
    def info(self, obj, oname='', formatter=None, info=None, detail_level=0):
        """
        DEPRECATED. Compute a dict with detailed information about an object.
        
        """
    def _info(self, obj, oname='', info=None, detail_level=0) -> dict:
        """
        Compute a dict with detailed information about an object.

                Parameters
                ==========

                obj: any
                    An object to find information about
                oname: str (default: ''):
                    Name of the variable pointing to `obj`.
                info: (default: None)
                    A struct (dict like with attr access) with some information fields
                    which may have been precomputed already.
                detail_level: int (default:0)
                    If set to 1, more information is given.

                Returns
                =======

                An object info dict with known fields from `info_fields`. Keys are
                strings, values are string or None.
        
        """
    def _source_contains_docstring(src, doc):
        """

                Check whether the source *src* contains the docstring *doc*.

                This is is helper function to skip displaying the docstring if the
                source already contains it, avoiding repetition of information.
        
        """
2021-03-02 20:49:19,687 : INFO : tokenize_signature : --> do i ever get here?
    def psearch(self,pattern,ns_table,ns_search=[],
                ignore_case=False,show_all=False, *, list_types=False):
        """
        Search namespaces with wildcards for objects.

                Arguments:

                - pattern: string containing shell-like wildcards to use in namespace
                  searches and optionally a type specification to narrow the search to
                  objects of that type.

                - ns_table: dict of name->namespaces for search.

                Optional arguments:

                  - ns_search: list of namespace names to include in search.

                  - ignore_case(False): make the search case-insensitive.

                  - show_all(False): show all names, including those starting with
                    underscores.
            
                  - list_types(False): list all available object types for object matching.
        
        """
def _render_signature(obj_signature, obj_name) -> str:
    """

        This was mostly taken from inspect.Signature.__str__.
        Look there for the comments.
        The only change is to add linebreaks when this gets too long.
    
    """
