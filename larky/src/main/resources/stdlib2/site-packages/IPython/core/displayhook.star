def DisplayHook(Configurable):
    """
    The custom IPython displayhook to replace sys.displayhook.

        This class does many things, but the basic idea is that it is a callable
        that gets called anytime user code returns a value.
    
    """
    def __init__(self, shell=None, cache_size=1000, **kwargs):
        """
        'caching was disabled (min value for cache size is %s).'
        """
    def prompt_count(self):
        """
        -------------------------------------------------------------------------
         Methods used in __call__. Override these methods to modify the behavior
         of the displayhook.
        -------------------------------------------------------------------------


        """
    def check_for_underscore(self):
        """
        Check if the user has set the '_' variable by hand.
        """
    def quiet(self):
        """
        Should we silence the display hook because of ';'?
        """
    def start_displayhook(self):
        """
        Start the displayhook, initializing resources.
        """
    def write_output_prompt(self):
        """
        Write the output prompt.

                The default implementation simply writes the prompt to
                ``sys.stdout``.
        
        """
    def compute_format_data(self, result):
        """
        Compute format data of the object to be displayed.

                The format data is a generalization of the :func:`repr` of an object.
                In the default implementation the format data is a :class:`dict` of
                key value pair where the keys are valid MIME types and the values
                are JSON'able data structure containing the raw data for that MIME
                type. It is up to frontends to determine pick a MIME to to use and
                display that data in an appropriate manner.

                This method only computes the format data for the object and should
                NOT actually print or write that to a stream.

                Parameters
                ----------
                result : object
                    The Python object passed to the display hook, whose format will be
                    computed.

                Returns
                -------
                (format_dict, md_dict) : dict
                    format_dict is a :class:`dict` whose keys are valid MIME types and values are
                    JSON'able raw data for that MIME type. It is recommended that
                    all return values of this should always include the "text/plain"
                    MIME type representation of the object.
                    md_dict is a :class:`dict` with the same MIME type keys
                    of metadata associated with each output.
            
        
        """
    def write_format_data(self, format_dict, md_dict=None) -> None:
        """
        Write the format data dict to the frontend.

                This default version of this method simply writes the plain text
                representation of the object to ``sys.stdout``. Subclasses should
                override this method to send the entire `format_dict` to the
                frontends.

                Parameters
                ----------
                format_dict : dict
                    The format dict for the object passed to `sys.displayhook`.
                md_dict : dict (optional)
                    The metadata dict to be associated with the display data.
        
        """
    def update_user_ns(self, result):
        """
        Update user_ns with various things like _, __, _1, etc.
        """
    def fill_exec_result(self, result):
        """
        Log the output.
        """
    def finish_displayhook(self):
        """
        Finish up all displayhook activities.
        """
    def __call__(self, result=None):
        """
        Printing with history cache management.

                This is invoked every time the interpreter needs to print, and is
                activated by setting the variable sys.displayhook to it.
        
        """
    def cull_cache(self):
        """
        Output cache is full, cull the oldest entries
        """
    def flush(self):
        """
        You shouldn't have reached the cache flush 
        if full caching is not enabled!
        """
def CapturingDisplayHook(object):
    """
    'data'
    """
