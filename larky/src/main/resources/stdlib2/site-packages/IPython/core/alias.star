def default_aliases():
    """
    Return list of shell aliases to auto-define.
    
    """
def AliasError(Exception):
    """
    Callable object storing the details of one alias.

        Instances are registered as magic functions to allow use of aliases.
    
    """
    def __init__(self, shell, name, cmd):
        """
        Alias for `!{}`
        """
    def validate(self):
        """
        Validate the alias, and return the number of arguments.
        """
    def __repr__(self):
        """
        <alias {} for {!r}>
        """
    def __call__(self, rest=''):
        """
         Expand the %l special to be the user's input line

        """
def AliasManager(Configurable):
    """
    'IPython.core.interactiveshell.InteractiveShellABC'
    """
    def __init__(self, shell=None, **kwargs):
        """
         For convenient access

        """
    def init_aliases(self):
        """
         Load default & user aliases

        """
    def aliases(self):
        """
        Define an alias, but don't raise on an AliasError.
        """
    def define_alias(self, name, cmd):
        """
        Define a new alias after validating it.

                This will raise an :exc:`AliasError` if there are validation
                problems.
        
        """
    def get_alias(self, name):
        """
        Return an alias, or None if no alias by that name exists.
        """
    def is_alias(self, name):
        """
        Return whether or not a given name has been defined as an alias
        """
    def undefine_alias(self, name):
        """
        '%s is not an alias'
        """
    def clear_aliases(self):
        """
        Retrieve the command to which an alias expands.
        """
