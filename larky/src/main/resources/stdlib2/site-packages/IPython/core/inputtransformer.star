def InputTransformer(metadef=abc.ABCMeta):
    """
    Abstract base class for line-based input transformers.
    """
    def push(self, line):
        """
        Send a line of input to the transformer, returning the transformed
                input or None if the transformer is waiting for more input.
        
                Must be overridden by subclasses.

                Implementations may raise ``SyntaxError`` if the input is invalid. No
                other exceptions may be raised.
        
        """
    def reset(self):
        """
        Return, transformed any lines that the transformer has accumulated,
                and reset its internal state.
        
                Must be overridden by subclasses.
        
        """
    def wrap(cls, func):
        """
        Can be used by subclasses as a decorator, to return a factory that
                will allow instantiation with the decorated object.
        
        """
        def transformer_factory(**kwargs):
            """
            Wrapper for a stateless input transformer implemented as a function.
            """
    def __init__(self, func):
        """
        StatelessInputTransformer(func={0!r})
        """
    def push(self, line):
        """
        Send a line of input to the transformer, returning the
                transformed input.
        """
    def reset(self):
        """
        No-op - exists for compatibility.
        """
def CoroutineInputTransformer(InputTransformer):
    """
    Wrapper for an input transformer implemented as a coroutine.
    """
    def __init__(self, coro, **kwargs):
        """
         Prime it

        """
    def __repr__(self):
        """
        CoroutineInputTransformer(coro={0!r})
        """
    def push(self, line):
        """
        Send a line of input to the transformer, returning the
                transformed input or None if the transformer is waiting for more
                input.
        
        """
    def reset(self):
        """
        Return, transformed any lines that the transformer has
                accumulated, and reset its internal state.
        
        """
def TokenInputTransformer(InputTransformer):
    """
    Wrapper for a token-based input transformer.
    
        func should accept a list of tokens (5-tuples, see tokenize docs), and
        return an iterable which can be passed to tokenize.untokenize().
    
    """
    def __init__(self, func):
        """
        '\n'
        """
    def output(self, tokens):
        """
        '\n'
        """
    def reset(self):
        """
        ''
        """
def assemble_python_lines(TokenInputTransformer):
    """
    r"""Join lines following explicit line continuations (\)
    """
def _make_help_call(target, esc, lspace, next_input=None):
    """
    Prepares a pinfo(2)/psearch call from a target name and the escape
        (i.e. ? or ??)
    """
def _tr_system(line_info):
    """
    Translate lines escaped with: !
    """
def _tr_system2(line_info):
    """
    Translate lines escaped with: !!
    """
def _tr_help(line_info):
    """
    Translate lines escaped with: ?/??
    """
def _tr_magic(line_info):
    """
    Translate lines escaped with: %
    """
def _tr_quote(line_info):
    """
    Translate lines escaped with: ,
    """
def _tr_quote2(line_info):
    """
    Translate lines escaped with: ;
    """
def _tr_paren(line_info):
    """
    Translate lines escaped with: /
    """
def escaped_commands(line):
    """
    Transform escaped commands - %magic, !system, ?help + various autocalls.
    
    """
def _line_tokens(line):
    """
    Helper for has_comment and ends_in_comment_or_string.
    """
def has_comment(src):
    """
    Indicate whether an input line has (i.e. ends in, or is) a comment.

        This uses tokenize, so it can distinguish comments from # inside strings.

        Parameters
        ----------
        src : string
          A single line input string.

        Returns
        -------
        comment : bool
            True if source has a comment.
    
    """
def ends_in_comment_or_string(src):
    """
    Indicates whether or not an input line ends in a comment or within
        a multiline string.
    
        Parameters
        ----------
        src : string
          A single line input string.

        Returns
        -------
        comment : bool
            True if source ends in a comment or multiline string.
    
    """
def help_end(line):
    """
    Translate lines with ?/?? at the end
    """
def cellmagic(end_on_blank_line=False):
    """
    Captures & transforms cell magics.
    
        After a cell magic is started, this stores up any lines it gets until it is
        reset (sent None).
    
    """
def _strip_prompts(prompt_re, initial_re=None, turnoff_re=None):
    """
    Remove matching input prompts from a block of input.
    
        Parameters
        ----------
        prompt_re : regular expression
            A regular expression matching any input prompt (including continuation)
        initial_re : regular expression, optional
            A regular expression matching only the initial prompt, but not continuation.
            If no initial expression is given, prompt_re will be used everywhere.
            Used mainly for plain Python prompts, where the continuation prompt
            ``...`` is a valid Python expression in Python 3, so shouldn't be stripped.
    
        If initial_re and prompt_re differ,
        only initial_re will be tested against the first line.
        If any prompt is found on the first two lines,
        prompts will be stripped from the rest of the block.
    
    """
def classic_prompt():
    """
    Strip the >>>/... prompts of the Python interactive shell.
    """
def ipy_prompt():
    """
    Strip IPython's In [1]:/...: prompts.
    """
def leading_indent():
    """
    Remove leading indentation.
    
        If the first line starts with a spaces or tabs, the same whitespace will be
        removed from each following line until it is reset.
    
    """
def assign_from_system(line):
    """
    Transform assignment from system commands (e.g. files = !ls)
    """
def assign_from_magic(line):
    """
    Transform assignment from magic commands (e.g. a = %who_ls)
    """
