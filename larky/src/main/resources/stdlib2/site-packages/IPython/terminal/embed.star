def KillEmbedded(Exception):pass
    """
     kept for backward compatibility as IPython 6 was released with
     the typo. See https://github.com/ipython/ipython/pull/10706

    """
def EmbeddedMagics(Magics):
    """
    '-i'
    """
    def kill_embedded(self, parameter_s=''):
        """
        %kill_embedded : deactivate for good the current embedded IPython

                This function (after asking for confirmation) sets an internal flag so
                that an embedded IPython will never activate again for the given call
                location. This is useful to permanently disable a shell that is being
                called inside a loop: once you've figured out what you needed from it,
                you may then kill it and the program will then continue to run without
                the interactive shell interfering again.


                Kill Instance Option:

                    If for some reasons you need to kill the location where the instance
                    is created and not called, for example if you create a single
                    instance in one place and debug in many locations, you can use the
                    ``--instance`` option to kill this specific instance. Like for the
                    ``call location`` killing an "instance" should work even if it is
                    recreated within a loop.

                .. note::

                    This was the default behavior before IPython 5.2

        
        """
    def exit_raise(self, parameter_s=''):
        """
        %exit_raise Make the current embedded kernel exit and raise and exception.

                This function sets an internal flag so that an embedded IPython will
                raise a `IPython.terminal.embed.KillEmbedded` Exception on exit, and then exit the current I. This is
                useful to permanently exit a loop that create IPython embed instance.
        
        """
def InteractiveShellEmbed(TerminalInteractiveShell):
    """
    ''
    """
    def embedded_active(self):
        """
        Disable the current Instance creation location
        """
    def embedded_active(self, value):
        """
        'user_global_ns'
        """
    def init_sys_modules(self):
        """

                Explicitly overwrite :mod:`IPython.core.interactiveshell` to do nothing.
        
        """
    def init_magics(self):
        """
        ''
        """
2021-03-02 20:49:25,458 : INFO : tokenize_signature : --> do i ever get here?
    def mainloop(self, local_ns=None, module=None, stack_depth=0,
                 display_banner=None, global_ns=None, compile_flags=None):
        """
        Embeds IPython into a running python program.

                Parameters
                ----------

                local_ns, module
                  Working local namespace (a dict) and module (a module or similar
                  object). If given as None, they are automatically taken from the scope
                  where the shell was called, so that program variables become visible.

                stack_depth : int
                  How many levels in the stack to go to looking for namespaces (when
                  local_ns or module is None). This allows an intermediate caller to
                  make sure that this function gets the namespace from the intended
                  level in the stack. By default (0) it will get its locals and globals
                  from the immediate caller.

                compile_flags
                  A bit field identifying the __future__ features
                  that are enabled, as passed to the builtin :func:`compile` function.
                  If given as None, they are automatically taken from the scope where
                  the shell was called.

        
        """
def embed(**kwargs):
    """
    Call this to embed IPython at the current point in your program.

        The first invocation of this will create an :class:`InteractiveShellEmbed`
        instance and then call it.  Consecutive calls just call the already
        created instance.

        If you don't want the kernel to initialize the namespace
        from the scope of the surrounding function,
        and/or you want to load full IPython configuration,
        you probably want `IPython.start_ipython()` instead.

        Here is a simple example::

            from IPython import embed
            a = 10
            b = 20
            embed(header='First time')
            c = 30
            d = 40
            embed()

        Full customization can be done by passing a :class:`Config` in as the
        config argument.
    
    """
