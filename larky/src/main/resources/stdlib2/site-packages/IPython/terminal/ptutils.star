def _elide_point(string:str, *, min_elide=30)->str:
    """

        If a string is long enough, and has at least 3 dots,
        replace the middle part with ellipses.

        If a string naming a file is long enough, and has at least 3 slashes,
        replace the middle part with ellipses.

        If three consecutive dots, or two consecutive dots are encountered these are
        replaced by the equivalents HORIZONTAL ELLIPSIS or TWO DOT LEADER unicode
        equivalents
    
    """
def _elide_typed(string:str, typed:str, *, min_elide:int=30)->str:
    """

        Elide the middle of a long string if the beginning has already been typed.
    
    """
def _elide(string:str, typed:str, min_elide=30)->str:
    """
    '='
    """
def IPythonPTCompleter(Completer):
    """
    Adaptor to provide IPython completions to prompt_toolkit
    """
    def __init__(self, ipy_completer=None, shell=None):
        """
        Please pass shell=an InteractiveShell instance.
        """
    def ipy_completer(self):
        """
         Some bits of our completion system may print stuff (e.g. if a module
         is imported). This context manager ensures that doesn't interfere with
         the prompt.


        """
    def _get_completions(body, offset, cursor_position, ipyc):
        """

                Private equivalent of get_completions() use only for unit_testing.
        
        """
def IPythonPTLexer(Lexer):
    """

        Wrapper around PythonLexer and BashLexer.
    
    """
    def __init__(self):
        """
        'HTML'
        """
    def lex_document(self, document):
        """
        '!'
        """
