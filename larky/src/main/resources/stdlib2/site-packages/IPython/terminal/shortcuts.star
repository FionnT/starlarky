def cursor_in_leading_ws():
    """
    Set up the prompt_toolkit keyboard shortcuts for IPython
    """
    def reformat_and_execute(event):
        """
        'escape'
        """
def reformat_text_before_cursor(buffer, document, shell):
    """
    When the user presses return, insert a newline or execute the code.
    """
def previous_history_or_previous_completion(event):
    """

        Control-P in vi edit mode on readline is history next, unlike default prompt toolkit.

        If completer is open this still select previous completion.
    
    """
def next_history_or_next_completion(event):
    """

        Control-N in vi edit mode on readline is history previous, unlike default prompt toolkit.

        If completer is open this still select next completion.
    
    """
def dismiss_completion(event):
    """

        Force exit (with a non-zero return value)
    
    """
def indent_buffer(event):
    """
    ' '
    """
def newline_with_copy_margin(event):
    """

        DEPRECATED since IPython 6.0

        See :any:`newline_autoindent_outer` for a replacement.

        Preserve margin and cursor position when using
        Control-O to insert a newline in EMACS mode
    
    """
def newline_autoindent_outer(inputsplitter) -> Callable[..., None]:
    """

        Return a function suitable for inserting a indented newline after the cursor.

        Fancier version of deprecated ``newline_with_copy_margin`` which should
        compute the correct indentation of the inserted line. That is to say, indent
        by 4 extra space after a function definition, class definition, context
        manager... And dedent by 4 space after ``pass``, ``return``, ``raise ...``.
    
    """
    def newline_autoindent(event):
        """
        insert a newline after the cursor indented appropriately.
        """
def open_input_in_editor(event):
    """
    'win32'
    """
    def win_paste(event):
        """
        '\t'
        """
