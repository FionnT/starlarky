def _NoStyle(Style): pass
    """
    '#0000ff'
    """
def get_default_editor():
    """
    'EDITOR'
    """
def black_reformat_handler(text_before_cursor):
    """
    '\n'
    """
def TerminalInteractiveShell(InteractiveShell):
    """
    'Number of line at the bottom of the screen '
    'to reserve for the tab completion menu, '
    'search history, ...etc, the height of '
    'these menus will at most this value. '
    'Increase it is you prefer long and skinny '
    'menus, decrease for short and wide.'

    """
    def debugger_cls(self):
        """

                Set to confirm when you try to exit IPython with an EOF (Control-D
                in Unix, Control-Z/Enter in Windows). By typing 'exit' or 'quit',
                you can force a direct exit without any confirmation.
        """
    def _validate_editing_mode(self, proposal):
        """
        'value'
        """
    def _editing_mode(self, change):
        """
        'autoformatter'
        """
    def _autoformatter_changed(self, change):
        """
        'black'
        """
    def _highlighting_style_changed(self, change):
        """
        Override highlighting format for specific tokens

        """
    def _prompts_default(self):
        """
            @observe('prompts')
            def _(self, change):
                self._update_layout()


        """
    def _displayhook_class_default(self):
        """
        Automatically set the terminal title

        """
    def init_term_title(self, change=None):
        """
         Enable or disable the terminal title.

        """
    def restore_term_title(self):
        """
         terminal only supports plain text

        """
    def init_prompt_toolkit_cli(self):
        """
         Fall back to plain non-interactive output for tests.
         This is very limited.

        """
            def prompt():
                """

                """
    def _make_style_from_name_or_cls(self, name_or_cls):
        """

                Small wrapper that make an IPython compatible style from a style name

                We need that to add style for prompt ... etc.
        
        """
    def pt_complete_style(self):
        """
        'multicolumn'
        """
    def color_depth(self):
        """

                Return the current layout option for the current Terminal InteractiveShell
        
        """
        def get_message():
            """
            'emacs'
            """
    def prompt_for_code(self):
        """
        ''
        """
    def enable_win_unicode_console(self):
        """
         Since IPython 7.10 doesn't support python < 3.6 and PEP 528, Python uses the unicode APIs for the Windows
         console by default, so WUC shouldn't be needed.

        """
    def init_io(self):
        """
        'win32'
        """
    def init_magics(self):
        """
         The parent class defines aliases that can be safely used with any
         frontend.

        """
    def __init__(self, *args, **kwargs):
        """
        'interact `display_banner` argument is deprecated since IPython 5.0. Call `show_banner()` if needed.'
        """
    def mainloop(self, display_banner=DISPLAY_BANNER_DEPRECATED):
        """
         An extra layer of protection in case someone mashing Ctrl-C breaks
         out of our internal code.

        """
    def inputhook(self, context):
        """
        'inline'
        """
    def auto_rewrite_input(self, cmd):
        """
        Overridden from the parent class to use fancy rewriting prompt
        """
    def switch_doctest_mode(self, mode):
        """
        Switch prompts to classic for %doctest_mode
        """
