def inputhook_wx1():
    """
    Run the wx event loop by processing pending events only.

        This approach seems to work, but its performance is not great as it
        relies on having PyOS_InputHook called regularly.
    
    """
def EventLoopTimer(wx.Timer):
    """
    Run the wx event loop, polling for stdin.

        This version runs the wx eventloop for an undetermined amount of time,
        during which it periodically checks to see if anything is ready on
        stdin.  If anything is ready on stdin, the event loop exits.

        The argument to elr.Run controls how often the event loop looks at stdin.
        This determines the responsiveness at the keyboard.  A setting of 1000
        enables a user to type at most 1 char per second.  I have found that a
        setting of 10 gives good keyboard response.  We can shorten it further,
        but eventually performance would suffer from calling select/kbhit too
        often.
    
    """
def inputhook_wx3():
    """
    Run the wx event loop by processing pending events only.

        This is like inputhook_wx1, but it keeps processing pending events
        until stdin is ready.  After processing all pending events, a call to
        time.sleep is inserted.  This is needed, otherwise, CPU usage is at 100%.
        This sleep time should be tuned though for best performance.
    
    """
