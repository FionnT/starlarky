def _stdin_ready_posix():
    """
    Return True if there's something to read on stdin (posix version).
    """
def _stdin_ready_nt():
    """
    Return True if there's something to read on stdin (nt version).
    """
def _stdin_ready_other():
    """
    Return True, assuming there's something to read on stdin.
    """
def _use_appnope():
    """
    Should we use appnope for dealing with OS X app nap?

        Checks if we are on OS X 10.9 or greater.
    
    """
def _ignore_CTRL_C_posix():
    """
    Ignore CTRL+C (SIGINT).
    """
def _allow_CTRL_C_posix():
    """
    Take CTRL+C into account (SIGINT).
    """
def _ignore_CTRL_C_other():
    """
    Ignore CTRL+C (not implemented).
    """
def _allow_CTRL_C_other():
    """
    Take CTRL+C into account (not implemented).
    """
def InputHookManager(object):
    """
    DEPRECATED since IPython 5.0

        Manage PyOS_InputHook for different GUI toolkits.

        This class installs various hooks under ``PyOSInputHook`` to handle
        GUI event loop integration.
    
    """
    def __init__(self):
        """
        IPython GUI event loop requires ctypes, %gui will not be available
        """
    def _reset(self):
        """
        DEPRECATED since IPython 5.0

                Return the current PyOS_InputHook as a ctypes.c_void_p.
        """
    def get_pyos_inputhook_as_func(self):
        """
        DEPRECATED since IPython 5.0

                Return the current PyOS_InputHook as a ctypes.PYFUNCYPE.
        """
    def set_inputhook(self, callback):
        """
        DEPRECATED since IPython 5.0

                Set PyOS_InputHook to callback and return the previous one.
        """
    def clear_inputhook(self, app=None):
        """
        DEPRECATED since IPython 5.0

                Set PyOS_InputHook to NULL and return the previous one.

                Parameters
                ----------
                app : optional, ignored
                  This parameter is allowed only so that clear_inputhook() can be
                  called with a similar interface as all the ``enable_*`` methods.  But
                  the actual value of the parameter is ignored.  This uniform interface
                  makes it easier to have user-level entry points in the main IPython
                  app like :meth:`enable_gui`.
        """
    def clear_app_refs(self, gui=None):
        """
        DEPRECATED since IPython 5.0

                Clear IPython's internal reference to an application instance.

                Whenever we create an app for a user on qt4 or wx, we hold a
                reference to the app.  This is needed because in some cases bad things
                can happen if a user doesn't hold a reference themselves.  This
                method is provided to clear the references we are holding.

                Parameters
                ----------
                gui : None or str
                    If None, clear all app references.  If ('wx', 'qt4') clear
                    the app for that toolkit.  References are not held for gtk or tk
                    as those toolkits don't have the notion of an app.
        
        """
    def register(self, toolkitname, *aliases):
        """
        DEPRECATED since IPython 5.0

                Register a class to provide the event loop for a given GUI.
        
                This is intended to be used as a class decorator. It should be passed
                the names with which to register this GUI integration. The classes
                themselves should subclass :class:`InputHookBase`.
        
                ::
        
                    @inputhook_manager.register('qt')
                    class QtInputHook(InputHookBase):
                        def enable(self, app=None):
                            ...
        
        """
        def decorator(cls):
            """
            DEPRECATED since IPython 5.0

                    Return a string indicating the currently active GUI or None.
            """
    def enable_gui(self, gui=None, app=None):
        """
        DEPRECATED since IPython 5.0

                Switch amongst GUI input hooks by name.

                This is a higher level method than :meth:`set_inputhook` - it uses the
                GUI name to look up a registered object which enables the input hook
                for that GUI.

                Parameters
                ----------
                gui : optional, string or None
                  If None (or 'none'), clears input hook, otherwise it must be one
                  of the recognized GUI names (see ``GUI_*`` constants in module).

                app : optional, existing application object.
                  For toolkits that have the concept of a global app, you can supply an
                  existing one.  If not given, the toolkit will be probed for one, and if
                  none is found, a new one will be created.  Note that GTK does not have
                  this concept, and passing an app if ``gui=="GTK"`` will raise an error.

                Returns
                -------
                The output of the underlying gui switch routine, typically the actual
                PyOS_InputHook wrapper object or the GUI toolkit app created, if there was
                one.
        
        """
    def disable_gui(self):
        """
        DEPRECATED since IPython 5.0

                Disable GUI event loop integration.
        
                If an application was registered, this sets its ``_in_event_loop``
                attribute to False. It then calls :meth:`clear_inputhook`.
        
        """
def InputHookBase(object):
    """
    DEPRECATED since IPython 5.0

        Base class for input hooks for specific toolkits.
    
        Subclasses should define an :meth:`enable` method with one argument, ``app``,
        which will either be an instance of the toolkit's application class, or None.
        They may also define a :meth:`disable` method with no arguments.
    
    """
    def __init__(self, manager):
        """
        'osx'
        """
def NullInputHook(InputHookBase):
    """
    DEPRECATED since IPython 5.0

        A null inputhook that doesn't need to do anything
    """
    def enable(self, app=None):
        """
        This function is deprecated since IPython 5.0 and will be removed in future versions.
        """
def WxInputHook(InputHookBase):
    """
    DEPRECATED since IPython 5.0

            Enable event loop integration with wxPython.

            Parameters
            ----------
            app : WX Application, optional.
                Running application to use.  If not given, we probe WX for an
                existing application object, and create a new one if none is found.

            Notes
            -----
            This methods sets the ``PyOS_InputHook`` for wxPython, which allows
            the wxPython to integrate with terminal based applications like
            IPython.

            If ``app`` is not given we probe for an existing one, and return it if
            found.  If no existing app is found, we create an :class:`wx.App` as
            follows::

                import wx
                app = wx.App(redirect=False, clearSigInt=False)
        
    """
    def disable(self):
        """
        DEPRECATED since IPython 5.0

                Disable event loop integration with wxPython.

                This restores appnapp on OS X
        
        """
def Qt4InputHook(InputHookBase):
    """
    DEPRECATED since IPython 5.0

            Enable event loop integration with PyQt4.
        
            Parameters
            ----------
            app : Qt Application, optional.
                Running application to use.  If not given, we probe Qt for an
                existing application object, and create a new one if none is found.

            Notes
            -----
            This methods sets the PyOS_InputHook for PyQt4, which allows
            the PyQt4 to integrate with terminal based applications like
            IPython.

            If ``app`` is not given we probe for an existing one, and return it if
            found.  If no existing app is found, we create an :class:`QApplication`
            as follows::

                from PyQt4 import QtCore
                app = QtGui.QApplication(sys.argv)
        
    """
    def disable_qt4(self):
        """
        DEPRECATED since IPython 5.0

                Disable event loop integration with PyQt4.

                This restores appnapp on OS X
        
        """
def Qt5InputHook(Qt4InputHook):
    """
    This function is deprecated since IPython 5.0 and will be removed in future versions.
    """
def GtkInputHook(InputHookBase):
    """
    DEPRECATED since IPython 5.0

            Enable event loop integration with PyGTK.

            Parameters
            ----------
            app : ignored
               Ignored, it's only a placeholder to keep the call signature of all
               gui activation methods consistent, which simplifies the logic of
               supporting magics.

            Notes
            -----
            This methods sets the PyOS_InputHook for PyGTK, which allows
            the PyGTK to integrate with terminal based applications like
            IPython.
        
    """
def TkInputHook(InputHookBase):
    """
    DEPRECATED since IPython 5.0

            Enable event loop integration with Tk.

            Parameters
            ----------
            app : toplevel :class:`Tkinter.Tk` widget, optional.
                Running toplevel widget to use.  If not given, we probe Tk for an
                existing one, and create a new one if none is found.

            Notes
            -----
            If you have already created a :class:`Tkinter.Tk` object, the only
            thing done by this method is to register with the
            :class:`InputHookManager`, since creating that object automatically
            sets ``PyOS_InputHook``.
        
    """
def GlutInputHook(InputHookBase):
    """
    DEPRECATED since IPython 5.0

            Enable event loop integration with GLUT.

            Parameters
            ----------

            app : ignored
                Ignored, it's only a placeholder to keep the call signature of all
                gui activation methods consistent, which simplifies the logic of
                supporting magics.

            Notes
            -----

            This methods sets the PyOS_InputHook for GLUT, which allows the GLUT to
            integrate with terminal based applications like IPython. Due to GLUT
            limitations, it is currently not possible to start the event loop
            without first creating a window. You should thus not create another
            window but use instead the created one. See 'gui-glut.py' in the
            docs/examples/lib directory.
        
            The default screen mode is set to:
            glut.GLUT_DOUBLE | glut.GLUT_RGBA | glut.GLUT_DEPTH
        
    """
    def disable(self):
        """
        DEPRECATED since IPython 5.0

                Disable event loop integration with glut.
        
                This sets PyOS_InputHook to NULL and set the display function to a
                dummy one and set the timer to a dummy timer that will be triggered
                very far in the future.
        
        """
def PygletInputHook(InputHookBase):
    """
    DEPRECATED since IPython 5.0

            Enable event loop integration with pyglet.

            Parameters
            ----------
            app : ignored
               Ignored, it's only a placeholder to keep the call signature of all
               gui activation methods consistent, which simplifies the logic of
               supporting magics.

            Notes
            -----
            This methods sets the ``PyOS_InputHook`` for pyglet, which allows
            pyglet to integrate with terminal based applications like
            IPython.

        
    """
def Gtk3InputHook(InputHookBase):
    """
    DEPRECATED since IPython 5.0

            Enable event loop integration with Gtk3 (gir bindings).

            Parameters
            ----------
            app : ignored
               Ignored, it's only a placeholder to keep the call signature of all
               gui activation methods consistent, which simplifies the logic of
               supporting magics.

            Notes
            -----
            This methods sets the PyOS_InputHook for Gtk3, which allows
            the Gtk3 to integrate with terminal based applications like
            IPython.
        
    """
def _deprecated_disable():
    """
    This function is deprecated since IPython 4.0 use disable_gui() instead
    """
