def _safe_getattr(obj, attr, default=None):
    """
    Safe version of getattr.

        Same as getattr, but will return ``default`` on any Exception,
        rather than raising.
    
    """
def CUnicodeIO(StringIO):
    """
    CUnicodeIO is deprecated since IPython 6.0. 
    Please use io.StringIO instead.
    """
def _sorted_for_pprint(items):
    """

        Sort the given items for pretty printing. Since some predictable
        sorting is better than no sorting at all, we sort on the string
        representation if normal sorting fails.
    
    """
def pretty(obj, verbose=False, max_width=79, newline='\n', max_seq_length=MAX_SEQ_LENGTH):
    """

        Pretty print the object's representation.
    
    """
def pprint(obj, verbose=False, max_width=79, newline='\n', max_seq_length=MAX_SEQ_LENGTH):
    """

        Like `pretty` but print to stdout.
    
    """
def _PrettyPrinterBase(object):
    """
    with statement support for indenting/dedenting.
    """
    def group(self, indent=0, open='', close=''):
        """
        like begin_group / end_group but for the with statement.
        """
def PrettyPrinter(_PrettyPrinterBase):
    """

        Baseclass for the `RepresentationPrinter` prettyprinter that is used to
        generate pretty reprs of objects.  Contrary to the `RepresentationPrinter`
        this printer knows nothing about the default pprinters or the `_repr_pretty_`
        callback method.
    
    """
    def __init__(self, output, max_width=79, newline='\n', max_seq_length=MAX_SEQ_LENGTH):
        """
        Add literal text to the output.
        """
    def breakable(self, sep=' '):
        """

                Add a breakable separator to the output.  This does not mean that it
                will automatically break here.  If no breaking on this position takes
                place the `sep` is inserted which default to one space.
        
        """
    def break_(self):
        """

                Explicitly insert a newline into the output, maintaining correct indentation.
        
        """
    def begin_group(self, indent=0, open=''):
        """

                Begin a group.
                The first parameter specifies the indentation for the next line (usually
                the width of the opening text), the second the opening text.  All
                parameters are optional.
        
        """
    def _enumerate(self, seq):
        """
        like enumerate, but with an upper limit on the number of items
        """
    def end_group(self, dedent=0, close=''):
        """
        End a group. See `begin_group` for more details.
        """
    def flush(self):
        """
        Flush data that is left in the buffer.
        """
def _get_mro(obj_class):
    """
     Get a reasonable method resolution order of a class and its superclasses
        for both old-style and new-style classes.
    
    """
def RepresentationPrinter(PrettyPrinter):
    """

        Special pretty printer that has a `pretty` method that calls the pretty
        printer for a python object.

        This class stores processing data on `self` so you must *never* use
        this class in a threaded environment.  Always lock it or reinstanciate
        it.

        Instances also have a verbose flag callbacks can access to control their
        output.  For example the default instance repr prints all attributes and
        methods that are not prefixed by an underscore if the printer is in
        verbose mode.
    
    """
2021-03-02 20:49:38,962 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:49:38,962 : INFO : tokenize_signature : --> do i ever get here?
    def __init__(self, output, verbose=False, max_width=79, newline='\n',
        singleton_pprinters=None, type_pprinters=None, deferred_pprinters=None,
        max_seq_length=MAX_SEQ_LENGTH):
        """
        Pretty print the given object.
        """
    def _in_deferred_types(self, cls):
        """

                Check if the given class is specified in the deferred type registry.

                Returns the printer from the registry if it exists, and None if the
                class is not in the registry. Successful matches will be moved to the
                regular type registry for future use.
        
        """
def Printable(object):
    """
    ' '
    """
def Group(Printable):
    """

        The default print function.  Used if an object does not provide one and
        it's none of the builtin objects.
    
    """
def _seq_pprinter_factory(start, end):
    """

        Factory that returns a pprint function useful for sequences.  Used by
        the default pprint for tuples, dicts, and lists.
    
    """
    def inner(obj, p, cycle):
        """
        '...'
        """
def _set_pprinter_factory(start, end):
    """

        Factory that returns a pprint function useful for sets and frozensets.
    
    """
    def inner(obj, p, cycle):
        """
        '...'
        """
def _dict_pprinter_factory(start, end):
    """

        Factory that returns a pprint function used by the default pprint of
        dicts and dict proxies.
    
    """
    def inner(obj, p, cycle):
        """
        '{...}'
        """
def _super_pprint(obj, p, cycle):
    """
    The pprint for the super type.
    """
def _re_pattern_pprint(obj, p, cycle):
    """
    The pprint function for regular expression patterns.
    """
def _types_simplenamespace_pprint(obj, p, cycle):
    """
    The pprint function for types.SimpleNamespace.
    """
def _type_pprint(obj, p, cycle):
    """
    The pprint for classes and types.
    """
def _repr_pprint(obj, p, cycle):
    """
    A pprint that just redirects to the normal repr function.
    """
def _function_pprint(obj, p, cycle):
    """
    Base pprint for all functions and builtin functions.
    """
def _exception_pprint(obj, p, cycle):
    """
    Base pprint for all exceptions.
    """
def for_type(typ, func):
    """

        Add a pretty printer for a given type.
    
    """
def for_type_by_name(type_module, type_name, func):
    """

        Add a pretty printer for a type specified by the module and name of a type
        rather than the type object itself.
    
    """
def _defaultdict_pprint(obj, p, cycle):
    """
    '('
    """
def _ordereddict_pprint(obj, p, cycle):
    """
    '('
    """
def _deque_pprint(obj, p, cycle):
    """
    '('
    """
def _counter_pprint(obj, p, cycle):
    """
    '('
    """
    def Foo(object):
    """
    r'\s+'
    """
        def get_foo(self):
            """
            foo
            """
