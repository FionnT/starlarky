def replace_import_hook(new_import):
    """

        parent, name = get_parent(globals, level)

        Return the package that an import is being performed in.  If globals comes
        from the module foo.bar.bat (not itself a package), this returns the
        sys.modules entry for foo.bar.  If globals is from a package's __init__.py,
        the package's entry in sys.modules is returned.

        If globals doesn't come from a package or a module in a package, or a
        corresponding entry is not found in sys.modules, None is returned.
    
    """
def load_next(mod, altmod, name, buf):
    """

        mod, name, buf = load_next(mod, altmod, name, buf)

        altmod is either None or same as mod
    
    """
def import_submodule(mod, subname, fullname):
    """
    m = import_submodule(mod, subname, fullname)
    """
def add_submodule(mod, submod, fullname, subname):
    """
    mod.{subname} = submod
    """
def ensure_fromlist(mod, fromlist, buf, recursive):
    """
    Handle 'from module import a, b, c' imports.
    """
def deep_import_hook(name, globals=None, locals=None, fromlist=None, level=-1):
    """
    Replacement for __import__()
    """
def deep_reload_hook(m):
    """
    Replacement for reload().
    """
2021-03-02 20:49:39,155 : INFO : tokenize_signature : --> do i ever get here?
def reload(module, exclude=('sys', 'os.path', 'builtins', '__main__',
                            'numpy', 'numpy._globals')):
    """
    Recursively reload all modules used in the given module.  Optionally
        takes a list of modules to exclude from reloading.  The default exclude
        list contains sys, __main__, and __builtin__, to prevent, e.g., resetting
        display, exception, and io hooks.
    
    """
