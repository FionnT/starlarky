def DemoError(Exception): pass
    """
    r'^\s*#\s+<demo>\s+%s\s*$'
    """
def Demo(object):
    """
    r'-*\s?stop\s?-*'
    """
2021-03-02 20:49:39,680 : INFO : tokenize_signature : --> do i ever get here?
    def __init__(self,src,title='',arg_str='',auto_all=None, format_rst=False,
                 formatter='terminal', style='default'):
        """
        Make a new demo object.  To run the demo, simply call the object.

                See the module docstring for full details and an example (you can use
                IPython.Demo? in IPython to see it).

                Inputs:

                  - src is either a file, or file-like object, or a
                      string that can be resolved to a filename.

                Optional inputs:

                  - title: a string to use as the demo name.  Of most use when the demo
                    you are making comes from an object that has no filename, or if you
                    want an alternate denotation distinct from the filename.

                  - arg_str(''): a string of arguments, internally converted to a list
                    just like sys.argv, so the demo script can see a similar
                    environment.

                  - auto_all(None): global flag to run all blocks automatically without
                    confirmation.  This attribute overrides the block-level tags and
                    applies to the whole demo.  It is an attribute of the object, and
                    can be changed at runtime simply by reassigning it to a boolean
                    value.

                  - format_rst(False): a bool to enable comments and doc strings
                    formatting with pygments rst lexer

                  - formatter('terminal'): a string of pygments formatter name to be
                    used. Useful values for terminals: terminal, terminal256,
                    terminal16m

                  - style('default'): a string of pygments style name to be used.
          
        """
    def fload(self):
        """
        Load file object.
        """
    def reload(self):
        """
        Reload source from disk and initialize state.
        """
    def reset(self):
        """
        Reset the namespace and seek pointer to restart the demo
        """
    def _validate_index(self,index):
        """
        'invalid block index %s'
        """
    def _get_index(self,index):
        """
        Get the current block index, validating and checking status.

                Returns None if the demo is finished
        """
    def seek(self,index):
        """
        Move the current seek pointer to the given block.

                You can use negative indices to seek from the end, with identical
                semantics to those of Python lists.
        """
    def back(self,num=1):
        """
        Move the seek pointer back num blocks (default is 1).
        """
    def jump(self,num=1):
        """
        Jump a given number of blocks relative to the current one.

                The offset can be positive or negative, defaults to 1.
        """
    def again(self):
        """
        Move the seek pointer back one block and re-execute.
        """
    def edit(self,index=None):
        """
        Edit a block.

                If no number is given, use the last block executed.

                This edits the in-memory copy of the demo, it does NOT modify the
                original source file.  If you want to do that, simply open the file in
                an editor and use reload() when you make changes to the file.  This
                method is meant to let you change a block during a demonstration for
                explanatory purposes, without damaging your original script.
        """
    def show(self,index=None):
        """
        Show a single block on screen
        """
    def show_all(self):
        """
        Show entire demo on screen, block by block
        """
    def run_cell(self,source):
        """
        Execute a string with one or more lines of code
        """
    def __call__(self,index=None):
        """
        run a block of the demo.

                If index is given, it should be an integer >=1 and <= nblocks.  This
                means that the calling convention is one off from typical Python
                lists.  The reason for the inconsistency is that the demo always
                prints 'Block n/N, and N is the total, so it would be very odd to use
                zero-indexing here.
        """
    def marquee(self,txt='',width=78,mark='*'):
        """
        Return the input string centered in a 'marquee'.
        """
    def pre_cmd(self):
        """
        Method called before executing each block.
        """
    def post_cmd(self):
        """
        Method called after executing each block.
        """
    def highlight(self, block):
        """
        Method called on each block to highlight it content
        """
def IPythonDemo(Demo):
    """
    Class for interactive demos with IPython's input processing applied.

        This subclasses Demo, but instead of executing each block by the Python
        interpreter (via exec), it actually calls IPython on it, so that any input
        filters which may be in place are applied to the input block.

        If you have an interactive environment which exposes special input
        processing, you can use this class instead to write demo scripts which
        operate exactly as if you had typed them interactively.  The default Demo
        class requires the input to be valid, pure Python code.
    
    """
    def run_cell(self,source):
        """
        Execute a string with one or more lines of code
        """
def LineDemo(Demo):
    """
    Demo where each line is executed as a separate block.

        The input script should be valid Python code.

        This class doesn't require any markup at all, and it's meant for simple
        scripts (with no nesting or any kind of indentation) which consist of
        multiple lines of input to be executed, one at a time, as if they had been
        typed in the interactive prompt.

        Note: the input can not have *any* indentation, which means that only
        single-lines of input are accepted, not even function definitions are
        valid.
    """
    def reload(self):
        """
        Reload source from disk and initialize state.
        """
def IPythonLineDemo(IPythonDemo,LineDemo):
    """
    Variant of the LineDemo class whose input is processed by IPython.
    """
def ClearMixin(object):
    """
    Use this mixin to make Demo classes with less visual clutter.

        Demos using this mixin will clear the screen before every block and use
        blank marquees.

        Note that in order for the methods defined here to actually override those
        of the classes it's mixed with, it must go /first/ in the inheritance
        tree.  For example:

            class ClearIPDemo(ClearMixin,IPythonDemo): pass

        will provide an IPythonDemo class with the mixin's features.
    
    """
    def marquee(self,txt='',width=78,mark='*'):
        """
        Blank marquee that returns '' no matter what the input.
        """
    def pre_cmd(self):
        """
        Method called before executing each block.

                This one simply clears the screen.
        """
def ClearDemo(ClearMixin,Demo):
    """
    terminal
    """
