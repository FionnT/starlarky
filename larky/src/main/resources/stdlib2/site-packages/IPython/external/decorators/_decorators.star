def skipif(skip_condition, msg=None):
    """

        Make function raise SkipTest exception if a given condition is true.

        If the condition is a callable, it is used at runtime to dynamically
        make the decision. This is useful for tests that may require costly
        imports, to delay the cost until the test suite is actually executed.

        Parameters
        ----------
        skip_condition : bool or callable
            Flag to determine whether to skip the decorated test.
        msg : str, optional
            Message to give on raising a SkipTest exception. Default is None.

        Returns
        -------
        decorator : function
            Decorator which, when applied to a function, causes SkipTest
            to be raised when `skip_condition` is True, and the function
            to be called normally otherwise.

        Notes
        -----
        The decorator itself is decorated with the ``nose.tools.make_decorator``
        function in order to transmit function name, and various other metadata.

    
    """
    def skip_decorator(f):
        """
         Local import to avoid a hard nose dependency and only incur the
         import time overhead at actual test-time.

        """
        def get_msg(func,msg=None):
            """
            Skip message with information about function being skipped.
            """
        def skipper_func(*args, **kwargs):
            """
            Skipper for normal test functions.
            """
        def skipper_gen(*args, **kwargs):
            """
            Skipper for test generators.
            """
def knownfailureif(fail_condition, msg=None):
    """

        Make function raise KnownFailureTest exception if given condition is true.

        Parameters
        ----------
        fail_condition : bool
            Flag to determine whether to mark the decorated test as a known
            failure (if True) or not (if False).
        msg : str, optional
            Message to give on raising a KnownFailureTest exception.
            Default is None.

        Returns
        -------
        decorator : function
            Decorator, which, when applied to a function, causes KnownFailureTest to
            be raised when `fail_condition` is True and the test fails.

        Notes
        -----
        The decorator itself is decorated with the ``nose.tools.make_decorator``
        function in order to transmit function name, and various other metadata.

    
    """
    def knownfail_decorator(f):
        """
         Local import to avoid a hard nose dependency and only incur the
         import time overhead at actual test-time.

        """
        def knownfailer(*args, **kwargs):
