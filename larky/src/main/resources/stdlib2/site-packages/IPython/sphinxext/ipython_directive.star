def block_parser(part, rgxin, rgxout, fmtin, fmtout):
    """

        part is a string of ipython text, comprised of at most one
        input, one output, comments, and blank lines.  The block parser
        parses the text into a list of::

          blocks = [ (TOKEN0, data0), (TOKEN1, data1), ...]

        where TOKEN is one of [COMMENT | INPUT | OUTPUT ] and
        data is, depending on the type of token::

          COMMENT : the comment string

          INPUT: the (DECORATOR, INPUT_LINE, REST) where
             DECORATOR: the input decorator (or None)
             INPUT_LINE: the input as string (possibly multi-line)
             REST : any stdout generated by the input line (not OUTPUT)

          OUTPUT: the output string, possibly multi-line

    
    """
def EmbeddedSphinxShell(object):
    """
    An embedded IPython instance to run inside Sphinx
    """
    def __init__(self, exec_lines=None):
        """
         Create config object for IPython

        """
    def cleanup(self):
        """
        process the input, capturing stdout
        """
    def process_image(self, decorator):
        """

                # build out an image directive like
                # .. image:: somefile.png
                #    :width 4in
                #
                # from an input like
                # savefig somefile.png width=4in
        
        """
    def process_input(self, data, input_prompt, lineno):
        """

                Process data block for INPUT token.

        
        """
2021-03-02 20:49:21,978 : INFO : tokenize_signature : --> do i ever get here?
    def process_output(self, data, output_prompt, input_lines, output,
                       is_doctest, decorator, image_file):
        """

                Process data block for OUTPUT token.

        
        """
    def process_comment(self, data):
        """
        Process data fPblock for COMMENT token.
        """
    def save_image(self, image_file):
        """

                Saves the image file to disk.
        
        """
    def process_block(self, block):
        """

                process block from the block_parser and return a list of processed lines
        
        """
    def ensure_pyplot(self):
        """

                Ensures that pyplot has been imported into the embedded IPython shell.

                Also, makes sure to set the backend appropriately if not set already.

        
        """
    def process_pure_python(self, content):
        """

                content is a list of strings. it is unedited directive content

                This runs it line by line in the InteractiveShell, prepends
                prompts as needed capturing stderr and stdout, then returns
                the content as a list as if it were ipython code
        
        """
    def custom_doctest(self, decorator, input_lines, found, submitted):
        """

                Perform a specialized doctest.

        
        """
def IPythonDirective(Directive):
    """
     python, suppress, verbatim, doctest
    """
    def get_config_options(self):
        """
         contains sphinx configuration variables

        """
    def setup(self):
        """
         Get configuration values.

        """
    def teardown(self):
        """
         delete last bookmark

        """
    def run(self):
        """
        TODO, any reason block_parser can't be a method of embeddable shell
         then we wouldn't have to carry these around

        """
def setup(app):
    """
    'ipython'
    """
def test():
    """
    r"""
    In [9]: pwd
    Out[9]: '/home/jdhunter/py4science/book'

    In [10]: cd bookdata/
    /home/jdhunter/py4science/book/bookdata

    In [2]: from pylab import *

    In [2]: ion()

    In [3]: im = imread('stinkbug.png')

    @savefig mystinkbug.png width=4in
    In [4]: imshow(im)
    Out[4]: <matplotlib.image.AxesImage object at 0x39ea850>


    """
