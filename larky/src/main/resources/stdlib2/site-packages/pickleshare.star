def gethashfile(key):
    """
    %02x
    """
def PickleShareDB(collections_abc.MutableMapping):
    """
     The main 'connection' object for PickleShare database 
    """
    def __init__(self,root):
        """
         Return a db object that will manage the specied directory
        """
    def __getitem__(self,key):
        """
         db['key'] reading 
        """
    def __setitem__(self,key,value):
        """
         db['key'] = 5 
        """
    def hset(self, hashroot, key, value):
        """
         hashed set 
        """
    def hget(self, hashroot, key, default = _sentinel, fast_only = True):
        """
         hashed get 
        """
    def hdict(self, hashroot):
        """
         Get all data contained in hashed category 'hashroot' as dict 
        """
    def hcompress(self, hashroot):
        """
         Compress category 'hashroot', so hset is fast again

                hget will fail if fast_only is True for compressed items (that were
                hset before hcompress).

        
        """
    def __delitem__(self,key):
        """
         del db["key"] 
        """
    def _normalized(self, p):
        """
         Make a key suitable for user's eyes 
        """
    def keys(self, globpat = None):
        """
         All keys in DB, or all keys matching a glob
        """
    def __iter__(self):
        """
         Removes all, or specified items from cache

                Use this after reading a large amount of large objects
                to free up memory, when you won't be needing the objects
                for a while.

        
        """
    def waitget(self,key, maxwaittime = 60 ):
        """
         Wait (poll) for a key to get a value

                Will wait for `maxwaittime` seconds before raising a KeyError.
                The call exits normally if the `key` field in db gets a value
                within the timeout period.

                Use this for synchronizing different processes or for ensuring
                that an unfortunately timed "db['key'] = newvalue" operation
                in another process (which causes all 'get' operation to cause a
                KeyError for the duration of pickling) won't screw up your program
                logic.
        
        """
    def getlink(self,folder):
        """
         Get a convenient link for accessing items  
        """
    def __repr__(self):
        """
        PickleShareDB('%s')
        """
def PickleShareLink:
    """
     A shortdand for accessing nested PickleShare data conveniently.

        Created through PickleShareDB.getlink(), example::

            lnk = db.getlink('myobjects/test')
            lnk.foo = 2
            lnk.bar = lnk.foo + 5

    
    """
    def __init__(self, db, keydir ):
        """
        'db'
        """
    def __setattr__(self,key,val):
        """
        '/'
        """
    def __repr__(self):
        """
        'db'
        """
def main():
    """
    \
        pickleshare - manage PickleShare databases

        Usage:

            pickleshare dump /path/to/db > dump.txt
            pickleshare load /path/to/db < dump.txt
            pickleshare test /path/to/db
    
    """
