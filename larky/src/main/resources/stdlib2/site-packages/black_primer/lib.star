def Results(NamedTuple):
    """
 
    """
def analyze_results(project_count: int, results: Results) -> int:
    """
    failed
    """
2021-03-02 20:48:02,432 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:48:02,433 : INFO : tokenize_signature : --> do i ever get here?
async def black_run(
    repo_path: Path, project_config: Dict[str, Any], results: Results
) -> None:
        """
        Run Black and record failures
        """
2021-03-02 20:48:02,435 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:48:02,435 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:48:02,435 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:48:02,436 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:48:02,436 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:48:02,436 : INFO : tokenize_signature : --> do i ever get here?
async def git_checkout_or_rebase(
    work_path: Path,
    project_config: Dict[str, Any],
    rebase: bool = False,
    *,
    depth: int = 1,
) -> Optional[Path]:
        """
        git Clone project or rebase
        """
2021-03-02 20:48:02,437 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:48:02,437 : INFO : tokenize_signature : --> do i ever get here?
def handle_PermissionError(
    func: Callable, path: Path, exc: Tuple[Any, Any, Any]
) -> None:
    """

        Handle PermissionError during shutil.rmtree.

        This checks if the erroring function is either 'os.rmdir' or 'os.unlink', and that
        the error was EACCES (i.e. Permission denied). If true, the path is set writable,
        readable, and executable by everyone. Finally, it tries the error causing delete
        operation again.

        If the check is false, then the original error will be reraised as this function
        can't handle it.
    
    """
2021-03-02 20:48:02,438 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:48:02,438 : INFO : tokenize_signature : --> do i ever get here?
async def load_projects_queue(
    config_path: Path,
) -> Tuple[Dict[str, Any], asyncio.Queue]:
        """
        Load project config and fill queue with all the project names
        """
2021-03-02 20:48:02,438 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:48:02,438 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:48:02,439 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:48:02,439 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:48:02,439 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:48:02,439 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:48:02,439 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:48:02,439 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:48:02,439 : INFO : tokenize_signature : --> do i ever get here?
async def project_runner(
    idx: int,
    config: Dict[str, Any],
    queue: asyncio.Queue,
    work_path: Path,
    results: Results,
    long_checkouts: bool = False,
    rebase: bool = False,
    keep: bool = False,
) -> None:
        """
        Check out project and run Black on it + record result
        """
2021-03-02 20:48:02,440 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:48:02,440 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:48:02,440 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:48:02,440 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:48:02,440 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:48:02,441 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:48:02,441 : INFO : tokenize_signature : --> do i ever get here?
async def process_queue(
    config_file: str,
    work_path: Path,
    workers: int,
    keep: bool = False,
    long_checkouts: bool = False,
    rebase: bool = False,
) -> int:
        """

            Process the queue with X workers and evaluate results
            - Success is guaged via the config "expect_formatting_changes"

            Integer return equals the number of failed projects
    
        """
