def ParamNameWithEquals(ParamNameWrapper):
    """
    '='
    """
def _get_signature_param_names(signatures, positional_count, used_kwargs):
    """
     Add named params

    """
def _must_be_kwarg(signatures, positional_count, used_kwargs):
    """
     TODO reconsider with Python 2 drop

    """
def filter_names(inference_state, completion_names, stack, like_name, fuzzy, cached_name):
    """
     key
    """
def _remove_duplicates(completions, other_completions):
    """

        Returns the scope in which the user resides. This includes flows.
    
    """
def get_flow_scope_node(module_node, position):
    """
     Basically there's no way to do param completion. The plugins are
     responsible for this.

    """
def Completion:
    """
     The first step of completions is to get the name

    """
    def complete(self):
        """
        '\n'
        """
    def _complete_python(self, leaf):
        """

                Analyzes the current context of a completion and decides what to
                return.

                Technically this works by generating a parser stack and analysing the
                current stack for possible grammar nodes.

                Possible enhancements:
                - global/nonlocal search global
                - yield from / raise from <- could be only exceptions/generators
                - In args: */**: no completion
                - In params (also lambda): no completion before =
        
        """
    def _is_parameter_completion(self):
        """
        'lambdef'
        """
    def _complete_params(self, leaf):
        """
        'parameters'
        """
    def _complete_keywords(self, allowed_transitions, only_values):
        """
        'True'
        """
    def _complete_global_scope(self):
        """
        'global completion scope: %s'
        """
    def _complete_trailer(self, previous_leaf):
        """
        'trailer completion values: %s'
        """
    def _complete_trailer_for_values(self, values):
        """

                Autocomplete inherited methods when overriding in child class.
        
        """
    def _complete_in_string(self, start_leaf, string):
        """

                To make it possible for people to have completions in doctests or
                generally in "Python" code in docstrings, we use the following
                heuristic:

                - Having an indented block of code
                - Having some doctest code that starts with `>>>`
                - Having backticks that doesn't have whitespace inside it
        
        """
        def iter_relevant_lines(lines):
            """
            '>>>'
            """
    def _complete_code_lines(self, code_lines):
        """
        ''
        """
def _gather_nodes(stack):
    """
    'small_stmt'
    """
def _extract_string_while_in_string(leaf, position):
    """
    'endpos'
    """
def complete_trailer(user_context, values):
    """

        A heuristic to make completion for proxy objects work. This is not
        intended to work in all cases. It works exactly in this case:

            def __getattr__(self, name):
                ...
                return getattr(any_object, name)

        It is important that the return contains getattr directly, otherwise it
        won't work anymore. It's really just a stupid heuristic. It will not
        work if you write e.g. `return (getatr(o, name))`, because of the
        additional parentheses. It will also not work if you move the getattr
        to some other place that is not the return statement itself.

        It is intentional that it doesn't work in all cases. Generally it's
        really hard to do even this case (as you can see below). Most people
        will write it like this anyway and the other ones, well they are just
        out of luck I guess :) ~dave.
    
    """
2021-03-02 20:49:48,941 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:49:48,941 : INFO : tokenize_signature : --> do i ever get here?
def search_in_module(inference_state, module_context, names, wanted_names,
                     wanted_type, complete=False, fuzzy=False,
                     ignore_imports=False, convert=False):
    """
    'module'
    """
