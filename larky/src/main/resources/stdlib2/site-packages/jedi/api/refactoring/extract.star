def extract_variable(inference_state, path, module_node, name, pos, until_pos):
    """
    'Extracting nodes: %s'
    """
def _is_expression_with_error(nodes):
    """

        Returns a tuple (is_expression, error_string).
    
    """
def _find_nodes(module_node, pos, until_pos):
    """

        Looks up a module and tries to find the appropriate amount of nodes that
        are in there.
    
    """
2021-03-02 20:49:50,728 : INFO : tokenize_signature : --> do i ever get here?
def _replace(nodes, expression_replacement, extracted, pos,
             insert_before_leaf=None, remaining_prefix=None):
    """
     Now try to replace the nodes found with a variable and move the code
     before the current statement.

    """
def _expression_nodes_to_string(nodes):
    """
    ''
    """
def _suite_nodes_to_string(nodes, pos):
    """
    ''
    """
def _split_prefix_at(leaf, until_line):
    """

        Returns a tuple of the leaf's prefix, split at the until_line
        position.
    
    """
def _get_indentation(node):
    """

        Returns the statement where a node is defined.
    
    """
def _remove_unwanted_expression_nodes(parent_node, pos, until_pos):
    """

        This function makes it so for `1 * 2 + 3` you can extract `2 + 3`, even
        though it is not part of the expression.
    
    """
def _is_not_extractable_syntax(node):
    """
    'operator'
    """
def extract_function(inference_state, path, module_context, name, pos, until_pos):
    """
     Find variables
     Is a class method / method

    """
def _check_for_non_extractables(nodes):
    """
    'return'
    """
def _is_name_input(module_context, names, first, last):
    """
    'param'
    """
def _find_inputs_and_outputs(module_context, context, nodes):
    """
     Check if outputs are really needed:

    """
def _find_non_global_names(nodes):
    """
    'name'
    """
def _get_code_insertion_node(node, is_bound_method):
    """
    'file_input'
    """
def _find_needed_output_variables(context, search_node, at_least_pos, return_variables):
    """

        Searches everything after at_least_pos in a node and checks if any of the
        return_variables are used in there and returns those.
    
    """
def _is_node_ending_return_stmt(node):
    """
    'simple_stmt'
    """
