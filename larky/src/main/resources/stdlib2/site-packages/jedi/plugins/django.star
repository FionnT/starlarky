def _get_deferred_attributes(inference_state):
    """
    'django'
    """
def _infer_scalar_field(inference_state, field_name, field_tree_instance, is_instance):
    """
     TODO private access..

    """
def _infer_field(cls, field_name, is_instance):
    """
    'ManyToManyField'
    """
def DjangoModelName(NameWrapper):
    """
    'BaseManager'
    """
def _new_dict_filter(cls, is_instance):
    """
     Replace the objects with a name that amounts to nothing when accessed
     in an instance. This is not perfect and still completes "objects" in
     that case, but it at least not inferes stuff like `.objects.filter`.
     It would be nicer to do that in a better way, so that it also doesn't
     show up in completions, but it's probably just not worth doing that
     for the extra amount of work.

    """
def is_django_model_base(value):
    """
    'ModelBase'
    """
def get_metaclass_filters(func):
    """
     Here we try to overwrite stuff like User.objects.filter. We need
     this to make sure that keyword param completion works on these
     kind of methods.

    """
def _find_fields(cls):
    """
    'django'
    """
def _get_signatures(cls):
    """
     This is mostly an optimization to avoid Jedi aborting inference,
     because of too many function executions of Field.__get__.

    """
def DjangoModelSignature(AbstractSignature):
