def _get_numpy_doc_string_cls():
    """
    Search `docstr` (in numpydoc format) for type(-s) of `param_str`.
    """
def _search_return_in_numpydocstr(docstr):
    """

        Search `docstr` (in numpydoc format) for type(-s) of function returns.
    
    """
def _expand_typestr(type_str):
    """

        Attempts to interpret the possible types in `type_str`
    
    """
def _search_param_in_docstr(docstr, param_str):
    """

        Search `docstr` for type(-s) of `param_str`.

        >>> _search_param_in_docstr(':type param: int', 'param')
        ['int']
        >>> _search_param_in_docstr('@type param: int', 'param')
        ['int']
        >>> _search_param_in_docstr(
        ...   ':type param: :class:`threading.Thread`', 'param')
        ['threading.Thread']
        >>> bool(_search_param_in_docstr('no document', 'param'))
        False
        >>> _search_param_in_docstr(':param int param: some description', 'param')
        ['int']

    
    """
def _strip_rst_role(type_str):
    """

        Strip off the part looks like a ReST role in `type_str`.

        >>> _strip_rst_role(':class:`ClassName`')  # strip off :class:
        'ClassName'
        >>> _strip_rst_role(':py:obj:`module.Object`')  # works with domain
        'module.Object'
        >>> _strip_rst_role('ClassName')  # do nothing when not ReST role
        'ClassName'

        See also:
        http://sphinx-doc.org/domains.html#cross-referencing-python-objects

    
    """
def _infer_for_statement_string(module_context, string):
    """

        def pseudo_docstring_stuff():
            '''
            Create a pseudo function for docstring statements.
            Need this docstring so that if the below part is not valid Python this
            is still a function.
            '''
        {}
    
    """
def _execute_types_in_stmt(module_context, stmt):
    """

        Executing all types or general elements that we find in a statement. This
        doesn't include tuple, list and dict literals, because the stuff they
        contain is executed. (Used as type information).
    
    """
def _execute_array_values(inference_state, array):
    """

        Tuples indicate that there's not just one return value, but the listed
        ones.  `(str, int)` means that it returns a tuple with both types.
    
    """
def infer_param(function_value, param):
    """
    'lambdef'
    """
def infer_return_types(function_value):
    """
     Check for numpy style return hint

    """
