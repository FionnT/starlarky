def TypingModuleName(NameWrapper):
    """
    'runtime'
    """
def TypingModuleFilterWrapper(FilterWrapper):
    """
    'Union'
    """
    def gather_annotation_classes(self):
        """
        'Optional'
        """
def ProxyTypingValue(BaseTypingValue):
    """
    'object'
    """
    def get_metaclasses(self):
        """
        'Type'
        """
    def _create_instance_with_generics(self, generics_manager):
        """
         e.g. builtins.list
        """
    def name(self):
        """
        '<%s: %s>'
        """
    def _get_wrapped_value(self):
        """
        '.'
        """
    def gather_annotation_classes(self):
        """

                    def x() -> Callable[[Callable[..., _T]], _T]: ...
        
        """
def Tuple(BaseTypingInstance):
    """
     To specify a variable-length tuple of homogeneous type, Tuple[T, ...]
     is used.

    """
    def py__simple_getitem__(self, index):
        """
        'The getitem type on Tuple was %s'
        """
    def py__iter__(self, contextualized_node=None):
        """
        'tuple'
        """
    def name(self):
        """
         Circular

        """
def Generic(BaseTypingInstance):
    """
    'Used Any - returned no results'
    """
def OverloadFunction(BaseTypingValue):
    """
    'func, /'
    """
    def py__call__(self, func_value_set):
        """
         Just pass arguments through.

        """
def NewTypeFunction(BaseTypingValue):
    """
    'NewType'
    """
def CastFunction(BaseTypingValue):
    """
    'type, object, /'
    """
    def py__call__(self, type_value_set, object_value_set):
        """

            This class has no responsibilities and is just here to make sure that typed
            dicts can be identified.
    
        """
def TypedDict(LazyValueWrapper):
    """
    Represents the instance version of ``TypedDictClass``.
    """
    def __init__(self, definition_class):
        """
        'dict'
        """
