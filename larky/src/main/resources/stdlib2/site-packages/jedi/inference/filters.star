def AbstractFilter(object):
    """
    '<%s: %s>'
    """
def ParserTreeFilter(AbstractUsedNamesFilter):
    """

            node_context is an option to specify a second value for use cases
            like the class mro where the parent class of a new name would be the
            value, but for some type inference it's important to have a local
            value of the other classes.
        
    """
    def _filter(self, names):
        """
        'trailer'
        """
    def _check_flows(self, names):
        """
        'param'
        """
def FunctionExecutionFilter(_FunctionExecutionFilter):
    """
    'arguments'
    """
    def _convert_param(self, param, name):
        """
        'global_stmt'
        """
    def values(self):
        """
        ', '
        """
def MergedFilter(object):
    """
    '%s(%s)'
    """
def _BuiltinMappedMethod(ValueWrapper):
    """
    ``Generator.__next__`` ``dict.values`` methods and so on.
    """
    def __init__(self, value, method, builtin_func):
        """
         TODO add TypeError if params are given/or not correct.

        """
def SpecialMethodFilter(DictFilter):
    """

        A filter for methods that are defined in this module on the corresponding
        classes like Generator (for __next__, etc).
    
    """
    def SpecialMethodName(AbstractNameDefinition):
    """
    u'function'
    """
        def __init__(self, parent_context, string_name, value, builtin_value):
            """
             We can take the first index, because on builtin methods there's
             always only going to be one name. The same is true for the
             inferred values.

            """
    def __init__(self, value, dct, builtin_value):
        """

                This value is what will be used to introspect the name, where as the
                other value will be used to execute the function.

                We distinguish, because we have to.
        
        """
    def _convert(self, name, value):
        """
        'registered_overwritten_methods'
        """
