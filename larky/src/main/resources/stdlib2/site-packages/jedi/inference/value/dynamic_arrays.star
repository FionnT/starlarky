def check_array_additions(context, sequence):
    """
     Just a mapper function for the internal _internal_check_array_additions 
    """
def _internal_check_array_additions(context, sequence):
    """

        Checks if a `Array` has "add" (append, insert, extend) statements:

        >>> a = [""]
        >>> a.append(1)
    
    """
    def find_additions(context, arglist, add_name):
        """
        'insert'
        """
def get_dynamic_array_instance(instance, arguments):
    """
    Used for set() and list() instances.
    """
def _DynamicArrayAdditions(HelperValueMixin):
    """

        Used for the usage of set() and list().
        This is definitely a hack, but a good one :-)
        It makes it possible to use set/list conversions.

        This is not a proper context, because it doesn't have to be. It's not used
        in the wild, it's just used within typeshed as an argument to `__init__`
        for set/list and never used in any other place.
    
    """
    def __init__(self, instance, arguments):
        """
        'tuple'
        """
    def py__iter__(self, contextualized_node=None):
