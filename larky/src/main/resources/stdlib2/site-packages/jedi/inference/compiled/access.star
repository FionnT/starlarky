def safe_getattr(obj, name, default=_sentinel):
    """
     In case of descriptors that have get methods we cannot return
     it's value, because that would mean code execution.
     Since it's an isinstance call, code execution is still possible,
     but this is not really a security feature, but much more of a
     safety feature. Code execution is basically always possible when
     a module is imported. This is here so people don't shoot
     themselves in the foot.

    """
def shorten_repr(func):
    """
    '..'
    """
def create_access(inference_state, obj):
    """
     If a module is "corrupt" or not really a Python module or whatever.

    """
def AccessPath(object):
    """
     Writing both of these methods here looks a bit ridiculous. However with
     the differences of Python 2/3 it's actually necessary, because we will
     otherwise have a accesses attribute that is bytes instead of unicode.

    """
    def __getstate__(self):
        """
        u'class'
        """
def DirectObjectAccess(object):
    """
    '%s(%s)'
    """
    def _create_access(self, obj):
        """
        u''
        """
    def py__name__(self):
        """
         slots
        """
    def py__mro__accesses(self):
        """
         Get rid of side effects, we won't call custom `__getitem__`s.

        """
    def py__iter__list(self):
        """
        '__getitem__'
        """
    def py__class__(self):
        """
        '__path__'
        """
    def get_repr(self):
        """
        'builtins'
        """
    def is_class(self):
        """
        '__qualname__'
        """
    def dir(self):
        """
         TODO this API is ugly.

        """
    def getattr_paths(self, name, default=_sentinel):
        """
         Make sure no warnings are printed here, this is autocompletion,
         warnings should not be shown. See also GH #1383.

        """
    def get_safe_value(self):
        """
        Object is type %s and not simple
        """
    def get_api_type(self):
        """
        'dict'
        """
    def get_key_paths(self):
        """
         We could use list(keys()), but that might take a lot more memory.

        """
    def get_access_path_tuples(self):
        """
         Returns a dotted string path.

        """
    def execute_operation(self, other_access_handle, operator):
        """

                Returns Tuple[Optional[str], Tuple[AccessPath, ...]]
        
        """
    def needs_type_completions(self):
        """
        ''
        """
    def get_signature_params(self):
        """
        inspect.signature was introduced in 3.3
        """
    def get_return_annotation(self):
        """
        'return'
        """
    def negate(self):
        """

                Used to return a couple of infos that are needed when accessing the sub
                objects of an objects
        
        """
def _is_class_instance(obj):
    """
    Like inspect.* methods.
    """
