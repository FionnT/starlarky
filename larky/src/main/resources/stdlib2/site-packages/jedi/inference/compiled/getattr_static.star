def _check_instance(obj, attr):
    """
    __dict__
    """
def _check_class(klass, attr):
    """
    __dict__
    """
def _static_getmro_newstyle(klass):
    """
    '__mro__'
    """
    def _shadowed_dict(klass):
        """

                In Python 2 __dict__ is not overwritable:

                    class Foo(object): pass
                    setattr(Foo, '__dict__', 4)

                    Traceback (most recent call last):
                      File "<stdin>", line 1, in <module>
                    TypeError: __dict__ must be a dictionary object

                It applies to both newstyle and oldstyle classes:

                    class Foo(object): pass
                    setattr(Foo, '__dict__', 4)
                    Traceback (most recent call last):
                      File "<stdin>", line 1, in <module>
                    AttributeError: attribute '__dict__' of 'type' objects is not writable

                It also applies to instances of those objects. However to keep things
                straight forward, newstyle classes always use the complicated way of
                accessing it while oldstyle classes just use getattr.
        
        """
    def _OldStyleClass:
    """
    '__class__'
    """
    def _static_getmro(klass):
        """

                        Oldstyle mro is a really simplistic way of look up mro:
                        https://stackoverflow.com/questions/54867/what-is-the-difference-between-old-style-and-new-style-classes-in-python
                
        """
def _safe_hasattr(obj, name):
    """
    '__set__'
    """
def getattr_static(obj, attr, default=_sentinel):
    """
    Retrieve attributes without triggering dynamic lookup via the
           descriptor protocol,  __getattr__ or __getattribute__.

           Note: this function may not be able to retrieve all attributes
           that getattr can fetch (like dynamically created attributes)
           and may find attributes that getattr can't (like descriptors
           that raise AttributeError). It can also return descriptor objects
           instead of instance members in some cases. See the
           documentation for details.

           Returns a tuple `(attr, is_get_descriptor)`. is_get_descripter means that
           the attribute is a descriptor that has a `__get__` attribute.
    
    """
