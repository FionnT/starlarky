def try_iter_content(types, depth=0):
    """
    Helper method for static analysis.
    """
def ParamIssue(Exception):
    """

        Transforms a function or method with arguments to the signature that is
        given as an argument clinic notation.

        Argument clinic is part of CPython and used for all the functions that are
        implemented in C (Python 3.7):

            str.split.__text_signature__
            # Results in: '($self, /, sep=None, maxsplit=-1)'
    
    """
    def decorator(func):
        """
        Uses a list with argument clinic information (see PEP 436).
        """
def _parse_argument_clinic(string):
    """
     Optional arguments have to begin with a bracket. And should always be
     at the end of the arguments. This is therefore not a proper argument
     clinic implementation. `range()` for exmple allows an optional start
     value at the beginning.

    """
def _AbstractArgumentsMixin(object):
    """
     Allow testlist here as well for Python2's class inheritance
     definitions.

    """
def TreeArguments(AbstractArguments):
    """

            :param argument_node: May be an argument_node or a list of nodes.
        
    """
    def create_cached(cls, *args, **kwargs):
        """
         TODO zip_longest yields None, that means this would raise
         an exception?

        """
    def _as_tree_tuple_objects(self):
        """
        'argument'
        """
    def iter_calling_names_with_star(self):
        """
         TODO this function is a bit strange. probably refactor?

        """
    def __repr__(self):
        """
        '<%s: %s>'
        """
    def get_calling_nodes(self):
        """
         Dynamic parameters should not have calling nodes, because
         they are dynamic and extremely random.

        """
def ValuesArguments(AbstractArguments):
    """
    '<%s: %s>'
    """
def TreeArgumentsWrapper(_AbstractArgumentsMixin):
    """
    '<%s: %s>'
    """
def _iterate_star_args(context, array, input_node, funcdef=None):
    """
    '__iter__'
    """
def _star_star_dict(context, array, input_node, funcdef):
    """
    'dict'
    """
