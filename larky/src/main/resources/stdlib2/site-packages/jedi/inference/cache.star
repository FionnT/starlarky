2021-03-02 20:49:56,254 : INFO : tokenize_signature : --> do i ever get here?
def _memoize_default(default=_NO_DEFAULT, inference_state_is_first_arg=False,
                     second_arg_is_inference_state=False):
    """
     This is a typical memoization decorator, BUT there is one difference:
        To prevent recursion it sets defaults.

        Preventing recursion is in this case the much bigger use than speed. I
        don't think, that there is a big speed difference, but there are many cases
        where recursion could happen (think about a = b; b = a).
    
    """
    def func(function):
        """
         TODO These checks are kind of ugly and slow.

        """
def inference_state_function_cache(default=_NO_DEFAULT):
    """

        This is basically almost the same than the decorator above, it just caches
        class initializations. Either you do it this way or with decorators, but
        with decorators you lose class access (isinstance, etc).
    
    """
    def __call__(self, *args, **kwargs):
        """

            This is a special memoizer. It memoizes generators and also checks for
            recursion errors and returns no further iterator elemends in that case.
    
        """
    def func(function):
        """
        'Found a generator recursion for %s'
        """
