def _abs_path(module_context, path):
    """
     In this case we have no idea where we actually are in the file
     system.

    """
def _paths_from_assignment(module_context, expr_stmt):
    """

        Extracts the assigned strings from an assignment that looks as follows::

            sys.path[0:0] = ['module/path', 'another/module/path']

        This function is in general pretty tolerant (and therefore 'buggy').
        However, it's not a big issue usually to add more paths to Jedi's sys_path,
        because it will only affect Jedi in very random situations and by adding
        more paths than necessary, it usually benefits the general user.
    
    """
def _paths_from_list_modifications(module_context, trailer1, trailer2):
    """
     extract the path from either "sys.path.append" or "sys.path.insert" 
    """
def check_sys_path_modifications(module_context):
    """

        Detect sys.path modifications within module.
    
    """
    def get_sys_path_powers(names):
        """
        'power'
        """
def discover_buildout_paths(inference_state, script_path):
    """
    'Error trying to read buildout_script: %s'
    """
def _get_parent_dir_with_file(path, filename):
    """

        if there is a 'buildout.cfg' file in one of the parent directories of the
        given module it will return a list of all files in the buildout bin
        directory that look like python files.

        :param search_path: absolute path to the module.
        :type search_path: str
    
    """
def remove_python_path_suffix(path):
    """
    '.pyi'
    """
def transform_path_to_dotted(sys_path, module_path):
    """

        Returns the dotted path inside a sys.path as a list of names. e.g.

        >>> from os.path import abspath
        >>> transform_path_to_dotted([abspath("/foo")], abspath('/foo/bar/baz.py'))
        (('bar', 'baz'), False)

        Returns (None, False) if the path doesn't really resolve to anything.
        The second return part is if it is a package.
    
    """
    def iter_potential_solutions():
        """
         Strip the trailing slash/backslash

        """
