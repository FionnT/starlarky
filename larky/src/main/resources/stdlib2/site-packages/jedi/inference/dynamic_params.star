def _avoid_recursions(func):
    """
     We need to catch recursions that may occur, because an
     anonymous functions can create an anonymous parameter that is
     more or less self referencing.

    """
def dynamic_param_lookup(function_value, param_index):
    """

        A dynamic search for param values. If you try to complete a type:

        >>> def func(foo):
        ...     foo
        >>> func(1)
        >>> func("")

        It is not known what the type ``foo`` without analysing the whole code. You
        have to look for all calls to ``func`` to find out what ``foo`` possibly
        is.
    
    """
def _search_function_arguments(module_context, funcdef, string_name):
    """

        Returns a list of param names.
    
    """
def _get_lambda_name(node):
    """
    'expr_stmt'
    """
def _get_potential_nodes(module_value, func_string_name):
    """
    'trailer'
    """
def _check_name_for_execution(inference_state, context, compare_node, name, trailer):
    """
    ')'
    """
