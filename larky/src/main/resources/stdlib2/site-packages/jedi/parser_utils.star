def get_executable_nodes(node, last_added=False):
    """

        For static analysis.
    
    """
def get_sync_comp_fors(comp_for):
    """
    'comp_for'
    """
def for_stmt_defines_one_name(for_stmt):
    """

        Returns True if only one name is returned: ``for x in y``.
        Returns False if the for loop is more complicated: ``for x, z in y``.

        :returns: bool
    
    """
def get_flow_branch_keyword(flow_node, node):
    """
    'The node is not part of the flow.'
    """
def clean_scope_docstring(scope_node):
    """
     Returns a cleaned version of the docstring token. 
    """
def find_statement_documentation(tree_node):
    """
    'expr_stmt'
    """
def safe_literal_eval(value):
    """
    'f'
    """
2021-03-02 20:49:47,537 : INFO : tokenize_signature : --> do i ever get here?
def get_signature(funcdef, width=72, call_string=None,
                  omit_first_param=False, omit_return_annotation=False):
    """

        Generate a string signature of a function.

        :param width: Fold lines if a line is longer than this value.
        :type width: int
        :arg func_name: Override function name when given.
        :type func_name: str

        :rtype: str
    
    """
def move(node, line_offset):
    """

        Move the `Node` start_pos.
    
    """
def get_following_comment_same_line(node):
    """

        returns (as string) any comment that appears on the same line,
        after the node, including the #
    
    """
def is_scope(node):
    """
    'comp_for'
    """
def _get_parent_scope_cache(func):
    """

        Returns the underlying scope.
    
    """
def get_cached_code_lines(grammar, path):
    """

        Basically access the cached code lines in parso. This is not the nicest way
        to do this, but we avoid splitting all the lines again.
    
    """
def cut_value_at_position(leaf, position):
    """

        Cuts of the value of the leaf at position
    
    """
def expr_is_dotted(node):
    """

        Checks if a path looks like `name` or `name.foo.bar` and not `name()`.
    
    """
def _function_is_x_method(method_name):
    """

            This is a heuristic. It will not hold ALL the times, but it will be
            correct pretty much for anyone that doesn't try to beat it.
            staticmethod/classmethod are builtins and unless overwritten, this will
            be correct.
        
    """
