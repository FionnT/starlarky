def py2to3(ast):
    """
    Converts a typed Python 2.7 ast to a typed Python 3.5 ast.  The returned
            ast is a valid Python 3 ast with two exceptions:

            - `arg` objects may contain Tuple objects instead of just identifiers
               in the case of Python 2 function definitions/lambdas that use the tuple
               unpacking syntax.
            - `Raise` objects will have a `traceback` attribute added if the 3
               argument version of the Python 2 raise is used.


        Strange and Rare Uncovered Edge Cases:
            - Raise: if the second argument to a raise statement is a tuple, its
              contents are unpacked as arguments to the exception constructor.  This
              case is handled correctly if it's a literal tuple, but not if it's any
              other sort of tuple expression.
    
    """
def _copy_attributes(new_value, old_value):
    """
    '_attributes'
    """
def _AST2To3(ast27.NodeTransformer):
    """
     note: None, True, and False are *not* translated into NameConstants.

    """
    def __init__(self):
        """
        Visit a node.
        """
    def maybe_visit(self, node):
        """
        '{}' has non-Name name.
        """
    def visit_Print(self, n):
        """
        file
        """
    def visit_Raise(self, n):
        """
        None
        """
    def visit_Exec(self, n):
        """
        None
        """
    def visit_Repr(self, n):
        """
        repr
        """
    def visit_With(self, n):
        """
         TODO(ddfisher): find better attributes to give Ellipses

        """
    def visit_Ellipsis(self, n):
        """
         ellipses in Python 2 only exist as a slice index

        """
    def visit_arguments(self, n):
        """
        '{}' is not a valid argument.
        """
        def get_type_comment(i):
            """
             Python 3 uses a unary - operator for negative literals.

            """
