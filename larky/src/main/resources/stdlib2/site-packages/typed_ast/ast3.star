def parse(source, filename='<unknown>', mode='exec', feature_version=LATEST_MINOR_VERSION):
    """

        Parse the source into an AST node including type comments.
        Similar to compile(source, filename, mode, PyCF_ONLY_AST).

        Set feature_version to limit the syntax parsed to that minor version of
        Python 3.  For example, feature_version=5 will prevent new syntax features
        from Python 3.6+ from being used, such as fstrings.  Currently only
        fully supported for Python 3.5+ with partial support for Python 3.4.
        So, feature_version=3 or less are all equivalent to feature_version=4.

        When feature_version=4, the parser will forbid the use of the async/await
        keywords and the '@' operator, but will not forbid the use of PEP 448
        additional unpacking generalizations, which were also added in Python 3.5.

        When feature_version>=7, 'async' and 'await' are always keywords.
    
    """
def literal_eval(node_or_string):
    """

        Safely evaluate an expression node or a string containing a Python
        expression.  The string or node provided may only consist of the following
        Python literal structures: strings, bytes, numbers, tuples, lists, dicts,
        sets, booleans, and None.
    
    """
    def _convert(node):
        """
        'malformed node or string: '
        """
def dump(node, annotate_fields=True, include_attributes=False):
    """

        Return a formatted dump of the tree in *node*.  This is mainly useful for
        debugging purposes.  The returned string will show the names and the values
        for fields.  This makes the code impossible to evaluate, so if evaluation is
        wanted *annotate_fields* must be set to False.  Attributes such as line
        numbers and column offsets are not dumped by default.  If this is wanted,
        *include_attributes* can be set to True.
    
    """
    def _format(node):
        """
        '%s(%s'
        """
def copy_location(new_node, old_node):
    """

        Copy source location (`lineno` and `col_offset` attributes) from
        *old_node* to *new_node* if possible, and return *new_node*.
    
    """
def fix_missing_locations(node):
    """

        When you compile a node tree with compile(), the compiler expects lineno and
        col_offset attributes for every node that supports them.  This is rather
        tedious to fill in for generated nodes, so this helper adds these attributes
        recursively where not already set, by setting them to the values of the
        parent node.  It works recursively starting at *node*.
    
    """
    def _fix(node, lineno, col_offset):
        """
        'lineno'
        """
def increment_lineno(node, n=1):
    """

        Increment the line number of each node in the tree starting at *node* by *n*.
        This is useful to "move code" to a different location in a file.
    
    """
def iter_fields(node):
    """

        Yield a tuple of ``(fieldname, value)`` for each field in ``node._fields``
        that is present on *node*.
    
    """
def iter_child_nodes(node):
    """

        Yield all direct child nodes of *node*, that is, all fields that are nodes
        and all items of fields that are lists of nodes.
    
    """
def get_docstring(node, clean=True):
    """

        Return the docstring for the given node or None if no docstring can
        be found.  If the node provided does not have docstrings a TypeError
        will be raised.
    
    """
def walk(node):
    """

        Recursively yield all descendant nodes in the tree starting at *node*
        (including *node* itself), in no specified order.  This is useful if you
        only want to modify nodes in place and don't care about the context.
    
    """
def NodeVisitor(object):
    """

        A node visitor base class that walks the abstract syntax tree and calls a
        visitor function for every node found.  This function may return a value
        which is forwarded by the `visit` method.

        This class is meant to be subclassed, with the subclass adding visitor
        methods.

        Per default the visitor functions for the nodes are ``'visit_'`` +
        class name of the node.  So a `TryFinally` node visit function would
        be `visit_TryFinally`.  This behavior can be changed by overriding
        the `visit` method.  If no visitor function exists for a node
        (return value `None`) the `generic_visit` visitor is used instead.

        Don't use the `NodeVisitor` if you want to apply changes to nodes during
        traversing.  For this a special visitor exists (`NodeTransformer`) that
        allows modifications.
    
    """
    def visit(self, node):
        """
        Visit a node.
        """
    def generic_visit(self, node):
        """
        Called if no explicit visitor function exists for a node.
        """
def NodeTransformer(NodeVisitor):
    """

        A :class:`NodeVisitor` subclass that walks the abstract syntax tree and
        allows modification of nodes.

        The `NodeTransformer` will walk the AST and use the return value of the
        visitor methods to replace or remove the old node.  If the return value of
        the visitor method is ``None``, the node will be removed from its location,
        otherwise it is replaced with the return value.  The return value may be the
        original node in which case no replacement takes place.

        Here is an example transformer that rewrites all occurrences of name lookups
        (``foo``) to ``data['foo']``::

           class RewriteName(NodeTransformer):

               def visit_Name(self, node):
                   return copy_location(Subscript(
                       value=Name(id='data', ctx=Load()),
                       slice=Index(value=Str(s=node.id, kind='')),
                       ctx=node.ctx
                   ), node)

        Keep in mind that if the node you're operating on has child nodes you must
        either transform the child nodes yourself or call the :meth:`generic_visit`
        method for the node first.

        For nodes that were part of a collection of statements (that applies to all
        statement nodes), the visitor may also return a list of nodes rather than
        just a single node.

        Usually you use the transformer like this::

           node = YourTransformer().visit(node)
    
    """
    def generic_visit(self, node):
