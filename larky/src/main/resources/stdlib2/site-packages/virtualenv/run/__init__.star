def cli_run(args, options=None, setup_logging=True):
    """

        Create a virtual environment given some command line interface arguments.

        :param args: the command line arguments
        :param options: passing in a ``VirtualEnvOptions`` object allows return of the parsed options
        :param setup_logging: ``True`` if setup logging handlers, ``False`` to use handlers already registered
        :return: the session object of the creation (its structure for now is experimental and might change on short notice)
    
    """
def session_via_cli(args, options=None, setup_logging=True):
    """

        Create a virtualenv session (same as cli_run, but this does not perform the creation). Use this if you just want to
        query what the virtual environment would look like, but not actually create it.

        :param args: the command line arguments
        :param options: passing in a ``VirtualEnvOptions`` object allows return of the parsed options
        :param setup_logging: ``True`` if setup logging handlers, ``False`` to use handlers already registered
        :return: the session object of the creation (its structure for now is experimental and might change on short notice)
    
    """
def build_parser(args=None, options=None, setup_logging=True):
    """
    --with-traceback
    """
def build_parser_only(args=None):
    """
    Used to provide a parser for the doc generation
    """
def handle_extra_commands(options):
    """
    --read-only-app-data
    """
def add_version_flag(parser):
    """
    --version
    """
def _do_report_setup(parser, args, setup_logging):
    """
    , 
    """
