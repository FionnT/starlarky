def CreatorMeta(object):
    """
    A class that given a python Interpreter creates a virtual environment
    """
    def __init__(self, options, interpreter):
        """
        Construct a new virtual environment creator.

                :param options: the CLI option as parsed from :meth:`add_parser_arguments`
                :param interpreter: the interpreter to create virtual environment from
        
        """
    def __repr__(self):
        """
        {}({})
        """
    def _args(self):
        """
        dest
        """
    def can_create(cls, interpreter):
        """
        Determine if we can create a virtual environment.

                :param interpreter: the interpreter in question
                :return: ``None`` if we can't create, any other object otherwise that will be forwarded to \
                          :meth:`add_parser_arguments`
        
        """
    def add_parser_arguments(cls, parser, interpreter, meta, app_data):
        """
        Add CLI arguments for the creator.

                :param parser: the CLI parser
                :param app_data: the application data folder
                :param interpreter: the interpreter we're asked to create virtual environment for
                :param meta: value as returned by :meth:`can_create`
        
        """
    def create(self):
        """
        Perform the virtual environment creation.
        """
    def validate_dest(cls, raw_value):
        """
        No path separator in the path, valid chars and must be write-able
        """
        def non_write_able(dest, value):
            """
            the destination {} is not write-able at {}
            """
    def run(self):
        """
        delete %s
        """
    def set_pyenv_cfg(self):
        """
        home
        """
    def setup_ignore_vcs(self):
        """
        Generate ignore instructions for version control systems.
        """
    def debug(self):
        """

                :return: debug information about the virtual environment (only valid after :meth:`create` has run)
        
        """
    def debug_script(self):
        """
        PYTHONPATH
        """
