def CPythonmacOsFramework(CPython):
    """
     add a symlink to the host python image

    """
    def create(self):
        """
         change the install_name of the copied python executables

        """
    def _executables(cls, interpreter):
        """
         Make sure we use the embedded interpreter inside the framework, even if sys.executable points to the
         stub executable in ${sys.prefix}/bin.
         See http://groups.google.com/group/python-virtualenv/browse_thread/thread/17cab2f85da75951

        """
    def current_mach_o_image_path(self):
        """
        Python
        """
    def current_mach_o_image_path(self):
        """
        Python
        """
    def sources(cls, interpreter):
        """
         landmark for exec_prefix

        """
    def reload_code(self):
        """

                # the bundled site.py always adds the global site package if we're on python framework build, escape this
                import sysconfig
                config = sysconfig.get_config_vars()
                before = config["PYTHONFRAMEWORK"]
                try:
                    config["PYTHONFRAMEWORK"] = ""
                    {}
                finally:
                    config["PYTHONFRAMEWORK"] = before
        
        """
def CPython3macOsFramework(CPythonmacOsFramework, CPython3, CPythonPosix):
    """
    Python3
    """
    def current_mach_o_image_path(self):
        """
        @executable_path/../../../../Python3
        """
    def reload_code(self):
        """

                # the bundled site.py always adds the global site package if we're on python framework build, escape this
                import sys
                before = sys._framework
                try:
                    sys._framework = None
                    {}
                finally:
                    sys._framework = before
        
        """
def fix_mach_o(exe, current, new, max_size):
    """

        https://en.wikipedia.org/wiki/Mach-O

        Mach-O, short for Mach object file format, is a file format for executables, object code, shared libraries,
        dynamically-loaded code, and core dumps. A replacement for the a.out format, Mach-O offers more extensibility and
        faster access to information in the symbol table.

        Each Mach-O file is made up of one Mach-O header, followed by a series of load commands, followed by one or more
        segments, each of which contains between 0 and 255 sections. Mach-O uses the REL relocation format to handle
        references to symbols. When looking up symbols Mach-O uses a two-level namespace that encodes each symbol into an
        'object/symbol name' pair that is then linearly searched for by first the object and then the symbol name.

        The basic structure—a list of variable-length "load commands" that reference pages of data elsewhere in the file—was
        also used in the executable file format for Accent. The Accent file format was in turn, based on an idea from Spice
        Lisp.

        With the introduction of Mac OS X 10.6 platform the Mach-O file underwent a significant modification that causes
        binaries compiled on a computer running 10.6 or later to be (by default) executable only on computers running Mac
        OS X 10.6 or later. The difference stems from load commands that the dynamic linker, in previous Mac OS X versions,
        does not understand. Another significant change to the Mach-O format is the change in how the Link Edit tables
        (found in the __LINKEDIT section) function. In 10.6 these new Link Edit tables are compressed by removing unused and
        unneeded bits of information, however Mac OS X 10.5 and earlier cannot read this new Link Edit table format.
    
    """
def _builtin_change_mach_o(maxint):
    """
    >
    """
    def FileView(object):
    """
    A proxy for file-like objects that exposes a given view of a file. Modified from macholib.
    """
        def __init__(self, file_obj, start=0, size=maxint):
            """
            <fileview [{:d}, {:d}] {!r}>
            """
        def tell(self):
            """
            {} to offset {:d} is outside window [{:d}, {:d}]
            """
        def seek(self, offset, whence=0):
            """
            Invalid whence argument to seek: {!r}
            """
        def write(self, content):
            """
            write
            """
        def read(self, size=maxint):
            """
            read
            """
    def read_data(file, endian, num=1):
        """
        Read a given number of 32-bits unsigned integers from the given file with the given endianness.
        """
    def mach_o_change(at_path, what, value):
        """
        Replace a given name (what) in any LC_LOAD_DYLIB command found in the given binary with a new name (value),
                provided it's shorter.
        """
        def do_macho(file, bits, endian):
            """
             Read Mach-O header (the magic number is assumed read by the caller)

            """
        def do_file(file, offset=0, size=maxint):
            """
             Read magic number

            """
