def detailed_match_files(patterns, files, all_matches=None):
    """

    	Matches the files to the patterns, and returns which patterns matched
    	the files.

    	*patterns* (:class:`~collections.abc.Iterable` of :class:`~pathspec.pattern.Pattern`)
    	contains the patterns to use.

    	*files* (:class:`~collections.abc.Iterable` of :class:`str`) contains
    	the normalized file paths to be matched against *patterns*.

    	*all_matches* (:class:`boot` or :data:`None`) is whether to return all
    	matches patterns (:data:`True`), or only the last matched pattern
    	(:data:`False`). Default is :data:`None` for :data:`False`.

    	Returns the matched files (:class:`dict`) which maps each matched file
    	(:class:`str`) to the patterns that matched in order (:class:`.MatchDetail`).
	
    """
def _is_iterable(value):
    """

    	Check whether the value is an iterable (excludes strings).

    	*value* is the value to check,

    	Returns whether *value* is a iterable (:class:`bool`).
	
    """
def iter_tree_entries(root, on_error=None, follow_links=None):
    """

    	Walks the specified directory for all files and directories.

    	*root* (:class:`str`) is the root directory to search.

    	*on_error* (:class:`~collections.abc.Callable` or :data:`None`)
    	optionally is the error handler for file-system exceptions. It will be
    	called with the exception (:exc:`OSError`). Reraise the exception to
    	abort the walk. Default is :data:`None` to ignore file-system
    	exceptions.

    	*follow_links* (:class:`bool` or :data:`None`) optionally is whether
    	to walk symbolic links that resolve to directories. Default is
    	:data:`None` for :data:`True`.

    	Raises :exc:`RecursionError` if recursion is detected.

    	Returns an :class:`~collections.abc.Iterable` yielding each file or
    	directory entry (:class:`.TreeEntry`) relative to *root*.
	
    """
def iter_tree_files(root, on_error=None, follow_links=None):
    """

    	Walks the specified directory for all files.

    	*root* (:class:`str`) is the root directory to search for files.

    	*on_error* (:class:`~collections.abc.Callable` or :data:`None`)
    	optionally is the error handler for file-system exceptions. It will be
    	called with the exception (:exc:`OSError`). Reraise the exception to
    	abort the walk. Default is :data:`None` to ignore file-system
    	exceptions.

    	*follow_links* (:class:`bool` or :data:`None`) optionally is whether
    	to walk symbolic links that resolve to directories. Default is
    	:data:`None` for :data:`True`.

    	Raises :exc:`RecursionError` if recursion is detected.

    	Returns an :class:`~collections.abc.Iterable` yielding the path to
    	each file (:class:`str`) relative to *root*.
	
    """
def _iter_tree_entries_next(root_full, dir_rel, memo, on_error, follow_links):
    """

    	Scan the directory for all descendant files.

    	*root_full* (:class:`str`) the absolute path to the root directory.

    	*dir_rel* (:class:`str`) the path to the directory to scan relative to
    	*root_full*.

    	*memo* (:class:`dict`) keeps track of ancestor directories
    	encountered. Maps each ancestor real path (:class:`str`) to relative
    	path (:class:`str`).

    	*on_error* (:class:`~collections.abc.Callable` or :data:`None`)
    	optionally is the error handler for file-system exceptions.

    	*follow_links* (:class:`bool`) is whether to walk symbolic links that
    	resolve to directories.

    	Yields each entry (:class:`.TreeEntry`).
	
    """
def lookup_pattern(name):
    """

    	Lookups a registered pattern factory by name.

    	*name* (:class:`str`) is the name of the pattern factory.

    	Returns the registered pattern factory (:class:`~collections.abc.Callable`).
    	If no pattern factory is registered, raises :exc:`KeyError`.
	
    """
def match_file(patterns, file):
    """

    	Matches the file to the patterns.

    	*patterns* (:class:`~collections.abc.Iterable` of :class:`~pathspec.pattern.Pattern`)
    	contains the patterns to use.

    	*file* (:class:`str`) is the normalized file path to be matched
    	against *patterns*.

    	Returns :data:`True` if *file* matched; otherwise, :data:`False`.
	
    """
def match_files(patterns, files):
    """

    	Matches the files to the patterns.

    	*patterns* (:class:`~collections.abc.Iterable` of :class:`~pathspec.pattern.Pattern`)
    	contains the patterns to use.

    	*files* (:class:`~collections.abc.Iterable` of :class:`str`) contains
    	the normalized file paths to be matched against *patterns*.

    	Returns the matched files (:class:`set` of :class:`str`).
	
    """
def _normalize_entries(entries, separators=None):
    """

    	Normalizes the entry paths to use the POSIX path separator.

    	*entries* (:class:`~collections.abc.Iterable` of :class:`.TreeEntry`)
    	contains the entries to be normalized.

    	*separators* (:class:`~collections.abc.Collection` of :class:`str`; or
    	:data:`None`) optionally contains the path separators to normalize.
    	See :func:`normalize_file` for more information.

    	Returns a :class:`dict` mapping the each normalized file path (:class:`str`)
    	to the entry (:class:`.TreeEntry`)
	
    """
def normalize_file(file, separators=None):
    """

    	Normalizes the file path to use the POSIX path separator (i.e., ``'/'``).

    	*file* (:class:`str` or :class:`pathlib.PurePath`) is the file path.

    	*separators* (:class:`~collections.abc.Collection` of :class:`str`; or
    	:data:`None`) optionally contains the path separators to normalize.
    	This does not need to include the POSIX path separator (``'/'``), but
    	including it will not affect the results. Default is :data:`None` for
    	:data:`NORMALIZE_PATH_SEPS`. To prevent normalization, pass an empty
    	container (e.g., an empty tuple ``()``).

    	Returns the normalized file path (:class:`str`).
	
    """
def normalize_files(files, separators=None):
    """

    	Normalizes the file paths to use the POSIX path separator.

    	*files* (:class:`~collections.abc.Iterable` of :class:`str` or
    	:class:`pathlib.PurePath`) contains the file paths to be normalized.

    	*separators* (:class:`~collections.abc.Collection` of :class:`str`; or
    	:data:`None`) optionally contains the path separators to normalize.
    	See :func:`normalize_file` for more information.

    	Returns a :class:`dict` mapping the each normalized file path (:class:`str`)
    	to the original file path (:class:`str`)
	
    """
def register_pattern(name, pattern_factory, override=None):
    """

    	Registers the specified pattern factory.

    	*name* (:class:`str`) is the name to register the pattern factory
    	under.

    	*pattern_factory* (:class:`~collections.abc.Callable`) is used to
    	compile patterns. It must accept an uncompiled pattern (:class:`str`)
    	and return the compiled pattern (:class:`.Pattern`).

    	*override* (:class:`bool` or :data:`None`) optionally is whether to
    	allow overriding an already registered pattern under the same name
    	(:data:`True`), instead of raising an :exc:`AlreadyRegisteredError`
    	(:data:`False`). Default is :data:`None` for :data:`False`.
	
    """
def AlreadyRegisteredError(Exception):
    """

    	The :exc:`AlreadyRegisteredError` exception is raised when a pattern
    	factory is registered under a name already in use.
	
    """
	def __init__(self, name, pattern_factory):
    """

    		Initializes the :exc:`AlreadyRegisteredError` instance.

    		*name* (:class:`str`) is the name of the registered pattern.

    		*pattern_factory* (:class:`~collections.abc.Callable`) is the
    		registered pattern factory.
		
    """
	def message(self):
    """

    		*message* (:class:`str`) is the error message.
		
    """
	def name(self):
    """

    		*name* (:class:`str`) is the name of the registered pattern.
		
    """
	def pattern_factory(self):
    """

    		*pattern_factory* (:class:`~collections.abc.Callable`) is the
    		registered pattern factory.
		
    """
def RecursionError(Exception):
    """

    	The :exc:`RecursionError` exception is raised when recursion is
    	detected.
	
    """
	def __init__(self, real_path, first_path, second_path):
    """

    		Initializes the :exc:`RecursionError` instance.

    		*real_path* (:class:`str`) is the real path that recursion was
    		encountered on.

    		*first_path* (:class:`str`) is the first path encountered for
    		*real_path*.

    		*second_path* (:class:`str`) is the second path encountered for
    		*real_path*.
		
    """
	def first_path(self):
    """

    		*first_path* (:class:`str`) is the first path encountered for
    		:attr:`self.real_path <RecursionError.real_path>`.
		
    """
	def message(self):
    """

    		*message* (:class:`str`) is the error message.
		
    """
	def real_path(self):
    """

    		*real_path* (:class:`str`) is the real path that recursion was
    		encountered on.
		
    """
	def second_path(self):
    """

    		*second_path* (:class:`str`) is the second path encountered for
    		:attr:`self.real_path <RecursionError.real_path>`.
		
    """
def MatchDetail(object):
    """

    	The :class:`.MatchDetail` class contains information about
	
    """
	def __init__(self, patterns):
    """

    		Initialize the :class:`.MatchDetail` instance.

    		*patterns* (:class:`~collections.abc.Sequence` of :class:`~pathspec.pattern.Pattern`)
    		contains the patterns that matched the file in the order they were
    		encountered.
		
    """
def TreeEntry(object):
    """

    	The :class:`.TreeEntry` class contains information about a file-system
    	entry.
	
    """
	def __init__(self, name, path, lstat, stat):
    """

    		Initialize the :class:`.TreeEntry` instance.

    		*name* (:class:`str`) is the base name of the entry.

    		*path* (:class:`str`) is the relative path of the entry.

    		*lstat* (:class:`~os.stat_result`) is the stat result of the direct
    		entry.

    		*stat* (:class:`~os.stat_result`) is the stat result of the entry,
    		potentially linked.
		
    """
	def is_dir(self, follow_links=None):
    """

    		Get whether the entry is a directory.

    		*follow_links* (:class:`bool` or :data:`None`) is whether to follow
    		symbolic links. If this is :data:`True`, a symlink to a directory
    		will result in :data:`True`. Default is :data:`None` for :data:`True`.

    		Returns whether the entry is a directory (:class:`bool`).
		
    """
	def is_file(self, follow_links=None):
    """

    		Get whether the entry is a regular file.

    		*follow_links* (:class:`bool` or :data:`None`) is whether to follow
    		symbolic links. If this is :data:`True`, a symlink to a regular file
    		will result in :data:`True`. Default is :data:`None` for :data:`True`.

    		Returns whether the entry is a regular file (:class:`bool`).
		
    """
	def is_symlink(self):
    """

    		Returns whether the entry is a symbolic link (:class:`bool`).
		
    """
	def stat(self, follow_links=None):
    """

    		Get the cached stat result for the entry.

    		*follow_links* (:class:`bool` or :data:`None`) is whether to follow
    		symbolic links. If this is :data:`True`, the stat result of the
    		linked file will be returned. Default is :data:`None` for :data:`True`.

    		Returns that stat result (:class:`~os.stat_result`).
		
    """
