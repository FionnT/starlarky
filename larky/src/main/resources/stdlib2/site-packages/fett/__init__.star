def escape(s: str) -> str:
    """
    Escape HTML entity characters.
    """
def eat_error(f: Callable[[], Any]) -> Any:
    """
    Call f(), returning an empty string on error.
    """
def VariableStack:
    """
    Tracks variable scopes and loop counter depth.
    """
    def __init__(self) -> None:
        """
         type: List[str]
        """
    def __contains__(self, value: str) -> bool:
        """
        'i'
        """
def Template:
    """
    A compiled Fett template.
    """
    def __init__(self, template: str) -> None:
        """
        ''
        """
    def render(self, data: Dict[str, Any]) -> str:
        """
        Render this compiled template into a string using the given data.
        """
    def _compile(self, tasks: List[Tuple[str, ...]]) -> Any:
        """
         type: List[Tuple[str, ...]]
        """
    def is_interpolation(cls, tag: str) -> bool:
        """
        Check if a tag is interpolating or just a block structure
                   or comment
        """
    def transform_expr(cls, expr: str, unmangle: VariableStack) -> str:
        """
        Transform a space-delimited sequence of tokens into a chained
                   sequence of function calls.
        """
    def dot_to_subscript(cls, name: str, unmangle: VariableStack) -> str:
        """
        Transform a.b.c into data['a']['b']['c'].
        """
    def vet_name(cls, name: str) -> str:
        """
        Check if a name (field name or iteration variable) is legal.
        """
    def get_indentation(cls, template: str, match: Match) -> str:
        """
        Get the indentation string at a given point in the template.
        """
    def miniformat(cls, template: str, data: Any) -> str:
        """
        Simple string formatting routine.
        """
        def handle(match: Match) -> Any:
            """
            ''
            """
