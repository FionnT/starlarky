def _exponent_of(what, desc):
    """
    %s value out of bounds
    """
def _float_to_tuple(what):
    """
    bad %s exponent
    """
def LOC(dns.rdata.Rdata):
    """
    LOC record

        @ivar latitude: latitude
        @type latitude: (int, int, int, int, sign) tuple specifying the degrees, minutes,
        seconds, milliseconds, and sign of the coordinate.
        @ivar longitude: longitude
        @type longitude: (int, int, int, int, sign) tuple specifying the degrees,
        minutes, seconds, milliseconds, and sign of the coordinate.
        @ivar altitude: altitude
        @type altitude: float
        @ivar size: size of the sphere
        @type size: float
        @ivar horizontal_precision: horizontal precision
        @type horizontal_precision: float
        @ivar vertical_precision: vertical precision
        @type vertical_precision: float
        @see: RFC 1876
    """
2021-03-02 20:53:06,252 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:53:06,252 : INFO : tokenize_signature : --> do i ever get here?
    def __init__(self, rdclass, rdtype, latitude, longitude, altitude,
                 size=_default_size, hprec=_default_hprec,
                 vprec=_default_vprec):
        """
        Initialize a LOC record instance.

                The parameters I{latitude} and I{longitude} may be either a 4-tuple
                of integers specifying (degrees, minutes, seconds, milliseconds),
                or they may be floating point values specifying the number of
                degrees. The other parameters are floats. Size, horizontal precision,
                and vertical precision are specified in centimeters.
        """
    def to_text(self, origin=None, relativize=True, **kw):
        """
        'N'
        """
    def from_text(cls, rdclass, rdtype, tok, origin=None, relativize=True):
        """
        '.'
        """
    def to_wire(self, file, compress=None, origin=None):
        """
        size
        """
    def from_wire(cls, rdclass, rdtype, wire, current, rdlen, origin=None):
        """
        !BBBBIII
        """
    def _get_float_latitude(self):
        """
        latitude as a floating point value
        """
    def _get_float_longitude(self):
        """
        longitude as a floating point value
        """
