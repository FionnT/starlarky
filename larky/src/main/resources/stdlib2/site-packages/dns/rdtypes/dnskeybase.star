def flags_to_text_set(flags):
    """
    Convert a DNSKEY flags value to set texts
        @rtype: set([string])
    """
def flags_from_text_set(texts_set):
    """
    Convert set of DNSKEY flag mnemonic texts to DNSKEY flag value
        @rtype: int
    """
def DNSKEYBase(dns.rdata.Rdata):
    """
    Base class for rdata that is like a DNSKEY record

        @ivar flags: the key flags
        @type flags: int
        @ivar protocol: the protocol for which this key may be used
        @type protocol: int
        @ivar algorithm: the algorithm used for the key
        @type algorithm: int
        @ivar key: the public key
        @type key: string
    """
    def __init__(self, rdclass, rdtype, flags, protocol, algorithm, key):
        """
        '%d %d %d %s'
        """
    def from_text(cls, rdclass, rdtype, tok, origin=None, relativize=True):
        """
        b''
        """
    def to_wire(self, file, compress=None, origin=None):
        """
        !HBB
        """
    def from_wire(cls, rdclass, rdtype, wire, current, rdlen, origin=None):
        """
        '!HBB'
        """
    def flags_to_text_set(self):
        """
        Convert a DNSKEY flags value to set texts
                @rtype: set([string])
        """
