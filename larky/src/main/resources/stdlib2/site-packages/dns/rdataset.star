def DifferingCovers(dns.exception.DNSException):
    """
    An attempt was made to add a DNS SIG/RRSIG whose covered type
        is not the same as that of the other rdatas in the rdataset.
    """
def IncompatibleTypes(dns.exception.DNSException):
    """
    An attempt was made to add DNS RR data of an incompatible type.
    """
def Rdataset(dns.set.Set):
    """
    A DNS rdataset.
    """
    def __init__(self, rdclass, rdtype, covers=dns.rdatatype.NONE, ttl=0):
        """
        Create a new rdataset of the specified class and type.

                *rdclass*, an ``int``, the rdataclass.

                *rdtype*, an ``int``, the rdatatype.

                *covers*, an ``int``, the covered rdatatype.

                *ttl*, an ``int``, the TTL.
        
        """
    def _clone(self):
        """
        Perform TTL minimization.

                Set the TTL of the rdataset to be the lesser of the set's current
                TTL or the specified TTL.  If the set contains no rdatas, set the TTL
                to the specified TTL.

                *ttl*, an ``int``.
        
        """
    def add(self, rd, ttl=None):
        """
        Add the specified rdata to the rdataset.

                If the optional *ttl* parameter is supplied, then
                ``self.update_ttl(ttl)`` will be called prior to adding the rdata.

                *rd*, a ``dns.rdata.Rdata``, the rdata

                *ttl*, an ``int``, the TTL.

                Raises ``dns.rdataset.IncompatibleTypes`` if the type and class
                do not match the type and class of the rdataset.

                Raises ``dns.rdataset.DifferingCovers`` if the type is a signature
                type and the covered type does not match that of the rdataset.
        
        """
    def union_update(self, other):
        """
        Add all rdatas in other to self.

                *other*, a ``dns.rdataset.Rdataset``, the rdataset from which
                to update.
        
        """
    def __repr__(self):
        """
        ''
        """
    def __str__(self):
        """
        Convert the rdataset into DNS master file format.

                See ``dns.name.Name.choose_relativity`` for more information
                on how *origin* and *relativize* determine the way names
                are emitted.

                Any additional keyword arguments are passed on to the rdata
                ``to_text()`` method.

                *name*, a ``dns.name.Name``.  If name is not ``None``, emit RRs with
                *name* as the owner name.

                *origin*, a ``dns.name.Name`` or ``None``, the origin for relative
                names.

                *relativize*, a ``bool``.  If ``True``, names will be relativized
                to *origin*.
        
        """
2021-03-02 20:53:14,559 : INFO : tokenize_signature : --> do i ever get here?
    def to_wire(self, name, file, compress=None, origin=None,
                override_rdclass=None, want_shuffle=True):
        """
        Convert the rdataset to wire format.

                *name*, a ``dns.name.Name`` is the owner name to use.

                *file* is the file where the name is emitted (typically a
                BytesIO file).

                *compress*, a ``dict``, is the compression table to use.  If
                ``None`` (the default), names will not be compressed.

                *origin* is a ``dns.name.Name`` or ``None``.  If the name is
                relative and origin is not ``None``, then *origin* will be appended
                to it.

                *override_rdclass*, an ``int``, is used as the class instead of the
                class of the rdataset.  This is useful when rendering rdatasets
                associated with dynamic updates.

                *want_shuffle*, a ``bool``.  If ``True``, then the order of the
                Rdatas within the Rdataset will be shuffled before rendering.

                Returns an ``int``, the number of records emitted.
        
        """
    def match(self, rdclass, rdtype, covers):
        """
        Returns ``True`` if this rdataset matches the specified class,
                type, and covers.
        
        """
def from_text_list(rdclass, rdtype, ttl, text_rdatas):
    """
    Create an rdataset with the specified class, type, and TTL, and with
        the specified list of rdatas in text format.

        Returns a ``dns.rdataset.Rdataset`` object.
    
    """
def from_text(rdclass, rdtype, ttl, *text_rdatas):
    """
    Create an rdataset with the specified class, type, and TTL, and with
        the specified rdatas in text format.

        Returns a ``dns.rdataset.Rdataset`` object.
    
    """
def from_rdata_list(ttl, rdatas):
    """
    Create an rdataset with the specified TTL, and with
        the specified list of rdata objects.

        Returns a ``dns.rdataset.Rdataset`` object.
    
    """
def from_rdata(ttl, *rdatas):
    """
    Create an rdataset with the specified TTL, and with
        the specified rdata objects.

        Returns a ``dns.rdataset.Rdataset`` object.
    
    """
