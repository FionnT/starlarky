def _hexify(data, chunksize=_hex_chunksize):
    """
    Convert a binary string into its hex encoding, broken up into chunks
        of chunksize characters separated by a space.
    
    """
def _base64ify(data, chunksize=_base64_chunksize):
    """
    Convert a binary string into its base64 encoding, broken up into chunks
        of chunksize characters separated by a space.
    
    """
def _escapify(qstring):
    """
    Escape the characters in a quoted string which need it.
    """
def _truncate_bitmap(what):
    """
    Determine the index of greatest byte that isn't all zeros, and
        return the bitmap that contains all the bytes less than that index.
    
    """
def Rdata(object):
    """
    Base class for all DNS rdata types.
    """
    def __init__(self, rdclass, rdtype):
        """
        Initialize an rdata.

                *rdclass*, an ``int`` is the rdataclass of the Rdata.
                *rdtype*, an ``int`` is the rdatatype of the Rdata.
        
        """
    def covers(self):
        """
        Return the type a Rdata covers.

                DNS SIG/RRSIG rdatas apply to a specific type; this type is
                returned by the covers() function.  If the rdata type is not
                SIG or RRSIG, dns.rdatatype.NONE is returned.  This is useful when
                creating rdatasets, allowing the rdataset to contain only RRSIGs
                of a particular type, e.g. RRSIG(NS).

                Returns an ``int``.
        
        """
    def extended_rdatatype(self):
        """
        Return a 32-bit type value, the least significant 16 bits of
                which are the ordinary DNS type, and the upper 16 bits of which are
                the "covered" type, if any.

                Returns an ``int``.
        
        """
    def to_text(self, origin=None, relativize=True, **kw):
        """
        Convert an rdata to text format.

                Returns a ``text``.
        
        """
    def to_wire(self, file, compress=None, origin=None):
        """
        Convert an rdata to wire format.

                Returns a ``binary``.
        
        """
    def to_digestable(self, origin=None):
        """
        Convert rdata to a format suitable for digesting in hashes.  This
                is also the DNSSEC canonical form.

                Returns a ``binary``.
        
        """
    def validate(self):
        """
        Check that the current contents of the rdata's fields are
                valid.

                If you change an rdata by assigning to its fields,
                it is a good idea to call validate() when you are done making
                changes.

                Raises various exceptions if there are problems.

                Returns ``None``.
        
        """
    def __repr__(self):
        """
        ''
        """
    def __str__(self):
        """
        Compare an rdata with another rdata of the same rdtype and
                rdclass.

                Return < 0 if self < other in the DNSSEC ordering, 0 if self
                == other, and > 0 if self > other.

        
        """
    def __eq__(self, other):
        """
        Convert any domain names in the rdata to the specified
                relativization.
        
        """
def GenericRdata(Rdata):
    """
    Generic Rdata Class

        This class is used for rdata types for which we have no better
        implementation.  It implements the DNS "unknown RRs" scheme.
    
    """
    def __init__(self, rdclass, rdtype, data):
        """
        r'\# %d '
        """
    def from_text(cls, rdclass, rdtype, tok, origin=None, relativize=True):
        """
        r'\#'
        """
    def to_wire(self, file, compress=None, origin=None):
        """
        'dns.rdtypes'
        """
def get_rdata_class(rdclass, rdtype):
    """
    '.'
    """
def from_text(rdclass, rdtype, tok, origin=None, relativize=True):
    """
    Build an rdata object from text format.

        This function attempts to dynamically load a class which
        implements the specified rdata class and type.  If there is no
        class-and-type-specific implementation, the GenericRdata class
        is used.

        Once a class is chosen, its from_text() class method is called
        with the parameters to this function.

        If *tok* is a ``text``, then a tokenizer is created and the string
        is used as its input.

        *rdclass*, an ``int``, the rdataclass.

        *rdtype*, an ``int``, the rdatatype.

        *tok*, a ``dns.tokenizer.Tokenizer`` or a ``text``.

        *origin*, a ``dns.name.Name`` (or ``None``), the
        origin to use for relative names.

        *relativize*, a ``bool``.  If true, name will be relativized to
        the specified origin.

        Returns an instance of the chosen Rdata subclass.
    
    """
def from_wire(rdclass, rdtype, wire, current, rdlen, origin=None):
    """
    Build an rdata object from wire format

        This function attempts to dynamically load a class which
        implements the specified rdata class and type.  If there is no
        class-and-type-specific implementation, the GenericRdata class
        is used.

        Once a class is chosen, its from_wire() class method is called
        with the parameters to this function.

        *rdclass*, an ``int``, the rdataclass.

        *rdtype*, an ``int``, the rdatatype.

        *wire*, a ``binary``, the wire-format message.

        *current*, an ``int``, the offset in wire of the beginning of
        the rdata.

        *rdlen*, an ``int``, the length of the wire-format rdata

        *origin*, a ``dns.name.Name`` (or ``None``).  If not ``None``,
        then names will be relativized to this origin.

        Returns an instance of the chosen Rdata subclass.
    
    """
def RdatatypeExists(dns.exception.DNSException):
    """
    DNS rdatatype already exists.
    """
2021-03-02 20:53:18,236 : INFO : tokenize_signature : --> do i ever get here?
def register_type(implementation, rdtype, rdtype_text, is_singleton=False,
                  rdclass=dns.rdataclass.IN):
    """
    Dynamically register a module to handle an rdatatype.

        *implementation*, a module implementing the type in the usual dnspython
        way.

        *rdtype*, an ``int``, the rdatatype to register.

        *rdtype_text*, a ``text``, the textual form of the rdatatype.

        *is_singleton*, a ``bool``, indicating if the type is a singleton (i.e.
        RRsets of the type can have only one member.)

        *rdclass*, the rdataclass of the type, or ``dns.rdataclass.ANY`` if
        it applies to all classes.
    
    """
