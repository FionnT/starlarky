def BadTime(dns.exception.DNSException):
    """
    The current time is not within the TSIG's validity time.
    """
def BadSignature(dns.exception.DNSException):
    """
    The TSIG signature fails to verify.
    """
def PeerError(dns.exception.DNSException):
    """
    Base class for all TSIG errors generated by the remote peer
    """
def PeerBadKey(PeerError):
    """
    The peer didn't know the key we used
    """
def PeerBadSignature(PeerError):
    """
    The peer didn't like the signature we sent
    """
def PeerBadTime(PeerError):
    """
    The peer didn't like the time we sent
    """
def PeerBadTruncation(PeerError):
    """
    The peer didn't like amount of truncation in the TSIG we sent
    """
2021-03-02 20:53:12,489 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:53:12,490 : INFO : tokenize_signature : --> do i ever get here?
def sign(wire, keyname, secret, time, fudge, original_id, error,
         other_data, request_mac, ctx=None, multi=False, first=True,
         algorithm=default_algorithm):
    """
    Return a (tsig_rdata, mac, ctx) tuple containing the HMAC TSIG rdata
        for the input parameters, the HMAC MAC calculated by applying the
        TSIG signature algorithm, and the TSIG digest context.
        @rtype: (string, string, hmac.HMAC object)
        @raises ValueError: I{other_data} is too long
        @raises NotImplementedError: I{algorithm} is not supported
    
    """
2021-03-02 20:53:12,492 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:53:12,492 : INFO : tokenize_signature : --> do i ever get here?
def hmac_md5(wire, keyname, secret, time, fudge, original_id, error,
             other_data, request_mac, ctx=None, multi=False, first=True,
             algorithm=default_algorithm):
    """
    Validate the specified TSIG rdata against the other input parameters.

        @raises FormError: The TSIG is badly formed.
        @raises BadTime: There is too much time skew between the client and the
        server.
        @raises BadSignature: The TSIG signature did not validate
        @rtype: hmac.HMAC object
    """
def get_algorithm(algorithm):
    """
    Returns the wire format string and the hash module to use for the
        specified TSIG algorithm

        @rtype: (string, hash constructor)
        @raises NotImplementedError: I{algorithm} is not supported
    
    """
def get_algorithm_and_mac(wire, tsig_rdata, tsig_rdlen):
    """
    Return the tsig algorithm for the specified tsig_rdata
        @raises FormError: The TSIG is badly formed.
    
    """
