def UngetBufferFull(dns.exception.DNSException):
    """
    An attempt was made to unget a token when the unget buffer was full.
    """
def Token(object):
    """
    A DNS master file format token.

        ttype: The token type
        value: The token value
        has_escape: Does the token value contain escapes?
    
    """
    def __init__(self, ttype, value='', has_escape=False):
        """
        Initialize a token instance.
        """
    def is_eof(self):
        """
        '%d "%s"'
        """
    def unescape(self):
        """
        ''
        """
    def __len__(self):
        """
        A DNS master file format tokenizer.

            A token object is basically a (type, value) tuple.  The valid
            types are EOF, EOL, WHITESPACE, IDENTIFIER, QUOTED_STRING,
            COMMENT, and DELIMITER.

            file: The file to tokenize

            ungotten_char: The most recently ungotten character, or None.

            ungotten_token: The most recently ungotten token, or None.

            multiline: The current multiline level.  This value is increased
            by one every time a '(' delimiter is read, and decreased by one every time
            a ')' delimiter is read.

            quoting: This variable is true if the tokenizer is currently
            reading a quoted string.

            eof: This variable is true if the tokenizer has encountered EOF.

            delimiters: The current delimiter dictionary.

            line_number: The current line number

            filename: A filename that will be returned by the where() method.
    
        """
    def __init__(self, f=sys.stdin, filename=None):
        """
        Initialize a tokenizer instance.

                f: The file to tokenize.  The default is sys.stdin.
                This parameter may also be a string, in which case the tokenizer
                will take its input from the contents of the string.

                filename: the name of the filename that the where() method
                will return.
        
        """
    def _get_char(self):
        """
        Read a character from input.
        
        """
    def where(self):
        """
        Return the current location in the input.

                Returns a (string, int) tuple.  The first item is the filename of
                the input, the second is the current line number.
        
        """
    def _unget_char(self, c):
        """
        Unget a character.

                The unget buffer for characters is only one character large; it is
                an error to try to unget a character when the unget buffer is not
                empty.

                c: the character to unget
                raises UngetBufferFull: there is already an ungotten char
        
        """
    def skip_whitespace(self):
        """
        Consume input until a non-whitespace character is encountered.

                The non-whitespace character is then ungotten, and the number of
                whitespace characters consumed is returned.

                If the tokenizer is in multiline mode, then newlines are whitespace.

                Returns the number of characters skipped.
        
        """
    def get(self, want_leading=False, want_comment=False):
        """
        Get the next token.

                want_leading: If True, return a WHITESPACE token if the
                first character read is whitespace.  The default is False.

                want_comment: If True, return a COMMENT token if the
                first token read is a comment.  The default is False.

                Raises dns.exception.UnexpectedEnd: input ended prematurely

                Raises dns.exception.SyntaxError: input was badly formed

                Returns a Token.
        
        """
    def unget(self, token):
        """
        Unget a token.

                The unget buffer for tokens is only one token large; it is
                an error to try to unget a token when the unget buffer is not
                empty.

                token: the token to unget

                Raises UngetBufferFull: there is already an ungotten token
        
        """
    def next(self):
        """
        Return the next item in an iteration.

                Returns a Token.
        
        """
    def __iter__(self):
        """
         Helpers


        """
    def get_int(self, base=10):
        """
        Read the next token and interpret it as an integer.

                Raises dns.exception.SyntaxError if not an integer.

                Returns an int.
        
        """
    def get_uint8(self):
        """
        Read the next token and interpret it as an 8-bit unsigned
                integer.

                Raises dns.exception.SyntaxError if not an 8-bit unsigned integer.

                Returns an int.
        
        """
    def get_uint16(self, base=10):
        """
        Read the next token and interpret it as a 16-bit unsigned
                integer.

                Raises dns.exception.SyntaxError if not a 16-bit unsigned integer.

                Returns an int.
        
        """
    def get_uint32(self):
        """
        Read the next token and interpret it as a 32-bit unsigned
                integer.

                Raises dns.exception.SyntaxError if not a 32-bit unsigned integer.

                Returns an int.
        
        """
    def get_string(self, origin=None):
        """
        Read the next token and interpret it as a string.

                Raises dns.exception.SyntaxError if not a string.

                Returns a string.
        
        """
    def get_identifier(self, origin=None):
        """
        Read the next token, which should be an identifier.

                Raises dns.exception.SyntaxError if not an identifier.

                Returns a string.
        
        """
    def get_name(self, origin=None):
        """
        Read the next token and interpret it as a DNS name.

                Raises dns.exception.SyntaxError if not a name.

                Returns a dns.name.Name.
        
        """
    def get_eol(self):
        """
        Read the next token and raise an exception if it isn't EOL or
                EOF.

                Returns a string.
        
        """
    def get_ttl(self):
        """
        Read the next token and interpret it as a DNS TTL.

                Raises dns.exception.SyntaxError or dns.ttl.BadTTL if not an
                identifier or badly formed.

                Returns an int.
        
        """
