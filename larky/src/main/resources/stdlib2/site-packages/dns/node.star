def Node(object):
    """
    A Node is a set of rdatasets.
    """
    def __init__(self):
        """
        : the set of rdatsets, represented as a list.

        """
    def to_text(self, name, **kw):
        """
        Convert a node to text format.

                Each rdataset at the node is printed.  Any keyword arguments
                to this method are passed on to the rdataset's to_text() method.

                *name*, a ``dns.name.Name`` or ``text``, the owner name of the rdatasets.

                Returns a ``text``.
        
        """
    def __repr__(self):
        """
        '<DNS node '
        """
    def __eq__(self, other):
        """

         This is inefficient.  Good thing we don't need to do it much.


        """
    def __ne__(self, other):
        """
        Find an rdataset matching the specified properties in the
                current node.

                *rdclass*, an ``int``, the class of the rdataset.

                *rdtype*, an ``int``, the type of the rdataset.

                *covers*, an ``int``, the covered type.  Usually this value is
                dns.rdatatype.NONE, but if the rdtype is dns.rdatatype.SIG or
                dns.rdatatype.RRSIG, then the covers value will be the rdata
                type the SIG/RRSIG covers.  The library treats the SIG and RRSIG
                types as if they were a family of
                types, e.g. RRSIG(A), RRSIG(NS), RRSIG(SOA).  This makes RRSIGs much
                easier to work with than if RRSIGs covering different rdata
                types were aggregated into a single RRSIG rdataset.

                *create*, a ``bool``.  If True, create the rdataset if it is not found.

                Raises ``KeyError`` if an rdataset of the desired type and class does
                not exist and *create* is not ``True``.

                Returns a ``dns.rdataset.Rdataset``.
        
        """
2021-03-02 20:53:16,895 : INFO : tokenize_signature : --> do i ever get here?
    def get_rdataset(self, rdclass, rdtype, covers=dns.rdatatype.NONE,
                     create=False):
        """
        Get an rdataset matching the specified properties in the
                current node.

                None is returned if an rdataset of the specified type and
                class does not exist and *create* is not ``True``.

                *rdclass*, an ``int``, the class of the rdataset.

                *rdtype*, an ``int``, the type of the rdataset.

                *covers*, an ``int``, the covered type.  Usually this value is
                dns.rdatatype.NONE, but if the rdtype is dns.rdatatype.SIG or
                dns.rdatatype.RRSIG, then the covers value will be the rdata
                type the SIG/RRSIG covers.  The library treats the SIG and RRSIG
                types as if they were a family of
                types, e.g. RRSIG(A), RRSIG(NS), RRSIG(SOA).  This makes RRSIGs much
                easier to work with than if RRSIGs covering different rdata
                types were aggregated into a single RRSIG rdataset.

                *create*, a ``bool``.  If True, create the rdataset if it is not found.

                Returns a ``dns.rdataset.Rdataset`` or ``None``.
        
        """
    def delete_rdataset(self, rdclass, rdtype, covers=dns.rdatatype.NONE):
        """
        Delete the rdataset matching the specified properties in the
                current node.

                If a matching rdataset does not exist, it is not an error.

                *rdclass*, an ``int``, the class of the rdataset.

                *rdtype*, an ``int``, the type of the rdataset.

                *covers*, an ``int``, the covered type.
        
        """
    def replace_rdataset(self, replacement):
        """
        Replace an rdataset.

                It is not an error if there is no rdataset matching *replacement*.

                Ownership of the *replacement* object is transferred to the node;
                in other words, this method does not store a copy of *replacement*
                at the node, it stores *replacement* itself.

                *replacement*, a ``dns.rdataset.Rdataset``.

                Raises ``ValueError`` if *replacement* is not a
                ``dns.rdataset.Rdataset``.
        
        """
