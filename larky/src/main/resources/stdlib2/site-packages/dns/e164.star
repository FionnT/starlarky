def from_e164(text, origin=public_enum_domain):
    """
    Convert an E.164 number in textual form into a Name object whose
        value is the ENUM domain name for that number.

        Non-digits in the text are ignored, i.e. "16505551212",
        "+1.650.555.1212" and "1 (650) 555-1212" are all the same.

        *text*, a ``text``, is an E.164 number in textual form.

        *origin*, a ``dns.name.Name``, the domain in which the number
        should be constructed.  The default is ``e164.arpa.``.

        Returns a ``dns.name.Name``.
    
    """
def to_e164(name, origin=public_enum_domain, want_plus_prefix=True):
    """
    Convert an ENUM domain name into an E.164 number.

        Note that dnspython does not have any information about preferred
        number formats within national numbering plans, so all numbers are
        emitted as a simple string of digits, prefixed by a '+' (unless
        *want_plus_prefix* is ``False``).

        *name* is a ``dns.name.Name``, the ENUM domain name.

        *origin* is a ``dns.name.Name``, a domain containing the ENUM
        domain name.  The name is relativized to this domain before being
        converted to text.  If ``None``, no relativization is done.

        *want_plus_prefix* is a ``bool``.  If True, add a '+' to the beginning of
        the returned number.

        Returns a ``text``.

    
    """
def query(number, domains, resolver=None):
    """
    Look for NAPTR RRs for the specified number in the specified domains.

        e.g. lookup('16505551212', ['e164.dnspython.org.', 'e164.arpa.'])

        *number*, a ``text`` is the number to look for.

        *domains* is an iterable containing ``dns.name.Name`` values.

        *resolver*, a ``dns.resolver.Resolver``, is the resolver to use.  If
        ``None``, the default resolver is used.
    
    """
