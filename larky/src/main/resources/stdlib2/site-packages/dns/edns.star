def Option(object):
    """
    Base class for all EDNS option types.
    """
    def __init__(self, otype):
        """
        Initialize an option.

                *otype*, an ``int``, is the option type.
        
        """
    def to_wire(self, file):
        """
        Convert an option to wire format.
        
        """
    def from_wire(cls, otype, wire, current, olen):
        """
        Build an EDNS option object from wire format.

                *otype*, an ``int``, is the option type.

                *wire*, a ``binary``, is the wire-format message.

                *current*, an ``int``, is the offset in *wire* of the beginning
                of the rdata.

                *olen*, an ``int``, is the length of the wire-format option data

                Returns a ``dns.edns.Option``.
        
        """
    def _cmp(self, other):
        """
        Compare an EDNS option with another option of the same type.

                Returns < 0 if < *other*, 0 if == *other*, and > 0 if > *other*.
        
        """
    def __eq__(self, other):
        """
        Generic Option Class

            This class is used for EDNS option types for which we have no better
            implementation.
    
        """
    def __init__(self, otype, data):
        """
        Generic %d
        """
    def from_wire(cls, otype, wire, current, olen):
        """
        EDNS Client Subnet (ECS, RFC7871)
        """
    def __init__(self, address, srclen=None, scopelen=0):
        """
        *address*, a ``text``, is the client address information.

                *srclen*, an ``int``, the source prefix length, which is the
                leftmost number of bits of the address to be used for the
                lookup.  The default is 24 for IPv4 and 56 for IPv6.

                *scopelen*, an ``int``, the scope prefix length.  This value
                must be 0 in queries, and should be set in responses.
        
        """
    def to_text(self):
        """
        ECS {}/{} scope/{}
        """
    def to_wire(self, file):
        """
        '!H'
        """
    def from_wire(cls, otype, wire, cur, olen):
        """
        '!HBB'
        """
    def _cmp(self, other):
        """
        Return the class for the specified option type.

            The GenericOption class is used if a more specific class is not
            known.
    
        """
def option_from_wire(otype, wire, current, olen):
    """
    Build an EDNS option object from wire format.

        *otype*, an ``int``, is the option type.

        *wire*, a ``binary``, is the wire-format message.

        *current*, an ``int``, is the offset in *wire* of the beginning
        of the rdata.

        *olen*, an ``int``, is the length of the wire-format option data

        Returns an instance of a subclass of ``dns.edns.Option``.
    
    """
