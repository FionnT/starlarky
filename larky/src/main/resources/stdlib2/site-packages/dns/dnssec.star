def UnsupportedAlgorithm(dns.exception.DNSException):
    """
    The DNSSEC algorithm is not supported.
    """
def ValidationFailure(dns.exception.DNSException):
    """
    The DNSSEC signature is invalid.
    """
def algorithm_from_text(text):
    """
    Convert text into a DNSSEC algorithm value.

        Returns an ``int``.
    
    """
def algorithm_to_text(value):
    """
    Convert a DNSSEC algorithm value to text

        Returns a ``str``.
    
    """
def _to_rdata(record, origin):
    """
    Return the key id (a 16-bit number) for the specified key.

        Note the *origin* parameter of this function is historical and
        is not needed.

        Returns an ``int`` between 0 and 65535.
    
    """
def make_ds(name, key, algorithm, origin=None):
    """
    Create a DS record for a DNSSEC key.

        *name* is the owner name of the DS record.

        *key* is a ``dns.rdtypes.ANY.DNSKEY``.

        *algorithm* is a string describing which hash algorithm to use.  The
        currently supported hashes are "SHA1" and "SHA256".  Case does not
        matter for these strings.

        *origin* is a ``dns.name.Name`` and will be used as the origin
        if *key* is a relative name.

        Returns a ``dns.rdtypes.ANY.DS``.
    
    """
def _find_candidate_keys(keys, rrsig):
    """
    'unknown hash for algorithm %u'
    """
def _make_algorithm_id(algorithm):
    """
    'unknown algorithm %u'
    """
def _validate_rrsig(rrset, rrsig, keys, origin=None, now=None):
    """
    Validate an RRset against a single signature rdata

        The owner name of *rrsig* is assumed to be the same as the owner name
        of *rrset*.

        *rrset* is the RRset to validate.  It can be a ``dns.rrset.RRset`` or
        a ``(dns.name.Name, dns.rdataset.Rdataset)`` tuple.

        *rrsig* is a ``dns.rdata.Rdata``, the signature to validate.

        *keys* is the key dictionary, used to find the DNSKEY associated with
        a given name.  The dictionary is keyed by a ``dns.name.Name``, and has
        ``dns.node.Node`` or ``dns.rdataset.Rdataset`` values.

        *origin* is a ``dns.name.Name``, the origin to use for relative names.

        *now* is an ``int``, the time to use when validating the signatures,
        in seconds since the UNIX epoch.  The default is the current time.
    
    """
def _validate(rrset, rrsigset, keys, origin=None, now=None):
    """
    Validate an RRset.

        *rrset* is the RRset to validate.  It can be a ``dns.rrset.RRset`` or
        a ``(dns.name.Name, dns.rdataset.Rdataset)`` tuple.

        *rrsigset* is the signature RRset to be validated.  It can be a
        ``dns.rrset.RRset`` or a ``(dns.name.Name, dns.rdataset.Rdataset)`` tuple.

        *keys* is the key dictionary, used to find the DNSKEY associated with
        a given name.  The dictionary is keyed by a ``dns.name.Name``, and has
        ``dns.node.Node`` or ``dns.rdataset.Rdataset`` values.

        *origin* is a ``dns.name.Name``, the origin to use for relative names.

        *now* is an ``int``, the time to use when validating the signatures,
        in seconds since the UNIX epoch.  The default is the current time.
    
    """
def _need_pycrypto(*args, **kwargs):
    """
    DNSSEC validation requires pycryptodome/pycryptodomex
    """
        def ECKeyWrapper(object):
