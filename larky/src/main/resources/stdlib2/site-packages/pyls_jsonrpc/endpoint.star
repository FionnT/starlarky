def Endpoint(object):
    """
    A JSON RPC endpoint for managing messages sent to/from the client.

            Args:
                dispatcher (dict): A dictionary of method name to handler function.
                    The handler functions should return either the result or a callable that will be used to asynchronously
                    compute the result.
                consumer (fn): A function that consumes JSON RPC message dicts and sends them to the client.
                id_generator (fn, optional): A function used to generate request IDs.
                    Defaults to the string value of :func:`uuid.uuid4`.
                max_workers (int, optional): The number of workers in the asynchronous executor pool.
        
    """
    def shutdown(self):
        """
        Send a JSON RPC notification to the client.

                 Args:
                     method (str): The method name of the notification to send
                     params (any): The payload of the notification
         
        """
    def request(self, method, params=None):
        """
        Send a JSON RPC request to the client.

                Args:
                    method (str): The method name of the message to send
                    params (any): The payload of the message

                Returns:
                    Future that will resolve once a response has been received
        
        """
    def _cancel_callback(self, request_id):
        """
        Construct a cancellation callback for the given request ID.
        """
        def callback(future):
            """
            'id'
            """
    def consume(self, message):
        """
        Consume a JSON RPC message from the client.

                Args:
                    message (dict): The JSON RPC message sent by the client
        
        """
    def _handle_notification(self, method, params):
        """
        Handle a notification from the client.
        """
    def _notification_callback(method, params):
        """
        Construct a notification callback for the given request ID.
        """
        def callback(future):
            """
            Successfully handled async notification %s %s
            """
    def _handle_cancel_notification(self, msg_id):
        """
        Handle a cancel notification from the client.
        """
    def _handle_request(self, msg_id, method, params):
        """
        Handle a request from the client.
        """
    def _request_callback(self, request_id):
        """
        Construct a request callback for the given request ID.
        """
        def callback(future):
            """
             Remove the future from the client requests map

            """
    def _handle_response(self, msg_id, result=None, error=None):
        """
        Handle a response from the client.
        """
