def _select_progress_class(preferred, fallback):
    """
     type: (Bar, Bar) -> Bar

    """
def InterruptibleMixin(object):
    """

        Helper to ensure that self.finish() gets called on keyboard interrupt.

        This allows downloads to be interrupted without leaving temporary state
        (like hidden cursors) behind.

        This class is similar to the progress library's existing SigIntMixin
        helper, but as of version 1.2, that helper has the following problems:

        1. It calls sys.exit().
        2. It discards the existing SIGINT handler completely.
        3. It leaves its own handler in place even after an uninterrupted finish,
           which will have unexpected delayed effects if the user triggers an
           unrelated keyboard interrupt some time after a progress-displaying
           download has already completed, for example.
    
    """
    def __init__(self, *args, **kwargs):
        """
         type: (List[Any], Dict[Any, Any]) -> None

        """
    def finish(self):
        """
         type: () -> None

        """
    def handle_sigint(self, signum, frame):  # type: ignore
        """
         type: ignore
        """
def SilentBar(Bar):
    """
     type: () -> None

    """
def BlueEmojiBar(IncrementalBar):
    """
    %(percent)d%%
    """
def DownloadProgressMixin(object):
    """
     type: (List[Any], Dict[Any, Any]) -> None
     https://github.com/python/mypy/issues/5887

    """
    def downloaded(self):
        """
         type: () -> str

        """
    def download_speed(self):
        """
         type: () -> str
         Avoid zero division errors...

        """
    def pretty_eta(self):
        """
         type: () -> str

        """
    def iter(self, it):  # type: ignore
        """
         type: ignore
        """
def WindowsMixin(object):
    """
     type: (List[Any], Dict[Any, Any]) -> None
     The Windows terminal does not support the hide/show cursor ANSI codes
     even with colorama. So we'll ensure that hide_cursor is False on
     Windows.
     This call needs to go before the super() call, so that hide_cursor
     is set in time. The base progress bar class writes the "hide cursor
     code to the terminal in its init, so if we don't set this soon
     enough, we get a "hide" with no corresponding "show"...

    """
2021-03-02 20:50:33,650 : INFO : tokenize_signature : --> do i ever get here?
def BaseDownloadProgressBar(WindowsMixin, InterruptibleMixin,
                              DownloadProgressMixin):
    """
    %(percent)d%%
    """
2021-03-02 20:50:33,650 : INFO : tokenize_signature : --> do i ever get here?
def DefaultDownloadProgressBar(BaseDownloadProgressBar,
                                 _BaseBar):
    """
    %(downloaded)s %(download_speed)s
    """
    def next_phase(self):
        """
         type: () -> str

        """
    def update(self):
        """
         type: () -> None

        """
def DownloadProgressProvider(progress_bar, max=None):  # type: ignore
    """
     type: ignore
    """
