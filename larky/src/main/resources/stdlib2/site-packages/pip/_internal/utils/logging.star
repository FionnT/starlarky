def BrokenStdoutLoggingError(Exception):
    """

        Raised if BrokenPipeError occurs for the stdout stream while logging.
    
    """
        def _is_broken_pipe_error(exc_class, exc):
            """
            See the docstring for non-Windows Python 3 below.
            """
        def _is_broken_pipe_error(exc_class, exc):
            """
            See the docstring for non-Windows Python 3 below.
            """
    def _is_broken_pipe_error(exc_class, exc):
        """
        See the docstring for non-Windows Python 3 below.
        """
    def _is_broken_pipe_error(exc_class, exc):
        """

                Return whether an exception is a broken pipe error.

                Args:
                  exc_class: an exception class.
                  exc: an exception instance.
        
        """
def indent_log(num=2):
    """

        A context manager which will cause the log output to be indented for any
        log messages emitted inside it.
    
    """
def get_indentation():
    """
    'indentation'
    """
def IndentingFormatter(logging.Formatter):
    """

            A logging.Formatter that obeys the indent_log() context manager.

            :param add_timestamp: A bool indicating output lines should be prefixed
                with their record's timestamp.
        
    """
    def get_message_start(self, formatted, levelno):
        """

                Return the start of the formatted log message (not counting the
                prefix to add to each line).
        
        """
    def format(self, record):
        """

                Calls the standard formatter, but will indent all of the log message
                lines by our current indentation level.
        
        """
def _color_wrap(*colors):
    """

    """
def ColorizedStreamHandler(logging.StreamHandler):
    """
     Don't build up a list of colors if we don't have colorama

    """
    def __init__(self, stream=None, no_color=None):
        """

                Return whether the handler is using sys.stdout.
        
        """
    def should_color(self):
        """
         Don't colorize things if we do not have colorama or if told not to

        """
    def format(self, record):
        """
         The logging module says handleError() can be customized.

        """
    def handleError(self, record):
        """
         If a broken pipe occurred while calling write() or flush() on the
         stdout stream in logging's Handler.emit(), then raise our special
         exception so we can handle it in main() instead of logging the
         broken pipe error and continuing.

        """
def BetterRotatingFileHandler(logging.handlers.RotatingFileHandler):
    """

        A logging Filter that excludes records from a logger (or its children).
    
    """
    def filter(self, record):
        """
         The base Filter class allows only records from a logger (or its
         children).

        """
def setup_logging(verbosity, no_color, user_log_file):
    """
    Configures and sets up all of the logging

        Returns the requested logging level, as its integer value.
    
    """
