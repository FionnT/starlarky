def _normalize_name(name):
    """
     type: (str) -> str

    """
def _disassemble_key(name):
    """
     type: (str) -> List[str]

    """
def get_configuration_files():
    """
     type: () -> Dict[Kind, List[str]]

    """
def Configuration(object):
    """
    Handles management of configuration.

        Provides an interface to accessing and managing configuration files.

        This class converts provides an API that takes "section.key-name" style
        keys and stores the value associated with it as "key-name" under the
        section "section".

        This allows for a clean interface wherein the both the section and the
        key-name are preserved in an easy to manage form in the configuration files
        and the data stored is also nice.
    
    """
    def __init__(self, isolated, load_only=None):
        """
         type: (bool, Optional[Kind]) -> None

        """
    def load(self):
        """
         type: () -> None

        """
    def get_file_to_edit(self):
        """
         type: () -> Optional[str]

        """
    def items(self):
        """
         type: () -> Iterable[Tuple[str, Any]]

        """
    def get_value(self, key):
        """
         type: (str) -> Any

        """
    def set_value(self, key, value):
        """
         type: (str, Any) -> None

        """
    def unset_value(self, key):
        """
         type: (str) -> None

        """
    def save(self):
        """
         type: () -> None

        """
    def _ensure_have_load_only(self):
        """
         type: () -> None

        """
    def _dictionary(self):
        """
         type: () -> Dict[str, Any]

        """
    def _load_config_files(self):
        """
         type: () -> None

        """
    def _load_file(self, variant, fname):
        """
         type: (Kind, str) -> RawConfigParser

        """
    def _construct_parser(self, fname):
        """
         type: (str) -> RawConfigParser

        """
    def _load_environment_vars(self):
        """
         type: () -> None

        """
    def _normalized_keys(self, section, items):
        """
         type: (str, Iterable[Tuple[str, Any]]) -> Dict[str, Any]

        """
    def get_environ_vars(self):
        """
         type: () -> Iterable[Tuple[str, str]]

        """
    def iter_config_files(self):
        """
         type: () -> Iterable[Tuple[Kind, List[str]]]

        """
    def get_values_in_config(self, variant):
        """
         type: (Kind) -> Dict[str, Any]

        """
    def _get_parser_to_modify(self):
        """
         type: () -> Tuple[str, RawConfigParser]
         Determine which parser to modify

        """
    def _mark_as_modified(self, fname, parser):
        """
         type: (str, RawConfigParser) -> None

        """
    def __repr__(self):
        """
         type: () -> str

        """
