def Hashes(object):
    """
    A wrapper that builds multiple hashes at once and checks them against
        known-good values

    
    """
    def __init__(self, hashes=None):
        """
         type: (Dict[str, List[str]]) -> None

        """
    def __and__(self, other):
        """
         type: (Hashes) -> Hashes

        """
    def digest_count(self):
        """
         type: () -> int

        """
2021-03-02 20:50:29,118 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:29,119 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:29,119 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:29,119 : INFO : tokenize_signature : --> do i ever get here?
    def is_hash_allowed(
        self,
        hash_name,   # type: str
        hex_digest,  # type: str
    ):
        """
         type: (...) -> bool

        """
    def check_against_chunks(self, chunks):
        """
         type: (Iterator[bytes]) -> None

        """
    def _raise(self, gots):
        """
         type: (Dict[str, _Hash]) -> NoReturn

        """
    def check_against_file(self, file):
        """
         type: (BinaryIO) -> None

        """
    def check_against_path(self, path):
        """
         type: (str) -> None

        """
    def __nonzero__(self):
        """
         type: () -> bool

        """
    def __bool__(self):
        """
         type: () -> bool

        """
def MissingHashes(Hashes):
    """
    A workalike for Hashes used when we're missing a hash for a requirement

        It computes the actual hash of the requirement and raises a HashMissing
        exception showing it to the user.

    
    """
    def __init__(self):
        """
         type: () -> None

        """
    def _raise(self, gots):
        """
         type: (Dict[str, _Hash]) -> NoReturn

        """
