def ExplicitRequirement(Requirement):
    """
     type: (Candidate) -> None

    """
    def __repr__(self):
        """
         type: () -> str

        """
    def name(self):
        """
         type: () -> str
         No need to canonicalise - the candidate did this

        """
    def format_for_error(self):
        """
         type: () -> str

        """
    def get_candidate_lookup(self):
        """
         type: () -> CandidateLookup

        """
    def is_satisfied_by(self, candidate):
        """
         type: (Candidate) -> bool

        """
def SpecifierRequirement(Requirement):
    """
     type: (InstallRequirement) -> None

    """
    def __str__(self):
        """
         type: () -> str

        """
    def __repr__(self):
        """
         type: () -> str

        """
    def name(self):
        """
         type: () -> str

        """
    def format_for_error(self):
        """
         type: () -> str

         Convert comma-separated specifiers into "A, B, ..., F and G
         This makes the specifier a bit more "human readable", without
         risking a change in meaning. (Hopefully! Not all edge cases have
         been checked)

        """
    def get_candidate_lookup(self):
        """
         type: () -> CandidateLookup

        """
    def is_satisfied_by(self, candidate):
        """
         type: (Candidate) -> bool

        """
def RequiresPythonRequirement(Requirement):
    """
    A requirement representing Requires-Python metadata.
    
    """
    def __init__(self, specifier, match):
        """
         type: (SpecifierSet, Candidate) -> None

        """
    def __repr__(self):
        """
         type: () -> str

        """
    def name(self):
        """
         type: () -> str

        """
    def format_for_error(self):
        """
         type: () -> str

        """
    def get_candidate_lookup(self):
        """
         type: () -> CandidateLookup

        """
    def is_satisfied_by(self, candidate):
        """
         type: (Candidate) -> bool

        """
