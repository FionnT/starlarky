def get_check_binary_allowed(format_control):
    """
     type: (FormatControl) -> BinaryAllowedPredicate

    """
    def check_binary_allowed(req):
        """
         type: (InstallRequirement) -> bool

        """
def InstallCommand(RequirementCommand):
    """

        Install packages from:

        - PyPI (and other indexes) using requirement specifiers.
        - VCS project urls.
        - Local project directories.
        - Local or remote source archives.

        pip also supports installing from "requirements files", which provide
        an easy way to specify a whole environment to be installed.
    
    """
    def add_options(self):
        """
         type: () -> None

        """
    def run(self, options, args):
        """
         type: (Values, List[str]) -> int

        """
    def _handle_target_dir(self, target_dir, target_temp_dir, upgrade):
        """
         type: (str, TempDirectory, bool) -> None

        """
    def _determine_conflicts(self, to_install):
        """
         type: (List[InstallRequirement]) -> Optional[ConflictDetails]

        """
    def _warn_about_conflicts(self, conflict_details, new_resolver):
        """
         type: (ConflictDetails, bool) -> None

        """
2021-03-02 20:50:44,112 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:44,113 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:44,113 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:44,113 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:44,113 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:44,113 : INFO : tokenize_signature : --> do i ever get here?
def get_lib_location_guesses(
        user=False,  # type: bool
        home=None,  # type: Optional[str]
        root=None,  # type: Optional[str]
        isolated=False,  # type: bool
        prefix=None  # type: Optional[str]
):
    """
     type:(...) -> List[str]

    """
def site_packages_writable(root, isolated):
    """
     type: (Optional[str], bool) -> bool

    """
2021-03-02 20:50:44,113 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:44,113 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:44,114 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:44,114 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:44,114 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:44,114 : INFO : tokenize_signature : --> do i ever get here?
def decide_user_install(
    use_user_site,  # type: Optional[bool]
    prefix_path=None,  # type: Optional[str]
    target_dir=None,  # type: Optional[str]
    root_path=None,  # type: Optional[str]
    isolated_mode=False,  # type: bool
):
    """
     type: (...) -> bool

    """
def reject_location_related_install_options(requirements, options):
    """
     type: (List[InstallRequirement], Optional[List[str]]) -> None

    """
    def format_options(option_names):
        """
         type: (Iterable[str]) -> List[str]

        """
def create_env_error_message(error, show_traceback, using_user_site):
    """
     type: (EnvironmentError, bool, bool) -> str

    """
