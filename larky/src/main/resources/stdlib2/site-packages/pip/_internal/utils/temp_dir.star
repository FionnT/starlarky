def global_tempdir_manager():
    """
     type: () -> Iterator[None]

    """
def TempDirectoryTypeRegistry(object):
    """
    Manages temp directory behavior
    
    """
    def __init__(self):
        """
         type: () -> None

        """
    def set_delete(self, kind, value):
        """
         type: (str, bool) -> None

        """
    def get_delete(self, kind):
        """
         type: (str) -> bool

        """
def tempdir_registry():
    """
     type: () -> Iterator[TempDirectoryTypeRegistry]

    """
def _Default(object):
    """
    Helper class that owns and cleans up a temporary directory.

        This class can be used as a context manager or as an OO representation of a
        temporary directory.

        Attributes:
            path
                Location to the created temporary directory
            delete
                Whether the directory should be deleted when exiting
                (when used as a contextmanager)

        Methods:
            cleanup()
                Deletes the temporary directory

        When used as a context manager, if the delete attribute is True, on
        exiting the context the temporary directory is deleted.
    
    """
2021-03-02 20:50:26,577 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:26,577 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:26,577 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:26,577 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:26,577 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:26,577 : INFO : tokenize_signature : --> do i ever get here?
    def __init__(
        self,
        path=None,    # type: Optional[str]
        delete=_default,  # type: Union[bool, None, _Default]
        kind="temp",  # type: str
        globally_managed=False,  # type: bool
    ):
        """
         If we were given an explicit directory, resolve delete option
         now.

        """
    def path(self):
        """
         type: () -> str

        """
    def __repr__(self):
        """
         type: () -> str

        """
    def __enter__(self):
        """
         type: (_T) -> _T

        """
    def __exit__(self, exc, value, tb):
        """
         type: (Any, Any, Any) -> None

        """
    def _create(self, kind):
        """
         type: (str) -> str

        """
    def cleanup(self):
        """
         type: () -> None

        """
def AdjacentTempDirectory(TempDirectory):
    """
    Helper class that creates a temporary directory adjacent to a real one.

        Attributes:
            original
                The original directory to create a temp directory for.
            path
                After calling create() or entering, contains the full
                path to the temporary directory.
            delete
                Whether the directory should be deleted when exiting
                (when used as a contextmanager)

    
    """
    def __init__(self, original, delete=None):
        """
         type: (str, Optional[bool]) -> None

        """
    def _generate_names(cls, name):
        """
         type: (str) -> Iterator[str]

        """
    def _create(self, kind):
        """
         type: (str) -> str

        """
