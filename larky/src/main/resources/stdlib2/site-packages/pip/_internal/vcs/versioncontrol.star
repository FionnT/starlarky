def is_url(name):
    """
     type: (Union[str, Text]) -> bool

    """
def make_vcs_requirement_url(repo_url, rev, project_name, subdir=None):
    """
     type: (str, str, str, Optional[str]) -> str

    """
2021-03-02 20:50:40,725 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:40,725 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:40,725 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:40,725 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:40,725 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:40,725 : INFO : tokenize_signature : --> do i ever get here?
def call_subprocess(
    cmd,  # type: Union[List[str], CommandArgs]
    cwd=None,  # type: Optional[str]
    extra_environ=None,  # type: Optional[Mapping[str, Any]]
    extra_ok_returncodes=None,  # type: Optional[Iterable[int]]
    log_failed_cmd=True  # type: Optional[bool]
):
    """
     type: (...) -> Text

    """
def find_path_to_setup_from_repo_root(location, repo_root):
    """
     type: (str, str) -> Optional[str]

    """
def RemoteNotFoundError(Exception):
    """

        Encapsulates a VCS-specific revision to install, along with any VCS
        install options.

        Instances of this class should be treated as if immutable.
    
    """
2021-03-02 20:50:40,728 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:40,728 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:40,728 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:40,728 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:40,728 : INFO : tokenize_signature : --> do i ever get here?
    def __init__(
        self,
        vc_class,  # type: Type[VersionControl]
        rev=None,  # type: Optional[str]
        extra_args=None,  # type: Optional[CommandArgs]
    ):
        """
         type: (...) -> None

        """
    def __repr__(self):
        """
         type: () -> str

        """
    def arg_rev(self):
        """
         type: () -> Optional[str]

        """
    def to_args(self):
        """
         type: () -> CommandArgs

        """
    def to_display(self):
        """
         type: () -> str

        """
    def make_new(self, rev):
        """
         type: (str) -> RevOptions

        """
def VcsSupport(object):
    """
     type: Dict[str, VersionControl]
    """
    def __init__(self):
        """
         type: () -> None
         Register more schemes with urlparse for various version control
         systems

        """
    def __iter__(self):
        """
         type: () -> Iterator[str]

        """
    def backends(self):
        """
         type: () -> List[VersionControl]

        """
    def dirnames(self):
        """
         type: () -> List[str]

        """
    def all_schemes(self):
        """
         type: () -> List[str]

        """
    def register(self, cls):
        """
         type: (Type[VersionControl]) -> None

        """
    def unregister(self, name):
        """
         type: (str) -> None

        """
    def get_backend_for_dir(self, location):
        """
         type: (str) -> Optional[VersionControl]

        """
    def get_backend_for_scheme(self, scheme):
        """
         type: (str) -> Optional[VersionControl]

        """
    def get_backend(self, name):
        """
         type: (str) -> Optional[VersionControl]

        """
def VersionControl(object):
    """
    ''
    """
    def should_add_vcs_url_prefix(cls, remote_url):
        """
         type: (str) -> bool

        """
    def get_subdirectory(cls, location):
        """
         type: (str) -> Optional[str]

        """
    def get_requirement_revision(cls, repo_dir):
        """
         type: (str) -> str

        """
    def get_src_requirement(cls, repo_dir, project_name):
        """
         type: (str, str) -> Optional[str]

        """
    def get_base_rev_args(rev):
        """
         type: (str) -> List[str]

        """
    def is_immutable_rev_checkout(self, url, dest):
        """
         type: (str, str) -> bool

        """
    def make_rev_options(cls, rev=None, extra_args=None):
        """
         type: (Optional[str], Optional[CommandArgs]) -> RevOptions

        """
    def _is_local_repository(cls, repo):
        """
         type: (str) -> bool

        """
    def export(self, location, url):
        """
         type: (str, HiddenText) -> None

        """
    def get_netloc_and_auth(cls, netloc, scheme):
        """
         type: (str, str) -> Tuple[str, Tuple[Optional[str], Optional[str]]]

        """
    def get_url_rev_and_auth(cls, url):
        """
         type: (str) -> Tuple[str, Optional[str], AuthInfo]

        """
    def make_rev_args(username, password):
        """
         type: (Optional[str], Optional[HiddenText]) -> CommandArgs

        """
    def get_url_rev_options(self, url):
        """
         type: (HiddenText) -> Tuple[HiddenText, RevOptions]

        """
    def normalize_url(url):
        """
         type: (str) -> str

        """
    def compare_urls(cls, url1, url2):
        """
         type: (str, str) -> bool

        """
    def fetch_new(self, dest, url, rev_options):
        """
         type: (str, HiddenText, RevOptions) -> None

        """
    def switch(self, dest, url, rev_options):
        """
         type: (str, HiddenText, RevOptions) -> None

        """
    def update(self, dest, url, rev_options):
        """
         type: (str, HiddenText, RevOptions) -> None

        """
    def is_commit_id_equal(cls, dest, name):
        """
         type: (str, Optional[str]) -> bool

        """
    def obtain(self, dest, url):
        """
         type: (str, HiddenText) -> None

        """
    def unpack(self, location, url):
        """
         type: (str, HiddenText) -> None

        """
    def get_remote_url(cls, location):
        """
         type: (str) -> str

        """
    def get_revision(cls, location):
        """
         type: (str) -> str

        """
2021-03-02 20:50:40,737 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:40,738 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:40,738 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:40,738 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:40,738 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:40,738 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:40,738 : INFO : tokenize_signature : --> do i ever get here?
    def run_command(
        cls,
        cmd,  # type: Union[List[str], CommandArgs]
        cwd=None,  # type: Optional[str]
        extra_environ=None,  # type: Optional[Mapping[str, Any]]
        extra_ok_returncodes=None,  # type: Optional[Iterable[int]]
        log_failed_cmd=True  # type: bool
    ):
        """
         type: (...) -> Text

        """
    def is_repository_directory(cls, path):
        """
         type: (str) -> bool

        """
    def get_repository_root(cls, location):
        """
         type: (str) -> Optional[str]

        """
