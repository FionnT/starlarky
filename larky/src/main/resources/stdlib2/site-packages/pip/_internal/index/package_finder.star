2021-03-02 20:50:41,442 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:41,442 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:41,442 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:41,442 : INFO : tokenize_signature : --> do i ever get here?
def _check_link_requires_python(
    link,  # type: Link
    version_info,  # type: Tuple[int, int, int]
    ignore_requires_python=False,  # type: bool
):
    """
     type: (...) -> bool

    """
def LinkEvaluator(object):
    """

        Responsible for evaluating links for a particular project.
    
    """
2021-03-02 20:50:41,443 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:41,443 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:41,443 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:41,443 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:41,444 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:41,444 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:41,444 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:41,444 : INFO : tokenize_signature : --> do i ever get here?
    def __init__(
        self,
        project_name,    # type: str
        canonical_name,  # type: str
        formats,         # type: FrozenSet[str]
        target_python,   # type: TargetPython
        allow_yanked,    # type: bool
        ignore_requires_python=None,  # type: Optional[bool]
    ):
        """
         type: (...) -> None

        """
    def evaluate_link(self, link):
        """
         type: (Link) -> Tuple[bool, Optional[Text]]

        """
2021-03-02 20:50:41,446 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:41,446 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:41,446 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:41,447 : INFO : tokenize_signature : --> do i ever get here?
def filter_unallowed_hashes(
    candidates,    # type: List[InstallationCandidate]
    hashes,        # type: Hashes
    project_name,  # type: str
):
    """
     type: (...) -> List[InstallationCandidate]

    """
def CandidatePreferences(object):
    """

        Encapsulates some of the preferences for filtering and sorting
        InstallationCandidate objects.
    
    """
2021-03-02 20:50:41,448 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:41,448 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:41,448 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:41,448 : INFO : tokenize_signature : --> do i ever get here?
    def __init__(
        self,
        prefer_binary=False,  # type: bool
        allow_all_prereleases=False,  # type: bool
    ):
        """
         type: (...) -> None

        """
def BestCandidateResult(object):
    """
    A collection of candidates, returned by `PackageFinder.find_best_candidate`.

        This class is only intended to be instantiated by CandidateEvaluator's
        `compute_best_candidate()` method.
    
    """
2021-03-02 20:50:41,448 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:41,448 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:41,448 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:41,448 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:41,448 : INFO : tokenize_signature : --> do i ever get here?
    def __init__(
        self,
        candidates,             # type: List[InstallationCandidate]
        applicable_candidates,  # type: List[InstallationCandidate]
        best_candidate,         # type: Optional[InstallationCandidate]
    ):
        """
         type: (...) -> None

        """
    def iter_all(self):
        """
         type: () -> Iterable[InstallationCandidate]

        """
    def iter_applicable(self):
        """
         type: () -> Iterable[InstallationCandidate]

        """
def CandidateEvaluator(object):
    """

        Responsible for filtering and sorting candidates for installation based
        on what tags are valid.
    
    """
2021-03-02 20:50:41,449 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:41,449 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:41,449 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:41,449 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:41,449 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:41,449 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:41,449 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:41,449 : INFO : tokenize_signature : --> do i ever get here?
    def create(
        cls,
        project_name,         # type: str
        target_python=None,   # type: Optional[TargetPython]
        prefer_binary=False,  # type: bool
        allow_all_prereleases=False,  # type: bool
        specifier=None,       # type: Optional[specifiers.BaseSpecifier]
        hashes=None,          # type: Optional[Hashes]
    ):
        """
         type: (...) -> CandidateEvaluator

        """
2021-03-02 20:50:41,450 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:41,450 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:41,450 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:41,450 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:41,450 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:41,450 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:41,450 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:41,450 : INFO : tokenize_signature : --> do i ever get here?
    def __init__(
        self,
        project_name,         # type: str
        supported_tags,       # type: List[Tag]
        specifier,            # type: specifiers.BaseSpecifier
        prefer_binary=False,  # type: bool
        allow_all_prereleases=False,  # type: bool
        hashes=None,                  # type: Optional[Hashes]
    ):
        """
         type: (...) -> None

        """
2021-03-02 20:50:41,450 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:41,450 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:41,451 : INFO : tokenize_signature : --> do i ever get here?
    def get_applicable_candidates(
        self,
        candidates,  # type: List[InstallationCandidate]
    ):
        """
         type: (...) -> List[InstallationCandidate]

        """
    def _sort_key(self, candidate):
        """
         type: (InstallationCandidate) -> CandidateSortingKey

        """
2021-03-02 20:50:41,452 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:41,452 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:41,452 : INFO : tokenize_signature : --> do i ever get here?
    def sort_best_candidate(
        self,
        candidates,    # type: List[InstallationCandidate]
    ):
        """
         type: (...) -> Optional[InstallationCandidate]

        """
2021-03-02 20:50:41,452 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:41,452 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:41,453 : INFO : tokenize_signature : --> do i ever get here?
    def compute_best_candidate(
        self,
        candidates,      # type: List[InstallationCandidate]
    ):
        """
         type: (...) -> BestCandidateResult

        """
def PackageFinder(object):
    """
    This finds packages.

        This is meant to match easy_install's technique for looking for
        packages, by reading pages and looking for appropriate links.
    
    """
2021-03-02 20:50:41,453 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:41,453 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:41,453 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:41,453 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:41,453 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:41,453 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:41,453 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:41,453 : INFO : tokenize_signature : --> do i ever get here?
    def __init__(
        self,
        link_collector,       # type: LinkCollector
        target_python,        # type: TargetPython
        allow_yanked,         # type: bool
        format_control=None,  # type: Optional[FormatControl]
        candidate_prefs=None,         # type: CandidatePreferences
        ignore_requires_python=None,  # type: Optional[bool]
    ):
        """
         type: (...) -> None

        """
2021-03-02 20:50:41,454 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:41,454 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:41,454 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:41,454 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:41,454 : INFO : tokenize_signature : --> do i ever get here?
    def create(
        cls,
        link_collector,      # type: LinkCollector
        selection_prefs,     # type: SelectionPreferences
        target_python=None,  # type: Optional[TargetPython]
    ):
        """
         type: (...) -> PackageFinder

        """
    def target_python(self):
        """
         type: () -> TargetPython

        """
    def search_scope(self):
        """
         type: () -> SearchScope

        """
    def search_scope(self, search_scope):
        """
         type: (SearchScope) -> None

        """
    def find_links(self):
        """
         type: () -> List[str]

        """
    def index_urls(self):
        """
         type: () -> List[str]

        """
    def trusted_hosts(self):
        """
         type: () -> Iterable[str]

        """
    def allow_all_prereleases(self):
        """
         type: () -> bool

        """
    def set_allow_all_prereleases(self):
        """
         type: () -> None

        """
    def prefer_binary(self):
        """
         type: () -> bool

        """
    def set_prefer_binary(self):
        """
         type: () -> None

        """
    def make_link_evaluator(self, project_name):
        """
         type: (str) -> LinkEvaluator

        """
    def _sort_links(self, links):
        """
         type: (Iterable[Link]) -> List[Link]

        """
    def _log_skipped_link(self, link, reason):
        """
         type: (Link, Text) -> None

        """
    def get_install_candidate(self, link_evaluator, link):
        """
         type: (LinkEvaluator, Link) -> Optional[InstallationCandidate]

        """
    def evaluate_links(self, link_evaluator, links):
        """
         type: (LinkEvaluator, Iterable[Link]) -> List[InstallationCandidate]

        """
    def process_project_url(self, project_url, link_evaluator):
        """
         type: (Link, LinkEvaluator) -> List[InstallationCandidate]

        """
    def find_all_candidates(self, project_name):
        """
         type: (str) -> List[InstallationCandidate]

        """
2021-03-02 20:50:41,458 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:41,458 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:41,458 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:41,458 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:41,458 : INFO : tokenize_signature : --> do i ever get here?
    def make_candidate_evaluator(
        self,
        project_name,    # type: str
        specifier=None,  # type: Optional[specifiers.BaseSpecifier]
        hashes=None,     # type: Optional[Hashes]
    ):
        """
         type: (...) -> CandidateEvaluator

        """
2021-03-02 20:50:41,458 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:41,458 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:41,459 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:41,459 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:41,459 : INFO : tokenize_signature : --> do i ever get here?
    def find_best_candidate(
        self,
        project_name,       # type: str
        specifier=None,     # type: Optional[specifiers.BaseSpecifier]
        hashes=None,        # type: Optional[Hashes]
    ):
        """
         type: (...) -> BestCandidateResult

        """
    def find_requirement(self, req, upgrade):
        """
         type: (InstallRequirement, bool) -> Optional[InstallationCandidate]

        """
        def _format_versions(cand_iter):
            """
             type: (Iterable[InstallationCandidate]) -> str
             This repeated parse_version and str() conversion is needed to
             handle different vendoring sources from pip and pkg_resources.
             If we stop using the pkg_resources provided specifier and start
             using our own, we can drop the cast to str().

            """
def _find_name_version_sep(fragment, canonical_name):
    """
     type: (str, str) -> int

    """
def _extract_version_from_fragment(fragment, canonical_name):
    """
     type: (str, str) -> Optional[str]

    """
