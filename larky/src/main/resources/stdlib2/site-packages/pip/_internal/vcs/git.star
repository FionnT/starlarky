def looks_like_hash(sha):
    """
    'git'
    """
    def get_base_rev_args(rev):
        """
         type: (str, str) -> bool

        """
    def get_git_version(self):
        """
        'git version '
        """
    def get_current_branch(cls, location):
        """

                Return the current branch, or None if HEAD isn't at a branch
                (e.g. detached HEAD).
        
        """
    def export(self, location, url):
        """
         type: (str, HiddenText) -> None

        """
    def get_revision_sha(cls, dest, rev):
        """

                Return (sha_or_none, is_branch), where sha_or_none is a commit hash
                if the revision names a remote branch or tag, otherwise None.

                Args:
                  dest: the repository directory.
                  rev: the revision name.
        
        """
    def resolve_revision(cls, dest, url, rev_options):
        """
         type: (str, HiddenText, RevOptions) -> RevOptions

        """
    def is_commit_id_equal(cls, dest, name):
        """

                Return whether the current commit hash equals the given name.

                Args:
                  dest: the repository directory.
                  name: a string name.
        
        """
    def fetch_new(self, dest, url, rev_options):
        """
         type: (str, HiddenText, RevOptions) -> None

        """
    def switch(self, dest, url, rev_options):
        """
         type: (str, HiddenText, RevOptions) -> None

        """
    def update(self, dest, url, rev_options):
        """
         type: (str, HiddenText, RevOptions) -> None
         First fetch changes from the default remote

        """
    def get_remote_url(cls, location):
        """

                Return URL of the first remote encountered.

                Raises RemoteNotFoundError if the repository does not have a remote
                url configured.
        
        """
    def get_revision(cls, location, rev=None):
        """
        'HEAD'
        """
    def get_subdirectory(cls, location):
        """

                Return the path to setup.py, relative to the repo root.
                Return None if setup.py is in the repo root.
        
        """
    def get_url_rev_and_auth(cls, url):
        """
         type: (str) -> Tuple[str, Optional[str], AuthInfo]

        """
    def update_submodules(cls, location):
        """
        '.gitmodules'
        """
    def get_repository_root(cls, location):
        """
        'rev-parse'
        """
