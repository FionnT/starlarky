def get_pip_version():
    """
     type: () -> str

    """
def normalize_version_info(py_version_info):
    """
     type: (Tuple[int, ...]) -> Tuple[int, int, int]

    """
def ensure_dir(path):
    """
     type: (AnyStr) -> None

    """
def get_prog():
    """
     type: () -> str

    """
def rmtree(dir, ignore_errors=False):
    """
     type: (Text, bool) -> None

    """
def rmtree_errorhandler(func, path, exc_info):
    """
    On Windows, the files in .svn are read-only, so when rmtree() tries to
        remove them, an exception is thrown.  We catch that here, remove the
        read-only attribute, and hopefully continue without problems.
    """
def path_to_display(path):
    """
     type: (Optional[Union[str, Text]]) -> Optional[Text]

    """
def display_path(path):
    """
     type: (Union[str, Text]) -> str

    """
def backup_dir(dir, ext='.bak'):
    """
     type: (str, str) -> str

    """
def ask_path_exists(message, options):
    """
     type: (str, Iterable[str]) -> str

    """
def _check_no_input(message):
    """
     type: (str) -> None

    """
def ask(message, options):
    """
     type: (str, Iterable[str]) -> str

    """
def ask_input(message):
    """
     type: (str) -> str

    """
def ask_password(message):
    """
     type: (str) -> str

    """
def format_size(bytes):
    """
     type: (float) -> str

    """
def tabulate(rows):
    """
     type: (Iterable[Iterable[Any]]) -> Tuple[List[str], List[int]]

    """
def is_installable_dir(path):
    """
     type: (str) -> bool

    """
def read_chunks(file, size=io.DEFAULT_BUFFER_SIZE):
    """
    Yield pieces of data from a file-like object until EOF.
    """
def normalize_path(path, resolve_symlinks=True):
    """
     type: (str, bool) -> str

    """
def splitext(path):
    """
     type: (str) -> Tuple[str, str]

    """
def renames(old, new):
    """
     type: (str, str) -> None

    """
def is_local(path):
    """
     type: (str) -> bool

    """
def dist_is_local(dist):
    """
     type: (Distribution) -> bool

    """
def dist_in_usersite(dist):
    """
     type: (Distribution) -> bool

    """
def dist_in_site_packages(dist):
    """
     type: (Distribution) -> bool

    """
def dist_is_editable(dist):
    """
     type: (Distribution) -> bool

    """
2021-03-02 20:50:25,005 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:25,006 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:25,006 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:25,006 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:25,006 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:25,006 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:25,006 : INFO : tokenize_signature : --> do i ever get here?
def get_installed_distributions(
        local_only=True,  # type: bool
        skip=stdlib_pkgs,  # type: Container[str]
        include_editables=True,  # type: bool
        editables_only=False,  # type: bool
        user_only=False,  # type: bool
        paths=None  # type: Optional[List[str]]
):
    """
     type: (...) -> List[Distribution]

    """
        def local_test(d):
            """
             type: (str) -> Optional[Distribution]

            """
def get_distribution(req_name):
    """
     type: (str) -> Optional[Distribution]

    """
def egg_link_path(dist):
    """
     type: (Distribution) -> Optional[str]

    """
def dist_location(dist):
    """
     type: (Distribution) -> str

    """
def write_output(msg, *args):
    """
     type: (Any, Any) -> None

    """
def FakeFile(object):
    """
    Wrap a list of lines in an object with readline() to make
        ConfigParser happy.
    """
    def __init__(self, lines):
        """
        ''
        """
    def __iter__(self):
        """
         compileall.compile_dir() needs stdout.encoding to print to stdout

        """
    def encoding(self):
        """
        Return a context manager used by captured_stdout/stdin/stderr
            that temporarily replaces the sys stream *stream_name* with a StringIO.

            Taken from Lib/support/__init__.py in the CPython repo.
    
        """
def captured_stdout():
    """
    Capture the output of sys.stdout:

           with captured_stdout() as stdout:
               print('hello')
           self.assertEqual(stdout.getvalue(), 'hello\n')

        Taken from Lib/support/__init__.py in the CPython repo.
    
    """
def captured_stderr():
    """

        See captured_stdout().
    
    """
def get_installed_version(dist_name, working_set=None):
    """
    Get the installed version of dist_name avoiding pkg_resources cache
    """
def consume(iterator):
    """
    Consume an iterable at C speed.
    """
def enum(*sequential, **named):
    """
    'reverse_mapping'
    """
def build_netloc(host, port):
    """
     type: (str, Optional[int]) -> str

    """
def build_url_from_netloc(netloc, scheme='https'):
    """
     type: (str, str) -> str

    """
def parse_netloc(netloc):
    """
     type: (str) -> Tuple[str, Optional[int]]

    """
def split_auth_from_netloc(netloc):
    """

        Parse out and remove the auth information from a netloc.

        Returns: (netloc, (username, password)).
    
    """
def redact_netloc(netloc):
    """
     type: (str) -> str

    """
def _transform_url(url, transform_netloc):
    """
    Transform and replace netloc in a url.

        transform_netloc is a function taking the netloc and returning a
        tuple. The first element of this tuple is the new netloc. The
        entire tuple is returned.

        Returns a tuple containing the transformed url as item 0 and the
        original tuple returned by transform_netloc as item 1.
    
    """
def _get_netloc(netloc):
    """
     type: (str) -> Tuple[str, str, Tuple[str, str]]

    """
def remove_auth_from_url(url):
    """
     type: (str) -> str

    """
def redact_auth_from_url(url):
    """
     type: (str) -> str

    """
def HiddenText(object):
    """
     type: str

    """
    def __repr__(self):
        """
         type: (...) -> str

        """
    def __str__(self):
        """
         type: (...) -> str

        """
    def __eq__(self, other):
        """
         type: (Any) -> bool

        """
    def __ne__(self, other):
        """
         type: (Any) -> bool

        """
def hide_value(value):
    """
     type: (str) -> HiddenText

    """
def hide_url(url):
    """
     type: (str) -> HiddenText

    """
def protect_pip_from_modification_on_windows(modifying_pip):
    """
     type: (bool) -> None

    """
def is_console_interactive():
    """
     type: () -> bool

    """
def hash_file(path, blocksize=1 << 20):
    """
     type: (Text, int) -> Tuple[Any, int]

    """
def is_wheel_installed():
    """

        Return whether the wheel package is installed.
    
    """
def pairwise(iterable):
    """
     type: (Iterable[Any]) -> Iterator[Tuple[Any, Any]]

    """
2021-03-02 20:50:25,015 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:25,015 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:25,015 : INFO : tokenize_signature : --> do i ever get here?
def partition(
    pred,  # type: Callable[[T], bool]
    iterable,  # type: Iterable[T]
):
    """
     type: (...) -> Tuple[Iterable[T], Iterable[T]]

    """
