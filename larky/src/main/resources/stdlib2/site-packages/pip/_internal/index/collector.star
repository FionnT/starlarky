def _match_vcs_scheme(url):
    """
     type: (str) -> Optional[str]

    """
def _is_url_like_archive(url):
    """
     type: (str) -> bool

    """
def _NotHTML(Exception):
    """
     type: (str, str) -> None

    """
def _ensure_html_header(response):
    """
     type: (Response) -> None

    """
def _NotHTTP(Exception):
    """
     type: (str, PipSession) -> None

    """
def _get_html_response(url, session):
    """
     type: (str, PipSession) -> Response

    """
def _get_encoding_from_headers(headers):
    """
     type: (ResponseHeaders) -> Optional[str]

    """
def _determine_base_url(document, page_url):
    """
     type: (HTMLElement, str) -> str

    """
def _clean_url_path_part(part):
    """
     type: (str) -> str

    """
def _clean_file_url_path(part):
    """
     type: (str) -> str

    """
def _clean_url_path(path, is_local_path):
    """
     type: (str, bool) -> str

    """
def _clean_link(url):
    """
     type: (str) -> str

    """
2021-03-02 20:50:41,091 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:41,091 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:41,091 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:41,091 : INFO : tokenize_signature : --> do i ever get here?
def _create_link_from_element(
    anchor,    # type: HTMLElement
    page_url,  # type: str
    base_url,  # type: str
):
    """
     type: (...) -> Optional[Link]

    """
def CacheablePageContent(object):
    """
     type: (HTMLPage) -> None

    """
    def __eq__(self, other):
        """
         type: (object) -> bool

        """
    def __hash__(self):
        """
         type: () -> int

        """
2021-03-02 20:50:41,092 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:41,092 : INFO : tokenize_signature : --> do i ever get here?
def with_cached_html_pages(
    fn,    # type: Callable[[HTMLPage], Iterable[Link]]
):
    """
     type: (...) -> Callable[[HTMLPage], List[Link]]

    """
    def wrapper(cacheable_page):
        """
         type: (CacheablePageContent) -> List[Link]

        """
    def wrapper_wrapper(page):
        """
         type: (HTMLPage) -> List[Link]

        """
def parse_links(page):
    """
     type: (HTMLPage) -> Iterable[Link]

    """
def HTMLPage(object):
    """
    Represents one page, along with its URL
    """
2021-03-02 20:50:41,093 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:41,093 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:41,093 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:41,093 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:41,093 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:41,093 : INFO : tokenize_signature : --> do i ever get here?
    def __init__(
        self,
        content,                  # type: bytes
        encoding,                 # type: Optional[str]
        url,                      # type: str
        cache_link_parsing=True,  # type: bool
    ):
        """
         type: (...) -> None

        """
    def __str__(self):
        """
         type: () -> str

        """
2021-03-02 20:50:41,093 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:41,093 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:41,093 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:41,093 : INFO : tokenize_signature : --> do i ever get here?
def _handle_get_page_fail(
    link,  # type: Link
    reason,  # type: Union[str, Exception]
    meth=None  # type: Optional[Callable[..., None]]
):
    """
     type: (...) -> None

    """
def _make_html_page(response, cache_link_parsing=True):
    """
     type: (Response, bool) -> HTMLPage

    """
def _get_html_page(link, session=None):
    """
     type: (Link, Optional[PipSession]) -> Optional[HTMLPage]

    """
def _remove_duplicate_links(links):
    """
     type: (Iterable[Link]) -> List[Link]

    """
def group_locations(locations, expand_dir=False):
    """
     type: (Sequence[str], bool) -> Tuple[List[str], List[str]]

    """
    def sort_path(path):
        """
         type: (str) -> None

        """
def CollectedLinks(object):
    """

        Encapsulates the return value of a call to LinkCollector.collect_links().

        The return value includes both URLs to project pages containing package
        links, as well as individual package Link objects collected from other
        sources.

        This info is stored separately as:

        (1) links from the configured file locations,
        (2) links from the configured find_links, and
        (3) urls to HTML project pages, as described by the PEP 503 simple
            repository API.
    
    """
2021-03-02 20:50:41,097 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:41,098 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:41,098 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:41,098 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:41,098 : INFO : tokenize_signature : --> do i ever get here?
    def __init__(
        self,
        files,         # type: List[Link]
        find_links,    # type: List[Link]
        project_urls,  # type: List[Link]
    ):
        """
         type: (...) -> None

        """
def LinkCollector(object):
    """

        Responsible for collecting Link objects from all configured locations,
        making network requests as needed.

        The class's main method is its collect_links() method.
    
    """
2021-03-02 20:50:41,098 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:41,098 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:41,098 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:41,098 : INFO : tokenize_signature : --> do i ever get here?
    def __init__(
        self,
        session,       # type: PipSession
        search_scope,  # type: SearchScope
    ):
        """
         type: (...) -> None

        """
    def create(cls, session, options, suppress_no_index=False):
        """
         type: (PipSession, Values, bool) -> LinkCollector

        """
    def find_links(self):
        """
         type: () -> List[str]

        """
    def fetch_page(self, location):
        """
         type: (Link) -> Optional[HTMLPage]

        """
    def collect_links(self, project_name):
        """
         type: (str) -> CollectedLinks

        """
