def _deduplicated_by_version(candidates):
    """
     type: (Iterator[Candidate]) -> Iterator[Candidate]

    """
def _insert_installed(installed, others):
    """
     type: (Candidate, Iterator[Candidate]) -> Iterator[Candidate]

    """
def FoundCandidates(collections_abc.Sequence):
    """
    A lazy sequence to provide candidates to the resolver.

        The intended usage is to return this from `find_matches()` so the resolver
        can iterate through the sequence multiple times, but only access the index
        page when remote packages are actually needed. This improve performances
        when suitable candidates are already installed on disk.
    
    """
2021-03-02 20:50:38,736 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:38,736 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:38,736 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:38,737 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:38,737 : INFO : tokenize_signature : --> do i ever get here?
    def __init__(
        self,
        get_others,  # type: Callable[[], Iterator[Candidate]]
        installed,  # type: Optional[Candidate]
        prefers_installed,  # type: bool
    ):
        """
         type: (int) -> Candidate
         Implemented to satisfy the ABC check. This is not needed by the
         resolver, and should not be used by the provider either (for
         performance reasons).

        """
    def __iter__(self):
        """
         type: () -> Iterator[Candidate]

        """
    def __len__(self):
        """
         type: () -> int
         Implemented to satisfy the ABC check. This is not needed by the
         resolver, and should not be used by the provider either (for
         performance reasons).

        """
    def __bool__(self):
        """
         type: () -> bool

        """
