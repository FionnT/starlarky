def HTTPRangeRequestUnsupported(Exception):
    """
     type: (str, str, PipSession) -> Distribution

    """
def LazyZipOverHTTP(object):
    """
    File-like object mapped to a ZIP file over HTTP.

        This uses HTTP range requests to lazily fetch the file's content,
        which is supposed to be fed to ZipFile.  If such requests are not
        supported by the server, raise HTTPRangeRequestUnsupported
        during initialization.
    
    """
    def __init__(self, url, session, chunk_size=CONTENT_CHUNK_SIZE):
        """
         type: (str, PipSession, int) -> None

        """
    def mode(self):
        """
         type: () -> str

        """
    def name(self):
        """
         type: () -> str

        """
    def seekable(self):
        """
         type: () -> bool

        """
    def close(self):
        """
         type: () -> None

        """
    def closed(self):
        """
         type: () -> bool

        """
    def read(self, size=-1):
        """
         type: (int) -> bytes

        """
    def readable(self):
        """
         type: () -> bool

        """
    def seek(self, offset, whence=0):
        """
         type: (int, int) -> int

        """
    def tell(self):
        """
         type: () -> int

        """
    def truncate(self, size=None):
        """
         type: (Optional[int]) -> int

        """
    def writable(self):
        """
         type: () -> bool

        """
    def __enter__(self):
        """
         type: () -> LazyZipOverHTTP

        """
    def __exit__(self, *exc):
        """
         type: (*Any) -> Optional[bool]

        """
    def _stay(self):
        """
         type: ()-> Iterator[None]

        """
    def _check_zip(self):
        """
         type: () -> None

        """
    def _stream_response(self, start, end, base_headers=HEADERS):
        """
         type: (int, int, Dict[str, str]) -> Response

        """
    def _merge(self, start, end, left, right):
        """
         type: (int, int, int, int) -> Iterator[Tuple[int, int]]

        """
    def _download(self, start, end):
        """
         type: (int, int) -> None

        """
