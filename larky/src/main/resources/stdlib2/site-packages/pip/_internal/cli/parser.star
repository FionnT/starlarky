def PrettyHelpFormatter(optparse.IndentedHelpFormatter):
    """
    A prettier/less verbose help formatter for optparse.
    """
    def __init__(self, *args, **kwargs):
        """
         help position must be aligned with __init__.parseopts.description

        """
    def format_option_strings(self, option):
        """
        ' <{}>'
        """
    def format_heading(self, heading):
        """
        'Options'
        """
    def format_usage(self, usage):
        """

                Ensure there is only one newline between usage and the first heading
                if there is no description.
        
        """
    def format_description(self, description):
        """
         leave full control over description to us

        """
    def format_epilog(self, epilog):
        """
         leave full control over epilog to us

        """
    def indent_lines(self, text, indent):
        """
        '\n'
        """
def UpdatingDefaultsHelpFormatter(PrettyHelpFormatter):
    """
    Custom help formatter for use in ConfigOptionParser.

        This is updates the defaults before expanding them, allowing
        them to show up correctly in the help listing.
    
    """
    def expand_default(self, option):
        """
        Insert an OptionGroup at a given position.
        """
    def option_list_all(self):
        """
        Get a list of all options, including those in option groups.
        """
def ConfigOptionParser(CustomOptionParser):
    """
    Custom option parser which updates its defaults by checking the
        configuration files and environmental variables
    """
    def __init__(self, *args, **kwargs):
        """
        'name'
        """
    def check_default(self, option, key, val):
        """
        An error occurred during configuration: {}
        """
    def _get_ordered_configuration_items(self):
        """
         Configuration gives keys in an unordered manner. Order them.

        """
    def _update_defaults(self, defaults):
        """
        Updates the given defaults with values from the config files and
                the environ. Does a little special handling for certain types of
                options (lists).
        """
    def get_default_values(self):
        """
        Overriding to make updating the defaults after instantiation of
                the option parser possible, _update_defaults() does the dirty work.
        """
    def error(self, msg):
        """
        {}\n
        """
def invalid_config_error_message(action, key, val):
    """
    Returns a better error message when invalid configuration option
        is provided.
    """
