def format_name(project, extras):
    """
     type: (str, FrozenSet[str]) -> str

    """
def Constraint(object):
    """
     type: (SpecifierSet, Hashes) -> None

    """
    def empty(cls):
        """
         type: () -> Constraint

        """
    def from_ireq(cls, ireq):
        """
         type: (InstallRequirement) -> Constraint

        """
    def __nonzero__(self):
        """
         type: () -> bool

        """
    def __bool__(self):
        """
         type: () -> bool

        """
    def __and__(self, other):
        """
         type: (InstallRequirement) -> Constraint

        """
def Requirement(object):
    """
     type: () -> str

    """
    def is_satisfied_by(self, candidate):
        """
         type: (Candidate) -> bool

        """
    def get_candidate_lookup(self):
        """
         type: () -> CandidateLookup

        """
    def format_for_error(self):
        """
         type: () -> str

        """
def Candidate(object):
    """
     type: () -> str

    """
    def version(self):
        """
         type: () -> _BaseVersion

        """
    def is_installed(self):
        """
         type: () -> bool

        """
    def is_editable(self):
        """
         type: () -> bool

        """
    def source_link(self):
        """
         type: () -> Optional[Link]

        """
    def iter_dependencies(self, with_requires):
        """
         type: (bool) -> Iterable[Optional[Requirement]]

        """
    def get_install_requirement(self):
        """
         type: () -> Optional[InstallRequirement]

        """
    def format_for_error(self):
        """
         type: () -> str

        """
