def ConfigurationCommand(Command):
    """

        Manage local and global configuration.

        Subcommands:

        - list: List the active configuration (or from the file specified)
        - edit: Edit the configuration file in an editor
        - get: Get the value associated with name
        - set: Set the name=value
        - unset: Unset the value associated with name
        - debug: List the configuration files and values defined under them

        If none of --user, --global and --site are passed, a virtual
        environment configuration file is used if one is active and the file
        exists. Otherwise, all modifications happen on the to the user file by
        default.
    
    """
    def add_options(self):
        """
         type: () -> None

        """
    def run(self, options, args):
        """
         type: (Values, List[str]) -> int

        """
    def _determine_file(self, options, need_value):
        """
         type: (Values, bool) -> Optional[Kind]

        """
    def list_values(self, options, args):
        """
         type: (Values, List[str]) -> None

        """
    def get_name(self, options, args):
        """
         type: (Values, List[str]) -> None

        """
    def set_name_value(self, options, args):
        """
         type: (Values, List[str]) -> None

        """
    def unset_name(self, options, args):
        """
         type: (Values, List[str]) -> None

        """
    def list_config_values(self, options, args):
        """
         type: (Values, List[str]) -> None

        """
    def print_config_file_values(self, variant):
        """
         type: (Kind) -> None

        """
    def print_env_var_values(self):
        """
         type: () -> None

        """
    def open_in_editor(self, options, args):
        """
         type: (Values, List[str]) -> None

        """
    def _get_n_args(self, args, example, n):
        """
         type: (List[str], str, int) -> Any

        """
    def _save_configuration(self):
        """
         type: () -> None
         We successfully ran a modifying command. Need to save the
         configuration.

        """
    def _determine_editor(self, options):
        """
         type: (Values) -> str

        """
