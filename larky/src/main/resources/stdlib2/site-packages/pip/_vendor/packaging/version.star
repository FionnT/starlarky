def parse(version):
    """
     type: (str) -> Union[LegacyVersion, Version]

    """
def InvalidVersion(ValueError):
    """

        An invalid version was found, users should refer to PEP 440.
    
    """
def _BaseVersion(object):
    """
     type: Union[CmpKey, LegacyCmpKey]
    """
    def __hash__(self):
        """
         type: () -> int

        """
    def __lt__(self, other):
        """
         type: (_BaseVersion) -> bool

        """
    def __le__(self, other):
        """
         type: (_BaseVersion) -> bool

        """
    def __eq__(self, other):
        """
         type: (object) -> bool

        """
    def __ge__(self, other):
        """
         type: (_BaseVersion) -> bool

        """
    def __gt__(self, other):
        """
         type: (_BaseVersion) -> bool

        """
    def __ne__(self, other):
        """
         type: (object) -> bool

        """
    def _compare(self, other, method):
        """
         type: (object, VersionComparisonMethod) -> Union[bool, NotImplemented]

        """
def LegacyVersion(_BaseVersion):
    """
     type: (str) -> None

    """
    def __str__(self):
        """
         type: () -> str

        """
    def __repr__(self):
        """
         type: () -> str

        """
    def public(self):
        """
         type: () -> str

        """
    def base_version(self):
        """
         type: () -> str

        """
    def epoch(self):
        """
         type: () -> int

        """
    def release(self):
        """
         type: () -> None

        """
    def pre(self):
        """
         type: () -> None

        """
    def post(self):
        """
         type: () -> None

        """
    def dev(self):
        """
         type: () -> None

        """
    def local(self):
        """
         type: () -> None

        """
    def is_prerelease(self):
        """
         type: () -> bool

        """
    def is_postrelease(self):
        """
         type: () -> bool

        """
    def is_devrelease(self):
        """
         type: () -> bool

        """
def _parse_version_parts(s):
    """
     type: (str) -> Iterator[str]

    """
def _legacy_cmpkey(version):
    """
     type: (str) -> LegacyCmpKey

     We hardcode an epoch of -1 here. A PEP 440 version can only have a epoch
     greater than or equal to 0. This will effectively put the LegacyVersion,
     which uses the defacto standard originally implemented by setuptools,
     as before all PEP 440 versions.

    """
def Version(_BaseVersion):
    """
    r"^\s*
    """
    def __init__(self, version):
        """
         type: (str) -> None

         Validate the version and parse it into pieces

        """
    def __repr__(self):
        """
         type: () -> str

        """
    def __str__(self):
        """
         type: () -> str

        """
    def epoch(self):
        """
         type: () -> int

        """
    def release(self):
        """
         type: () -> Tuple[int, ...]

        """
    def pre(self):
        """
         type: () -> Optional[Tuple[str, int]]

        """
    def post(self):
        """
         type: () -> Optional[Tuple[str, int]]

        """
    def dev(self):
        """
         type: () -> Optional[Tuple[str, int]]

        """
    def local(self):
        """
         type: () -> Optional[str]

        """
    def public(self):
        """
         type: () -> str

        """
    def base_version(self):
        """
         type: () -> str

        """
    def is_prerelease(self):
        """
         type: () -> bool

        """
    def is_postrelease(self):
        """
         type: () -> bool

        """
    def is_devrelease(self):
        """
         type: () -> bool

        """
    def major(self):
        """
         type: () -> int

        """
    def minor(self):
        """
         type: () -> int

        """
    def micro(self):
        """
         type: () -> int

        """
2021-03-02 20:50:46,730 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:46,731 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:46,731 : INFO : tokenize_signature : --> do i ever get here?
def _parse_letter_version(
    letter,  # type: str
    number,  # type: Union[str, bytes, SupportsInt]
):
    """
     type: (...) -> Optional[Tuple[str, int]]


    """
def _parse_local_version(local):
    """
     type: (str) -> Optional[LocalType]

    """
2021-03-02 20:50:46,732 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:46,732 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:46,732 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:46,732 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:46,732 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:46,732 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:46,732 : INFO : tokenize_signature : --> do i ever get here?
def _cmpkey(
    epoch,  # type: int
    release,  # type: Tuple[int, ...]
    pre,  # type: Optional[Tuple[str, int]]
    post,  # type: Optional[Tuple[str, int]]
    dev,  # type: Optional[Tuple[str, int]]
    local,  # type: Optional[Tuple[SubLocalType]]
):
    """
     type: (...) -> CmpKey

     When we compare a release version, we want to compare it with all of the
     trailing zeros removed. So we'll use a reverse the list, drop all the now
     leading zeros until we come to something non zero, then take the rest
     re-reverse it back into the correct order and make it a tuple and use
     that for our sorting key.

    """
