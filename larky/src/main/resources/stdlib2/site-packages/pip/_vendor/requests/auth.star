def _basic_auth_str(username, password):
    """
    Returns a Basic Auth string.
    """
def AuthBase(object):
    """
    Base class that all auth implementations derive from
    """
    def __call__(self, r):
        """
        'Auth hooks must be callable.'
        """
def HTTPBasicAuth(AuthBase):
    """
    Attaches HTTP Basic Authentication to the given Request object.
    """
    def __init__(self, username, password):
        """
        'username'
        """
    def __ne__(self, other):
        """
        'Authorization'
        """
def HTTPProxyAuth(HTTPBasicAuth):
    """
    Attaches HTTP Proxy Authentication to a given Request object.
    """
    def __call__(self, r):
        """
        'Proxy-Authorization'
        """
def HTTPDigestAuth(AuthBase):
    """
    Attaches HTTP Digest Authentication to the given Request object.
    """
    def __init__(self, username, password):
        """
         Keep state in per-thread local storage

        """
    def init_per_thread_state(self):
        """
         Ensure state is initialized just once per-thread

        """
    def build_digest_header(self, method, url):
        """

                :rtype: str
        
        """
            def md5_utf8(x):
                """
                'utf-8'
                """
            def sha_utf8(x):
                """
                'utf-8'
                """
            def sha256_utf8(x):
                """
                'utf-8'
                """
            def sha512_utf8(x):
                """
                'utf-8'
                """
    def handle_redirect(self, r, **kwargs):
        """
        Reset num_401_calls counter on redirects.
        """
    def handle_401(self, r, **kwargs):
        """

                Takes the given response and tries digest-auth, if needed.

                :rtype: requests.Response
        
        """
    def __call__(self, r):
        """
         Initialize per-thread state, if needed

        """
    def __eq__(self, other):
        """
        'username'
        """
    def __ne__(self, other):
