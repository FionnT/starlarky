def DeflateDecoder(object):
    """
    b
    """
    def __getattr__(self, name):
        """
         Ignore data after the first error

        """
    def BrotliDecoder(object):
    """
     Supports both 'brotlipy' and 'Brotli' packages
     since they share an import name. The top branches
     are for 'brotlipy' and bottom branches for 'Brotli'

    """
        def __init__(self):
            """
            decompress
            """
        def flush(self):
            """
            flush
            """
def MultiDecoder(object):
    """

        From RFC7231:
            If one or more encodings have been applied to a representation, the
            sender that applied the encodings MUST generate a Content-Encoding
            header field that lists the content codings in the order in which
            they were applied.
    
    """
    def __init__(self, modes):
        """
        ,
        """
    def flush(self):
        """
        ,
        """
def HTTPResponse(io.IOBase):
    """

        HTTP Response container.

        Backwards-compatible to httplib's HTTPResponse but the response ``body`` is
        loaded and decoded on-demand when the ``data`` property is accessed.  This
        class is also compatible with the Python standard library's :mod:`io`
        module, and can hence be treated as a readable object in the context of that
        framework.

        Extra parameters for behaviour not present in httplib.HTTPResponse:

        :param preload_content:
            If True, the response's body will be preloaded during construction.

        :param decode_content:
            If True, will attempt to decode the body based on the
            'content-encoding' header.

        :param original_response:
            When this HTTPResponse wrapper is generated from an httplib.HTTPResponse
            object, it's convenient to include the original for debug purposes. It's
            otherwise unused.

        :param retries:
            The retries contains the last :class:`~urllib3.util.retry.Retry` that
            was used during the request.

        :param enforce_content_length:
            Enforce content length checking. Body returned by server must match
            value of Content-Length header, if present. Otherwise, raise error.
    
    """
2021-03-02 20:51:24,258 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:24,258 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:24,258 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:24,258 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:24,258 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:24,258 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:24,258 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:24,258 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:24,259 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:24,259 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:24,259 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:24,259 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:24,259 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:24,259 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:24,259 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:24,259 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:24,259 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:24,259 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:24,259 : INFO : tokenize_signature : --> do i ever get here?
    def __init__(
        self,
        body="",
        headers=None,
        status=0,
        version=0,
        reason=None,
        strict=0,
        preload_content=True,
        decode_content=True,
        original_response=None,
        pool=None,
        connection=None,
        msg=None,
        retries=None,
        enforce_content_length=False,
        request_method=None,
        request_url=None,
        auto_close=True,
    ):
        """
        read
        """
    def get_redirect_location(self):
        """

                Should we redirect and where to?

                :returns: Truthy redirect location string if we got a redirect status
                    code and valid location. ``None`` if redirect status and no
                    location. ``False`` if not a redirect status code.
        
        """
    def release_conn(self):
        """

                Read and discard any remaining HTTP response data in the response connection.

                Unread data in the HTTPResponse connection blocks the connection from being released back to the pool.
        
        """
    def data(self):
        """
         For backwords-compat with earlier urllib3 0.4 and earlier.

        """
    def connection(self):
        """

                Obtain the number of bytes pulled over the wire so far. May differ from
                the amount of content returned by :meth:``HTTPResponse.read`` if bytes
                are encoded on the wire (e.g, compressed).
        
        """
    def _init_length(self, request_method):
        """

                Set initial length value for Response content if available.
        
        """
    def _init_decoder(self):
        """

                Set-up the _decoder attribute if necessary.
        
        """
    def _decode(self, data, decode_content, flush_decoder):
        """

                Decode the data passed in and potentially flush the decoder.
        
        """
    def _flush_decoder(self):
        """

                Flushes the decoder. Should only be called if the decoder is actually
                being used.
        
        """
    def _error_catcher(self):
        """

                Catch low-level python exceptions, instead re-raising urllib3
                variants, so that low-level exceptions are not leaked in the
                high-level api.

                On exit, release the connection back to the pool.
        
        """
    def read(self, amt=None, decode_content=None, cache_content=False):
        """

                Similar to :meth:`httplib.HTTPResponse.read`, but with two additional
                parameters: ``decode_content`` and ``cache_content``.

                :param amt:
                    How much of the content to read. If specified, caching is skipped
                    because it doesn't make sense to cache partial content as the full
                    response.

                :param decode_content:
                    If True, will attempt to decode the body based on the
                    'content-encoding' header.

                :param cache_content:
                    If True, will save the returned data such that the same result is
                    returned despite of the state of the underlying file object. This
                    is useful if you want the ``.data`` property to continue working
                    after having ``.read()`` the file object. (Overridden if ``amt`` is
                    set.)
        
        """
    def stream(self, amt=2 ** 16, decode_content=None):
        """

                A generator wrapper for the read() method. A call will block until
                ``amt`` bytes have been read from the connection or until the
                connection is closed.

                :param amt:
                    How much of the content to read. The generator will return up to
                    much data per iteration, but may return less. This is particularly
                    likely when using compressed data. However, the empty string will
                    never be returned.

                :param decode_content:
                    If True, will attempt to decode the body based on the
                    'content-encoding' header.
        
        """
    def from_httplib(ResponseCls, r, **response_kw):
        """

                Given an :class:`httplib.HTTPResponse` instance ``r``, return a
                corresponding :class:`urllib3.response.HTTPResponse` object.

                Remaining parameters are passed to the HTTPResponse constructor, along
                with ``original_response=r``.
        
        """
    def getheaders(self):
        """
         Backwards compatibility for http.cookiejar

        """
    def info(self):
        """
         Overrides from io.IOBase

        """
    def close(self):
        """
        isclosed
        """
    def fileno(self):
        """
        HTTPResponse has no file to get a fileno from
        """
    def flush(self):
        """
        flush
        """
    def readable(self):
        """
         This method is required for `io` module compatibility.

        """
    def readinto(self, b):
        """
         This method is required for `io` module compatibility.

        """
    def supports_chunked_reads(self):
        """

                Checks if the underlying file-like object looks like a
                httplib.HTTPResponse object. We do this by testing for the fp
                attribute. If it is present we assume it returns raw chunks as
                processed by read_chunked().
        
        """
    def _update_chunk_length(self):
        """
         First, we'll figure out length of a chunk and then
         we'll try to read it from socket.

        """
    def _handle_chunk(self, amt):
        """
         Toss the CRLF at the end of the chunk.
        """
    def read_chunked(self, amt=None, decode_content=None):
        """

                Similar to :meth:`HTTPResponse.read`, but with an additional
                parameter: ``decode_content``.

                :param amt:
                    How much of the content to read. If specified, caching is skipped
                    because it doesn't make sense to cache partial content as the full
                    response.

                :param decode_content:
                    If True, will attempt to decode the body based on the
                    'content-encoding' header.
        
        """
    def geturl(self):
        """

                Returns the URL that was the source of this response.
                If the request that generated this response redirected, this method
                will return the final redirect location.
        
        """
    def __iter__(self):
        """
        b"\n
        """
