    def RLock:
    """
    RecentlyUsedContainer
    """
def RecentlyUsedContainer(MutableMapping):
    """

        Provides a thread-safe dict-like container which maintains up to
        ``maxsize`` keys while throwing away the least-recently-used keys beyond
        ``maxsize``.

        :param maxsize:
            Maximum number of recent elements to retain.

        :param dispose_func:
            Every time an item is evicted from the container,
            ``dispose_func(value)`` is called.  Callback which will get called
    
    """
    def __init__(self, maxsize=10, dispose_func=None):
        """
         Re-insert the item, moving it to the end of the eviction line.

        """
    def __setitem__(self, key, value):
        """
         Possibly evict the existing value of 'key'

        """
    def __delitem__(self, key):
        """
        Iteration over this class is unlikely to be threadsafe.

        """
    def clear(self):
        """
         Copy pointers to all values, then wipe the mapping

        """
    def keys(self):
        """

            :param headers:
                An iterable of field-value pairs. Must not contain multiple field names
                when compared case-insensitively.

            :param kwargs:
                Additional field-value pairs to pass in to ``dict.update``.

            A ``dict`` like container for storing HTTP Headers.

            Field names are stored and compared case-insensitively in compliance with
            RFC 7230. Iteration provides the first case-sensitive key seen for each
            case-insensitive pair.

            Using ``__setitem__`` syntax overwrites fields that compare equal
            case-insensitively in order to maintain ``dict``'s api. For fields that
            compare equal, instead create a new ``HTTPHeaderDict`` and use ``.add``
            in a loop.

            If multiple fields that are equal case-insensitively are passed to the
            constructor or ``.update``, the behavior is undefined and some will be
            lost.

            >>> headers = HTTPHeaderDict()
            >>> headers.add('Set-Cookie', 'foo=bar')
            >>> headers.add('set-cookie', 'baz=quxx')
            >>> headers['content-length'] = '7'
            >>> headers['SET-cookie']
            'foo=bar, baz=quxx'
            >>> headers['Content-Length']
            '7'
    
        """
    def __init__(self, headers=None, **kwargs):
        """
        , 
        """
    def __delitem__(self, key):
        """
        keys
        """
    def __ne__(self, other):
        """
         Python 2
        """
    def __len__(self):
        """
         Only provide the originally cased names

        """
    def pop(self, key, default=__marker):
        """
        D.pop(k[,d]) -> v, remove specified key and return the corresponding value.
                  If key is not found, d is returned if given, otherwise KeyError is raised.
        
        """
    def discard(self, key):
        """
        Adds a (name, value) pair, doesn't overwrite the value if it already
                exists.

                >>> headers = HTTPHeaderDict(foo='bar')
                >>> headers.add('Foo', 'baz')
                >>> headers['foo']
                'bar, baz'
        
        """
    def extend(self, *args, **kwargs):
        """
        Generic import function for any type of header-like object.
                Adapted version of MutableMapping.update in order to insert items
                with self.add instead of self.__setitem__
        
        """
    def getlist(self, key, default=__marker):
        """
        Returns a list of all the values for the named field. Returns an
                empty list if the key doesn't exist.
        """
    def __repr__(self):
        """
        %s(%s)
        """
    def _copy_from(self, other):
        """
         Don't need to convert tuples

        """
    def copy(self):
        """
        Iterate over all header lines, including duplicate ones.
        """
    def itermerged(self):
        """
        Iterate over all headers, merging duplicate ones together.
        """
    def items(self):
        """
         Python 2
        """
