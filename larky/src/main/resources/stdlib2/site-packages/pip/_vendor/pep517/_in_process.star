    def write_json(obj, path, **kwargs):
        """
        'w'
        """
    def read_json(path):
        """
        'r'
        """
    def write_json(obj, path, **kwargs):
        """
        'wb'
        """
    def read_json(path):
        """
        'rb'
        """
def BackendUnavailable(Exception):
    """
    Raised if we cannot import the backend
    """
    def __init__(self, traceback):
        """
        Raised if the backend is invalid
        """
    def __init__(self, message):
        """
        Raised if a hook is missing and we are not executing the fallback
        """
def contained_in(filename, directory):
    """
    Test if a file is located within the given directory.
    """
def _build_backend():
    """
    Find and load the build backend
    """
def get_requires_for_build_wheel(config_settings):
    """
    Invoke the optional get_requires_for_build_wheel hook

        Returns [] if the hook is not defined.
    
    """
2021-03-02 20:50:59,945 : INFO : tokenize_signature : --> do i ever get here?
def prepare_metadata_for_build_wheel(
        metadata_directory, config_settings, _allow_fallback):
    """
    Invoke optional prepare_metadata_for_build_wheel

        Implements a fallback by building a wheel if the hook isn't defined,
        unless _allow_fallback is False in which case HookMissing is raised.
    
    """
def _dist_info_files(whl_zip):
    """
    Identify the .dist-info folder inside a wheel ZipFile.
    """
2021-03-02 20:50:59,946 : INFO : tokenize_signature : --> do i ever get here?
def _get_wheel_metadata_from_wheel(
        backend, metadata_directory, config_settings):
    """
    Build a wheel and extract the metadata from it.

        Fallback for when the build backend does not
        define the 'get_wheel_metadata' hook.
    
    """
def _find_already_built_wheel(metadata_directory):
    """
    Check for a wheel already built during the get_wheel_metadata hook.
    
    """
def build_wheel(wheel_directory, config_settings, metadata_directory=None):
    """
    Invoke the mandatory build_wheel hook.

        If a wheel was already built in the
        prepare_metadata_for_build_wheel fallback, this
        will copy it rather than rebuilding the wheel.
    
    """
def get_requires_for_build_sdist(config_settings):
    """
    Invoke the optional get_requires_for_build_wheel hook

        Returns [] if the hook is not defined.
    
    """
def _DummyException(Exception):
    """
    Nothing should ever raise this exception
    """
def GotUnsupportedOperation(Exception):
    """
    For internal use when backend raises UnsupportedOperation
    """
    def __init__(self, traceback):
        """
        Invoke the mandatory build_sdist hook.
        """
def main():
    """
    Needs args: hook_name, control_dir
    """
