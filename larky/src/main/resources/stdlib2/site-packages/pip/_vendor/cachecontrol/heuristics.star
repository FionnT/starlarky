def expire_after(delta, date=None):
    """

            Return a valid 1xx warning header value describing the cache
            adjustments.

            The response is provided too allow warnings like 113
            http://tools.ietf.org/html/rfc7234#section-5.5.4 where we need
            to explicitly say response is over 24 hours old.
        
    """
    def update_headers(self, response):
        """
        Update the response headers with any new headers.

                NOTE: This SHOULD always include some Warning header to
                      signify that the response was cached by the client, not
                      by way of the provided headers.
        
        """
    def apply(self, response):
        """
        Warning
        """
def OneDayCache(BaseHeuristic):
    """

        Cache the response by providing an expires 1 day in the
        future.
    
    """
    def update_headers(self, response):
        """
        expires
        """
def ExpiresAfter(BaseHeuristic):
    """

        Cache **all** requests for a defined time period.
    
    """
    def __init__(self, **kw):
        """
        expires
        """
    def warning(self, response):
        """
        110 - Automatically cached for %s. Response might be stale
        """
def LastModified(BaseHeuristic):
    """

        If there is no Expires header already, fall back on Last-Modified
        using the heuristic from
        http://tools.ietf.org/html/rfc7234#section-4.2.2
        to calculate a reasonable value.

        Firefox also does something like this per
        https://developer.mozilla.org/en-US/docs/Web/HTTP/Caching_FAQ
        http://lxr.mozilla.org/mozilla-release/source/netwerk/protocol/http/nsHttpResponseHead.cpp#397
        Unlike mozilla we limit this to 24-hr.
    
    """
    def update_headers(self, resp):
        """
        expires
        """
    def warning(self, resp):
