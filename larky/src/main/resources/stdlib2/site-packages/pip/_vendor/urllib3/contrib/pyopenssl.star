    def UnsupportedExtension(Exception):
    """
     Platform-specific: Python 2
    """
def inject_into_urllib3():
    """
    Monkey-patch urllib3 with PyOpenSSL-backed SSL-support.
    """
def extract_from_urllib3():
    """
    Undo monkey-patching by :func:`inject_into_urllib3`.
    """
def _validate_dependencies_met():
    """

        Verifies that PyOpenSSL's package-level dependencies have been met.
        Throws `ImportError` if they are not met.
    
    """
def _dnsname_to_stdlib(name):
    """

        Converts a dNSName SubjectAlternativeName field to the form used by the
        standard library on the given Python version.

        Cryptography produces a dNSName as a unicode string that was idna-decoded
        from ASCII bytes. We need to idna-encode that string to get it back, and
        then on Python 3 we also need to convert to unicode via UTF-8 (the stdlib
        uses PyUnicode_FromStringAndSize on it, which decodes via UTF-8).

        If the name cannot be idna-encoded then we return None signalling that
        the name given should be skipped.
    
    """
    def idna_encode(name):
        """

                Borrowed wholesale from the Python Cryptography Project. It turns out
                that we can't just safely call `idna.encode`: it can explode for
                wildcard names. This avoids that problem.
        
        """
def get_subj_alt_name(peer_cert):
    """

        Given an PyOpenSSL certificate, provides all the subject alternative names.
    
    """
def WrappedSocket(object):
    """
    API-compatibility wrapper for Python OpenSSL's Connection-class.

        Note: _makefile_refs, _drop() and _reuse() are needed for the garbage
        collector of pypy.
    
    """
    def __init__(self, connection, socket, suppress_ragged_eofs=True):
        """
         Copy-pasted from Python 3.5 source code

        """
    def _decref_socketios(self):
        """
        Unexpected EOF
        """
    def recv_into(self, *args, **kwargs):
        """
        Unexpected EOF
        """
    def settimeout(self, timeout):
        """
         FIXME rethrow compatible exceptions should we ever use this

        """
    def close(self):
        """
        subject
        """
    def version(self):
        """
         Platform-specific: Python 2
        """
    def makefile(self, mode, bufsize=-1):
        """
         Platform-specific: Python 3
        """
def PyOpenSSLContext(object):
    """

        I am a wrapper class for the PyOpenSSL ``Context`` object. I am responsible
        for translating the interface of the standard library ``SSLContext`` object
        to calls into PyOpenSSL.
    
    """
    def __init__(self, protocol):
        """
        utf-8
        """
    def load_verify_locations(self, cafile=None, capath=None, cadata=None):
        """
        utf-8
        """
    def load_cert_chain(self, certfile, keyfile=None, password=None):
        """
        utf-8
        """
2021-03-02 20:51:25,153 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:25,153 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:25,153 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:25,153 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:25,153 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:25,153 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:25,153 : INFO : tokenize_signature : --> do i ever get here?
    def wrap_socket(
        self,
        sock,
        server_side=False,
        do_handshake_on_connect=True,
        suppress_ragged_eofs=True,
        server_hostname=None,
    ):
        """
         Platform-specific: Python 3
        """
def _verify_callback(cnx, x509, err_no, err_depth, return_code):
