def HTMLTokenizer(object):
    """
     This class takes care of tokenizing HTML.

        * self.currentToken
          Holds the token that is currently being processed.

        * self.state
          Holds a reference to the method to be invoked... XXX

        * self.stream
          Points to HTMLInputStream object.
    
    """
    def __init__(self, stream, parser=None, **kwargs):
        """
         Setup the initial tokenizer state

        """
    def __iter__(self):
        """
         This is where the magic happens.

                We do our usually processing through the states and when we have a token
                to return we yield the token which pauses processing until the next token
                is requested.
        
        """
    def consumeNumberEntity(self, isHex):
        """
        This function returns either U+FFFD or the character based on the
                decimal or hexadecimal representation. It also discards ";" if present.
                If not present self.tokenQueue.append({"type": tokenTypes["ParseError"]}) is invoked.
        
        """
    def consumeEntity(self, allowedChar=None, fromAttribute=False):
        """
         Initialise to the default output for when no entity is matched

        """
    def processEntityInAttribute(self, allowedChar):
        """
        This method replaces the need for "entityInAttributeValueState".
        
        """
    def emitCurrentToken(self):
        """
        This method is a generic handler for emitting the tags. It also sets
                the state to "data" because that's what's needed after a token has been
                emitted.
        
        """
    def dataState(self):
        """
        &
        """
    def entityDataState(self):
        """
        &
        """
    def characterReferenceInRcdata(self):
        """
        <
        """
    def scriptDataState(self):
        """
        <
        """
    def plaintextState(self):
        """
         Tokenization ends.

        """
    def tagOpenState(self):
        """
        !
        """
    def closeTagOpenState(self):
        """
        type
        """
    def tagNameState(self):
        """
        >
        """
    def rcdataLessThanSignState(self):
        """
        /
        """
    def rcdataEndTagOpenState(self):
        """
        type
        """
    def rcdataEndTagNameState(self):
        """
        name
        """
    def rawtextLessThanSignState(self):
        """
        /
        """
    def rawtextEndTagOpenState(self):
        """
        type
        """
    def rawtextEndTagNameState(self):
        """
        name
        """
    def scriptDataLessThanSignState(self):
        """
        /
        """
    def scriptDataEndTagOpenState(self):
        """
        type
        """
    def scriptDataEndTagNameState(self):
        """
        name
        """
    def scriptDataEscapeStartState(self):
        """
        -
        """
    def scriptDataEscapeStartDashState(self):
        """
        -
        """
    def scriptDataEscapedState(self):
        """
        -
        """
    def scriptDataEscapedDashState(self):
        """
        -
        """
    def scriptDataEscapedDashDashState(self):
        """
        -
        """
    def scriptDataEscapedLessThanSignState(self):
        """
        /
        """
    def scriptDataEscapedEndTagOpenState(self):
        """
        type
        """
    def scriptDataEscapedEndTagNameState(self):
        """
        name
        """
    def scriptDataDoubleEscapeStartState(self):
        """
        /
        """
    def scriptDataDoubleEscapedState(self):
        """
        -
        """
    def scriptDataDoubleEscapedDashState(self):
        """
        -
        """
    def scriptDataDoubleEscapedDashDashState(self):
        """
        -
        """
    def scriptDataDoubleEscapedLessThanSignState(self):
        """
        /
        """
    def scriptDataDoubleEscapeEndState(self):
        """
        /
        """
    def beforeAttributeNameState(self):
        """
        data
        """
    def attributeNameState(self):
        """
        =
        """
    def afterAttributeNameState(self):
        """
        =
        """
    def beforeAttributeValueState(self):
        """
        \
        """
    def attributeValueDoubleQuotedState(self):
        """
        \
        """
    def attributeValueSingleQuotedState(self):
        """
        '
        """
    def attributeValueUnQuotedState(self):
        """
        &
        """
    def afterAttributeValueState(self):
        """
        >
        """
    def selfClosingStartTagState(self):
        """
        >
        """
    def bogusCommentState(self):
        """
         Make a new comment token and give it as value all the characters
         until the first > or EOF (charsUntil checks for EOF automatically)
         and emit it.

        """
    def markupDeclarationOpenState(self):
        """
        -
        """
    def commentStartState(self):
        """
        -
        """
    def commentStartDashState(self):
        """
        -
        """
    def commentState(self):
        """
        -
        """
    def commentEndDashState(self):
        """
        -
        """
    def commentEndState(self):
        """
        >
        """
    def commentEndBangState(self):
        """
        >
        """
    def doctypeState(self):
        """
        type
        """
    def beforeDoctypeNameState(self):
        """
        >
        """
    def doctypeNameState(self):
        """
        name
        """
    def afterDoctypeNameState(self):
        """
        >
        """
    def afterDoctypePublicKeywordState(self):
        """
        '
        """
    def beforeDoctypePublicIdentifierState(self):
        """
        \
        """
    def doctypePublicIdentifierDoubleQuotedState(self):
        """
        \
        """
    def doctypePublicIdentifierSingleQuotedState(self):
        """
        '
        """
    def afterDoctypePublicIdentifierState(self):
        """
        >
        """
    def betweenDoctypePublicAndSystemIdentifiersState(self):
        """
        >
        """
    def afterDoctypeSystemKeywordState(self):
        """
        '
        """
    def beforeDoctypeSystemIdentifierState(self):
        """
        \
        """
    def doctypeSystemIdentifierDoubleQuotedState(self):
        """
        \
        """
    def doctypeSystemIdentifierSingleQuotedState(self):
        """
        '
        """
    def afterDoctypeSystemIdentifierState(self):
        """
        >
        """
    def bogusDoctypeState(self):
        """
        >
        """
    def cdataSectionState(self):
        """
        ]
        """
