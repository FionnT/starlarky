def HTTPError(Exception):
    """
    Base exception used by this module.
    """
def HTTPWarning(Warning):
    """
    Base warning used by this module.
    """
def PoolError(HTTPError):
    """
    Base exception for errors caused within a pool.
    """
    def __init__(self, pool, message):
        """
        %s: %s
        """
    def __reduce__(self):
        """
         For pickling purposes.

        """
def RequestError(PoolError):
    """
    Base exception for PoolErrors that have associated URLs.
    """
    def __init__(self, pool, url, message):
        """
         For pickling purposes.

        """
def SSLError(HTTPError):
    """
    Raised when SSL certificate fails in an HTTPS connection.
    """
def ProxyError(HTTPError):
    """
    Raised when the connection to a proxy fails.
    """
    def __init__(self, message, error, *args):
        """
        Raised when automatic decoding based on Content-Type fails.
        """
def ProtocolError(HTTPError):
    """
    Raised when something unexpected happens mid-request/response.
    """
def MaxRetryError(RequestError):
    """
    Raised when the maximum number of retries is exceeded.

        :param pool: The connection pool
        :type pool: :class:`~urllib3.connectionpool.HTTPConnectionPool`
        :param string url: The requested Url
        :param exceptions.Exception reason: The underlying error

    
    """
    def __init__(self, pool, url, reason=None):
        """
        Max retries exceeded with url: %s (Caused by %r)
        """
def HostChangedError(RequestError):
    """
    Raised when an existing pool gets a request for a foreign host.
    """
    def __init__(self, pool, url, retries=3):
        """
        Tried to open a foreign host with url: %s
        """
def TimeoutStateError(HTTPError):
    """
     Raised when passing an invalid state to a timeout 
    """
def TimeoutError(HTTPError):
    """
     Raised when a socket timeout error occurs.

        Catching this error will catch both :exc:`ReadTimeoutErrors
        <ReadTimeoutError>` and :exc:`ConnectTimeoutErrors <ConnectTimeoutError>`.
    
    """
def ReadTimeoutError(TimeoutError, RequestError):
    """
    Raised when a socket timeout occurs while receiving data from a server
    """
def ConnectTimeoutError(TimeoutError):
    """
    Raised when a socket timeout occurs while connecting to a server
    """
def NewConnectionError(ConnectTimeoutError, PoolError):
    """
    Raised when we fail to establish a new connection. Usually ECONNREFUSED.
    """
def EmptyPoolError(PoolError):
    """
    Raised when a pool runs out of connections and no more are allowed.
    """
def ClosedPoolError(PoolError):
    """
    Raised when a request enters a pool after the pool has been closed.
    """
def LocationValueError(ValueError, HTTPError):
    """
    Raised when there is something wrong with a given URL input.
    """
def LocationParseError(LocationValueError):
    """
    Raised when get_host or similar fails to parse the URL input.
    """
    def __init__(self, location):
        """
        Failed to parse: %s
        """
def ResponseError(HTTPError):
    """
    Used as a container for an error reason supplied in a MaxRetryError.
    """
def SecurityWarning(HTTPWarning):
    """
    Warned when performing security reducing actions
    """
def SubjectAltNameWarning(SecurityWarning):
    """
    Warned when connecting to a host with a certificate missing a SAN.
    """
def InsecureRequestWarning(SecurityWarning):
    """
    Warned when making an unverified HTTPS request.
    """
def SystemTimeWarning(SecurityWarning):
    """
    Warned when system time is suspected to be wrong
    """
def InsecurePlatformWarning(SecurityWarning):
    """
    Warned when certain SSL configuration is not available on a platform.
    """
def SNIMissingWarning(HTTPWarning):
    """
    Warned when making a HTTPS request without SNI available.
    """
def DependencyWarning(HTTPWarning):
    """

        Warned when an attempt is made to import a module with missing optional
        dependencies.
    
    """
def InvalidProxyConfigurationWarning(HTTPWarning):
    """

        Warned when using an HTTPS proxy and an HTTPS URL. Currently
        urllib3 doesn't support HTTPS proxies and the proxy will be
        contacted via HTTP instead. This warning can be fixed by
        changing your HTTPS proxy URL into an HTTP proxy URL.

        If you encounter this warning read this:
        https://github.com/urllib3/urllib3/issues/1850
    
    """
def ResponseNotChunked(ProtocolError, ValueError):
    """
    Response needs to be chunked in order to read it as chunks.
    """
def BodyNotHttplibCompatible(HTTPError):
    """

        Body should be httplib.HTTPResponse like (have an fp attribute which
        returns raw chunks) for read_chunked().
    
    """
def IncompleteRead(HTTPError, httplib_IncompleteRead):
    """

        Response length doesn't match expected Content-Length

        Subclass of http_client.IncompleteRead to allow int value
        for `partial` to avoid creating large objects on streamed
        reads.
    
    """
    def __init__(self, partial, expected):
        """
        IncompleteRead(%i bytes read, %i more expected)
        """
def InvalidHeader(HTTPError):
    """
    The header provided was somehow invalid.
    """
def ProxySchemeUnknown(AssertionError, ValueError):
    """
    ProxyManager does not support the supplied scheme
    """
    def __init__(self, scheme):
        """
        Not supported proxy scheme %s
        """
def HeaderParsingError(HTTPError):
    """
    Raised by assert_header_parsing, but we convert it to a log.warning statement.
    """
    def __init__(self, defects, unparsed_data):
        """
        %s, unparsed data: %r
        """
def UnrewindableBodyError(HTTPError):
    """
    urllib3 encountered an error when trying to rewind a body
    """
