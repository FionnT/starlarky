def getETreeBuilder(ElementTreeImplementation, fullTree=False):
    """
    asd
    """
    def Element(base.Node):
    """
    html
    """
        def _getETreeTag(self, name, namespace):
            """
            {%s}%s
            """
        def _setName(self, name):
            """
             calling .items _always_ allocates, and the above truthy check is cheaper than the
             allocation on average

            """
        def _getChildNodes(self):
            """
            Return true if the node has children or text
            """
        def appendChild(self, node):
            """

            """
        def cloneNode(self):
            """

            """
    def Comment(Element):
    """
     Use the superclass constructor to set all properties on the
     wrapper element

    """
        def _getData(self):
            """
            <!DOCTYPE>
            """
        def _getPublicId(self):
            """
            publicId
            """
        def _setPublicId(self, value):
            """
            publicId
            """
        def _getSystemId(self):
            """
            systemId
            """
        def _setSystemId(self, value):
            """
            systemId
            """
    def Document(Element):
    """
    DOCUMENT_ROOT
    """
    def DocumentFragment(Element):
    """
    DOCUMENT_FRAGMENT
    """
    def testSerializer(element):
        """
        tag
        """
    def tostring(element):  # pylint:disable=unused-variable
        """
         pylint:disable=unused-variable
        """
        def serializeElement(element):
            """
            <!DOCTYPE>
            """
    def TreeBuilder(base.TreeBuilder):  # pylint:disable=unused-variable
    """
     pylint:disable=unused-variable
    """
        def testSerializer(self, element):
            """
            {%s}html
            """
        def getFragment(self):
