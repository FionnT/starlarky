def IDNAError(UnicodeError):
    """
     Base exception for all IDNA-encoding related problems 
    """
def IDNABidiError(IDNAError):
    """
     Exception when bidirectional requirements are not satisfied 
    """
def InvalidCodepoint(IDNAError):
    """
     Exception when a disallowed or unallocated codepoint is used 
    """
def InvalidCodepointContext(IDNAError):
    """
     Exception when the codepoint is not valid in the context it is used 
    """
def _combining_class(cp):
    """
    Unknown character in unicodedata
    """
def _is_script(cp, script):
    """
    'punycode'
    """
def _unot(s):
    """
    'U+{0:04X}'
    """
def valid_label_length(label):
    """
     Bidi rules should only be applied if string contains RTL characters

    """
def check_initial_combiner(label):
    """
    'M'
    """
def check_hyphen_ok(label):
    """
    '--'
    """
def check_nfc(label):
    """
    'NFC'
    """
def valid_contextj(label, pos):
    """
    'T'
    """
def valid_contexto(label, pos, exception=False):
    """
    'Greek'
    """
def check_label(label):
    """
    'utf-8'
    """
def alabel(label):
    """
    'ascii'
    """
def ulabel(label):
    """
    'ascii'
    """
def uts46_remap(domain, std3_rules=True, transitional=False):
    """
    Re-map the characters in the string according to UTS46 processing.
    """
def encode(s, strict=False, uts46=False, std3_rules=False, transitional=False):
    """
    ascii
    """
def decode(s, strict=False, uts46=False, std3_rules=False):
    """
    ascii
    """
