def CodingStateMachine(object):
    """

        A state machine to verify a byte sequence for a particular encoding. For
        each byte the detector receives, it will feed that byte to every active
        state machine available, one byte at a time. The state machine changes its
        state based on its previous state and the byte it receives. There are 3
        states in a state machine that are of interest to an auto-detector:

        START state: This is the state to start with, or a legal byte sequence
                     (i.e. a valid code point) for character has been identified.

        ME state:  This indicates that the state machine identified a byte sequence
                   that is specific to the charset it is designed for and that
                   there is no other possible encoding which can contain this byte
                   sequence. This will to lead to an immediate positive answer for
                   the detector.

        ERROR state: This indicates the state machine identified an illegal byte
                     sequence for that encoding. This will lead to an immediate
                     negative answer for this encoding. Detector will exclude this
                     encoding from consideration from here on.
    
    """
    def __init__(self, sm):
        """
         for each byte we get its class
         if it is first byte, we also get byte length

        """
    def get_current_charlen(self):
        """
        'name'
        """
    def language(self):
        """
        'language'
        """
