    def _in_proc_script_path():
        """
        '_in_process.py'
        """
    def _in_proc_script_path():
        """
        '_in_process.py'
        """
def tempdir():
    """
    Will be raised if the backend cannot be imported in the hook process.
    """
    def __init__(self, traceback):
        """
        Will be raised if the backend is invalid.
        """
    def __init__(self, backend_name, backend_path, message):
        """
        Will be raised on missing hooks.
        """
    def __init__(self, hook_name):
        """
        May be raised by build_sdist if the backend indicates that it can't.
        """
    def __init__(self, traceback):
        """
        The default method of calling the wrapper subprocess.
        """
def quiet_subprocess_runner(cmd, cwd=None, extra_environ=None):
    """
    A method of calling the wrapper subprocess while suppressing output.
    """
def norm_and_check(source_tree, requested):
    """
    Normalise and check a backend path.

        Ensure that the requested backend path is specified as a relative path,
        and resolves to a location under the given source tree.

        Return an absolute version of the requested path.
    
    """
def Pep517HookCaller(object):
    """
    A wrapper around a source directory to be built with a PEP 517 backend.

        source_dir : The path to the source directory, containing pyproject.toml.
        build_backend : The build backend spec, as per PEP 517, from
            pyproject.toml.
        backend_path : The backend path, as per PEP 517, from pyproject.toml.
        runner : A callable that invokes the wrapper subprocess.

        The 'runner', if provided, must expect the following:
            cmd : a list of strings representing the command and arguments to
                execute, as would be passed to e.g. 'subprocess.check_call'.
            cwd : a string representing the working directory that must be
                used for the subprocess. Corresponds to the provided source_dir.
            extra_environ : a dict mapping environment variable names to values
                which must be set for the subprocess execution.
    
    """
2021-03-02 20:51:01,061 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:01,061 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:01,061 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:01,061 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:01,061 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:01,061 : INFO : tokenize_signature : --> do i ever get here?
    def __init__(
            self,
            source_dir,
            build_backend,
            backend_path=None,
            runner=None,
    ):
        """
        A context manager for temporarily overriding the default subprocess
                runner.
        
        """
    def get_requires_for_build_wheel(self, config_settings=None):
        """
        Identify packages required for building a wheel

                Returns a list of dependency specifications, e.g.:
                    ["wheel >= 0.25", "setuptools"]

                This does not include requirements specified in pyproject.toml.
                It returns the result of calling the equivalently named hook in a
                subprocess.
        
        """
2021-03-02 20:51:01,062 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:01,062 : INFO : tokenize_signature : --> do i ever get here?
    def prepare_metadata_for_build_wheel(
            self, metadata_directory, config_settings=None,
            _allow_fallback=True):
        """
        Prepare a *.dist-info folder with metadata for this project.

                Returns the name of the newly created folder.

                If the build backend defines a hook with this name, it will be called
                in a subprocess. If not, the backend will be asked to build a wheel,
                and the dist-info extracted from that (unless _allow_fallback is
                False).
        
        """
2021-03-02 20:51:01,063 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:01,063 : INFO : tokenize_signature : --> do i ever get here?
    def build_wheel(
            self, wheel_directory, config_settings=None,
            metadata_directory=None):
        """
        Build a wheel from this project.

                Returns the name of the newly created file.

                In general, this will call the 'build_wheel' hook in the backend.
                However, if that was previously called by
                'prepare_metadata_for_build_wheel', and the same metadata_directory is
                used, the previously built wheel will be copied to wheel_directory.
        
        """
    def get_requires_for_build_sdist(self, config_settings=None):
        """
        Identify packages required for building a wheel

                Returns a list of dependency specifications, e.g.:
                    ["setuptools >= 26"]

                This does not include requirements specified in pyproject.toml.
                It returns the result of calling the equivalently named hook in a
                subprocess.
        
        """
    def build_sdist(self, sdist_directory, config_settings=None):
        """
        Build an sdist from this project.

                Returns the name of the newly created file.

                This calls the 'build_sdist' backend hook in a subprocess.
        
        """
    def _call_hook(self, hook_name, kwargs):
        """
         On Python 2, pytoml returns Unicode values (which is correct) but the
         environment passed to check_call needs to contain string values. We
         convert here by encoding using ASCII (the backend can only contain
         letters, digits and _, . and : characters, and will be used as a
         Python identifier, so non-ASCII content is wrong on Python 2 in
         any case).
         For backend_path, we use sys.getfilesystemencoding.

        """
def LoggerWrapper(threading.Thread):
    """

        Read messages from a pipe and redirect them
        to a logger (see python's logging module).
    
    """
    def __init__(self, logger, level):
        """
         create the pipe and reader

        """
    def fileno(self):
