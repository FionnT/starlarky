def MethodDispatcher(dict):
    """
    Dict with 2 special properties:

        On initiation, keys that are lists, sets or tuples are converted to
        multiple keys so accessing any one of the items in the original
        list-like object returns the matching value

        md = MethodDispatcher({("foo", "bar"):"baz"})
        md["foo"] == "baz"

        A default value which can be set through the default attribute.
    
    """
    def __init__(self, items=()):
        """
        Wraps a MethodDispatcher, binding its return values to `instance`
        """
    def __init__(self, instance, dispatcher):
        """
         see https://docs.python.org/3/reference/datamodel.html#object.__get__
         on a function, __get__ is used to bind a function to an instance as a bound method

        """
    def get(self, key, default):
        """
         Some utility functions to deal with weirdness around UCS2 vs UCS4
         python builds


        """
def isSurrogatePair(data):
    """
     Module Factory Factory (no, this isn't Java, I know)
     Here to stop this being duplicated all over the place.



    """
def moduleFactoryFactory(factory):
    """

    """
def memoize(func):
