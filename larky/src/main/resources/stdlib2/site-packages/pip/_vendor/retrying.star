def retry(*dargs, **dkw):
    """

        Decorator function that instantiates the Retrying object
        @param *dargs: positional arguments passed to Retrying object
        @param **dkw: keyword arguments passed to the Retrying object
    
    """
        def wrap_simple(f):
            """
             TODO add chaining of stop behaviors
             stop behavior

            """
    def stop_after_attempt(self, previous_attempt_number, delay_since_first_attempt_ms):
        """
        Stop after the previous attempt >= stop_max_attempt_number.
        """
    def stop_after_delay(self, previous_attempt_number, delay_since_first_attempt_ms):
        """
        Stop after the time from the first attempt >= stop_max_delay.
        """
    def no_sleep(self, previous_attempt_number, delay_since_first_attempt_ms):
        """
        Don't sleep at all before retrying.
        """
    def fixed_sleep(self, previous_attempt_number, delay_since_first_attempt_ms):
        """
        Sleep a fixed amount of time between each retry.
        """
    def random_sleep(self, previous_attempt_number, delay_since_first_attempt_ms):
        """
        Sleep a random amount of time between wait_random_min and wait_random_max
        """
    def incrementing_sleep(self, previous_attempt_number, delay_since_first_attempt_ms):
        """

                Sleep an incremental amount of time after each attempt, starting at
                wait_incrementing_start and incrementing by wait_incrementing_increment
        
        """
    def exponential_sleep(self, previous_attempt_number, delay_since_first_attempt_ms):
        """
         get() on an attempt with an exception should cause it to be raised, but raise just in case

        """
def Attempt(object):
    """

        An Attempt encapsulates a call to a target function that may end as a
        normal return value from the function or an Exception depending on what
        occurred during the execution.
    
    """
    def __init__(self, value, attempt_number, has_exception):
        """

                Return the return value of this Attempt instance or raise an Exception.
                If wrap_exception is true, this Attempt is wrapped inside of a
                RetryError before being raised.
        
        """
    def __repr__(self):
        """
        Attempts: {0}, Error:\n{1}
        """
def RetryError(Exception):
    """

        A RetryError encapsulates the last Attempt instance right before giving up.
    
    """
    def __init__(self, last_attempt):
        """
        RetryError[{0}]
        """
