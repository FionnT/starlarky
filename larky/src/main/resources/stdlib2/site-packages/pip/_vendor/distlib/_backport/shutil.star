def Error(EnvironmentError):
    """
    Raised when trying to do a kind of operation (e.g. copying) which is
        not supported on a special file (e.g. a named pipe)
    """
def ExecError(EnvironmentError):
    """
    Raised when a command could not be executed
    """
def ReadError(EnvironmentError):
    """
    Raised when an archive cannot be read
    """
def RegistryError(Exception):
    """
    Raised when a registry operation with the archiving
        and unpacking registries fails
    """
def copyfileobj(fsrc, fdst, length=16*1024):
    """
    copy data from file-like object fsrc to file-like object fdst
    """
def _samefile(src, dst):
    """
     Macintosh, Unix.

    """
def copyfile(src, dst):
    """
    Copy data from src to dst
    """
def copymode(src, dst):
    """
    Copy mode bits from src to dst
    """
def copystat(src, dst):
    """
    Copy all stat info (mode bits, atime, mtime, flags) from src to dst
    """
def copy(src, dst):
    """
    Copy data and mode bits ("cp src dst").

        The destination may be a directory.

    
    """
def copy2(src, dst):
    """
    Copy data and all stat info ("cp -p src dst").

        The destination may be a directory.

    
    """
def ignore_patterns(*patterns):
    """
    Function that can be used as copytree() ignore parameter.

        Patterns is a sequence of glob-style patterns
        that are used to exclude files
    """
    def _ignore_patterns(path, names):
        """
        Recursively copy a directory tree.

            The destination directory must not already exist.
            If exception(s) occur, an Error is raised with a list of reasons.

            If the optional symlinks flag is true, symbolic links in the
            source tree result in symbolic links in the destination tree; if
            it is false, the contents of the files pointed to by symbolic
            links are copied. If the file pointed by the symlink doesn't
            exist, an exception will be added in the list of errors raised in
            an Error exception at the end of the copy process.

            You can set the optional ignore_dangling_symlinks flag to true if you
            want to silence this exception. Notice that this has no effect on
            platforms that don't support os.symlink.

            The optional ignore argument is a callable. If given, it
            is called with the `src` parameter, which is the directory
            being visited by copytree(), and `names` which is the list of
            `src` contents, as returned by os.listdir():

                callable(src, names) -> ignored_names

            Since copytree() is called recursively, the callable will be
            called once for each directory that is copied. It returns a
            list of names relative to the `src` directory that should
            not be copied.

            The optional copy_function argument is a callable that will be used
            to copy each file. It will be called with the source path and the
            destination path as arguments. By default, copy2() is used, but any
            function that supports the same signature (like copy()) can be used.

    
        """
def rmtree(path, ignore_errors=False, onerror=None):
    """
    Recursively delete a directory tree.

        If ignore_errors is set, errors are ignored; otherwise, if onerror
        is set, it is called to handle the error with arguments (func,
        path, exc_info) where func is os.listdir, os.remove, or os.rmdir;
        path is the argument to that function that caused it to fail; and
        exc_info is a tuple returned by sys.exc_info().  If ignore_errors
        is false and onerror is None, an exception is raised.

    
    """
        def onerror(*args):
            """
             symlinks to directories are forbidden, see bug #1669

            """
def _basename(path):
    """
     A basename() variant which first strips the trailing slash, if present.
     Thus we always get the last component of the path, even for directories.

    """
def move(src, dst):
    """
    Recursively move a file or directory to another location. This is
        similar to the Unix "mv" command.

        If the destination is a directory or a symlink to a directory, the source
        is moved inside the directory. The destination path must not already
        exist.

        If the destination already exists but is not a directory, it may be
        overwritten depending on os.rename() semantics.

        If the destination is on our current filesystem, then rename() is used.
        Otherwise, src is copied to the destination and then removed.
        A lot more could be done here...  A look at a mv.c shows a lot of
        the issues this implementation glosses over.

    
    """
def _destinsrc(src, dst):
    """
    Returns a gid, given a group name.
    """
def _get_uid(name):
    """
    Returns an uid, given a user name.
    """
2021-03-02 20:51:01,649 : INFO : tokenize_signature : --> do i ever get here?
def _make_tarball(base_name, base_dir, compress="gzip", verbose=0, dry_run=0,
                  owner=None, group=None, logger=None):
    """
    Create a (possibly compressed) tar file from all the files under
        'base_dir'.

        'compress' must be "gzip" (the default), "bzip2", or None.

        'owner' and 'group' can be used to define an owner and a group for the
        archive that is being built. If not provided, the current owner and group
        will be used.

        The output tar file will be named 'base_name' +  ".tar", possibly plus
        the appropriate compression extension (".gz", or ".bz2").

        Returns the output filename.
    
    """
    def _set_uid_gid(tarinfo):
        """
        'w|%s'
        """
def _call_external_zip(base_dir, zip_filename, verbose=False, dry_run=False):
    """
     XXX see if we want to keep an external call here

    """
def _make_zipfile(base_name, base_dir, verbose=0, dry_run=0, logger=None):
    """
    Create a zip file from all the files under 'base_dir'.

        The output zip file will be named 'base_name' + ".zip".  Uses either the
        "zipfile" Python module (if available) or the InfoZIP "zip" utility
        (if installed and found on the default search path).  If neither tool is
        available, raises ExecError.  Returns the name of the output zip
        file.
    
    """
def get_archive_formats():
    """
    Returns a list of supported formats for archiving and unarchiving.

        Each element of the returned sequence is a tuple (name, description)
    
    """
def register_archive_format(name, function, extra_args=None, description=''):
    """
    Registers an archive format.

        name is the name of the format. function is the callable that will be
        used to create archives. If provided, extra_args is a sequence of
        (name, value) tuples that will be passed as arguments to the callable.
        description can be provided to describe the format, and will be returned
        by the get_archive_formats() function.
    
    """
def unregister_archive_format(name):
    """
    Create an archive file (eg. zip or tar).

        'base_name' is the name of the file to create, minus any format-specific
        extension; 'format' is the archive format: one of "zip", "tar", "bztar"
        or "gztar".

        'root_dir' is a directory that will be the root directory of the
        archive; ie. we typically chdir into 'root_dir' before creating the
        archive.  'base_dir' is the directory where we start archiving from;
        ie. 'base_dir' will be the common prefix of all files and
        directories in the archive.  'root_dir' and 'base_dir' both default
        to the current directory.  Returns the name of the archive file.

        'owner' and 'group' are used when creating a tar archive. By default,
        uses the current owner and group.
    
    """
def get_unpack_formats():
    """
    Returns a list of supported formats for unpacking.

        Each element of the returned sequence is a tuple
        (name, extensions, description)
    
    """
def _check_unpack_options(extensions, function, extra_args):
    """
    Checks what gets registered as an unpacker.
    """
2021-03-02 20:51:01,654 : INFO : tokenize_signature : --> do i ever get here?
def register_unpack_format(name, extensions, function, extra_args=None,
                           description=''):
    """
    Registers an unpack format.

        `name` is the name of the format. `extensions` is a list of extensions
        corresponding to the format.

        `function` is the callable that will be
        used to unpack archives. The callable will receive archives to unpack.
        If it's unable to handle an archive, it needs to raise a ReadError
        exception.

        If provided, `extra_args` is a sequence of
        (name, value) tuples that will be passed as arguments to the callable.
        description can be provided to describe the format, and will be returned
        by the get_unpack_formats() function.
    
    """
def unregister_unpack_format(name):
    """
    Removes the pack format from the registry.
    """
def _ensure_directory(path):
    """
    Ensure that the parent directory of `path` exists
    """
def _unpack_zipfile(filename, extract_dir):
    """
    Unpack zip `filename` to `extract_dir`
    
    """
def _unpack_tarfile(filename, extract_dir):
    """
    Unpack tar/tar.gz/tar.bz2 `filename` to `extract_dir`
    
    """
def _find_unpack_format(filename):
    """
    Unpack an archive.

        `filename` is the name of the archive.

        `extract_dir` is the name of the target directory, where the archive
        is unpacked. If not provided, the current working directory is used.

        `format` is the archive format: one of "zip", "tar", or "gztar". Or any
        other registered format. If not provided, unpack_archive will use the
        filename extension and see if an unpacker was registered for that
        extension.

        In case none is found, a ValueError is raised.
    
    """
