def Url(namedtuple("Url", url_attrs)):
    """

        Data structure for representing an HTTP URL. Used as a return value for
        :func:`parse_url`. Both the scheme and host are normalized as they are
        both case-insensitive according to RFC 3986.
    
    """
2021-03-02 20:51:23,364 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:23,364 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:23,364 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:23,364 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:23,364 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:23,365 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:23,365 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:23,365 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:23,365 : INFO : tokenize_signature : --> do i ever get here?
    def __new__(
        cls,
        scheme=None,
        auth=None,
        host=None,
        port=None,
        path=None,
        query=None,
        fragment=None,
    ):
        """
        /
        """
    def hostname(self):
        """
        For backwards-compatibility with urlparse. We're nice like that.
        """
    def request_uri(self):
        """
        Absolute path including the query string.
        """
    def netloc(self):
        """
        Network location including host and port
        """
    def url(self):
        """

                Convert self into a url

                This function should more or less round-trip with :func:`.parse_url`. The
                returned url may not be exactly the same as the url inputted to
                :func:`.parse_url`, but it should be equivalent by the RFC (e.g., urls
                with a blank port will have : removed).

                Example: ::

                    >>> U = parse_url('http://google.com/mail/')
                    >>> U.url
                    'http://google.com/mail/'
                    >>> Url('http', 'username:password', 'host.com', 80,
                    ... '/path', 'query', 'fragment').url
                    'http://username:password@host.com:80/path?query#fragment'
        
        """
    def __str__(self):
        """

            .. deprecated:: 1.25

            Given a string and an iterable of delimiters, split on the first found
            delimiter. Return two split parts and the matched delimiter.

            If not found, then the first part is the full input string.

            Example::

                >>> split_first('foo/bar?baz', '?/=')
                ('foo', 'bar?baz', '/')
                >>> split_first('foo/bar?baz', '123')
                ('foo/bar?baz', '', None)

            Scales linearly with number of delims. Not ideal for large number of delims.
    
        """
def _encode_invalid_chars(component, allowed_chars, encoding="utf-8"):
    """
    Percent-encodes a URI component without reapplying
        onto an already percent-encoded component.
    
    """
def _remove_path_dot_segments(path):
    """
     See http://tools.ietf.org/html/rfc3986#section-5.2.4 for pseudo-code

    """
def _normalize_host(host, scheme):
    """
    %25
    """
def _idna_encode(name):
    """
    Unable to parse URL without the 'idna' module
    """
def _encode_target(target):
    """
    Percent-encodes a request target so that there are no invalid characters
    """
def parse_url(url):
    """

        Given a url, return a parsed :class:`.Url` namedtuple. Best-effort is
        performed to parse incomplete urls. Fields not provided will be None.
        This parser is RFC 3986 compliant.

        The parser logic and helper functions are based heavily on
        work done in the ``rfc3986`` module.

        :param str url: URL to parse into a :class:`.Url` namedtuple.

        Partly backwards-compatible with :mod:`urlparse`.

        Example::

            >>> parse_url('http://google.com/mail/')
            Url(scheme='http', host='google.com', port=None, path='/mail/', ...)
            >>> parse_url('google.com:80')
            Url(scheme=None, host='google.com', port=80, path=None, ...)
            >>> parse_url('/foo?bar')
            Url(scheme=None, host=None, port=None, path='/foo', query='bar', ...)
    
    """
    def ensure_type(x):
        """

            Deprecated. Use :func:`parse_url` instead.
    
        """
