def StreamWrapper(object):
    """
    '''
        Wraps a stream (such as stdout), acting as a transparent proxy for all
        attribute access apart from method 'write()', which is delegated to our
        Converter instance.
        '''
    """
    def __init__(self, wrapped, converter):
        """
         double-underscore everything to prevent clashes with names of
         attributes on the wrapped stream object.

        """
    def __getattr__(self, name):
        """
         special method lookup bypasses __getattr__/__getattribute__, see
         https://stackoverflow.com/questions/12632894/why-doesnt-getattr-work-with-exit
         thus, contextlib magic methods are not proxied via __getattr__

        """
    def __exit__(self, *args, **kwargs):
        """
        'PYCHARM_HOSTED'
        """
    def closed(self):
        """
        '''
            Implements a 'write()' method which, on Windows, will strip ANSI character
            sequences from the text, and if outputting to a tty, will convert them into
            win32 function calls.
            '''
        """
    def __init__(self, wrapped, convert=None, strip=None, autoreset=False):
        """
         The wrapped stream (normally sys.stdout or sys.stderr)

        """
    def should_wrap(self):
        """
        '''
                True if this class is actually needed. If false, then the output
                stream will not be affected, nor will win32 calls be issued, so
                wrapping stdout is not actually required. This will generally be
                False on non-Windows platforms, unless optional functionality like
                autoreset has been requested using kwargs to init()
                '''
        """
    def get_win32_calls(self):
        """
        'm'
        """
    def write_and_convert(self, text):
        """
        '''
                Write the given text to our wrapped stream, stripping any ANSI
                sequences from the text, and optionally converting them into win32
                calls.
                '''
        """
    def write_plain_text(self, text, start, end):
        """
        'Hf'
        """
    def call_win32(self, command, params):
        """
        'm'
        """
    def convert_osc(self, text):
        """
        '\x07'
        """
