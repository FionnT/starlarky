def parse_uri(uri):
    """
    Parses a URI using the regex given in Appendix B of RFC 3986.

            (scheme, authority, path, query, fragment) = parse_uri(uri)
    
    """
def CacheController(object):
    """
    An interface to see if request should cached or not.
    
    """
2021-03-02 20:51:06,904 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:06,905 : INFO : tokenize_signature : --> do i ever get here?
    def __init__(
        self, cache=None, cache_etags=True, serializer=None, status_codes=None
    ):
        """
        Normalize the URL to create a safe key for the cache
        """
    def cache_url(cls, uri):
        """
         https://tools.ietf.org/html/rfc7234#section-5.2
        max-age
        """
    def cached_request(self, request):
        """

                Return a cached response if it exists in the cache, otherwise
                return False.
        
        """
    def conditional_headers(self, request):
        """
        etag
        """
    def cache_response(self, request, response, body=None, status_codes=None):
        """

                Algorithm for caching requests.

                This assumes a requests Response object.
        
        """
    def update_cached_response(self, request, response):
        """
        On a 304 we will get a new set of headers that we want to
                update our cached value with, assuming we have one.

                This should only ever be called when we've sent an ETag and
                gotten a 304 as the response.
        
        """
