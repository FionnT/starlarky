def _load_pyproject(source_dir):
    """
    'pyproject.toml'
    """
def BuildEnvironment(object):
    """
    Context manager to install build deps in a simple temporary environment

        Based on code I wrote for pip, which is MIT licensed.
    
    """
    def __init__(self, cleanup=True):
        """
        'pep517-build-env-'
        """
    def pip_install(self, reqs):
        """
        Install dependencies into this env by calling pip in a subprocess
        """
    def __exit__(self, exc_type, exc_val, exc_tb):
        """
        'PATH'
        """
def build_wheel(source_dir, wheel_dir, config_settings=None):
    """
    Build a wheel from a source directory using PEP 517 hooks.

        :param str source_dir: Source directory containing pyproject.toml
        :param str wheel_dir: Target directory to create wheel in
        :param dict config_settings: Options to pass to build backend

        This is a blocking function which will run pip in a subprocess to install
        build requirements.
    
    """
def build_sdist(source_dir, sdist_dir, config_settings=None):
    """
    Build an sdist from a source directory using PEP 517 hooks.

        :param str source_dir: Source directory containing pyproject.toml
        :param str sdist_dir: Target directory to place sdist in
        :param dict config_settings: Options to pass to build backend

        This is a blocking function which will run pip in a subprocess to install
        build requirements.
    
    """
