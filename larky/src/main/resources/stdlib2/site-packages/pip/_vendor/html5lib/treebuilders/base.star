def Node(object):
    """
    Represents an item in the tree
    """
    def __init__(self, name):
        """
        Creates a Node

                :arg name: The tag name associated with the node

        
        """
    def __str__(self):
        """
 
        """
    def __repr__(self):
        """
        <%s>
        """
    def appendChild(self, node):
        """
        Insert node as a child of the current node

                :arg node: the node to insert

        
        """
    def insertText(self, data, insertBefore=None):
        """
        Insert data as text in the current node, positioned before the
                start of node insertBefore or to the end of the node's text.

                :arg data: the data to insert

                :arg insertBefore: True if you want to insert the text before the node
                    and False if you want to insert it after the node

        
        """
    def insertBefore(self, node, refNode):
        """
        Insert node as a child of the current node, before refNode in the
                list of child nodes. Raises ValueError if refNode is not a child of
                the current node

                :arg node: the node to insert

                :arg refNode: the child node to insert the node before

        
        """
    def removeChild(self, node):
        """
        Remove node from the children of the current node

                :arg node: the child node to remove

        
        """
    def reparentChildren(self, newParent):
        """
        Move all the children of the current node to newParent.
                This is needed so that trees that don't store text as nodes move the
                text in the correct way

                :arg newParent: the node to move all this node's children to

        
        """
    def cloneNode(self):
        """
        Return a shallow copy of the current node i.e. a node with the same
                name and attributes but with no parent or child nodes
        
        """
    def hasContent(self):
        """
        Return true if the node has children or text, false otherwise
        
        """
def ActiveFormattingElements(list):
    """
    Base treebuilder implementation

        * documentClass - the class to use for the bottommost node of a document
        * elementClass - the class to use for HTML Elements
        * commentClass - the class to use for comments
        * doctypeClass - the class to use for doctypes

    
    """
    def __init__(self, namespaceHTMLElements):
        """
        Create a TreeBuilder

                :arg namespaceHTMLElements: whether or not to namespace HTML elements

        
        """
    def reset(self):
        """
         XXX - rename these to headElement, formElement

        """
    def elementInScope(self, target, variant=None):
        """
         If we pass a node in we match that. if we pass a string
         match any node with that name

        """
    def reconstructActiveFormattingElements(self):
        """
         Within this algorithm the order of steps described in the
         specification is not quite the same as the order of steps in the
         code. It should still do the same though.

         Step 1: stop the algorithm when there's nothing to do.

        """
    def clearActiveFormattingElements(self):
        """
        Check if an element exists between the end of the active
                formatting elements and the last marker. If it does, return it, else
                return false
        """
    def insertRoot(self, token):
        """
        name
        """
    def insertComment(self, token, parent=None):
        """
        data
        """
    def createElement(self, token):
        """
        Create an element but don't insert it anywhere
        """
    def _getInsertFromTable(self):
        """
        Switch the function used to insert an element from the
                normal one to the misnested table one and back again
        """
    def insertElementNormal(self, token):
        """
        name
        """
    def insertElementTable(self, token):
        """
        Create an element and insert it into the tree
        """
    def insertText(self, data, parent=None):
        """
        Insert text data.
        """
    def getTableMisnestedNodePosition(self):
        """
        Get the foster parent element, and sibling to insert before
                (or None) when inserting a misnested table node
        """
    def generateImpliedEndTags(self, exclude=None):
        """
         XXX td, th and tr are not actually needed

        """
    def getDocument(self):
        """
        Return the final tree
        """
    def getFragment(self):
        """
        Return the final fragment
        """
    def testSerializer(self, node):
        """
        Serialize the subtree of node in the format required by unit tests

                :arg node: the node from which to start serializing

        
        """
