def guess_content_type(filename, default="application/octet-stream"):
    """

        Guess the "Content-Type" of a file.

        :param filename:
            The filename to guess the "Content-Type" of using :mod:`mimetypes`.
        :param default:
            If no "Content-Type" can be guessed, default to `default`.
    
    """
def format_header_param_rfc2231(name, value):
    """

        Helper function to format and quote a single header parameter using the
        strategy defined in RFC 2231.

        Particularly useful for header parameters which might contain
        non-ASCII values, like file names. This follows RFC 2388 Section 4.4.

        :param name:
            The name of the parameter, a string expected to be ASCII only.
        :param value:
            The value of the parameter, provided as ``bytes`` or `str``.
        :ret:
            An RFC-2231-formatted unicode string.
    
    """
def _replace_multiple(value, needles_and_replacements):
    """
    r"|
    """
def format_header_param_html5(name, value):
    """

        Helper function to format and quote a single header parameter using the
        HTML5 strategy.

        Particularly useful for header parameters which might contain
        non-ASCII values, like file names. This follows the `HTML5 Working Draft
        Section 4.10.22.7`_ and matches the behavior of curl and modern browsers.

        .. _HTML5 Working Draft Section 4.10.22.7:
            https://w3c.github.io/html/sec-forms.html#multipart-form-data

        :param name:
            The name of the parameter, a string expected to be ASCII only.
        :param value:
            The value of the parameter, provided as ``bytes`` or `str``.
        :ret:
            A unicode string, stripped of troublesome characters.
    
    """
def RequestField(object):
    """

        A data container for request body parameters.

        :param name:
            The name of this request field. Must be unicode.
        :param data:
            The data/value body.
        :param filename:
            An optional filename of the request field. Must be unicode.
        :param headers:
            An optional dict-like object of headers to initially use for the field.
        :param header_formatter:
            An optional callable that is used to encode and format the headers. By
            default, this is :func:`format_header_param_html5`.
    
    """
2021-03-02 20:51:21,781 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:21,781 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:21,781 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:21,782 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:21,782 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:21,782 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:21,782 : INFO : tokenize_signature : --> do i ever get here?
    def __init__(
        self,
        name,
        data,
        filename=None,
        headers=None,
        header_formatter=format_header_param_html5,
    ):
        """

                A :class:`~urllib3.fields.RequestField` factory from old-style tuple parameters.

                Supports constructing :class:`~urllib3.fields.RequestField` from
                parameter of key/value strings AND key/filetuple. A filetuple is a
                (filename, data, MIME type) tuple where the MIME type is optional.
                For example::

                    'foo': 'bar',
                    'fakefile': ('foofile.txt', 'contents of foofile'),
                    'realfile': ('barfile.txt', open('realfile').read()),
                    'typedfile': ('bazfile.bin', open('bazfile').read(), 'image/jpeg'),
                    'nonamefile': 'contents of nonamefile field',

                Field names and filenames must be unicode.
        
        """
    def _render_part(self, name, value):
        """

                Overridable helper function to format a single header parameter. By
                default, this calls ``self.header_formatter``.

                :param name:
                    The name of the parameter, a string expected to be ASCII only.
                :param value:
                    The value of the parameter, provided as a unicode string.
        
        """
    def _render_parts(self, header_parts):
        """

                Helper function to format and quote a single header.

                Useful for single headers that are composed of multiple items. E.g.,
                'Content-Disposition' fields.

                :param header_parts:
                    A sequence of (k, v) tuples or a :class:`dict` of (k, v) to format
                    as `k1="v1"; k2="v2"; ...`.
        
        """
    def render_headers(self):
        """

                Renders the headers for this request field.
        
        """
2021-03-02 20:51:21,783 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:21,784 : INFO : tokenize_signature : --> do i ever get here?
    def make_multipart(
        self, content_disposition=None, content_type=None, content_location=None
    ):
        """

                Makes this request field into a multipart request field.

                This method overrides "Content-Disposition", "Content-Type" and
                "Content-Location" headers to the request parameter.

                :param content_type:
                    The 'Content-Type' of the request body.
                :param content_location:
                    The 'Content-Location' of the request body.

        
        """
