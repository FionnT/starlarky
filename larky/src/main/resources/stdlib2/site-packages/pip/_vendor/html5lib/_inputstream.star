def BufferedStream(object):
    """
    Buffering for streams that do not have buffering of their own

        The buffer is implemented as a list of chunks on the assumption that
        joining many strings will be slow since it is O(n**2)
    
    """
    def __init__(self, stream):
        """
         chunk number, offset
        """
    def tell(self):
        """
        b
        """
def HTMLInputStream(source, **kwargs):
    """
     Work around Python bug #20007: read(0) closes the connection.
     http://bugs.python.org/issue20007

    """
def HTMLUnicodeInputStream(object):
    """
    Provides a unicode stream of characters to the HTMLTokenizer.

        This class takes care of character encoding and removing or replacing
        incorrect byte-sequences and also provides column and line tracking.

    
    """
    def __init__(self, source):
        """
        Initialises the HTMLInputStream.

                HTMLInputStream(source, [encoding]) -> Normalized stream from source
                for use by html5lib.

                source can be either a file-object, local filename or a string.

                The optional encoding parameter must be a string that indicates
                the encoding.  If specified, that encoding will be used,
                regardless of any BOM or later declaration (such as in a meta
                element)

        
        """
    def reset(self):
        """

        """
    def openStream(self, source):
        """
        Produces a file object from source.

                source can be either a file object, local filename or a string.

        
        """
    def _position(self, offset):
        """
        '\n'
        """
    def position(self):
        """
        Returns (line, col) of the current position in the stream.
        """
    def char(self):
        """
         Read one character from the stream or queue if available. Return
                    EOF when EOF is reached.
        
        """
    def readChunk(self, chunkSize=None):
        """

        """
    def characterErrorsUCS4(self, data):
        """
        invalid-codepoint
        """
    def characterErrorsUCS2(self, data):
        """
         Someone picked the wrong compile option
         You lose

        """
    def charsUntil(self, characters, opposite=False):
        """
         Returns a string of characters from the stream up to but not
                including any character in 'characters' or EOF. 'characters' must be
                a container that supports the 'in' method and iteration over its
                characters.
        
        """
    def unget(self, char):
        """
         Only one character is allowed to be ungotten at once - it must
         be consumed again before any further call to unget

        """
def HTMLBinaryInputStream(HTMLUnicodeInputStream):
    """
    Provides a unicode stream of characters to the HTMLTokenizer.

        This class takes care of character encoding and removing or replacing
        incorrect byte-sequences and also provides column and line tracking.

    
    """
2021-03-02 20:51:18,289 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:51:18,289 : INFO : tokenize_signature : --> do i ever get here?
    def __init__(self, source, override_encoding=None, transport_encoding=None,
                 same_origin_parent_encoding=None, likely_encoding=None,
                 default_encoding="windows-1252", useChardet=True):
        """
        Initialises the HTMLInputStream.

                HTMLInputStream(source, [encoding]) -> Normalized stream from source
                for use by html5lib.

                source can be either a file-object, local filename or a string.

                The optional encoding parameter must be a string that indicates
                the encoding.  If specified, that encoding will be used,
                regardless of any BOM or later declaration (such as in a meta
                element)

        
        """
    def reset(self):
        """
        'replace'
        """
    def openStream(self, source):
        """
        Produces a file object from source.

                source can be either a file object, local filename or a string.

        
        """
    def determineEncoding(self, chardet=True):
        """
         BOMs take precedence over everything
         This will also read past the BOM if present

        """
    def changeEncoding(self, newEncoding):
        """
        certain
        """
    def detectBOM(self):
        """
        Attempts to detect at BOM at the start of the stream. If
                an encoding can be determined from the BOM return the name of the
                encoding otherwise return None
        """
    def detectEncodingMeta(self):
        """
        Report the encoding declared by the meta element
        
        """
def EncodingBytes(bytes):
    """
    String-like object with an associated position and various extra methods
        If the position is ever greater than the string length then an exception is
        raised
    """
    def __new__(self, value):
        """
         pylint:disable=unused-argument

        """
    def __iter__(self):
        """
         Py2 compat

        """
    def previous(self):
        """
        Skip past a list of characters
        """
    def skipUntil(self, chars):
        """
        Look for a sequence of bytes at the start of a string. If the bytes
                are found return True and advance the position to the byte after the
                match. Otherwise return False and leave the position alone
        """
    def jumpTo(self, bytes):
        """
        Look for the next sequence of bytes matching a given sequence. If
                a match is found advance the position to the last byte of the match
        """
def EncodingParser(object):
    """
    Mini parser for detecting character encoding from meta elements
    """
    def __init__(self, data):
        """
        string - the data to work on for encoding detection
        """
    def getEncoding(self):
        """
        b"<meta
        """
    def handleComment(self):
        """
        Skip over comments
        """
    def handleMeta(self):
        """
         if we have <meta not followed by a space so just keep going

        """
    def handlePossibleStartTag(self):
        """
         If the next byte is not an ascii letter either ignore this
         fragment (possible start tag case) or treat it according to
         handleOther

        """
    def handleOther(self):
        """
        b">
        """
    def getAttribute(self):
        """
        Return a name,value pair for the next attribute in the stream,
                if one is found, or None
        """
def ContentAttrParser(object):
    """
     Check if the attr name is charset
     otherwise return

    """
def lookupEncoding(encoding):
    """
    Return the python codec name corresponding to an encoding or None if the
        string doesn't correspond to a valid encoding.
    """
