def NothingChanged(UserWarning):
    """
    Raised when reformatted code is the same as source.
    """
def CannotTransform(Exception):
    """
    Base class for errors raised by Transformers.
    """
def CannotSplit(CannotTransform):
    """
    A readable split that fits the allotted line length is impossible.
    """
def InvalidInput(ValueError):
    """
    Raised when input source code fails all parse attempts.
    """
def Ok(Generic[T]):
    """
     The 'Result' return type is used to implement an error-handling model heavily
     influenced by that used by the Rust programming language
     (see https://doc.rust-lang.org/book/ch09-00-error-handling.html).

    """
def WriteBack(Enum):
    """
    WriteBack
    """
def Changed(Enum):
    """
     All string literals are unicode

    """
def Mode:
    """
    ,
    """
def supports_feature(target_versions: Set[TargetVersion], feature: Feature) -> bool:
    """
    Find the absolute filepath to a pyproject.toml if it exists
    """
def parse_pyproject_toml(path_config: str) -> Dict[str, Any]:
    """
    Parse a pyproject toml file, pulling out relevant parts for Black

        If parsing fails, will raise a toml.TomlDecodeError
    
    """
2021-03-02 20:53:18,954 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:53:18,954 : INFO : tokenize_signature : --> do i ever get here?
def read_pyproject_toml(
    ctx: click.Context, param: click.Parameter, value: Optional[str]
) -> Optional[str]:
    """
    Inject Black configuration from "pyproject.toml" into defaults in `ctx`.

        Returns the path to a successfully found and read configuration file, None
        otherwise.
    
    """
2021-03-02 20:53:18,955 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:53:18,955 : INFO : tokenize_signature : --> do i ever get here?
def target_version_option_callback(
    c: click.Context, p: Union[click.Option, click.Parameter], v: Tuple[str, ...]
) -> List[TargetVersion]:
    """
    Compute the target versions from a --target-version flag.

        This is its own function because mypy couldn't infer the type correctly
        when it was a lambda, causing mypyc trouble.
    
    """
2021-03-02 20:53:18,958 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:53:18,958 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:53:18,958 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:53:18,958 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:53:18,958 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:53:18,958 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:53:18,958 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:53:18,958 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:53:18,958 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:53:18,958 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:53:18,958 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:53:18,959 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:53:18,959 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:53:18,959 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:53:18,959 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:53:18,959 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:53:18,959 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:53:18,959 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:53:18,959 : INFO : tokenize_signature : --> do i ever get here?
def main(
    ctx: click.Context,
    code: Optional[str],
    line_length: int,
    target_version: List[TargetVersion],
    check: bool,
    diff: bool,
    color: bool,
    fast: bool,
    pyi: bool,
    skip_string_normalization: bool,
    experimental_string_processing: bool,
    quiet: bool,
    verbose: bool,
    include: str,
    exclude: str,
    force_exclude: Optional[str],
    src: Tuple[str, ...],
    config: Optional[str],
) -> None:
    """
    The uncompromising code formatter.
    """
2021-03-02 20:53:18,960 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:53:18,960 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:53:18,960 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:53:18,960 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:53:18,961 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:53:18,961 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:53:18,961 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:53:18,961 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:53:18,961 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:53:18,961 : INFO : tokenize_signature : --> do i ever get here?
def get_sources(
    *,
    ctx: click.Context,
    src: Tuple[str, ...],
    quiet: bool,
    verbose: bool,
    include: str,
    exclude: str,
    force_exclude: Optional[str],
    report: "Report",
) -> Set[Path]:
    """
    Compute the set of files to be formatted.
    """
2021-03-02 20:53:18,962 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:53:18,963 : INFO : tokenize_signature : --> do i ever get here?
def path_empty(
    src: Sized, msg: str, quiet: bool, verbose: bool, ctx: click.Context
) -> None:
    """

        Exit if there is no `src` provided for formatting
    
    """
2021-03-02 20:53:18,963 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:53:18,963 : INFO : tokenize_signature : --> do i ever get here?
def reformat_one(
    src: Path, fast: bool, write_back: WriteBack, mode: Mode, report: "Report"
) -> None:
    """
    Reformat a single file under `src` without spawning child processes.

        `fast`, `write_back`, and `mode` options are passed to
        :func:`format_file_in_place` or :func:`format_stdin_to_stdout`.
    
    """
2021-03-02 20:53:18,964 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:53:18,964 : INFO : tokenize_signature : --> do i ever get here?
def reformat_many(
    sources: Set[Path], fast: bool, write_back: WriteBack, mode: Mode, report: "Report"
) -> None:
    """
    Reformat multiple files using a ProcessPoolExecutor.
    """
2021-03-02 20:53:18,965 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:53:18,965 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:53:18,965 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:53:18,965 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:53:18,965 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:53:18,965 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:53:18,965 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:53:18,965 : INFO : tokenize_signature : --> do i ever get here?
async def schedule_formatting(
    sources: Set[Path],
    fast: bool,
    write_back: WriteBack,
    mode: Mode,
    report: "Report",
    loop: asyncio.AbstractEventLoop,
    executor: Executor,
) -> None:
        """
        Run formatting of `sources` in parallel using the provided `executor`.

            (Use ProcessPoolExecutors for actual parallelism.)

            `write_back`, `fast`, and `mode` options are passed to
            :func:`format_file_in_place`.
    
        """
2021-03-02 20:53:18,967 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:53:18,967 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:53:18,967 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:53:18,967 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:53:18,967 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:53:18,967 : INFO : tokenize_signature : --> do i ever get here?
def format_file_in_place(
    src: Path,
    fast: bool,
    mode: Mode,
    write_back: WriteBack = WriteBack.NO,
    lock: Any = None,  # multiprocessing.Manager().Lock() is some crazy proxy
) -> bool:
    """
    Format file under `src` path. Return True if changed.

        If `write_back` is DIFF, write a diff to stdout. If it is YES, write reformatted
        code to the file.
        `mode` and `fast` options are passed to :func:`format_file_contents`.
    
    """
def color_diff(contents: str) -> str:
    """
    Inject the ANSI color codes to the diff.
    """
2021-03-02 20:53:18,969 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:53:18,969 : INFO : tokenize_signature : --> do i ever get here?
def wrap_stream_for_windows(
    f: io.TextIOWrapper,
) -> Union[io.TextIOWrapper, "colorama.AnsiToWin32.AnsiToWin32"]:
    """

        Wrap the stream in colorama's wrap_stream so colors are shown on Windows.

        If `colorama` is not found, then no change is made. If `colorama` does
        exist, then it handles the logic to determine whether or not to change
        things.
    
    """
2021-03-02 20:53:18,969 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:53:18,969 : INFO : tokenize_signature : --> do i ever get here?
def format_stdin_to_stdout(
    fast: bool, *, write_back: WriteBack = WriteBack.NO, mode: Mode
) -> bool:
    """
    Format file on stdin. Return True if changed.

        If `write_back` is YES, write reformatted code back to stdout. If it is DIFF,
        write a diff to stdout. The `mode` argument is passed to
        :func:`format_file_contents`.
    
    """
def format_file_contents(src_contents: str, *, fast: bool, mode: Mode) -> FileContent:
    """
    Reformat contents a file and return new contents.

        If `fast` is False, additionally confirm that the reformatted code is
        valid by calling :func:`assert_equivalent` and :func:`assert_stable` on it.
        `mode` is passed to :func:`format_str`.
    
    """
def format_str(src_contents: str, *, mode: Mode) -> FileContent:
    """
    Reformat a string and return new contents.

        `mode` determines formatting options, such as how many characters per line are
        allowed.  Example:

        >>> import black
        >>> print(black.format_str("def f(arg:str='')->None:...", mode=Mode()))
        def f(arg: str = "") -> None:
            ...

        A more complex example:

        >>> print(
        ...   black.format_str(
        ...     "def f(arg:str='')->None: hey",
        ...     mode=black.Mode(
        ...       target_versions={black.TargetVersion.PY36},
        ...       line_length=10,
        ...       string_normalization=False,
        ...       is_pyi=False,
        ...     ),
        ...   ),
        ... )
        def f(
            arg: str = '',
        ) -> None:
            hey

    
    """
def decode_bytes(src: bytes) -> Tuple[FileContent, Encoding, NewLine]:
    """
    Return a tuple of (decoded_contents, encoding, newline).

        `newline` is either CRLF or LF but `decoded_contents` is decoded with
        universal newlines (i.e. only contains LF).
    
    """
def get_grammars(target_versions: Set[TargetVersion]) -> List[Grammar]:
    """
     No target_version specified, so try all grammars.

    """
def lib2to3_parse(src_txt: str, target_versions: Iterable[TargetVersion] = ()) -> Node:
    """
    Given a string with source, return the lib2to3 Node.
    """
def lib2to3_unparse(node: Node) -> str:
    """
    Given a lib2to3 node, return its string representation.
    """
def Visitor(Generic[T]):
    """
    Basic lib2to3 visitor that yields things of type `T` on `visit()`.
    """
    def visit(self, node: LN) -> Iterator[T]:
        """
        Main method to visit `node` and its children.

                It tries to find a `visit_*()` method for the given `node.type`, like
                `visit_simple_stmt` for Node objects or `visit_INDENT` for Leaf objects.
                If no dedicated `visit_*()` method is found, chooses `visit_default()`
                instead.

                Then yields objects of type `T` from the selected visitor.
        
        """
    def visit_default(self, node: LN) -> Iterator[T]:
        """
        Default `visit_*()` implementation. Recurses to children of `node`.
        """
def DebugVisitor(Visitor[T]):
    """
 
    """
    def show(cls, code: Union[str, Leaf, Node]) -> None:
        """
        Pretty-print the lib2to3 AST of a given string of `code`.

                Convenience method for debugging.
        
        """
def BracketTracker:
    """
    Keeps track of brackets on a line.
    """
    def mark(self, leaf: Leaf) -> None:
        """
        Mark `leaf` with bracket-related metadata. Keep track of delimiters.

                All leaves receive an int `bracket_depth` field that stores how deep
                within brackets a given leaf is. 0 means there are no enclosing brackets
                that started on this line.

                If a leaf is itself a closing bracket, it receives an `opening_bracket`
                field that it forms a pair with. This is a one-directional link to
                avoid reference cycles.

                If a leaf is a delimiter (a token on which Black can split the line if
                needed) and it's on depth 0, its `id()` is stored in the tracker's
                `delimiters` field.
        
        """
    def any_open_brackets(self) -> bool:
        """
        Return True if there is an yet unmatched open bracket on the line.
        """
    def max_delimiter_priority(self, exclude: Iterable[LeafID] = ()) -> Priority:
        """
        Return the highest priority of a delimiter found on the line.

                Values are consistent with what `is_split_*_delimiter()` return.
                Raises ValueError on no delimiters.
        
        """
    def delimiter_count_with_priority(self, priority: Priority = 0) -> int:
        """
        Return the number of delimiters with the given `priority`.

                If no `priority` is passed, defaults to max priority on the line.
        
        """
    def maybe_increment_for_loop_variable(self, leaf: Leaf) -> bool:
        """
        In a for loop, or comprehension, the variables are often unpacks.

                To avoid splitting on the comma in this situation, increase the depth of
                tokens between `for` and `in`.
        
        """
    def maybe_decrement_after_for_loop_variable(self, leaf: Leaf) -> bool:
        """
        See `maybe_increment_for_loop_variable` above for explanation.
        """
    def maybe_increment_lambda_arguments(self, leaf: Leaf) -> bool:
        """
        In a lambda expression, there might be more than one argument.

                To avoid splitting on the comma in this situation, increase the depth of
                tokens between `lambda` and `:`.
        
        """
    def maybe_decrement_after_lambda_arguments(self, leaf: Leaf) -> bool:
        """
        See `maybe_increment_lambda_arguments` above for explanation.
        """
    def get_open_lsqb(self) -> Optional[Leaf]:
        """
        Return the most recent opening square bracket (if any).
        """
def Line:
    """
    Holds leaves and comments. Can be printed with `str(line)`.
    """
    def append(self, leaf: Leaf, preformatted: bool = False) -> None:
        """
        Add a new `leaf` to the end of the line.

                Unless `preformatted` is True, the `leaf` will receive a new consistent
                whitespace prefix and metadata applied by :class:`BracketTracker`.
                Trailing commas are maybe removed, unpacked for loop variables are
                demoted from being delimiters.

                Inline comments are put aside.
        
        """
    def append_safe(self, leaf: Leaf, preformatted: bool = False) -> None:
        """
        Like :func:`append()` but disallow invalid standalone comment structure.

                Raises ValueError when any `leaf` is appended after a standalone comment
                or when a standalone comment is not the first leaf on the line.
        
        """
    def is_comment(self) -> bool:
        """
        Is this line a standalone comment?
        """
    def is_decorator(self) -> bool:
        """
        Is this line a decorator?
        """
    def is_import(self) -> bool:
        """
        Is this an import line?
        """
    def is_class(self) -> bool:
        """
        Is this line a class definition?
        """
    def is_stub_class(self) -> bool:
        """
        Is this line a class definition with a body consisting only of "..."?
        """
    def is_def(self) -> bool:
        """
        Is this a function definition? (Also returns True for async defs.)
        """
    def is_class_paren_empty(self) -> bool:
        """
        Is this a class with no base classes but using parentheses?

                Those are unnecessary and should be removed.
        
        """
    def is_triple_quoted_string(self) -> bool:
        """
        Is the line a triple quoted string?
        """
    def contains_standalone_comments(self, depth_limit: int = sys.maxsize) -> bool:
        """
        If so, needs to be split before emitting.
        """
    def contains_uncollapsable_type_comments(self) -> bool:
        """
         When trailing commas or optional parens are inserted by Black for
         consistency, comments after the previous last element are not moved
         (they don't have to, rendering will still be correct).  So we ignore
         trailing commas and invisible.

        """
    def contains_unsplittable_type_ignore(self) -> bool:
        """
         If a 'type: ignore' is attached to the end of a line, we
         can't split the line, because we can't know which of the
         subexpressions the ignore was meant to apply to.

         We only want this to apply to actual physical lines from the
         original source, though: we don't want the presence of a
         'type: ignore' at the end of a multiline expression to
         justify pushing it all onto one line. Thus we
         (unfortunately) need to check the actual source lines and
         only report an unsplittable 'type: ignore' if this line was
         one line in the original code.

         Grab the first and last line numbers, skipping generated leaves

        """
    def contains_multiline_strings(self) -> bool:
        """
        Return True if this line should explode (always be split), that is when:
                - there's a trailing comma here; and
                - it's not a one-tuple.
        
        """
    def append_comment(self, comment: Leaf) -> bool:
        """
        Add an inline or standalone comment to the line.
        """
    def comments_after(self, leaf: Leaf) -> List[Leaf]:
        """
        Generate comments that should appear directly after `leaf`.
        """
    def remove_trailing_comma(self) -> None:
        """
        Remove the trailing comma and moves the comments attached to it.
        """
    def is_complex_subscript(self, leaf: Leaf) -> bool:
        """
        Return True iff `leaf` is part of a slice with non-trivial exprs.
        """
    def clone(self) -> "Line":
        """
        Render the line.
        """
    def __bool__(self) -> bool:
        """
        Return True if the line has leaves or comments.
        """
def EmptyLineTracker:
    """
    Provides a stateful method that returns the number of potential extra
        empty lines needed before and after the currently processed line.

        Note: this tracker works on lines that haven't been split yet.  It assumes
        the prefix of the first leaf consists of optional newlines.  Those newlines
        are consumed by `maybe_empty_lines()` and included in the computation.
    
    """
    def maybe_empty_lines(self, current_line: Line) -> Tuple[int, int]:
        """
        Return the number of extra empty lines before and after the `current_line`.

                This is for separating `def`, `async def` and `class` with extra empty
                lines (two on module-level).
        
        """
    def _maybe_empty_lines(self, current_line: Line) -> Tuple[int, int]:
        """
         Consume the first leaf's extra newlines.

        """
2021-03-02 20:53:18,989 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:53:18,990 : INFO : tokenize_signature : --> do i ever get here?
    def _maybe_empty_lines_for_class_or_def(
        self, current_line: Line, before: int
    ) -> Tuple[int, int]:
        """
         Don't insert empty lines before the first line in the file.

        """
def LineGenerator(Visitor[Line]):
    """
    Generates reformatted Line objects.  Empty lines are not emitted.

        Note: destroys the tree it's visiting by mutating prefixes of its leaves
        in ways that will no longer stringify to valid Python code on the tree.
    
    """
    def line(self, indent: int = 0) -> Iterator[Line]:
        """
        Generate a line.

                If the line is empty, only emit if it makes sense.
                If the line is too long, split it first and then generate.

                If any lines were generated, set up a new current_line.
        
        """
    def visit_default(self, node: LN) -> Iterator[Line]:
        """
        Default `visit_*()` implementation. Recurses to children of `node`.
        """
    def visit_INDENT(self, node: Leaf) -> Iterator[Line]:
        """
        Increase indentation level, maybe yield a line.
        """
    def visit_DEDENT(self, node: Leaf) -> Iterator[Line]:
        """
        Decrease indentation level, maybe yield a line.
        """
2021-03-02 20:53:18,992 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:53:18,993 : INFO : tokenize_signature : --> do i ever get here?
    def visit_stmt(
        self, node: Node, keywords: Set[str], parens: Set[str]
    ) -> Iterator[Line]:
        """
        Visit a statement.

                This implementation is shared for `if`, `while`, `for`, `try`, `except`,
                `def`, `with`, `class`, `assert` and assignments.

                The relevant Python language `keywords` for a given statement will be
                NAME leaves within it. This methods puts those on a separate line.

                `parens` holds a set of string leaf values immediately after which
                invisible parens should be put.
        
        """
    def visit_suite(self, node: Node) -> Iterator[Line]:
        """
        Visit a suite.
        """
    def visit_simple_stmt(self, node: Node) -> Iterator[Line]:
        """
        Visit a statement without nested statements.
        """
    def visit_async_stmt(self, node: Node) -> Iterator[Line]:
        """
        Visit `async def`, `async for`, `async with`.
        """
    def visit_decorators(self, node: Node) -> Iterator[Line]:
        """
        Visit decorators.
        """
    def visit_SEMI(self, leaf: Leaf) -> Iterator[Line]:
        """
        Remove a semicolon and put the other statement on a separate line.
        """
    def visit_ENDMARKER(self, leaf: Leaf) -> Iterator[Line]:
        """
        End of file. Process outstanding comments and end with a newline.
        """
    def visit_STANDALONE_COMMENT(self, leaf: Leaf) -> Iterator[Line]:
        """
        Force parentheses between a unary op and a binary power:

                -2 ** 8 -> -(2 ** 8)
        
        """
    def visit_STRING(self, leaf: Leaf) -> Iterator[Line]:
        """
        \\\n
        """
    def __post_init__(self) -> None:
        """
        You are in a twisty little maze of passages.
        """
def whitespace(leaf: Leaf, *, complex_subscript: bool) -> str:  # noqa: C901
    """
     noqa: C901
    """
def preceding_leaf(node: Optional[LN]) -> Optional[Leaf]:
    """
    Return the first leaf that precedes `node`, if any.
    """
def prev_siblings_are(node: Optional[LN], tokens: List[Optional[NodeType]]) -> bool:
    """
    Return if the `node` and its previous siblings match types against the provided
        list of tokens; the provided `node`has its type matched against the last element in
        the list.  `None` can be used as the first element to declare that the start of the
        list is anchored at the start of its parent's children.
    """
def child_towards(ancestor: Node, descendant: LN) -> Optional[LN]:
    """
    Return the child of `ancestor` that contains `descendant`.
    """
def container_of(leaf: Leaf) -> LN:
    """
    Return `leaf` or one of its ancestors that is the topmost container of it.

        By "container" we mean a node where `leaf` is the very first child.
    
    """
def is_split_after_delimiter(leaf: Leaf, previous: Optional[Leaf] = None) -> Priority:
    """
    Return the priority of the `leaf` delimiter, given a line break after it.

        The delimiter priorities returned here are from those delimiters that would
        cause a line break after themselves.

        Higher numbers are higher priority.
    
    """
def is_split_before_delimiter(leaf: Leaf, previous: Optional[Leaf] = None) -> Priority:
    """
    Return the priority of the `leaf` delimiter, given a line break before it.

        The delimiter priorities returned here are from those delimiters that would
        cause a line break before themselves.

        Higher numbers are higher priority.
    
    """
def generate_comments(leaf: LN) -> Iterator[Leaf]:
    """
    Clean the prefix of the `leaf` and generate comments from it, if any.

        Comments in lib2to3 are shoved into the whitespace prefix.  This happens
        in `pgen2/driver.py:Driver.parse_tokens()`.  This was a brilliant implementation
        move because it does away with modifying the grammar to include all the
        possible places in which comments can be placed.

        The sad consequence for us though is that comments don't "belong" anywhere.
        This is why this function generates simple parentless Leaf objects for
        comments.  We simply don't know what the correct parent should be.

        No matter though, we can live without this.  We really only need to
        differentiate between inline and standalone comments.  The latter don't
        share the line with any code.

        Inline comments are emitted as regular token.COMMENT leaves.  Standalone
        are emitted with a fake STANDALONE_COMMENT token identifier.
    
    """
def ProtoComment:
    """
    Describes a piece of syntax that is a comment.

        It's not a :class:`blib2to3.pytree.Leaf` so that:

        * it can be cached (`Leaf` objects should not be reused more than once as
          they store their lineno, column, prefix, and parent information);
        * `newlines` and `consumed` fields are kept separate from the `value`. This
          simplifies handling of special marker comments like ``# fmt: off/on``.
    
    """
def list_comments(prefix: str, *, is_endmarker: bool) -> List[ProtoComment]:
    """
    Return a list of :class:`ProtoComment` objects parsed from the given `prefix`.
    """
def make_comment(content: str) -> str:
    """
    Return a consistently formatted comment from the given `content` string.

        All comments (except for "##", "#!", "#:", '#'", "#%%") should have a single
        space between the hash sign and the content.

        If `content` didn't start with a hash sign, one is provided.
    
    """
2021-03-02 20:53:19,008 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:53:19,030 : INFO : tokenize_signature : --> do i ever get here?
def transform_line(
    line: Line, mode: Mode, features: Collection[Feature] = ()
) -> Iterator[Line]:
    """
    Transform a `line`, potentially splitting it into many lines.

        They should fit in the allotted `line_length` but might not be able to.

        `features` are syntactical features that may be used in the output.
    
    """
    def init_st(ST: Type[StringTransformer]) -> StringTransformer:
        """
        Initialize StringTransformer
        """
        def rhs(line: Line, features: Collection[Feature]) -> Iterator[Line]:
            """
            Wraps calls to `right_hand_split`.

                        The calls increasingly `omit` right-hand trailers (bracket pairs with
                        content), meaning the trailers get glued together to split on another
                        bracket pair instead.
            
            """
def StringTransformer(ABC):
    """

        An implementation of the Transformer protocol that relies on its
        subclasses overriding the template methods `do_match(...)` and
        `do_transform(...)`.

        This Transformer works exclusively on strings (for example, by merging
        or splitting them).

        The following sections can be found among the docstrings of each concrete
        StringTransformer subclass.

        Requirements:
            Which requirements must be met of the given Line for this
            StringTransformer to be applied?

        Transformations:
            If the given Line meets all of the above requirements, which string
            transformations can you expect to be applied to it by this
            StringTransformer?

        Collaborations:
            What contractual agreements does this StringTransformer have with other
            StringTransfomers? Such collaborations should be eliminated/minimized
            as much as possible.
    
    """
    def do_match(self, line: Line) -> TMatchResult:
        """

                Returns:
                    * Ok(string_idx) such that `line.leaves[string_idx]` is our target
                    string, if a match was able to be made.
                        OR
                    * Err(CannotTransform), if a match was not able to be made.
        
        """
    def do_transform(self, line: Line, string_idx: int) -> Iterator[TResult[Line]]:
        """

                Yields:
                    * Ok(new_line) where new_line is the new transformed line.
                        OR
                    * Err(CannotTransform) if the transformation failed for some reason. The
                    `do_match(...)` template method should usually be used to reject
                    the form of the given Line, but in some cases it is difficult to
                    know whether or not a Line meets the StringTransformer's
                    requirements until the transformation is already midway.

                Side Effects:
                    This method should NOT mutate @line directly, but it MAY mutate the
                    Line's underlying Node structure. (WARNING: If the underlying Node
                    structure IS altered, then this method should NOT be allowed to
                    yield an CannotTransform after that point.)
        
        """
    def __call__(self, line: Line, _features: Collection[Feature]) -> Iterator[Line]:
        """

                StringTransformer instances have a call signature that mirrors that of
                the Transformer type.

                Raises:
                    CannotTransform(...) if the concrete StringTransformer class is unable
                    to transform @line.
        
        """
def CustomSplit:
    """
    A custom (i.e. manual) string split.

        A single CustomSplit instance represents a single substring.

        Examples:
            Consider the following string:
            ```
            "Hi there friend."
            " This is a custom"
            f" string {split}."
            ```

            This string will correspond to the following three CustomSplit instances:
            ```
            CustomSplit(False, 16)
            CustomSplit(False, 17)
            CustomSplit(True, 16)
            ```
    
    """
def CustomSplitMapMixin:
    """

        This mixin class is used to map merged strings to a sequence of
        CustomSplits, which will then be used to re-split the strings iff none of
        the resultant substrings go over the configured max line length.
    
    """
    def _get_key(string: str) -> "CustomSplitMapMixin._Key":
        """

                Returns:
                    A unique identifier that is used internally to map @string to a
                    group of custom splits.
        
        """
2021-03-02 20:53:19,034 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:53:19,034 : INFO : tokenize_signature : --> do i ever get here?
    def add_custom_splits(
        self, string: str, custom_splits: Iterable[CustomSplit]
    ) -> None:
        """
        Custom Split Map Setter Method

                Side Effects:
                    Adds a mapping from @string to the custom splits @custom_splits.
        
        """
    def pop_custom_splits(self, string: str) -> List[CustomSplit]:
        """
        Custom Split Map Getter Method

                Returns:
                    * A list of the custom splits that are mapped to @string, if any
                    exist.
                        OR
                    * [], otherwise.

                Side Effects:
                    Deletes the mapping between @string and its associated custom
                    splits (which are returned to the caller).
        
        """
    def has_custom_splits(self, string: str) -> bool:
        """

                Returns:
                    True iff @string is associated with a set of custom splits.
        
        """
def StringMerger(CustomSplitMapMixin, StringTransformer):
    """
    StringTransformer that merges strings together.

        Requirements:
            (A) The line contains adjacent strings such that at most one substring
            has inline comments AND none of those inline comments are pragmas AND
            the set of all substring prefixes is either of length 1 or equal to
            {"", "f"} AND none of the substrings are raw strings (i.e. are prefixed
            with 'r').
                OR
            (B) The line contains a string which uses line continuation backslashes.

        Transformations:
            Depending on which of the two requirements above where met, either:

            (A) The string group associated with the target string is merged.
                OR
            (B) All line-continuation backslashes are removed from the target string.

        Collaborations:
            StringMerger provides custom split information to StringSplitter.
    
    """
    def do_match(self, line: Line) -> TMatchResult:
        """
        \\\n
        """
    def do_transform(self, line: Line, string_idx: int) -> Iterator[TResult[Line]]:
        """
        StringMerger failed to merge any strings in this line.

        """
2021-03-02 20:53:19,036 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:53:19,036 : INFO : tokenize_signature : --> do i ever get here?
    def __remove_backslash_line_continuation_chars(
        line: Line, string_idx: int
    ) -> TResult[Line]:
        """

                Merge strings that were split across multiple lines using
                line-continuation backslashes.

                Returns:
                    Ok(new_line), if @line contains backslash line-continuation
                    characters.
                        OR
                    Err(CannotTransform), otherwise.
        
        """
    def __merge_string_group(self, line: Line, string_idx: int) -> TResult[Line]:
        """

                Merges string group (i.e. set of adjacent strings) where the first
                string in the group is `line.leaves[string_idx]`.

                Returns:
                    Ok(new_line), if ALL of the validation checks found in
                    __validate_msg(...) pass.
                        OR
                    Err(CannotTransform), otherwise.
        
        """
        def make_naked(string: str, string_prefix: str) -> str:
            """
            Strip @string (i.e. make it a "naked" string)

                        Pre-conditions:
                            * assert_is_leaf_string(@string)

                        Returns:
                            A string that is identical to @string except that
                            @string_prefix has been stripped, the surrounding QUOTE
                            characters have been removed, and any remaining QUOTE
                            characters have been escaped.
            
            """
    def __validate_msg(line: Line, string_idx: int) -> TResult[None]:
        """
        Validate (M)erge (S)tring (G)roup

                Transform-time string validation logic for __merge_string_group(...).

                Returns:
                    * Ok(None), if ALL validation checks (listed below) pass.
                        OR
                    * Err(CannotTransform), if any of the following are true:
                        - The target string is not in a string group (i.e. it has no
                          adjacent strings).
                        - The string group has more than one inline comment.
                        - The string group has an inline comment that appears to be a pragma.
                        - The set of all string prefixes in the string group is of
                          length greater than one and is not equal to {"", "f"}.
                        - The string group consists of raw strings.
        
        """
def StringParenStripper(StringTransformer):
    """
    StringTransformer that strips surrounding parentheses from strings.

        Requirements:
            The line contains a string which is surrounded by parentheses and:
                - The target string is NOT the only argument to a function call).
                - If the target string contains a PERCENT, the brackets are not
                  preceeded or followed by an operator with higher precedence than
                  PERCENT.

        Transformations:
            The parentheses mentioned in the 'Requirements' section are stripped.

        Collaborations:
            StringParenStripper has its own inherent usefulness, but it is also
            relied on to clean up the parentheses created by StringParenWrapper (in
            the event that they are no longer needed).
    
    """
    def do_match(self, line: Line) -> TMatchResult:
        """
         Should be a string...

        """
    def do_transform(self, line: Line, string_idx: int) -> Iterator[TResult[Line]]:
        """
        Will not strip parentheses which have comments attached to them.

        """
def BaseStringSplitter(StringTransformer):
    """

        Abstract class for StringTransformers which transform a Line's strings by splitting
        them or placing them on their own lines where necessary to avoid going over
        the configured line length.

        Requirements:
            * The target string value is responsible for the line going over the
            line length limit. It follows that after all of black's other line
            split methods have been exhausted, this line (or one of the resulting
            lines after all line splits are performed) would still be over the
            line_length limit unless we split this string.
                AND
            * The target string is NOT a "pointless" string (i.e. a string that has
            no parent or siblings).
                AND
            * The target string is not followed by an inline comment that appears
            to be a pragma.
                AND
            * The target string is not a multiline (i.e. triple-quote) string.
    
    """
    def do_splitter_match(self, line: Line) -> TMatchResult:
        """

                BaseStringSplitter asks its clients to override this method instead of
                `StringTransformer.do_match(...)`.

                Follows the same protocol as `StringTransformer.do_match(...)`.

                Refer to `help(StringTransformer.do_match)` for more information.
        
        """
    def do_match(self, line: Line) -> TMatchResult:
        """

                Checks that @line meets all of the requirements listed in this classes'
                docstring. Refer to `help(BaseStringSplitter)` for a detailed
                description of those requirements.

                Returns:
                    * Ok(None), if ALL of the requirements are met.
                        OR
                    * Err(CannotTransform), if ANY of the requirements are NOT met.
        
        """
    def __get_max_string_length(self, line: Line, string_idx: int) -> int:
        """

                Calculates the max string length used when attempting to determine
                whether or not the target string is responsible for causing the line to
                go over the line length limit.

                WARNING: This method is tightly coupled to both StringSplitter and
                (especially) StringParenWrapper. There is probably a better way to
                accomplish what is being done here.

                Returns:
                    max_string_length: such that `line.leaves[string_idx].value >
                    max_string_length` implies that the target string IS responsible
                    for causing this line to exceed the line length limit.
        
        """
def StringSplitter(CustomSplitMapMixin, BaseStringSplitter):
    """

        StringTransformer that splits "atom" strings (i.e. strings which exist on
        lines by themselves).

        Requirements:
            * The line consists ONLY of a single string (with the exception of a
            '+' symbol which MAY exist at the start of the line), MAYBE a string
            trailer, and MAYBE a trailing comma.
                AND
            * All of the requirements listed in BaseStringSplitter's docstring.

        Transformations:
            The string mentioned in the 'Requirements' section is split into as
            many substrings as necessary to adhere to the configured line length.

            In the final set of substrings, no substring should be smaller than
            MIN_SUBSTR_SIZE characters.

            The string will ONLY be split on spaces (i.e. each new substring should
            start with a space).

            If the string is an f-string, it will NOT be split in the middle of an
            f-expression (e.g. in f"FooBar: {foo() if x else bar()}", {foo() if x
            else bar()} is an f-expression).

            If the string that is being split has an associated set of custom split
            records and those custom splits will NOT result in any line going over
            the configured line length, those custom splits are used. Otherwise the
            string is split as late as possible (from left-to-right) while still
            adhering to the transformation rules listed above.

        Collaborations:
            StringSplitter relies on StringMerger to construct the appropriate
            CustomSplit objects and add them to the custom split map.
    
    """
    def do_splitter_match(self, line: Line) -> TMatchResult:
        """
         The first leaf MAY be a '+' symbol...

        """
    def do_transform(self, line: Line, string_idx: int) -> Iterator[TResult[Line]]:
        """
         We MAY choose to drop the 'f' prefix from substrings that don't
         contain any f-expressions, but ONLY if the original f-string
         contains at least one f-expression. Otherwise, we will alter the AST
         of the program.

        """
        def line_needs_plus() -> bool:
            """

                        Side Effects:
                            If @line starts with a plus and this is the first line we are
                            constructing, this function appends a PLUS leaf to @new_line
                            and replaces the old PLUS leaf in the node structure. Otherwise
                            this function does nothing.
            
            """
        def max_last_string() -> int:
            """

                        Returns:
                            The max allowed length of the string value used for the last
                            line we will construct.
            
            """
        def more_splits_should_be_made() -> bool:
            """

                        Returns:
                            True iff `rest_value` (the remaining string value from the last
                            split), should be split again.
            
            """
    def __get_break_idx(self, string: str, max_break_idx: int) -> Optional[int]:
        """

                This method contains the algorithm that StringSplitter uses to
                determine which character to split each string at.

                Args:
                    @string: The substring that we are attempting to split.
                    @max_break_idx: The ideal break index. We will return this value if it
                    meets all the necessary conditions. In the likely event that it
                    doesn't we will try to find the closest index BELOW @max_break_idx
                    that does. If that fails, we will expand our search by also
                    considering all valid indices ABOVE @max_break_idx.

                Pre-Conditions:
                    * assert_is_leaf_string(@string)
                    * 0 <= @max_break_idx < len(@string)

                Returns:
                    break_idx, if an index is able to be found that meets all of the
                    conditions listed in the 'Transformations' section of this classes'
                    docstring.
                        OR
                    None, otherwise.
        
        """
        def fexpr_slices() -> Iterator[Tuple[Index, Index]]:
            """

                        Yields:
                            All ranges of @string which, if @string were to be split there,
                            would result in the splitting of an f-expression (which is NOT
                            allowed).
            
            """
        def breaks_fstring_expression(i: Index) -> bool:
            """

                        Returns:
                            True iff returning @i would result in the splitting of an
                            f-expression (which is NOT allowed).
            
            """
        def passes_all_checks(i: Index) -> bool:
            """

                        Returns:
                            True iff ALL of the conditions listed in the 'Transformations'
                            section of this classes' docstring would be be met by returning @i.
            
            """
    def __maybe_normalize_string_quotes(self, leaf: Leaf) -> None:
        """

                Pre-Conditions:
                    * assert_is_leaf_string(@string)

                Returns:
                    * If @string is an f-string that contains no f-expressions, we
                    return a string identical to @string except that the 'f' prefix
                    has been stripped and all double braces (i.e. '{{' or '}}') have
                    been normalized (i.e. turned into '{' or '}').
                        OR
                    * Otherwise, we return @string.
        
        """
def StringParenWrapper(CustomSplitMapMixin, BaseStringSplitter):
    """

        StringTransformer that splits non-"atom" strings (i.e. strings that do not
        exist on lines by themselves).

        Requirements:
            All of the requirements listed in BaseStringSplitter's docstring in
            addition to the requirements listed below:

            * The line is a return/yield statement, which returns/yields a string.
                OR
            * The line is part of a ternary expression (e.g. `x = y if cond else
            z`) such that the line starts with `else <string>`, where <string> is
            some string.
                OR
            * The line is an assert statement, which ends with a string.
                OR
            * The line is an assignment statement (e.g. `x = <string>` or `x +=
            <string>`) such that the variable is being assigned the value of some
            string.
                OR
            * The line is a dictionary key assignment where some valid key is being
            assigned the value of some string.

        Transformations:
            The chosen string is wrapped in parentheses and then split at the LPAR.

            We then have one line which ends with an LPAR and another line that
            starts with the chosen string. The latter line is then split again at
            the RPAR. This results in the RPAR (and possibly a trailing comma)
            being placed on its own line.

            NOTE: If any leaves exist to the right of the chosen string (except
            for a trailing comma, which would be placed after the RPAR), those
            leaves are placed inside the parentheses.  In effect, the chosen
            string is not necessarily being "wrapped" by parentheses. We can,
            however, count on the LPAR being placed directly before the chosen
            string.

            In other words, StringParenWrapper creates "atom" strings. These
            can then be split again by StringSplitter, if necessary.

        Collaborations:
            In the event that a string line split by StringParenWrapper is
            changed such that it no longer needs to be given its own line,
            StringParenWrapper relies on StringParenStripper to clean up the
            parentheses it created.
    
    """
    def do_splitter_match(self, line: Line) -> TMatchResult:
        """
         If the string has no spaces...

        """
    def _return_match(LL: List[Leaf]) -> Optional[int]:
        """

                Returns:
                    string_idx such that @LL[string_idx] is equal to our target (i.e.
                    matched) string, if this line matches the return/yield statement
                    requirements listed in the 'Requirements' section of this classes'
                    docstring.
                        OR
                    None, otherwise.
        
        """
    def _else_match(LL: List[Leaf]) -> Optional[int]:
        """

                Returns:
                    string_idx such that @LL[string_idx] is equal to our target (i.e.
                    matched) string, if this line matches the ternary expression
                    requirements listed in the 'Requirements' section of this classes'
                    docstring.
                        OR
                    None, otherwise.
        
        """
    def _assert_match(LL: List[Leaf]) -> Optional[int]:
        """

                Returns:
                    string_idx such that @LL[string_idx] is equal to our target (i.e.
                    matched) string, if this line matches the assert statement
                    requirements listed in the 'Requirements' section of this classes'
                    docstring.
                        OR
                    None, otherwise.
        
        """
    def _assign_match(LL: List[Leaf]) -> Optional[int]:
        """

                Returns:
                    string_idx such that @LL[string_idx] is equal to our target (i.e.
                    matched) string, if this line matches the assignment statement
                    requirements listed in the 'Requirements' section of this classes'
                    docstring.
                        OR
                    None, otherwise.
        
        """
    def _dict_match(LL: List[Leaf]) -> Optional[int]:
        """

                Returns:
                    string_idx such that @LL[string_idx] is equal to our target (i.e.
                    matched) string, if this line matches the dictionary key assignment
                    statement requirements listed in the 'Requirements' section of this
                    classes' docstring.
                        OR
                    None, otherwise.
        
        """
    def do_transform(self, line: Line, string_idx: int) -> Iterator[TResult[Line]]:
        """
         --- First Line

        """
def StringParser:
    """

        A state machine that aids in parsing a string's "trailer", which can be
        either non-existent, an old-style formatting sequence (e.g. `% varX` or `%
        (varX, varY)`), or a method-call / attribute access (e.g. `.format(varX,
        varY)`).

        NOTE: A new StringParser object MUST be instantiated for each string
        trailer we need to parse.

        Examples:
            We shall assume that `line` equals the `Line` object that corresponds
            to the following line of python code:
            ```
            x = "Some {}.".format("String") + some_other_string
            ```

            Furthermore, we will assume that `string_idx` is some index such that:
            ```
            assert line.leaves[string_idx].value == "Some {}."
            ```

            The following code snippet then holds:
            ```
            string_parser = StringParser()
            idx = string_parser.parse(line.leaves, string_idx)
            assert line.leaves[idx].type == token.PLUS
            ```
    
    """
    def __init__(self) -> None:
        """

                Pre-conditions:
                    * @leaves[@string_idx].type == token.STRING

                Returns:
                    The index directly after the last leaf which is apart of the string
                    trailer, if a "trailer" exists.
                        OR
                    @string_idx + 1, if no string "trailer" exists.
        
        """
    def _next_state(self, leaf: Leaf) -> bool:
        """

                Pre-conditions:
                    * On the first call to this function, @leaf MUST be the leaf that
                    was directly after the string leaf in question (e.g. if our target
                    string is `line.leaves[i]` then the first call to this method must
                    be `line.leaves[i + 1]`).
                    * On the next call to this function, the leaf parameter passed in
                    MUST be the leaf directly following @leaf.

                Returns:
                    True iff @leaf is apart of the string's trailer.
        
        """
def TErr(err_msg: str) -> Err[CannotTransform]:
    """
    (T)ransform Err

        Convenience function used when working with the TResult type.
    
    """
def contains_pragma_comment(comment_list: List[Leaf]) -> bool:
    """

        Returns:
            True iff one of the comments in @comment_list is a pragma used by one
            of the more common static analysis tools for python (e.g. mypy, flake8,
            pylint).
    
    """
def insert_str_child_factory(string_leaf: Leaf) -> Callable[[LN], None]:
    """

        Factory for a convenience function that is used to orphan @string_leaf
        and then insert multiple new leaves into the same part of the node
        structure that @string_leaf had originally occupied.

        Examples:
            Let `string_leaf = Leaf(token.STRING, '"foo"')` and `N =
            string_leaf.parent`. Assume the node `N` has the following
            original structure:

            Node(
                expr_stmt, [
                    Leaf(NAME, 'x'),
                    Leaf(EQUAL, '='),
                    Leaf(STRING, '"foo"'),
                ]
            )

            We then run the code snippet shown below.
            ```
            insert_str_child = insert_str_child_factory(string_leaf)

            lpar = Leaf(token.LPAR, '(')
            insert_str_child(lpar)

            bar = Leaf(token.STRING, '"bar"')
            insert_str_child(bar)

            rpar = Leaf(token.RPAR, ')')
            insert_str_child(rpar)
            ```

            After which point, it follows that `string_leaf.parent is None` and
            the node `N` now has the following structure:

            Node(
                expr_stmt, [
                    Leaf(NAME, 'x'),
                    Leaf(EQUAL, '='),
                    Leaf(LPAR, '('),
                    Leaf(STRING, '"bar"'),
                    Leaf(RPAR, ')'),
                ]
            )
    
    """
    def insert_str_child(child: LN) -> None:
        """

            Returns:
                True iff @string starts with three quotation characters.
    
        """
def parent_type(node: Optional[LN]) -> Optional[NodeType]:
    """

        Returns:
            @node.parent.type, if @node is not None and has a parent.
                OR
            None, otherwise.
    
    """
def is_empty_par(leaf: Leaf) -> bool:
    """

    """
def is_empty_rpar(leaf: Leaf) -> bool:
    """

    """
def is_valid_index_factory(seq: Sequence[Any]) -> Callable[[int], bool]:
    """

        Examples:
            ```
            my_list = [1, 2, 3]

            is_valid_index = is_valid_index_factory(my_list)

            assert is_valid_index(0)
            assert is_valid_index(2)

            assert not is_valid_index(3)
            assert not is_valid_index(-1)
            ```
    
    """
    def is_valid_index(idx: int) -> bool:
        """

                Returns:
                    True iff @idx is positive AND seq[@idx] does NOT raise an
                    IndexError.
        
        """
def line_to_string(line: Line) -> str:
    """
    Returns the string representation of @line.

        WARNING: This is known to be computationally expensive.
    
    """
def append_leaves(new_line: Line, old_line: Line, leaves: List[Leaf]) -> None:
    """

        Append leaves (taken from @old_line) to @new_line, making sure to fix the
        underlying Node structure where appropriate.

        All of the leaves in @leaves are duplicated. The duplicates are then
        appended to @new_line and used to replace their originals in the underlying
        Node structure. Any comments attached to the old leaves are reattached to
        the new leaves.

        Pre-conditions:
            set(@leaves) is a subset of set(@old_line.leaves).
    
    """
def replace_child(old_child: LN, new_child: LN) -> None:
    """

        Side Effects:
            * If @old_child.parent is set, replace @old_child with @new_child in
            @old_child's underlying Node structure.
                OR
            * Otherwise, this function does nothing.
    
    """
def get_string_prefix(string: str) -> str:
    """

        Pre-conditions:
            * assert_is_leaf_string(@string)

        Returns:
            @string's prefix (e.g. '', 'r', 'f', or 'rf').
    
    """
def assert_is_leaf_string(string: str) -> None:
    """

        Checks the pre-condition that @string has the format that you would expect
        of `leaf.value` where `leaf` is some Leaf such that `leaf.type ==
        token.STRING`. A more precise description of the pre-conditions that are
        checked are listed below.

        Pre-conditions:
            * @string starts with either ', ", <prefix>', or <prefix>" where
            `set(<prefix>)` is some subset of `set(STRING_PREFIX_CHARS)`.
            * @string ends with a quote character (' or ").

        Raises:
            AssertionError(...) if the pre-conditions listed above are not
            satisfied.
    
    """
def left_hand_split(line: Line, _features: Collection[Feature] = ()) -> Iterator[Line]:
    """
    Split line into many lines, starting with the first matching bracket pair.

        Note: this usually looks weird, only use this for function definitions.
        Prefer RHS otherwise.  This is why this function is not symmetrical with
        :func:`right_hand_split` which also handles optional parentheses.
    
    """
2021-03-02 20:53:19,066 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:53:19,067 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:53:19,067 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:53:19,067 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:53:19,067 : INFO : tokenize_signature : --> do i ever get here?
def right_hand_split(
    line: Line,
    line_length: int,
    features: Collection[Feature] = (),
    omit: Collection[LeafID] = (),
) -> Iterator[Line]:
    """
    Split line into many lines, starting with the last matching bracket pair.

        If the split was by optional parentheses, attempt splitting without them, too.
        `omit` is a collection of closing bracket IDs that shouldn't be considered for
        this split.

        Note: running this function modifies `bracket_depth` on the leaves of `line`.
    
    """
def bracket_split_succeeded_or_raise(head: Line, body: Line, tail: Line) -> None:
    """
    Raise :exc:`CannotSplit` if the last left- or right-hand split failed.

        Do nothing otherwise.

        A left- or right-hand split is based on a pair of brackets. Content before
        (and including) the opening bracket is left on one line, content inside the
        brackets is put on a separate line, and finally content starting with and
        following the closing bracket is put on a separate line.

        Those are called `head`, `body`, and `tail`, respectively. If the split
        produced the same line (all content in `head`) or ended up with an empty `body`
        and the `tail` is just the closing bracket, then it's considered failed.
    
    """
2021-03-02 20:53:19,069 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:53:19,069 : INFO : tokenize_signature : --> do i ever get here?
def bracket_split_build_line(
    leaves: List[Leaf], original: Line, opening_bracket: Leaf, *, is_body: bool = False
) -> Line:
    """
    Return a new line with given `leaves` and respective comments from `original`.

        If `is_body` is True, the result line is one-indented inside brackets and as such
        has its first leaf's prefix normalized and a trailing comma added when expected.
    
    """
def dont_increase_indentation(split_func: Transformer) -> Transformer:
    """
    Normalize prefix of the first leaf in every line returned by `split_func`.

        This is a decorator over relevant split functions.
    
    """
    def split_wrapper(line: Line, features: Collection[Feature] = ()) -> Iterator[Line]:
        """
        Split according to delimiters of the highest priority.

            If the appropriate Features are given, the split will add trailing commas
            also in function signatures and calls that contain `*` and `**`.
    
        """
    def append_to_line(leaf: Leaf) -> Iterator[Line]:
        """
        Append `leaf` to current line or to new line if appending impossible.
        """
2021-03-02 20:53:19,072 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:53:19,072 : INFO : tokenize_signature : --> do i ever get here?
def standalone_comment_split(
    line: Line, features: Collection[Feature] = ()
) -> Iterator[Line]:
    """
    Split standalone comments from the rest of the line.
    """
    def append_to_line(leaf: Leaf) -> Iterator[Line]:
        """
        Append `leaf` to current line or to new line if appending impossible.
        """
def is_import(leaf: Leaf) -> bool:
    """
    Return True if the given leaf starts an import statement.
    """
def is_type_comment(leaf: Leaf, suffix: str = "") -> bool:
    """
    Return True if the given leaf is a special comment.
        Only returns true for type comments for now.
    """
def normalize_prefix(leaf: Leaf, *, inside_brackets: bool) -> None:
    """
    Leave existing extra newlines if not `inside_brackets`. Remove everything
        else.

        Note: don't use backslashes for formatting or you'll lose your voting rights.
    
    """
def normalize_string_prefix(leaf: Leaf, remove_u_prefix: bool = False) -> None:
    """
    Make all string prefixes lowercase.

        If remove_u_prefix is given, also removes any u prefix from the string.

        Note: Mutates its argument.
    
    """
def normalize_string_quotes(leaf: Leaf) -> None:
    """
    Prefer double quotes but only if it doesn't cause more escaping.

        Adds or removes backslashes as appropriate. Doesn't parse and fix
        strings nested in f-strings (yet).

        Note: Mutates its argument.
    
    """
def normalize_numeric_literal(leaf: Leaf) -> None:
    """
    Normalizes numeric (float, int, and complex) literals.

        All letters used in the representation are normalized to lowercase (except
        in Python 2 long literals).
    
    """
def format_float_or_int_string(text: str) -> str:
    """
    Formats a float string like "1.0".
    """
def normalize_invisible_parens(node: Node, parens_after: Set[str]) -> None:
    """
    Make existing optional parentheses invisible or create new ones.

        `parens_after` is a set of string leaf values immediately after which parens
        should be put.

        Standardizes on visible parentheses for single-element tuples, and keeps
        existing visible parentheses for other tuples and generator expressions.
    
    """
def normalize_fmt_off(node: Node) -> None:
    """
    Convert content between `# fmt: off`/`# fmt: on` into standalone comments.
    """
def convert_one_fmt_off_pair(node: Node) -> bool:
    """
    Convert content of a single `# fmt: off`/`# fmt: on` into a standalone comment.

        Returns True if a pair was converted.
    
    """
def generate_ignored_nodes(leaf: Leaf) -> Iterator[LN]:
    """
    Starting from the container of `leaf`, generate all leaves until `# fmt: on`.

        Stops at the end of the block.
    
    """
def is_fmt_on(container: LN) -> bool:
    """
    Determine whether formatting is switched on within a container.
        Determined by whether the last `# fmt:` comment is `on` or `off`.
    
    """
def contains_fmt_on_at_column(container: LN, column: int) -> bool:
    """
    Determine if children at a given column have formatting switched on.
    """
def first_leaf_column(node: Node) -> Optional[int]:
    """
    Returns the column of the first leaf child of a node.
    """
def maybe_make_parens_invisible_in_atom(node: LN, parent: LN) -> bool:
    """
    If it's safe, make the parens in the atom `node` invisible, recursively.
        Additionally, remove repeated, adjacent invisible parens from the atom `node`
        as they are redundant.

        Returns whether the node should itself be wrapped in invisible parentheses.

    
    """
def is_atom_with_invisible_parens(node: LN) -> bool:
    """
    Given a `LN`, determines whether it's an atom `node` with invisible
        parens. Useful in dedupe-ing and normalizing parens.
    
    """
def is_empty_tuple(node: LN) -> bool:
    """
    Return True if `node` holds an empty tuple.
    """
def unwrap_singleton_parenthesis(node: LN) -> Optional[LN]:
    """
    Returns `wrapped` if `node` is of the shape ( wrapped ).

        Parenthesis can be optional. Returns None otherwise
    """
def wrap_in_parentheses(parent: Node, child: LN, *, visible: bool = True) -> None:
    """
    Wrap `child` in parentheses.

        This replaces `child` with an atom holding the parentheses and the old
        child.  That requires moving the prefix.

        If `visible` is False, the leaves will be valueless (and thus invisible).
    
    """
def is_one_tuple(node: LN) -> bool:
    """
    Return True if `node` holds a tuple with one element, with or without parens.
    """
def is_walrus_assignment(node: LN) -> bool:
    """
    Return True iff `node` is of the shape ( test := test )
    """
def is_yield(node: LN) -> bool:
    """
    Return True if `node` holds a `yield` or `yield from` expression.
    """
def is_vararg(leaf: Leaf, within: Set[NodeType]) -> bool:
    """
    Return True if `leaf` is a star or double star in a vararg or kwarg.

        If `within` includes VARARGS_PARENTS, this applies to function signatures.
        If `within` includes UNPACKING_PARENTS, it applies to right hand-side
        extended iterable unpacking (PEP 3132) and additional unpacking
        generalizations (PEP 448).
    
    """
def is_multiline_string(leaf: Leaf) -> bool:
    """
    Return True if `leaf` is a multiline string that actually spans many lines.
    """
def is_stub_suite(node: Node) -> bool:
    """
    Return True if `node` is a suite with a stub body.
    """
def is_stub_body(node: LN) -> bool:
    """
    Return True if `node` is a simple statement containing an ellipsis.
    """
def max_delimiter_priority_in_atom(node: LN) -> Priority:
    """
    Return maximum delimiter priority inside `node`.

        This is specific to atoms with contents contained in a pair of parentheses.
        If `node` isn't an atom or there are no enclosing parentheses, returns 0.
    
    """
def ensure_visible(leaf: Leaf) -> None:
    """
    Make sure parentheses are visible.

        They could be invisible as part of some statements (see
        :func:`normalize_invisible_parens` and :func:`visit_import_from`).
    
    """
def should_split_body_explode(line: Line, opening_bracket: Leaf) -> bool:
    """
    Should `line` be immediately split with `delimiter_split()` after RHS?
    """
def is_one_tuple_between(opening: Leaf, closing: Leaf, leaves: List[Leaf]) -> bool:
    """
    Return True if content between `opening` and `closing` looks like a one-tuple.
    """
def get_features_used(node: Node) -> Set[Feature]:
    """
    Return a set of (relatively) new Python features used in this file.

        Currently looking for:
        - f-strings;
        - underscores in numeric literals;
        - trailing commas after * or ** in function signatures and calls;
        - positional only arguments in function signatures and lambdas;
    
    """
def detect_target_versions(node: Node) -> Set[TargetVersion]:
    """
    Detect the version to target based on the nodes used.
    """
def generate_trailers_to_omit(line: Line, line_length: int) -> Iterator[Set[LeafID]]:
    """
    Generate sets of closing bracket IDs that should be omitted in a RHS.

        Brackets can be omitted if the entire trailer up to and including
        a preceding closing bracket fits in one line.

        Yielded sets are cumulative (contain results of previous yields, too).  First
        set is empty, unless the line should explode, in which case bracket pairs until
        the one that needs to explode are omitted.
    
    """
def get_future_imports(node: Node) -> Set[str]:
    """
    Return a set of __future__ imports in the file.
    """
    def get_imports_from_children(children: List[LN]) -> Generator[str, None, None]:
        """
        Invalid syntax parsing imports
        """
def get_gitignore(root: Path) -> PathSpec:
    """
     Return a PathSpec matching gitignore content if present.
    """
2021-03-02 20:53:19,093 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:53:19,093 : INFO : tokenize_signature : --> do i ever get here?
def normalize_path_maybe_ignore(
    path: Path, root: Path, report: "Report"
) -> Optional[str]:
    """
    Normalize `path`. May return `None` if `path` was ignored.

        `report` is where "path ignored" output goes.
    
    """
2021-03-02 20:53:19,094 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:53:19,094 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:53:19,094 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:53:19,094 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:53:19,094 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:53:19,094 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:53:19,094 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:53:19,094 : INFO : tokenize_signature : --> do i ever get here?
def gen_python_files(
    paths: Iterable[Path],
    root: Path,
    include: Optional[Pattern[str]],
    exclude: Pattern[str],
    force_exclude: Optional[Pattern[str]],
    report: "Report",
    gitignore: PathSpec,
) -> Iterator[Path]:
    """
    Generate all files under `path` whose paths are not excluded by the
        `exclude_regex` or `force_exclude` regexes, but are included by the `include` regex.

        Symbolic links pointing outside of the `root` directory are ignored.

        `report` is where output about exclusions goes.
    
    """
def find_project_root(srcs: Iterable[str]) -> Path:
    """
    Return a directory containing .git, .hg, or pyproject.toml.

        That directory will be a common parent of all files and directories
        passed in `srcs`.

        If no directory in the tree contains a marker that would specify it's the
        project root, the root of the file system is returned.
    
    """
def Report:
    """
    Provides a reformatting counter. Can be rendered with `str(report)`.
    """
    def done(self, src: Path, changed: Changed) -> None:
        """
        Increment the counter for successful reformatting. Write out a message.
        """
    def failed(self, src: Path, message: str) -> None:
        """
        Increment the counter for failed reformatting. Write out a message.
        """
    def path_ignored(self, path: Path, message: str) -> None:
        """
        f"{path} ignored: {message}
        """
    def return_code(self) -> int:
        """
        Return the exit code that the app should use.

                This considers the current state of changed files and failures:
                - if there were any failures, return 123;
                - if any files were changed and --check is being used, return 1;
                - otherwise return 0.
        
        """
    def __str__(self) -> str:
        """
        Render a color report of the current state.

                Use `click.unstyle` to remove colors.
        
        """
def parse_ast(src: str) -> Union[ast.AST, ast3.AST, ast27.AST]:
    """
    <unknown>
    """
2021-03-02 20:53:19,099 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:53:19,099 : INFO : tokenize_signature : --> do i ever get here?
def _fixup_ast_constants(
    node: Union[ast.AST, ast3.AST, ast27.AST]
) -> Union[ast.AST, ast3.AST, ast27.AST]:
    """
    Map ast nodes deprecated in 3.8 to Constant.
    """
2021-03-02 20:53:19,100 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:53:19,100 : INFO : tokenize_signature : --> do i ever get here?
def _stringify_ast(
    node: Union[ast.AST, ast3.AST, ast27.AST], depth: int = 0
) -> Iterator[str]:
    """
    Simple visitor generating strings to compare ASTs by content.
    """
def assert_equivalent(src: str, dst: str) -> None:
    """
    Raise AssertionError if `src` and `dst` aren't equivalent.
    """
def assert_stable(src: str, dst: str, mode: Mode) -> None:
    """
    Raise AssertionError if `dst` reformats differently the second time.
    """
def dump_to_file(*output: str) -> str:
    """
    Dump `output` to a temporary file. Return path to the file.
    """
def nullcontext() -> Iterator[None]:
    """
    Return an empty context manager.

        To be used like `nullcontext` in Python 3.7.
    
    """
def diff(a: str, b: str, a_name: str, b_name: str) -> str:
    """
    Return a unified diff string between strings `a` and `b`.
    """
def cancel(tasks: Iterable["asyncio.Task[Any]"]) -> None:
    """
    asyncio signal handler that cancels all `tasks` and reports to stderr.
    """
def shutdown(loop: asyncio.AbstractEventLoop) -> None:
    """
    Cancel all pending tasks on `loop`, wait for them, and close the loop.
    """
def sub_twice(regex: Pattern[str], replacement: str, original: str) -> str:
    """
    Replace `regex` with `replacement` twice on `original`.

        This is used by string normalization to perform replaces on
        overlapping matches.
    
    """
def re_compile_maybe_verbose(regex: str) -> Pattern[str]:
    """
    Compile a regular expression string in `regex`.

        If it contains newlines, use verbose mode.
    
    """
def enumerate_reversed(sequence: Sequence[T]) -> Iterator[Tuple[Index, T]]:
    """
    Like `reversed(enumerate(sequence))` if that were possible.
    """
2021-03-02 20:53:19,105 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:53:19,105 : INFO : tokenize_signature : --> do i ever get here?
def enumerate_with_length(
    line: Line, reversed: bool = False
) -> Iterator[Tuple[Index, Leaf, int]]:
    """
    Return an enumeration of leaves with their length.

        Stops prematurely on multiline strings and standalone comments.
    
    """
def is_line_short_enough(line: Line, *, line_length: int, line_str: str = "") -> bool:
    """
    Return True if `line` is no longer than `line_length`.

        Uses the provided `line_str` rendering, if any, otherwise computes a new one.
    
    """
def can_be_split(line: Line) -> bool:
    """
    Return False if the line cannot be split *for sure*.

        This is not an exhaustive search but a cheap heuristic that we can use to
        avoid some unfortunate formattings (mostly around wrapping unsplittable code
        in unnecessary parentheses).
    
    """
2021-03-02 20:53:19,107 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:53:19,107 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:53:19,107 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:53:19,107 : INFO : tokenize_signature : --> do i ever get here?
def can_omit_invisible_parens(
    line: Line,
    line_length: int,
    omit_on_explode: Collection[LeafID] = (),
) -> bool:
    """
    Does `line` have a shape safe to reformat without optional parens around it?

        Returns True for only a subset of potentially nice looking formattings but
        the point is to not return false positives that end up producing lines that
        are too long.
    
    """
def _can_omit_opening_paren(line: Line, *, first: Leaf, line_length: int) -> bool:
    """
    See `can_omit_invisible_parens`.
    """
def _can_omit_closing_paren(line: Line, *, last: Leaf, line_length: int) -> bool:
    """
    See `can_omit_invisible_parens`.
    """
def last_two_except(leaves: List[Leaf], omit: Collection[LeafID]) -> Tuple[Leaf, Leaf]:
    """
    Return (penultimate, last) leaves skipping brackets in `omit` and contents.
    """
2021-03-02 20:53:19,111 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:53:19,111 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:53:19,111 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:53:19,111 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:53:19,111 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:53:19,111 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:53:19,111 : INFO : tokenize_signature : --> do i ever get here?
def run_transformer(
    line: Line,
    transform: Transformer,
    mode: Mode,
    features: Collection[Feature],
    *,
    line_str: str = "",
) -> List[Line]:
    """
    \n
    """
def get_cache_file(mode: Mode) -> Path:
    """
    f"cache.{mode.get_cache_key()}.pickle
    """
def read_cache(mode: Mode) -> Cache:
    """
    Read the cache if it exists and is well formed.

        If it is not well formed, the call to write_cache later should resolve the issue.
    
    """
def get_cache_info(path: Path) -> CacheInfo:
    """
    Return the information used to check if a file is already formatted or not.
    """
def filter_cached(cache: Cache, sources: Iterable[Path]) -> Tuple[Set[Path], Set[Path]]:
    """
    Split an iterable of paths in `sources` into two sets.

        The first contains paths of files that modified on disk or are not in the
        cache. The other contains paths to non-modified files.
    
    """
def write_cache(cache: Cache, sources: Iterable[Path], mode: Mode) -> None:
    """
    Update the cache file.
    """
def patch_click() -> None:
    """
    Make Click not crash.

        On certain misconfigured environments, Python 3 selects the ASCII encoding as the
        default which restricts paths that it can access during the lifetime of the
        application.  Click refuses to work in this scenario by raising a RuntimeError.

        In case of Black the likelihood that non-ASCII characters are going to be used in
        file paths is minimal since it's Python source code.  Moreover, this crash was
        spurious on Python 3.7 thanks to PEP 538 and PEP 540.
    
    """
def patched_main() -> None:
    """
     For the purposes of docstring re-indentation, we don't need to do anything
     with single-line docstrings.

    """
def fix_docstring(docstring: str, prefix: str) -> str:
    """
     https://www.python.org/dev/peps/pep-0257/#handling-docstring-indentation

    """
