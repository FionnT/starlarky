def ClassNotFound(ValueError):
    """
    Raised if one of the lookup functions didn't find a matching class.
    """
def OptionError(Exception):
    """
    'Value for option %s must be one of %s'
    """
def get_bool_opt(options, optname, default=None):
    """
    'Invalid type %r for option %s; use '
    '1/0, yes/no, true/false, on/off'
    """
def get_int_opt(options, optname, default=None):
    """
    'Invalid type %r for option %s; you '
    'must give an integer value'
    """
def get_list_opt(options, optname, default=None):
    """
    'Invalid type %r for option %s; you '
    'must give a list value'
    """
def docstring_headline(obj):
    """
    ''
    """
def make_analysator(f):
    """
    Return a static text analyser function that returns float values.
    """
    def text_analyse(text):
        """
        r"""Check if the given regular expression matches the last part of the
            shebang if one exists.

                >>> from pygments.util import shebang_matches
                >>> shebang_matches('#!/usr/bin/env python', r'python(2\.\d)?')
                True
                >>> shebang_matches('#!/usr/bin/python2.4', r'python(2\.\d)?')
                True
                >>> shebang_matches('#!/usr/bin/python-ruby', r'python(2\.\d)?')
                False
                >>> shebang_matches('#!/usr/bin/python/ruby', r'python(2\.\d)?')
                False
                >>> shebang_matches('#!/usr/bin/startsomethingwith python',
                ...                 r'python(2\.\d)?')
                True

            It also checks for common windows executable file extensions::

                >>> shebang_matches('#!C:\\Python2.4\\Python.exe', r'python(2\.\d)?')
                True

            Parameters (``'-f'`` or ``'--foo'`` are ignored so ``'perl'`` does
            the same as ``'perl -e'``)

            Note that this method automatically searches the whole string (eg:
            the regular expression is wrapped in ``'^$'``)
    
        """
def doctype_matches(text, regex):
    """
    Check if the doctype matches a regular expression (if present).

        Note that this method only checks the first part of a DOCTYPE.
        eg: 'html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"'
    
    """
def html_doctype_matches(text):
    """
    Check if the file looks like it has a html doctype.
    """
def looks_like_xml(text):
    """
    Check if a doctype exists or if we have some tags.
    """
def surrogatepair(c):
    """
    Given a unicode character code with length greater than 16 bits,
        return the two 16 bit surrogate pair.
    
    """
def format_lines(var_name, seq, raw=False, indent_level=0):
    """
    Formats a sequence of strings for output.
    """
def duplicates_removed(it, already_seen=()):
    """

        Returns a list with duplicates removed from the iterable `it`.

        Order is preserved.
    
    """
def Future:
    """
    Generic class to defer some work.

        Handled specially in RegexLexerMeta, to support regex string construction at
        first use.
    
    """
    def get(self):
        """
        Decode *text* with guessed encoding.

            First try UTF-8; this should fail for non-UTF-8 encodings.
            Then try the preferred locale encoding.
            Fall back to latin-1, which always works.
    
        """
def guess_decode_from_terminal(text, term):
    """
    Decode *text* coming from terminal *term*.

        First try the terminal encoding, if given.
        Then try UTF-8.  Then try the preferred locale encoding.
        Fall back to latin-1, which always works.
    
    """
def terminal_encoding(term):
    """
    Return our best guess of encoding for the given *term*.
    """
def UnclosingTextIOWrapper(TextIOWrapper):
    """
     Don't close underlying buffer on destruction.

    """
    def close(self):
