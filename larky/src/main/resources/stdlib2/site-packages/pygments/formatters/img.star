def PilNotAvailable(ImportError):
    """
    When Python imaging library is not available
    """
def FontNotFound(Exception):
    """
    When there are no usable fonts specified
    """
def FontManager:
    """

        Manages a set of fonts: normal, italic, bold, etc...
    
    """
    def __init__(self, font_name, font_size=14):
        """
        'win'
        """
    def _get_nix_font_path(self, name, style):
        """
        'fc-list'
        """
    def _create_nix(self):
        """
        'NORMAL'
        """
    def _get_mac_font_path(self, font_map, name, style):
        """
        ' '
        """
    def _create_mac(self):
        """
        HOME
        """
    def _lookup_win(self, key, basename, styles, fail=False):
        """
        ''
        """
    def _create_win(self):
        """
        r'Software\Microsoft\Windows NT\CurrentVersion\Fonts'
        """
    def get_char_size(self):
        """

                Get the character size.
        
        """
    def get_font(self, bold, oblique):
        """

                Get the font based on bold and italic flags.
        
        """
def ImageFormatter(Formatter):
    """

        Create a PNG image from source code. This uses the Python Imaging Library to
        generate a pixmap from the source code.

        .. versionadded:: 0.10

        Additional options accepted:

        `image_format`
            An image format to output to that is recognised by PIL, these include:

            * "PNG" (default)
            * "JPEG"
            * "BMP"
            * "GIF"

        `line_pad`
            The extra spacing (in pixels) between each line of text.

            Default: 2

        `font_name`
            The font name to be used as the base font from which others, such as
            bold and italic fonts will be generated.  This really should be a
            monospace font to look sane.

            Default: "Courier New" on Windows, "Menlo" on Mac OS, and
                     "DejaVu Sans Mono" on \\*nix

        `font_size`
            The font size in points to be used.

            Default: 14

        `image_pad`
            The padding, in pixels to be used at each edge of the resulting image.

            Default: 10

        `line_numbers`
            Whether line numbers should be shown: True/False

            Default: True

        `line_number_start`
            The line number of the first line.

            Default: 1

        `line_number_step`
            The step used when printing line numbers.

            Default: 1

        `line_number_bg`
            The background colour (in "#123456" format) of the line number bar, or
            None to use the style background color.

            Default: "#eed"

        `line_number_fg`
            The text color of the line numbers (in "#123456"-like format).

            Default: "#886"

        `line_number_chars`
            The number of columns of line numbers allowable in the line number
            margin.

            Default: 2

        `line_number_bold`
            Whether line numbers will be bold: True/False

            Default: False

        `line_number_italic`
            Whether line numbers will be italicized: True/False

            Default: False

        `line_number_separator`
            Whether a line will be drawn between the line number area and the
            source code area: True/False

            Default: True

        `line_number_pad`
            The horizontal padding (in pixels) between the line number margin, and
            the source code area.

            Default: 6

        `hl_lines`
            Specify a list of lines to be highlighted.

            .. versionadded:: 1.2

            Default: empty list

        `hl_color`
            Specify the color for highlighting lines.

            .. versionadded:: 1.2

            Default: highlight color of the selected style
    
    """
    def __init__(self, **options):
        """

                See the class docstring for explanation of options.
        
        """
    def get_style_defs(self, arg=''):
        """
        'The -S option is meaningless for the image '
        'formatter. Use -O style=<stylename> instead.'
        """
    def _get_line_height(self):
        """

                Get the height of a line.
        
        """
    def _get_line_y(self, lineno):
        """

                Get the Y coordinate of a line number.
        
        """
    def _get_char_width(self):
        """

                Get the width of a character.
        
        """
    def _get_char_x(self, charno):
        """

                Get the X coordinate of a character position.
        
        """
    def _get_text_pos(self, charno, lineno):
        """

                Get the actual position for a character and line position.
        
        """
    def _get_linenumber_pos(self, lineno):
        """

                Get the actual position for the start of a line number.
        
        """
    def _get_text_color(self, style):
        """

                Get the correct color for the token from the style.
        
        """
    def _get_style_font(self, style):
        """

                Get the correct font for the style.
        
        """
    def _get_image_size(self, maxcharno, maxlineno):
        """

                Get the required image size.
        
        """
    def _draw_linenumber(self, posno, lineno):
        """

                Remember a line number drawable to paint later.
        
        """
    def _draw_text(self, pos, text, font, **kw):
        """

                Remember a single drawable tuple to paint later.
        
        """
    def _create_drawables(self, tokensource):
        """

                Create drawables for the token content.
        
        """
    def _draw_line_numbers(self):
        """

                Create drawables for the line numbers.
        
        """
    def _paint_line_number_bg(self, im):
        """

                Paint the line number background on the image.
        
        """
    def format(self, tokensource, outfile):
        """

                Format ``tokensource``, an iterable of ``(tokentype, tokenstring)``
                tuples and write it into ``outfile``.

                This implementation calculates where it should draw each token on the
                pixmap, then calculates the required pixmap size and draws the items.
        
        """
def GifImageFormatter(ImageFormatter):
    """

        Create a GIF image from source code. This uses the Python Imaging Library to
        generate a pixmap from the source code.

        .. versionadded:: 1.0
    
    """
def JpgImageFormatter(ImageFormatter):
    """

        Create a JPEG image from source code. This uses the Python Imaging Library to
        generate a pixmap from the source code.

        .. versionadded:: 1.0
    
    """
def BmpImageFormatter(ImageFormatter):
    """

        Create a bitmap image from source code. This uses the Python Imaging Library to
        generate a pixmap from the source code.

        .. versionadded:: 1.0
    
    """
