def _fn_matches(fn, glob):
    """
    Return whether the supplied file name fn matches pattern filename.
    """
def _load_formatters(module_name):
    """
    Load a formatter (and all others in the module too).
    """
def get_all_formatters():
    """
    Return a generator for all formatter classes.
    """
def find_formatter_class(alias):
    """
    Lookup a formatter by alias.

        Returns None if not found.
    
    """
def get_formatter_by_name(_alias, **options):
    """
    Lookup and instantiate a formatter by alias.

        Raises ClassNotFound if not found.
    
    """
2021-03-02 20:48:36,597 : INFO : tokenize_signature : --> do i ever get here?
def load_formatter_from_file(filename, formattername="CustomFormatter",
                             **options):
    """
    Load a formatter from a file.

        This method expects a file located relative to the current working
        directory, which contains a class named CustomFormatter. By default,
        it expects the Formatter to be named CustomFormatter; you can specify
        your own class name as the second argument to this function.

        Users should be very careful with the input, because this method
        is equivalent to running eval on the input file.

        Raises ClassNotFound if there are any problems importing the Formatter.

        .. versionadded:: 2.2
    
    """
def get_formatter_for_filename(fn, **options):
    """
    Lookup and instantiate a formatter by filename pattern.

        Raises ClassNotFound if not found.
    
    """
def _automodule(types.ModuleType):
    """
    Automatically import formatters.
    """
    def __getattr__(self, name):
