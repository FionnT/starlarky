def EscapeSequence:
    """
    \x1b[
    """
    def color_string(self):
        """
        'ansi'
        """
    def true_color_string(self):
        """
        38
        """
    def reset_string(self):
        """
        39
        """
def Terminal256Formatter(Formatter):
    """

        Format tokens with ANSI color sequences, for output in a 256-color
        terminal or console.  Like in `TerminalFormatter` color sequences
        are terminated at newlines, so that paging the output works correctly.

        The formatter takes colors from a style defined by the `style` option
        and converts them to nearest ANSI 256-color escape sequences. Bold and
        underline attributes from the style are preserved (and displayed).

        .. versionadded:: 0.9

        .. versionchanged:: 2.2
           If the used style defines foreground colors in the form ``#ansi*``, then
           `Terminal256Formatter` will map these to non extended foreground color.
           See :ref:`AnsiTerminalStyle` for more information.

        .. versionchanged:: 2.4
           The ANSI color names have been updated with names that are easier to
           understand and align with colornames of other projects and terminals.
           See :ref:`this table <new-ansi-color-names>` for more information.


        Options accepted:

        `style`
            The style to use, can be a string or a Style subclass (default:
            ``'default'``).
    
    """
    def __init__(self, **options):
        """
        'nobold'
        """
    def _build_color_table(self):
        """
         colors 0..15: 16 basic colors


        """
    def _closest_color(self, r, g, b):
        """
         "infinity" (>distance from #000000 to #ffffff)
        """
    def _color_index(self, color):
        """
         strip the `ansi/#ansi` part and look up code

        """
    def _setup_styles(self):
        """
         get foreground from ansicolor if set

        """
    def format(self, tokensource, outfile):
        """
         outfile.write( "<" + str(ttype) + ">" )

        """
def TerminalTrueColorFormatter(Terminal256Formatter):
    """
    r"""
        Format tokens with ANSI color sequences, for output in a true-color
        terminal or console.  Like in `TerminalFormatter` color sequences
        are terminated at newlines, so that paging the output works correctly.

        .. versionadded:: 2.1

        Options accepted:

        `style`
            The style to use, can be a string or a Style subclass (default:
            ``'default'``).
    
    """
    def _build_color_table(self):
        """
        'color'
        """
