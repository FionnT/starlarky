def apply_filters(stream, filters, lexer=None):
    """

        Use this method to apply an iterable of filters to
        a stream. If lexer is given it's forwarded to the
        filter, otherwise the filter receives `None`.
    
    """
    def _apply(filter_, stream):
        """

            Decorator that converts a function into a filter::

                @simplefilter
                def lowercase(self, lexer, stream, options):
                    for ttype, value in stream:
                        yield ttype, value.lower()
    
        """
def Filter:
    """

        Default filter. Subclass this class or use the `simplefilter`
        decorator to create own filters.
    
    """
    def __init__(self, **options):
        """

            Abstract class used by `simplefilter` to create simple
            function filters on the fly. The `simplefilter` decorator
            automatically creates subclasses of this class for
            functions passed to it.
    
        """
    def __init__(self, **options):
        """
        'function'
        """
    def filter(self, lexer, stream):
        """
         pylint: disable=not-callable

        """
