def _TokenType(tuple):
    """
     no need to call super.__init__

    """
    def __contains__(self, val):
        """
        'Token'
        """
    def __copy__(self):
        """
         These instances are supposed to be singletons

        """
    def __deepcopy__(self, memo):
        """
         These instances are supposed to be singletons

        """
def is_token_subtype(ttype, other):
    """

        Return True if ``ttype`` is a subtype of ``other``.

        exists for backwards compatibility. use ``ttype in other`` now.
    
    """
def string_to_tokentype(s):
    """

        Convert a string into a token type::

            >>> string_to_token('String.Double')
            Token.Literal.String.Double
            >>> string_to_token('Token.Literal.Number')
            Token.Literal.Number
            >>> string_to_token('')
            Token

        Tokens that are already tokens are returned unchanged:

            >>> string_to_token(String)
            Token.Literal.String
    
    """
