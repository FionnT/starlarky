def YamlLexerContext(LexerContext):
    """
    Indentation context for the YAML lexer.
    """
    def __init__(self, *args, **kwds):
        """

            Lexer for `YAML <http://yaml.org/>`_, a human-friendly data serialization
            language.

            .. versionadded:: 0.11
    
        """
    def something(token_class):
        """
        Do not produce empty tokens.
        """
        def callback(lexer, match, context):
            """
            Reset the indentation levels.
            """
        def callback(lexer, match, context):
            """
            Save a possible indentation level.
            """
        def callback(lexer, match, context):
            """
            ''
            """
    def set_indent(token_class, implicit=False):
        """
        Set the previously saved indentation level.
        """
        def callback(lexer, match, context):
            """
            Set an explicit indentation level for a block scalar.
            """
        def callback(lexer, match, context):
            """
            Process an empty line in a block scalar.
            """
        def callback(lexer, match, context):
            """
            Process indentation spaces in a block scalar.
            """
        def callback(lexer, match, context):
            """
            Process indentation spaces in a plain scalar.
            """
        def callback(lexer, match, context):
            """
             the root rules
            'root'
            """
    def get_tokens_unprocessed(self, text=None, context=None):
        """

            For JSON data structures.

            .. versionadded:: 1.5
    
        """
def JsonBareObjectLexer(JsonLexer):
    """

        For JSON data structures (with missing object curly braces).

        .. versionadded:: 2.2
    
    """
def JsonLdLexer(JsonLexer):
    """

        For `JSON-LD <http://json-ld.org/>`_ linked data.

        .. versionadded:: 2.0
    
    """
