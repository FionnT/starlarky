def _fn_matches(fn, glob):
    """
    Return whether the supplied file name fn matches pattern filename.
    """
def _load_lexers(module_name):
    """
    Load a lexer (and all others in the module too).
    """
def get_all_lexers():
    """
    Return a generator of tuples in the form ``(name, aliases,
        filenames, mimetypes)`` of all know lexers.
    
    """
def find_lexer_class(name):
    """
    Lookup a lexer class by name.

        Return None if not found.
    
    """
def find_lexer_class_by_name(_alias):
    """
    Lookup a lexer class by alias.

        Like `get_lexer_by_name`, but does not instantiate the class.

        .. versionadded:: 2.2
    
    """
def get_lexer_by_name(_alias, **options):
    """
    Get a lexer by an alias.

        Raises ClassNotFound if not found.
    
    """
def load_lexer_from_file(filename, lexername="CustomLexer", **options):
    """
    Load a lexer from a file.

        This method expects a file located relative to the current working
        directory, which contains a Lexer class. By default, it expects the
        Lexer to be name CustomLexer; you can specify your own class name
        as the second argument to this function.

        Users should be very careful with the input, because this method
        is equivalent to running eval on the input file.

        Raises ClassNotFound if there are any problems importing the Lexer.

        .. versionadded:: 2.2
    
    """
def find_lexer_class_for_filename(_fn, code=None):
    """
    Get a lexer for a filename.

        If multiple lexers match the filename pattern, use ``analyse_text()`` to
        figure out which one is more appropriate.

        Returns None if not found.
    
    """
    def get_rating(info):
        """
         explicit patterns get a bonus

        """
def get_lexer_for_filename(_fn, code=None, **options):
    """
    Get a lexer for a filename.

        If multiple lexers match the filename pattern, use ``analyse_text()`` to
        figure out which one is more appropriate.

        Raises ClassNotFound if not found.
    
    """
def get_lexer_for_mimetype(_mime, **options):
    """
    Get a lexer for a mimetype.

        Raises ClassNotFound if not found.
    
    """
def _iter_lexerclasses(plugins=True):
    """
    Return an iterator over all lexer classes.
    """
def guess_lexer_for_filename(_fn, _text, **options):
    """

        Lookup all lexers that handle those filenames primary (``filenames``)
        or secondary (``alias_filenames``). Then run a text analysis for those
        lexers and choose the best result.

        usage::

            >>> from pygments.lexers import guess_lexer_for_filename
            >>> guess_lexer_for_filename('hello.html', '<%= @foo %>')
            <pygments.lexers.templates.RhtmlLexer object at 0xb7d2f32c>
            >>> guess_lexer_for_filename('hello.html', '<h1>{{ title|e }}</h1>')
            <pygments.lexers.templates.HtmlDjangoLexer object at 0xb7d2f2ac>
            >>> guess_lexer_for_filename('style.css', 'a { color: <?= $link ?> }')
            <pygments.lexers.templates.CssPhpLexer object at 0xb7ba518c>
    
    """
    def type_sort(t):
        """
         sort by:
         - analyse score
         - is primary filename pattern?
         - priority
         - last resort: class name

        """
def guess_lexer(_text, **options):
    """
    Guess a lexer by strong distinctions in the text (eg, shebang).
    """
def _automodule(types.ModuleType):
    """
    Automatically import lexers.
    """
    def __getattr__(self, name):
