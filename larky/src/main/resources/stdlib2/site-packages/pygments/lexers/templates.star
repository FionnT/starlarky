def ErbLexer(Lexer):
    """

        Generic `ERB <http://ruby-doc.org/core/classes/ERB.html>`_ (Ruby Templating)
        lexer.

        Just highlights ruby code between the preprocessor directives, other data
        is left untouched by the lexer.

        All options are also forwarded to the `RubyLexer`.
    
    """
    def __init__(self, **options):
        """

                Since ERB doesn't allow "<%" and other tags inside of ruby
                blocks we have to use a split approach here that fails for
                that too.
        
        """
    def analyse_text(text):
        """
        '<%'
        """
def SmartyLexer(RegexLexer):
    """

        Generic `Smarty <http://smarty.php.net/>`_ template lexer.

        Just highlights smarty code between the preprocessor directives, other
        data is left untouched by the lexer.
    
    """
    def analyse_text(text):
        """
        r'\{if\s+.*?\}.*?\{/if\}'
        """
def VelocityLexer(RegexLexer):
    """

        Generic `Velocity <http://velocity.apache.org/>`_ template lexer.

        Just highlights velocity directives and variable references, other
        data is left untouched by the lexer.
    
    """
    def analyse_text(text):
        """
        r'#\{?macro\}?\(.*?\).*?#\{?end\}?'
        """
def VelocityHtmlLexer(DelegatingLexer):
    """

        Subclass of the `VelocityLexer` that highlights unlexed data
        with the `HtmlLexer`.

    
    """
    def __init__(self, **options):
        """

            Subclass of the `VelocityLexer` that highlights unlexed data
            with the `XmlLexer`.

    
        """
    def __init__(self, **options):
        """

            Generic `django <http://www.djangoproject.com/documentation/templates/>`_
            and `jinja <https://jinja.pocoo.org/jinja/>`_ template lexer.

            It just highlights django/jinja code between the preprocessor directives,
            other data is left untouched by the lexer.
    
        """
    def analyse_text(text):
        """
        r'\{%\s*(block|extends)'
        """
def MyghtyLexer(RegexLexer):
    """

        Generic `myghty templates`_ lexer. Code that isn't Myghty
        markup is yielded as `Token.Other`.

        .. versionadded:: 0.6

        .. _myghty templates: http://www.myghty.org/
    
    """
def MyghtyHtmlLexer(DelegatingLexer):
    """

        Subclass of the `MyghtyLexer` that highlights unlexed data
        with the `HtmlLexer`.

        .. versionadded:: 0.6
    
    """
    def __init__(self, **options):
        """

            Subclass of the `MyghtyLexer` that highlights unlexed data
            with the `XmlLexer`.

            .. versionadded:: 0.6
    
        """
    def __init__(self, **options):
        """

            Subclass of the `MyghtyLexer` that highlights unlexed data
            with the `JavascriptLexer`.

            .. versionadded:: 0.6
    
        """
    def __init__(self, **options):
        """

            Subclass of the `MyghtyLexer` that highlights unlexed data
            with the `CssLexer`.

            .. versionadded:: 0.6
    
        """
    def __init__(self, **options):
        """

            Generic `mason templates`_ lexer. Stolen from Myghty lexer. Code that isn't
            Mason markup is HTML.

            .. _mason templates: http://www.masonhq.com/

            .. versionadded:: 1.4
    
        """
    def analyse_text(text):
        """
        r'</%(class|doc|init)%>'
        """
def MakoLexer(RegexLexer):
    """

        Generic `mako templates`_ lexer. Code that isn't Mako
        markup is yielded as `Token.Other`.

        .. versionadded:: 0.7

        .. _mako templates: http://www.makotemplates.org/
    
    """
def MakoHtmlLexer(DelegatingLexer):
    """

        Subclass of the `MakoLexer` that highlights unlexed data
        with the `HtmlLexer`.

        .. versionadded:: 0.7
    
    """
    def __init__(self, **options):
        """

            Subclass of the `MakoLexer` that highlights unlexed data
            with the `XmlLexer`.

            .. versionadded:: 0.7
    
        """
    def __init__(self, **options):
        """

            Subclass of the `MakoLexer` that highlights unlexed data
            with the `JavascriptLexer`.

            .. versionadded:: 0.7
    
        """
    def __init__(self, **options):
        """

            Subclass of the `MakoLexer` that highlights unlexed data
            with the `CssLexer`.

            .. versionadded:: 0.7
    
        """
    def __init__(self, **options):
        """
         Genshi and Cheetah lexers courtesy of Matt Good.


        """
def CheetahPythonLexer(Lexer):
    """

        Lexer for handling Cheetah's special $ tokens in Python syntax.
    
    """
    def get_tokens_unprocessed(self, text):
        """
        '$'
        """
def CheetahLexer(RegexLexer):
    """

        Generic `cheetah templates`_ lexer. Code that isn't Cheetah
        markup is yielded as `Token.Other`.  This also works for
        `spitfire templates`_ which use the same syntax.

        .. _cheetah templates: http://www.cheetahtemplate.org/
        .. _spitfire templates: http://code.google.com/p/spitfire/
    
    """
def CheetahHtmlLexer(DelegatingLexer):
    """

        Subclass of the `CheetahLexer` that highlights unlexed data
        with the `HtmlLexer`.
    
    """
    def __init__(self, **options):
        """

            Subclass of the `CheetahLexer` that highlights unlexed data
            with the `XmlLexer`.
    
        """
    def __init__(self, **options):
        """

            Subclass of the `CheetahLexer` that highlights unlexed data
            with the `JavascriptLexer`.
    
        """
    def __init__(self, **options):
        """

            A lexer that highlights `genshi <http://genshi.edgewall.org/>`_ text
            templates.
    
        """
def GenshiMarkupLexer(RegexLexer):
    """

        Base lexer for Genshi markup, used by `HtmlGenshiLexer` and
        `GenshiLexer`.
    
    """
def HtmlGenshiLexer(DelegatingLexer):
    """

        A lexer that highlights `genshi <http://genshi.edgewall.org/>`_ and
        `kid <http://kid-templating.org/>`_ kid HTML templates.
    
    """
    def __init__(self, **options):
        """
        r'\$\{.*?\}'
        """
def GenshiLexer(DelegatingLexer):
    """

        A lexer that highlights `genshi <http://genshi.edgewall.org/>`_ and
        `kid <http://kid-templating.org/>`_ kid XML templates.
    
    """
    def __init__(self, **options):
        """
        r'\$\{.*?\}'
        """
def JavascriptGenshiLexer(DelegatingLexer):
    """

        A lexer that highlights javascript code in genshi text templates.
    
    """
    def __init__(self, **options):
        """

            A lexer that highlights CSS definitions in genshi text templates.
    
        """
    def __init__(self, **options):
        """

            Subclass of the ERB lexer that highlights the unlexed data with the
            html lexer.

            Nested Javascript and CSS is highlighted too.
    
        """
    def __init__(self, **options):
        """
         one more than the XmlErbLexer returns

        """
def XmlErbLexer(DelegatingLexer):
    """

        Subclass of `ErbLexer` which highlights data outside preprocessor
        directives with the `XmlLexer`.
    
    """
    def __init__(self, **options):
        """

            Subclass of `ErbLexer` which highlights unlexed data with the `CssLexer`.
    
        """
    def __init__(self, **options):
        """

            Subclass of `ErbLexer` which highlights unlexed data with the
            `JavascriptLexer`.
    
        """
    def __init__(self, **options):
        """

            Subclass of `PhpLexer` that highlights unhandled data with the `HtmlLexer`.

            Nested Javascript and CSS is highlighted too.
    
        """
    def __init__(self, **options):
        """

            Subclass of `PhpLexer` that highlights unhandled data with the `XmlLexer`.
    
        """
    def __init__(self, **options):
        """

            Subclass of `PhpLexer` which highlights unmatched data with the `CssLexer`.
    
        """
    def __init__(self, **options):
        """

            Subclass of `PhpLexer` which highlights unmatched data with the
            `JavascriptLexer`.
    
        """
    def __init__(self, **options):
        """

            Subclass of the `SmartyLexer` that highlights unlexed data with the
            `HtmlLexer`.

            Nested Javascript and CSS is highlighted too.
    
        """
    def __init__(self, **options):
        """

            Subclass of the `SmartyLexer` that highlights unlexed data with the
            `XmlLexer`.
    
        """
    def __init__(self, **options):
        """

            Subclass of the `SmartyLexer` that highlights unlexed data with the
            `CssLexer`.
    
        """
    def __init__(self, **options):
        """

            Subclass of the `SmartyLexer` that highlights unlexed data with the
            `JavascriptLexer`.
    
        """
    def __init__(self, **options):
        """

            Subclass of the `DjangoLexer` that highlights unlexed data with the
            `HtmlLexer`.

            Nested Javascript and CSS is highlighted too.
    
        """
    def __init__(self, **options):
        """

            Subclass of the `DjangoLexer` that highlights unlexed data with the
            `XmlLexer`.
    
        """
    def __init__(self, **options):
        """

            Subclass of the `DjangoLexer` that highlights unlexed data with the
            `CssLexer`.
    
        """
    def __init__(self, **options):
        """

            Subclass of the `DjangoLexer` that highlights unlexed data with the
            `JavascriptLexer`.
    
        """
    def __init__(self, **options):
        """

            Base for the `JspLexer`. Yields `Token.Other` for area outside of
            JSP tags.

            .. versionadded:: 0.7
    
        """
def JspLexer(DelegatingLexer):
    """

        Lexer for Java Server Pages.

        .. versionadded:: 0.7
    
    """
    def __init__(self, **options):
        """
        '<%'
        """
def EvoqueLexer(RegexLexer):
    """

        For files using the Evoque templating system.

        .. versionadded:: 1.1
    
    """
def EvoqueHtmlLexer(DelegatingLexer):
    """

        Subclass of the `EvoqueLexer` that highlights unlexed data with the
        `HtmlLexer`.

        .. versionadded:: 1.1
    
    """
    def __init__(self, **options):
        """

            Subclass of the `EvoqueLexer` that highlights unlexed data with the
            `XmlLexer`.

            .. versionadded:: 1.1
    
        """
    def __init__(self, **options):
        """

            Coldfusion statements
    
        """
def ColdfusionMarkupLexer(RegexLexer):
    """

        Coldfusion markup only
    
    """
def ColdfusionHtmlLexer(DelegatingLexer):
    """

        Coldfusion markup in html
    
    """
    def __init__(self, **options):
        """

            Coldfusion markup/script components

            .. versionadded:: 2.0
    
        """
    def __init__(self, **options):
        """

            Lexer for Scalate Server Pages.

            .. versionadded:: 1.4
    
        """
    def __init__(self, **options):
        """
        r'val \w+\s*:'
        """
def TeaTemplateRootLexer(RegexLexer):
    """

        Base for the `TeaTemplateLexer`. Yields `Token.Other` for area outside of
        code blocks.

        .. versionadded:: 1.5
    
    """
def TeaTemplateLexer(DelegatingLexer):
    """

        Lexer for `Tea Templates <http://teatrove.org/>`_.

        .. versionadded:: 1.5
    
    """
    def __init__(self, **options):
        """
        '<%'
        """
def LassoHtmlLexer(DelegatingLexer):
    """

        Subclass of the `LassoLexer` which highlights unhandled data with the
        `HtmlLexer`.

        Nested JavaScript and CSS is also highlighted.

        .. versionadded:: 1.6
    
    """
    def __init__(self, **options):
        """
         same as HTML lexer
        """
def LassoXmlLexer(DelegatingLexer):
    """

        Subclass of the `LassoLexer` which highlights unhandled data with the
        `XmlLexer`.

        .. versionadded:: 1.6
    
    """
    def __init__(self, **options):
        """

            Subclass of the `LassoLexer` which highlights unhandled data with the
            `CssLexer`.

            .. versionadded:: 1.6
    
        """
    def __init__(self, **options):
        """
        'requiredelimiters'
        """
    def analyse_text(text):
        """
        r'\w+:.+?;'
        """
def LassoJavascriptLexer(DelegatingLexer):
    """

        Subclass of the `LassoLexer` which highlights unhandled data with the
        `JavascriptLexer`.

        .. versionadded:: 1.6
    
    """
    def __init__(self, **options):
        """
        'requiredelimiters'
        """
    def analyse_text(text):
        """

            Generic `handlebars <http://handlebarsjs.com/>` template lexer.

            Highlights only the Handlebars template tags (stuff between `{{` and `}}`).
            Everything else is left for a delegating lexer.

            .. versionadded:: 2.0
    
        """
def HandlebarsHtmlLexer(DelegatingLexer):
    """

        Subclass of the `HandlebarsLexer` that highlights unlexed data with the
        `HtmlLexer`.

        .. versionadded:: 2.0
    
    """
    def __init__(self, **options):
        """

            Subclass of the `DjangoLexer` that highlights unlexed data with the
            `YamlLexer`.

            Commonly used in Saltstack salt states.

            .. versionadded:: 2.0
    
        """
    def __init__(self, **options):
        """

            Lexer for `Liquid templates
            <http://www.rubydoc.info/github/Shopify/liquid>`_.

            .. versionadded:: 2.0
    
        """
def TwigLexer(RegexLexer):
    """

        `Twig <http://twig.sensiolabs.org/>`_ template lexer.

        It just highlights Twig code between the preprocessor directives,
        other data is left untouched by the lexer.

        .. versionadded:: 2.0
    
    """
def TwigHtmlLexer(DelegatingLexer):
    """

        Subclass of the `TwigLexer` that highlights unlexed data with the
        `HtmlLexer`.

        .. versionadded:: 2.0
    
    """
    def __init__(self, **options):
        """

            Generic
            `angular2 <http://victorsavkin.com/post/119943127151/angular-2-template-syntax>`_
            template lexer.

            Highlights only the Angular template tags (stuff between `{{` and `}}` and
            special attributes: '(event)=', '[property]=', '[(twoWayBinding)]=').
            Everything else is left for a delegating lexer.

            .. versionadded:: 2.1
    
        """
def Angular2HtmlLexer(DelegatingLexer):
    """

        Subclass of the `Angular2Lexer` that highlights unlexed data with the
        `HtmlLexer`.

        .. versionadded:: 2.0
    
    """
    def __init__(self, **options):
