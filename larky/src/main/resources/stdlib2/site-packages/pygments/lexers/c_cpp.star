def CFamilyLexer(RegexLexer):
    """

        For C family source code.  This is used as a base class to avoid repetitious
        definitions.
    
    """
    def __init__(self, **options):
        """
        'stdlibhighlighting'
        """
    def get_tokens_unprocessed(self, text):
        """

            For C source code with preprocessor directives.

            Additional options accepted:

            `stdlibhighlighting`
                Highlight common types found in the C/C++ standard library (e.g. `size_t`).
                (default: ``True``).

            `c99highlighting`
                Highlight common types found in the C99 standard library (e.g. `int8_t`).
                Actually, this includes all fixed-width integer types.
                (default: ``True``).

            `c11highlighting`
                Highlight atomic types found in the C11 standard library (e.g. `atomic_bool`).
                (default: ``True``).

            `platformhighlighting`
                Highlight common types found in the platform SDK headers (e.g. `clockid_t` on Linux).
                (default: ``True``).
    
        """
    def analyse_text(text):
        """
        r'^\s*#include [<"]'
        """
def CppLexer(CFamilyLexer):
    """

        For C++ source code with preprocessor directives.

        Additional options accepted:

        `stdlibhighlighting`
            Highlight common types found in the C/C++ standard library (e.g. `size_t`).
            (default: ``True``).

        `c99highlighting`
            Highlight common types found in the C99 standard library (e.g. `int8_t`).
            Actually, this includes all fixed-width integer types.
            (default: ``True``).

        `c11highlighting`
            Highlight atomic types found in the C11 standard library (e.g. `atomic_bool`).
            (default: ``True``).

        `platformhighlighting`
            Highlight common types found in the platform SDK headers (e.g. `clockid_t` on Linux).
            (default: ``True``).
    
    """
    def analyse_text(text):
        """
        '#include <[a-z_]+>'
        """
