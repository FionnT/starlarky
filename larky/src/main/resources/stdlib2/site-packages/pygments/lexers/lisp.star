def SchemeLexer(RegexLexer):
    """

        A Scheme lexer, parsing a stream and outputting the tokens
        needed to highlight scheme code.
        This lexer could be most probably easily subclassed to parse
        other LISP-Dialects like Common Lisp, Emacs Lisp or AutoLisp.

        This parser is checked with pastes from the LISP pastebin
        at http://paste.lisp.org/ to cover as much syntax as possible.

        It supports the full Scheme syntax as defined in R5RS.

        .. versionadded:: 0.6
    
    """
def CommonLispLexer(RegexLexer):
    """

        A Common Lisp lexer.

        .. versionadded:: 0.9
    
    """
    def __init__(self, **options):
        """
        'root'
        """
def HyLexer(RegexLexer):
    """

        Lexer for `Hy <http://hylang.org/>`_ source code.

        .. versionadded:: 2.0
    
    """
    def _multi_escape(entries):
        """
        ' '
        """
    def analyse_text(text):
        """
        '(import '
        """
def RacketLexer(RegexLexer):
    """

        Lexer for `Racket <http://racket-lang.org/>`_ source code (formerly
        known as PLT Scheme).

        .. versionadded:: 1.6
    
    """
def NewLispLexer(RegexLexer):
    """

        For `newLISP. <http://www.newlisp.org/>`_ source code (version 10.3.0).

        .. versionadded:: 1.5
    
    """
def EmacsLispLexer(RegexLexer):
    """

        An ELisp lexer, parsing a stream and outputting the tokens
        needed to highlight elisp code.

        .. versionadded:: 2.1
    
    """
    def get_tokens_unprocessed(self, text):
        """
        'root'
        """
def ShenLexer(RegexLexer):
    """

        Lexer for `Shen <http://shenlanguage.org/>`_ source code.

        .. versionadded:: 2.1
    
    """
    def get_tokens_unprocessed(self, text):
        """
        '('
        """
    def _process_symbols(self, tokens):
        """
        '('
        """
    def _process_declaration(self, declaration, tokens):
        """
        'datatype'
        """
    def _process_signature(self, tokens):
        """
        '}'
        """
def CPSALexer(SchemeLexer):
    """

        A CPSA lexer based on the CPSA language as of version 2.2.12

        .. versionadded:: 2.1
    
    """
def XtlangLexer(RegexLexer):
    """
    An xtlang lexer for the `Extempore programming environment
        <http://extempore.moso.com.au>`_.

        This is a mixture of Scheme and xtlang, really. Keyword lists are
        taken from the Extempore Emacs mode
        (https://github.com/extemporelang/extempore-emacs-mode)

        .. versionadded:: 2.2
    
    """
def FennelLexer(RegexLexer):
    """
    A lexer for the `Fennel programming language <https://fennel-lang.org>`_.

        Fennel compiles to Lua, so all the Lua builtins are recognized as well
        as the special forms that are particular to the Fennel compiler.

        .. versionadded:: 2.3
    
    """
