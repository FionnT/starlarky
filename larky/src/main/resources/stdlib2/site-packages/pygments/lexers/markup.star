def BBCodeLexer(RegexLexer):
    """

        A lexer that highlights BBCode(-like) syntax.

        .. versionadded:: 0.6
    
    """
def MoinWikiLexer(RegexLexer):
    """

        For MoinMoin (and Trac) Wiki markup.

        .. versionadded:: 0.7
    
    """
def RstLexer(RegexLexer):
    """

        For `reStructuredText <http://docutils.sf.net/rst.html>`_ markup.

        .. versionadded:: 0.7

        Additional options accepted:

        `handlecodeblocks`
            Highlight the contents of ``.. sourcecode:: language``,
            ``.. code:: language`` and ``.. code-block:: language``
            directives with a lexer for the given language (default:
            ``True``).

            .. versionadded:: 0.8
    
    """
    def _handle_sourcecode(self, match):
        """
         section header

        """
    def __init__(self, **options):
        """
        'handlecodeblocks'
        """
    def analyse_text(text):
        """
        '..'
        """
def TexLexer(RegexLexer):
    """

        Lexer for the TeX and LaTeX typesetting languages.
    
    """
    def analyse_text(text):
        """
        \\documentclass
        """
def GroffLexer(RegexLexer):
    """

        Lexer for the (g)roff typesetting language, supporting groff
        extensions. Mainly useful for highlighting manpage sources.

        .. versionadded:: 0.6
    
    """
    def analyse_text(text):
        """
        '.'
        """
def MozPreprocHashLexer(RegexLexer):
    """

        Lexer for Mozilla Preprocessor files (with '#' as the marker).

        Other data is left untouched.

        .. versionadded:: 2.0
    
    """
def MozPreprocPercentLexer(MozPreprocHashLexer):
    """

        Lexer for Mozilla Preprocessor files (with '%' as the marker).

        Other data is left untouched.

        .. versionadded:: 2.0
    
    """
def MozPreprocXulLexer(DelegatingLexer):
    """

        Subclass of the `MozPreprocHashLexer` that highlights unlexed data with the
        `XmlLexer`.

        .. versionadded:: 2.0
    
    """
    def __init__(self, **options):
        """

            Subclass of the `MozPreprocHashLexer` that highlights unlexed data with the
            `JavascriptLexer`.

            .. versionadded:: 2.0
    
        """
    def __init__(self, **options):
        """

            Subclass of the `MozPreprocHashLexer` that highlights unlexed data with the
            `CssLexer`.

            .. versionadded:: 2.0
    
        """
    def __init__(self, **options):
        """

            For `Markdown <https://help.github.com/categories/writing-on-github/>`_ markup.

            .. versionadded:: 2.2
    
        """
    def _handle_codeblock(self, match):
        """

                match args: 1:backticks, 2:lang_name, 3:newline, 4:code, 5:backticks
        
        """
    def __init__(self, **options):
        """
        'handlecodeblocks'
        """
def TiddlyWiki5Lexer(RegexLexer):
    """

        For `TiddlyWiki5 <https://tiddlywiki.com/#TiddlerFiles>`_ markup.

        .. versionadded:: 2.7
    
    """
    def _handle_codeblock(self, match):
        """

                match args: 1:backticks, 2:lang_name, 3:newline, 4:code, 5:backticks
        
        """
    def _handle_cssblock(self, match):
        """

                match args: 1:style tag 2:newline, 3:code, 4:closing style tag
        
        """
    def __init__(self, **options):
        """
        'handlecodeblocks'
        """
