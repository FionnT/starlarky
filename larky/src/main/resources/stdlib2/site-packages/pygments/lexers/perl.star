def PerlLexer(RegexLexer):
    """

        For `Perl <https://www.perl.org>`_ source code.
    
    """
    def analyse_text(text):
        """
        r'perl'
        """
def Perl6Lexer(ExtendedRegexLexer):
    """

        For `Raku <https://www.raku.org>`_ (a.k.a. Perl 6) source code.

        .. versionadded:: 2.0
    
    """
    def _build_word_match(words, boundary_regex_fragment=None, prefix='', suffix=''):
        """
        r'\b('
        """
    def brackets_callback(token_class):
        """
        'delimiter'
        """
    def opening_brace_callback(lexer, match, context):
        """
         if we encounter an opening brace and we're one level
         below a token state, it means we need to increment
         the nesting level for braces so we know later when
         we should return to the token rules.

        """
    def closing_brace_callback(lexer, match, context):
        """
         if we encounter a free closing brace and we're one level
         below a token state, it means we need to check the nesting
         level to see if we need to return to the token state.

        """
    def embedded_perl6_callback(lexer, match, context):
        """
        'root'
        """
    def analyse_text(text):
        """
        r'^=(?:end|cut)'
        """
    def __init__(self, **options):
        """
        'encoding'
        """
