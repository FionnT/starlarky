def DuelLexer(RegexLexer):
    """

        Lexer for Duel Views Engine (formerly JBST) markup with JavaScript code blocks.
        See http://duelengine.org/.
        See http://jsonml.org/jbst/.

        .. versionadded:: 1.4
    
    """
def XQueryLexer(ExtendedRegexLexer):
    """

        An XQuery lexer, parsing a stream and outputting the tokens needed to
        highlight xquery code.

        .. versionadded:: 1.4
    
    """
    def punctuation_root_callback(lexer, match, ctx):
        """
         transition to root always - don't pop off stack

        """
    def operator_root_callback(lexer, match, ctx):
        """
         transition to root always - don't pop off stack

        """
    def popstate_tag_callback(lexer, match, ctx):
        """
        'occurrenceindicator'
        """
    def popstate_callback(lexer, match, ctx):
        """
         if we have run out of our state stack, pop whatever is on the pygments
         state stack

        """
    def pushstate_element_content_starttag_callback(lexer, match, ctx):
        """
        'element_content'
        """
    def pushstate_cdata_section_callback(lexer, match, ctx):
        """
        'cdata_section'
        """
    def pushstate_starttag_callback(lexer, match, ctx):
        """
        'start_tag'
        """
    def pushstate_operator_order_callback(lexer, match, ctx):
        """
        'root'
        """
    def pushstate_operator_map_callback(lexer, match, ctx):
        """
        'root'
        """
    def pushstate_operator_root_validate(lexer, match, ctx):
        """
        'root'
        """
    def pushstate_operator_root_validate_withmode(lexer, match, ctx):
        """
        'root'
        """
    def pushstate_operator_processing_instruction_callback(lexer, match, ctx):
        """
        'processing_instruction'
        """
    def pushstate_element_content_processing_instruction_callback(lexer, match, ctx):
        """
        'processing_instruction'
        """
    def pushstate_element_content_cdata_section_callback(lexer, match, ctx):
        """
        'cdata_section'
        """
    def pushstate_operator_cdata_section_callback(lexer, match, ctx):
        """
        'cdata_section'
        """
    def pushstate_element_content_xmlcomment_callback(lexer, match, ctx):
        """
        'xml_comment'
        """
    def pushstate_operator_xmlcomment_callback(lexer, match, ctx):
        """
        'xml_comment'
        """
    def pushstate_kindtest_callback(lexer, match, ctx):
        """
        'kindtest'
        """
    def pushstate_operator_kindtestforpi_callback(lexer, match, ctx):
        """
        'operator'
        """
    def pushstate_operator_kindtest_callback(lexer, match, ctx):
        """
        'operator'
        """
    def pushstate_occurrenceindicator_kindtest_callback(lexer, match, ctx):
        """
        'occurrenceindicator'
        """
    def pushstate_operator_starttag_callback(lexer, match, ctx):
        """
        'operator'
        """
    def pushstate_operator_root_callback(lexer, match, ctx):
        """
        'operator'
        """
    def pushstate_operator_root_construct_callback(lexer, match, ctx):
        """
        'operator'
        """
    def pushstate_root_callback(lexer, match, ctx):
        """
        'root'
        """
    def pushstate_operator_attribute_callback(lexer, match, ctx):
        """
        'operator'
        """
    def pushstate_operator_callback(lexer, match, ctx):
        """
        'operator'
        """
def QmlLexer(RegexLexer):
    """

        For QML files. See http://doc.qt.digia.com/4.7/qdeclarativeintroduction.html.

        .. versionadded:: 1.6
    
    """
def CirruLexer(RegexLexer):
    """
    r"""
        Syntax rules of Cirru can be found at:
        http://cirru.org/

        * using ``()`` for expressions, but restricted in a same line
        * using ``""`` for strings, with ``\`` for escaping chars
        * using ``$`` as folding operator
        * using ``,`` as unfolding operator
        * using indentations for nested blocks

        .. versionadded:: 2.0
    
    """
def SlimLexer(ExtendedRegexLexer):
    """

        For Slim markup.

        .. versionadded:: 2.0
    
    """
