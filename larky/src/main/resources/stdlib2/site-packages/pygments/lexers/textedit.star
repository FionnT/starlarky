def AwkLexer(RegexLexer):
    """

        For Awk scripts.

        .. versionadded:: 1.5
    
    """
def VimLexer(RegexLexer):
    """

        Lexer for VimL script files.

        .. versionadded:: 0.8
    
    """
    def __init__(self, **options):
        """
        r"""
                It's kind of difficult to decide if something might be a keyword
                in VimL because it allows you to abbreviate them.  In fact,
                'ab[breviate]' is a good example.  :ab, :abbre, or :abbreviate are
                valid ways to call it so rather than making really awful regexps
                like::

                    \bab(?:b(?:r(?:e(?:v(?:i(?:a(?:t(?:e)?)?)?)?)?)?)?)?\b

                we match `\b\w+\b` and then call is_in() on those tokens.  See
                `scripts/get_vimkw.py` for how the lists are extracted.
        
        """
    def get_tokens_unprocessed(self, text):
        """
         TODO: builtins are only subsequent tokens on lines
               and 'keywords' only happen at the beginning except
               for :au ones

        """
