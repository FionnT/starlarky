def PythonLexer(RegexLexer):
    """

        For `Python <http://www.python.org>`_ source code (version 3.x).

        .. versionadded:: 0.10

        .. versionchanged:: 2.5
           This is now the default ``PythonLexer``.  It is still available as the
           alias ``Python3Lexer``.
    
    """
    def innerstring_rules(ttype):
        """
         the old style '%s' % (...) string formatting (still valid in Py3)

        """
    def fstring_rules(ttype):
        """
         Assuming that a '}' is the closing brace after format specifier.
         Sadly, this means that we won't detect syntax error. But it's
         more important to parse correct syntax correctly, than to
         highlight invalid syntax.

        """
    def analyse_text(text):
        """
        r'pythonw?(3(\.\d)?)?'
        """
def Python2Lexer(RegexLexer):
    """

        For `Python 2.x <http://www.python.org>`_ source code.

        .. versionchanged:: 2.5
           This class has been renamed from ``PythonLexer``.  ``PythonLexer`` now
           refers to the Python 3 variant.  File name patterns like ``*.py`` have
           been moved to Python 3 as well.
    
    """
    def innerstring_rules(ttype):
        """
         the old style '%s' % (...) string formatting

        """
    def analyse_text(text):
        """
        r'pythonw?2(\.\d)?'
        """
def PythonConsoleLexer(Lexer):
    """

        For Python console output or doctests, such as:

        .. sourcecode:: pycon

            >>> a = 'foo'
            >>> print a
            foo
            >>> 1 / 0
            Traceback (most recent call last):
              File "<stdin>", line 1, in <module>
            ZeroDivisionError: integer division or modulo by zero

        Additional options:

        `python3`
            Use Python 3 lexer for code.  Default is ``True``.

            .. versionadded:: 1.0
            .. versionchanged:: 2.5
               Now defaults to ``True``.
    
    """
    def __init__(self, **options):
        """
        'python3'
        """
    def get_tokens_unprocessed(self, text):
        """
        ''
        """
def PythonTracebackLexer(RegexLexer):
    """

        For Python 3.x tracebacks, with support for chained exceptions.

        .. versionadded:: 1.0

        .. versionchanged:: 2.5
           This is now the default ``PythonTracebackLexer``.  It is still available
           as the alias ``Python3TracebackLexer``.
    
    """
def Python2TracebackLexer(RegexLexer):
    """

        For Python tracebacks.

        .. versionadded:: 0.7

        .. versionchanged:: 2.5
           This class has been renamed from ``PythonTracebackLexer``.
           ``PythonTracebackLexer`` now refers to the Python 3 variant.
    
    """
def CythonLexer(RegexLexer):
    """

        For Pyrex and `Cython <http://cython.org>`_ source code.

        .. versionadded:: 1.1
    
    """
def DgLexer(RegexLexer):
    """

        Lexer for `dg <http://pyos.github.com/dg>`_,
        a functional and object-oriented programming language
        running on the CPython 3 VM.

        .. versionadded:: 1.6
    
    """
def NumPyLexer(PythonLexer):
    """

        A Python lexer recognizing Numerical Python builtins.

        .. versionadded:: 0.10
    
    """
    def get_tokens_unprocessed(self, text):
        """
        r'pythonw?(3(\.\d)?)?'
        """
