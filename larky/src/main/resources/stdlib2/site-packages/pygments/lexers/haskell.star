def HaskellLexer(RegexLexer):
    """

        A Haskell lexer based on the lexemes defined in the Haskell 98 Report.

        .. versionadded:: 0.8
    
    """
def HspecLexer(HaskellLexer):
    """

        A Haskell lexer with support for Hspec constructs.

        .. versionadded:: 2.4.0
    
    """
def IdrisLexer(RegexLexer):
    """

        A lexer for the dependently typed programming language Idris.

        Based on the Haskell and Agda Lexer.

        .. versionadded:: 2.0
    
    """
def AgdaLexer(RegexLexer):
    """

        For the `Agda <http://wiki.portal.chalmers.se/agda/pmwiki.php>`_
        dependently typed functional programming language and proof assistant.

        .. versionadded:: 2.0
    
    """
def CryptolLexer(RegexLexer):
    """

        FIXME: A Cryptol2 lexer based on the lexemes defined in the Haskell 98 Report.

        .. versionadded:: 2.0
    
    """
    def get_tokens_unprocessed(self, text):
        """
        'root'
        """
def LiterateLexer(Lexer):
    """

        Base class for lexers of literate file formats based on LaTeX or Bird-style
        (prefixing each code line with ">").

        Additional options accepted:

        `litstyle`
            If given, must be ``"bird"`` or ``"latex"``.  If not given, the style
            is autodetected: if the first non-whitespace character in the source
            is a backslash or percent character, LaTeX is assumed, else Bird.
    
    """
    def __init__(self, baselexer, **options):
        """
        'litstyle'
        """
def LiterateHaskellLexer(LiterateLexer):
    """

        For Literate Haskell (Bird-style or LaTeX) source.

        Additional options accepted:

        `litstyle`
            If given, must be ``"bird"`` or ``"latex"``.  If not given, the style
            is autodetected: if the first non-whitespace character in the source
            is a backslash or percent character, LaTeX is assumed, else Bird.

        .. versionadded:: 0.9
    
    """
    def __init__(self, **options):
        """

            For Literate Idris (Bird-style or LaTeX) source.

            Additional options accepted:

            `litstyle`
                If given, must be ``"bird"`` or ``"latex"``.  If not given, the style
                is autodetected: if the first non-whitespace character in the source
                is a backslash or percent character, LaTeX is assumed, else Bird.

            .. versionadded:: 2.0
    
        """
    def __init__(self, **options):
        """

            For Literate Agda source.

            Additional options accepted:

            `litstyle`
                If given, must be ``"bird"`` or ``"latex"``.  If not given, the style
                is autodetected: if the first non-whitespace character in the source
                is a backslash or percent character, LaTeX is assumed, else Bird.

            .. versionadded:: 2.0
    
        """
    def __init__(self, **options):
        """
        'latex'
        """
def LiterateCryptolLexer(LiterateLexer):
    """

        For Literate Cryptol (Bird-style or LaTeX) source.

        Additional options accepted:

        `litstyle`
            If given, must be ``"bird"`` or ``"latex"``.  If not given, the style
            is autodetected: if the first non-whitespace character in the source
            is a backslash or percent character, LaTeX is assumed, else Bird.

        .. versionadded:: 2.0
    
    """
    def __init__(self, **options):
        """

            Lexer for the `Koka <http://koka.codeplex.com>`_
            language.

            .. versionadded:: 1.6
    
        """
