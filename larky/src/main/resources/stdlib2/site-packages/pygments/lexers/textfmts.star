def IrcLogsLexer(RegexLexer):
    """

        Lexer for IRC logs in *irssi*, *xchat* or *weechat* style.
    
    """
def GettextLexer(RegexLexer):
    """

        Lexer for Gettext catalog files.

        .. versionadded:: 0.9
    
    """
def HttpLexer(RegexLexer):
    """

        Lexer for HTTP sessions.

        .. versionadded:: 1.5
    
    """
    def get_tokens_unprocessed(self, text, stack=('root',)):
        """
        Reset the content-type state.
        """
    def header_callback(self, match):
        """
        'content-type'
        """
    def continuous_header_callback(self, match):
        """
        'content_type'
        """
    def analyse_text(text):
        """
        'GET /'
        """
def TodotxtLexer(RegexLexer):
    """

        Lexer for `Todo.txt <http://todotxt.com/>`_ todo list format.

        .. versionadded:: 2.0
    
    """
def NotmuchLexer(RegexLexer):
    """

        For `Notmuch <https://notmuchmail.org/>`_ email text format.

        .. versionadded:: 2.5

        Additional options accepted:

        `body_lexer`
            If given, highlight the contents of the message body with the specified
            lexer, else guess it according to the body content (default: ``None``).
    
    """
    def _highlight_code(self, match):
        """
        'text'
        """
    def analyse_text(text):
        """
        '\fmessage{'
        """
    def __init__(self, **options):
        """
        'body_lexer'
        """
def KernelLogLexer(RegexLexer):
    """

        For Linux Kernel log ("dmesg") output.

        .. versionadded:: 2.6
    
    """
