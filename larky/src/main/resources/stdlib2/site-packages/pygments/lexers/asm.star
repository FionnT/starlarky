def GasLexer(RegexLexer):
    """

        For Gas (AT&T) assembly code.
    
    """
    def analyse_text(text):
        """
        r'^\.(text|data|section)'
        """
def _objdump_lexer_tokens(asm_lexer):
    """

        Common objdump lexer tokens to wrap an ASM lexer.
    
    """
def ObjdumpLexer(RegexLexer):
    """

        For the output of ``objdump -dr``.
    
    """
def DObjdumpLexer(DelegatingLexer):
    """

        For the output of ``objdump -Sr`` on compiled D files.
    
    """
    def __init__(self, **options):
        """

            For the output of ``objdump -Sr`` on compiled C++ files.
    
        """
    def __init__(self, **options):
        """

            For the output of ``objdump -Sr`` on compiled C files.
    
        """
    def __init__(self, **options):
        """

            For HSAIL assembly code.

            .. versionadded:: 2.2
    
        """
def LlvmLexer(RegexLexer):
    """

        For LLVM assembly code.
    
    """
def LlvmMirBodyLexer(RegexLexer):
    """

        For LLVM MIR examples without the YAML wrapper.

        For more information on LLVM MIR see https://llvm.org/docs/MIRLangRef.html.

        .. versionadded:: 2.6
    
    """
def LlvmMirLexer(RegexLexer):
    """

        Lexer for the overall LLVM MIR document format.

        MIR is a human readable serialization format that's used to represent LLVM's
        machine specific intermediate representation. It allows LLVM's developers to
        see the state of the compilation process at various points, as well as test
        individual pieces of the compiler.

        For more information on LLVM MIR see https://llvm.org/docs/MIRLangRef.html.

        .. versionadded:: 2.6
    
    """
def NasmLexer(RegexLexer):
    """

        For Nasm (Intel) assembly code.
    
    """
    def analyse_text(text):
        """
         Probably TASM

        """
def NasmObjdumpLexer(ObjdumpLexer):
    """

        For the output of ``objdump -d -M intel``.

        .. versionadded:: 2.0
    
    """
def TasmLexer(RegexLexer):
    """

        For Tasm (Turbo Assembler) assembly code.
    
    """
    def analyse_text(text):
        """
         See above

        """
def Ca65Lexer(RegexLexer):
    """

        For ca65 assembler sources.

        .. versionadded:: 1.6
    
    """
    def analyse_text(self, text):
        """
         comments in GAS start with "#

        """
def Dasm16Lexer(RegexLexer):
    """

        For DCPU-16 Assembly.

        Check http://0x10c.com/doc/dcpu-16.txt

        .. versionadded:: 2.4
    
    """
    def guess_identifier(lexer, match):
        """
        'root'
        """
