def RubyLexer(ExtendedRegexLexer):
    """

        For `Ruby <http://www.ruby-lang.org>`_ source code.
    
    """
    def heredoc_callback(self, match, ctx):
        """
         okay, this is the hardest part of parsing Ruby...
         match: 1 = <<[-~]?, 2 = quote? 3 = name 4 = quote? 5 = rest of line


        """
    def gen_rubystrings_rules():
        """
         begin
        """
        def intp_string_callback(self, match, ctx):
            """
            'interpolated-string'
            """
    def analyse_text(text):
        """
        r'ruby(1\.\d)?'
        """
def RubyConsoleLexer(Lexer):
    """

        For Ruby interactive console (**irb**) output like:

        .. sourcecode:: rbcon

            irb(main):001:0> a = 1
            => 1
            irb(main):002:0> puts a
            1
            => nil
    
    """
    def get_tokens_unprocessed(self, text):
        """
        ''
        """
def FancyLexer(RegexLexer):
    """

        Pygments Lexer For `Fancy <http://www.fancy-lang.org/>`_.

        Fancy is a self-hosted, pure object-oriented, dynamic,
        class-based, concurrent general-purpose programming language
        running on Rubinius, the Ruby VM.

        .. versionadded:: 1.5
    
    """
