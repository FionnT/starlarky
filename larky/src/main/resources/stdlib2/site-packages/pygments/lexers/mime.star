def MIMELexer(RegexLexer):
    """

        Lexer for Multipurpose Internet Mail Extensions (MIME) data. This lexer is
        designed to process the nested mulitpart data.

        It assumes that the given data contains both header and body (and is
        splitted by empty line). If no valid header is found, then the entire data
        would be treated as body.

        Additional options accepted:

        `MIME-max-level`
            Max recurssion level for nested MIME structure. Any negative number
            would treated as unlimited. (default: -1)

        `Content-Type`
            Treat the data as specific content type. Useful when header is
            missing, or this lexer would try to parse from header. (default:
            `text/plain`)

        `Multipart-Boundary`
            Set the default multipart boundary delimiter. This option is only used
            when `Content-Type` is `multipart` and header is missing. This lexer
            would try to parse from header by default. (default: None)

        `Content-Transfer-Encoding`
            Treat the data as specific encoding. Or this lexer would try to parse
            from header by default. (default: None)

        .. versionadded:: 2.5
    
    """
    def __init__(self, **options):
        """
        Multipart-Boundary
        """
    def analyse_text(text):
        """
        \n\n
        """
    def get_header_tokens(self, match):
        """
        :
        """
    def get_body_tokens(self, match):
        """
         skip first newline

        """
    def get_bodypart_tokens(self, text):
        """
         return if:
          * no content
          * no content type specific
          * content encoding is not readable
          * max recurrsion exceed

        """
    def store_content_type(self, match):
        """
        '/'
        """
    def get_content_type_subtokens(self, match):
        """
        boundary
        """
    def store_content_transfer_encoding(self, match):
        """
        content-type
        """
