def _lookup_style(style):
    """

        Converts a token stream to text.

        Options accepted:

        ``style``
            The style to use, can be a string or a Style subclass
            (default: "default"). Not used by e.g. the
            TerminalFormatter.
        ``full``
            Tells the formatter to output a "full" document, i.e.
            a complete self-contained document. This doesn't have
            any effect for some formatters (default: false).
        ``title``
            If ``full`` is true, the title that should be used to
            caption the document (default: '').
        ``encoding``
            If given, must be an encoding name. This will be used to
            convert the Unicode token strings to byte strings in the
            output. If it is "" or None, Unicode strings will be written
            to the output file, which most file-like objects do not
            support (default: None).
        ``outencoding``
            Overrides ``encoding`` if given.
    
    """
    def __init__(self, **options):
        """
        'style'
        """
    def get_style_defs(self, arg=''):
        """

                Return the style definitions for the current style as a string.

                ``arg`` is an additional argument whose meaning depends on the
                formatter used. Note that ``arg`` can also be a list or tuple
                for some formatters like the html formatter.
        
        """
    def format(self, tokensource, outfile):
        """

                Format ``tokensource``, an iterable of ``(tokentype, tokenstring)``
                tuples and write it into ``outfile``.
        
        """
