    def _maybe_ord(element_type):
        """
         Only used in _raise_unkown_type below

        """
    def _elt_to_hex(element_type):
        """
        b"\x00
        """
    def _maybe_ord(element_type):
        """
        'Jython'
        """
    def get_data_and_view(data):
        """
        Unknown type helper.
        """
def _get_int(data, view, position, dummy0, dummy1, dummy2):
    """
    Decode a BSON int32 to python int.
    """
def _get_c_string(data, view, position, opts):
    """
    Decode a BSON 'C' string to python unicode string.
    """
def _get_float(data, view, position, dummy0, dummy1, dummy2):
    """
    Decode a BSON double to python float.
    """
def _get_string(data, view, position, obj_end, opts, dummy):
    """
    Decode a BSON string to python unicode string.
    """
def _get_object_size(data, position, obj_end):
    """
    Validate and return a BSON document's size.
    """
def _get_object(data, view, position, obj_end, opts, dummy):
    """
    Decode a BSON subdocument to opts.document_class or bson.dbref.DBRef.
    """
def _get_array(data, view, position, obj_end, opts, element_name):
    """
    Decode a BSON array to python list.
    """
def _get_binary(data, view, position, obj_end, opts, dummy1):
    """
    Decode a BSON binary to bson.binary.Binary or python UUID.
    """
def _get_oid(data, view, position, dummy0, dummy1, dummy2):
    """
    Decode a BSON ObjectId to bson.objectid.ObjectId.
    """
def _get_boolean(data, view, position, dummy0, dummy1, dummy2):
    """
    Decode a BSON true/false to python True/False.
    """
def _get_date(data, view, position, dummy0, opts, dummy1):
    """
    Decode a BSON datetime to python datetime.datetime.
    """
def _get_code(data, view, position, obj_end, opts, element_name):
    """
    Decode a BSON code to bson.code.Code.
    """
def _get_code_w_scope(data, view, position, obj_end, opts, element_name):
    """
    Decode a BSON code_w_scope to bson.code.Code.
    """
def _get_regex(data, view, position, dummy0, opts, dummy1):
    """
    Decode a BSON regex to bson.regex.Regex or a python pattern object.
    """
def _get_ref(data, view, position, obj_end, opts, element_name):
    """
    Decode (deprecated) BSON DBPointer to bson.dbref.DBRef.
    """
def _get_timestamp(data, view, position, dummy0, dummy1, dummy2):
    """
    Decode a BSON timestamp to bson.timestamp.Timestamp.
    """
def _get_int64(data, view, position, dummy0, dummy1, dummy2):
    """
    Decode a BSON int64 to bson.int64.Int64.
    """
def _get_decimal128(data, view, position, dummy0, dummy1, dummy2):
    """
    Decode a BSON decimal128 to bson.decimal128.Decimal128.
    """
    def _element_to_dict(data, view, position, obj_end, opts):
        """
        Decode a single key, value pair.
        """
def _raw_to_dict(data, position, obj_end, opts, result):
    """
    Decode a BSON document into result.
    """
def _bson_to_dict(data, opts):
    """
    Decode a BSON string to document_class.
    """
def gen_list_name():
    """
    Generate "keys" for encoded lists in the sequence
        b"0\x00", b"1\x00", b"2\x00", ...

        The first 1000 keys are returned from a pre-built cache. All
        subsequent keys are generated on the fly.
    
    """
def _make_c_string_check(string):
    """
    Make a 'C' string, checking for embedded NUL characters.
    """
def _make_c_string(string):
    """
    Make a 'C' string.
    """
    def _make_name(string):
        """
        Make a 'C' string suitable for a BSON key.
        """
def _encode_float(name, value, dummy0, dummy1):
    """
    Encode a float.
    """
    def _encode_bytes(name, value, dummy0, dummy1):
        """
        Encode a python bytes.
        """
    def _encode_bytes(name, value, dummy0, dummy1):
        """
        Encode a python str (python 2.x).
        """
def _encode_mapping(name, value, check_keys, opts):
    """
    Encode a mapping type.
    """
def _encode_dbref(name, value, check_keys, opts):
    """
    Encode bson.dbref.DBRef.
    """
def _encode_list(name, value, check_keys, opts):
    """
    Encode a list/tuple.
    """
def _encode_text(name, value, dummy0, dummy1):
    """
    Encode a python unicode (python 2.x) / str (python 3.x).
    """
def _encode_binary(name, value, dummy0, dummy1):
    """
    Encode bson.binary.Binary.
    """
def _encode_uuid(name, value, dummy, opts):
    """
    Encode uuid.UUID.
    """
def _encode_objectid(name, value, dummy0, dummy1):
    """
    Encode bson.objectid.ObjectId.
    """
def _encode_bool(name, value, dummy0, dummy1):
    """
    Encode a python boolean (True/False).
    """
def _encode_datetime(name, value, dummy0, dummy1):
    """
    Encode datetime.datetime.
    """
def _encode_none(name, dummy0, dummy1, dummy2):
    """
    Encode python None.
    """
def _encode_regex(name, value, dummy0, dummy1):
    """
    Encode a python regex or bson.regex.Regex.
    """
def _encode_code(name, value, dummy, opts):
    """
    Encode bson.code.Code.
    """
def _encode_int(name, value, dummy0, dummy1):
    """
    Encode a python int.
    """
def _encode_timestamp(name, value, dummy0, dummy1):
    """
    Encode bson.timestamp.Timestamp.
    """
def _encode_long(name, value, dummy0, dummy1):
    """
    Encode a python long (python 2.x)
    """
def _encode_decimal128(name, value, dummy0, dummy1):
    """
    Encode bson.decimal128.Decimal128.
    """
def _encode_minkey(name, dummy0, dummy1, dummy2):
    """
    Encode bson.min_key.MinKey.
    """
def _encode_maxkey(name, dummy0, dummy1, dummy2):
    """
    Encode bson.max_key.MaxKey.
    """
2021-03-02 20:47:01,325 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:47:01,325 : INFO : tokenize_signature : --> do i ever get here?
def _name_value_to_bson(name, value, check_keys, opts,
                        in_custom_call=False,
                        in_fallback_call=False):
    """
    Encode a single name, value pair.
    """
def _element_to_bson(key, value, check_keys, opts):
    """
    Encode a single key, value pair.
    """
def _dict_to_bson(doc, check_keys, opts, top_level=True):
    """
    Encode a document to BSON.
    """
def _millis_to_datetime(millis, opts):
    """
    Convert milliseconds since epoch UTC to datetime.
    """
def _datetime_to_millis(dtm):
    """
    Convert datetime to milliseconds since epoch UTC.
    """
def encode(document, check_keys=False, codec_options=DEFAULT_CODEC_OPTIONS):
    """
    Encode a document to BSON.

        A document can be any mapping type (like :class:`dict`).

        Raises :class:`TypeError` if `document` is not a mapping type,
        or contains keys that are not instances of
        :class:`basestring` (:class:`str` in python 3). Raises
        :class:`~bson.errors.InvalidDocument` if `document` cannot be
        converted to :class:`BSON`.

        :Parameters:
          - `document`: mapping type representing a document
          - `check_keys` (optional): check if keys start with '$' or
            contain '.', raising :class:`~bson.errors.InvalidDocument` in
            either case
          - `codec_options` (optional): An instance of
            :class:`~bson.codec_options.CodecOptions`.

        .. versionadded:: 3.9
    
    """
def decode(data, codec_options=DEFAULT_CODEC_OPTIONS):
    """
    Decode BSON to a document.

        By default, returns a BSON document represented as a Python
        :class:`dict`. To use a different :class:`MutableMapping` class,
        configure a :class:`~bson.codec_options.CodecOptions`::

            >>> import collections  # From Python standard library.
            >>> import bson
            >>> from bson.codec_options import CodecOptions
            >>> data = bson.encode({'a': 1})
            >>> decoded_doc = bson.decode(data)
            <type 'dict'>
            >>> options = CodecOptions(document_class=collections.OrderedDict)
            >>> decoded_doc = bson.decode(data, codec_options=options)
            >>> type(decoded_doc)
            <class 'collections.OrderedDict'>

        :Parameters:
          - `data`: the BSON to decode. Any bytes-like object that implements
            the buffer protocol.
          - `codec_options` (optional): An instance of
            :class:`~bson.codec_options.CodecOptions`.

        .. versionadded:: 3.9
    
    """
def decode_all(data, codec_options=DEFAULT_CODEC_OPTIONS):
    """
    Decode BSON data to multiple documents.

        `data` must be a bytes-like object implementing the buffer protocol that
        provides concatenated, valid, BSON-encoded documents.

        :Parameters:
          - `data`: BSON data
          - `codec_options` (optional): An instance of
            :class:`~bson.codec_options.CodecOptions`.

        .. versionchanged:: 3.9
           Supports bytes-like objects that implement the buffer protocol.

        .. versionchanged:: 3.0
           Removed `compile_re` option: PyMongo now always represents BSON regular
           expressions as :class:`~bson.regex.Regex` objects. Use
           :meth:`~bson.regex.Regex.try_compile` to attempt to convert from a
           BSON regular expression to a Python regular expression object.

           Replaced `as_class`, `tz_aware`, and `uuid_subtype` options with
           `codec_options`.

        .. versionchanged:: 2.7
           Added `compile_re` option. If set to False, PyMongo represented BSON
           regular expressions as :class:`~bson.regex.Regex` objects instead of
           attempting to compile BSON regular expressions as Python native
           regular expressions, thus preventing errors for some incompatible
           patterns, see `PYTHON-500`_.

        .. _PYTHON-500: https://jira.mongodb.org/browse/PYTHON-500
    
    """
def _decode_selective(rawdoc, fields, codec_options):
    """
     If document_class is RawBSONDocument, use vanilla dictionary for
     decoding command response.

    """
def _decode_all_selective(data, codec_options, fields):
    """
    Decode BSON data to a single document while using user-provided
        custom decoding logic.

        `data` must be a string representing a valid, BSON-encoded document.

        :Parameters:
          - `data`: BSON data
          - `codec_options`: An instance of
            :class:`~bson.codec_options.CodecOptions` with user-specified type
            decoders. If no decoders are found, this method is the same as
            ``decode_all``.
          - `fields`: Map of document namespaces where data that needs
            to be custom decoded lives or None. For example, to custom decode a
            list of objects in 'field1.subfield1', the specified value should be
            ``{'field1': {'subfield1': 1}}``. If ``fields``  is an empty map or
            None, this method is the same as ``decode_all``.

        :Returns:
          - `document_list`: Single-member list containing the decoded document.

        .. versionadded:: 3.8
    
    """
def decode_iter(data, codec_options=DEFAULT_CODEC_OPTIONS):
    """
    Decode BSON data to multiple documents as a generator.

        Works similarly to the decode_all function, but yields one document at a
        time.

        `data` must be a string of concatenated, valid, BSON-encoded
        documents.

        :Parameters:
          - `data`: BSON data
          - `codec_options` (optional): An instance of
            :class:`~bson.codec_options.CodecOptions`.

        .. versionchanged:: 3.0
           Replaced `as_class`, `tz_aware`, and `uuid_subtype` options with
           `codec_options`.

        .. versionadded:: 2.8
    
    """
def decode_file_iter(file_obj, codec_options=DEFAULT_CODEC_OPTIONS):
    """
    Decode bson data from a file to multiple documents as a generator.

        Works similarly to the decode_all function, but reads from the file object
        in chunks and parses bson in chunks, yielding one document at a time.

        :Parameters:
          - `file_obj`: A file object containing BSON data.
          - `codec_options` (optional): An instance of
            :class:`~bson.codec_options.CodecOptions`.

        .. versionchanged:: 3.0
           Replaced `as_class`, `tz_aware`, and `uuid_subtype` options with
           `codec_options`.

        .. versionadded:: 2.8
    
    """
def is_valid(bson):
    """
    Check that the given string represents valid :class:`BSON` data.

        Raises :class:`TypeError` if `bson` is not an instance of
        :class:`str` (:class:`bytes` in python 3). Returns ``True``
        if `bson` is valid :class:`BSON`, ``False`` otherwise.

        :Parameters:
          - `bson`: the data to be validated
    
    """
def BSON(bytes):
    """
    BSON (Binary JSON) data.

        .. warning:: Using this class to encode and decode BSON adds a performance
           cost. For better performance use the module level functions
           :func:`encode` and :func:`decode` instead.
    
    """
2021-03-02 20:47:01,332 : INFO : tokenize_signature : --> do i ever get here?
    def encode(cls, document, check_keys=False,
               codec_options=DEFAULT_CODEC_OPTIONS):
        """
        Encode a document to a new :class:`BSON` instance.

                A document can be any mapping type (like :class:`dict`).

                Raises :class:`TypeError` if `document` is not a mapping type,
                or contains keys that are not instances of
                :class:`basestring` (:class:`str` in python 3). Raises
                :class:`~bson.errors.InvalidDocument` if `document` cannot be
                converted to :class:`BSON`.

                :Parameters:
                  - `document`: mapping type representing a document
                  - `check_keys` (optional): check if keys start with '$' or
                    contain '.', raising :class:`~bson.errors.InvalidDocument` in
                    either case
                  - `codec_options` (optional): An instance of
                    :class:`~bson.codec_options.CodecOptions`.

                .. versionchanged:: 3.0
                   Replaced `uuid_subtype` option with `codec_options`.
        
        """
    def decode(self, codec_options=DEFAULT_CODEC_OPTIONS):
        """
        Decode this BSON data.

                By default, returns a BSON document represented as a Python
                :class:`dict`. To use a different :class:`MutableMapping` class,
                configure a :class:`~bson.codec_options.CodecOptions`::

                    >>> import collections  # From Python standard library.
                    >>> import bson
                    >>> from bson.codec_options import CodecOptions
                    >>> data = bson.BSON.encode({'a': 1})
                    >>> decoded_doc = bson.BSON(data).decode()
                    <type 'dict'>
                    >>> options = CodecOptions(document_class=collections.OrderedDict)
                    >>> decoded_doc = bson.BSON(data).decode(codec_options=options)
                    >>> type(decoded_doc)
                    <class 'collections.OrderedDict'>

                :Parameters:
                  - `codec_options` (optional): An instance of
                    :class:`~bson.codec_options.CodecOptions`.

                .. versionchanged:: 3.0
                   Removed `compile_re` option: PyMongo now always represents BSON
                   regular expressions as :class:`~bson.regex.Regex` objects. Use
                   :meth:`~bson.regex.Regex.try_compile` to attempt to convert from a
                   BSON regular expression to a Python regular expression object.

                   Replaced `as_class`, `tz_aware`, and `uuid_subtype` options with
                   `codec_options`.

                .. versionchanged:: 2.7
                   Added `compile_re` option. If set to False, PyMongo represented BSON
                   regular expressions as :class:`~bson.regex.Regex` objects instead of
                   attempting to compile BSON regular expressions as Python native
                   regular expressions, thus preventing errors for some incompatible
                   patterns, see `PYTHON-500`_.

                .. _PYTHON-500: https://jira.mongodb.org/browse/PYTHON-500
        
        """
def has_c():
    """
    Is the C extension installed?
    
    """
