def _raw_document_class(document_class):
    """
    Determine if a document_class is a RawBSONDocument class.
    """
def TypeEncoder(ABC):
    """
    Base class for defining type codec classes which describe how a
        custom type can be transformed to one of the types BSON understands.

        Codec classes must implement the ``python_type`` attribute, and the
        ``transform_python`` method to support encoding.

        See :ref:`custom-type-type-codec` documentation for an example.
    
    """
    def python_type(self):
        """
        The Python type to be converted into something serializable.
        """
    def transform_python(self, value):
        """
        Convert the given Python object into something serializable.
        """
def TypeDecoder(ABC):
    """
    Base class for defining type codec classes which describe how a
        BSON type can be transformed to a custom type.

        Codec classes must implement the ``bson_type`` attribute, and the
        ``transform_bson`` method to support decoding.

        See :ref:`custom-type-type-codec` documentation for an example.
    
    """
    def bson_type(self):
        """
        The BSON type to be converted into our own type.
        """
    def transform_bson(self, value):
        """
        Convert the given BSON value into our own type.
        """
def TypeCodec(TypeEncoder, TypeDecoder):
    """
    Base class for defining type codec classes which describe how a
        custom type can be transformed to/from one of the types :mod:`bson`
        can already encode/decode.

        Codec classes must implement the ``python_type`` attribute, and the
        ``transform_python`` method to support encoding, as well as the
        ``bson_type`` attribute, and the ``transform_bson`` method to support
        decoding.

        See :ref:`custom-type-type-codec` documentation for an example.
    
    """
def TypeRegistry(object):
    """
    Encapsulates type codecs used in encoding and / or decoding BSON, as
        well as the fallback encoder. Type registries cannot be modified after
        instantiation.

        ``TypeRegistry`` can be initialized with an iterable of type codecs, and
        a callable for the fallback encoder::

          >>> from bson.codec_options import TypeRegistry
          >>> type_registry = TypeRegistry([Codec1, Codec2, Codec3, ...],
          ...                              fallback_encoder)

        See :ref:`custom-type-type-registry` documentation for an example.

        :Parameters:
          - `type_codecs` (optional): iterable of type codec instances. If
            ``type_codecs`` contains multiple codecs that transform a single
            python or BSON type, the transformation specified by the type codec
            occurring last prevails. A TypeError will be raised if one or more
            type codecs modify the encoding behavior of a built-in :mod:`bson`
            type.
          - `fallback_encoder` (optional): callable that accepts a single,
            unencodable python value and transforms it into a type that
            :mod:`bson` can encode. See :ref:`fallback-encoder-callable`
            documentation for an example.
    
    """
    def __init__(self, type_codecs=None, fallback_encoder=None):
        """
        fallback_encoder %r is not a callable
        """
    def _validate_type_encoder(self, codec):
        """
        TypeEncoders cannot change how built-in types are 
        encoded (encoder %s transforms type %s)
        """
    def __repr__(self):
        """
        '%s(type_codecs=%r, fallback_encoder=%r)'
        """
    def __eq__(self, other):
        """
        'CodecOptions'
        """
def CodecOptions(_options_base):
    """
    Encapsulates options used encoding and / or decoding BSON.

        The `document_class` option is used to define a custom type for use
        decoding BSON documents. Access to the underlying raw BSON bytes for
        a document is available using the :class:`~bson.raw_bson.RawBSONDocument`
        type::

          >>> from bson.raw_bson import RawBSONDocument
          >>> from bson.codec_options import CodecOptions
          >>> codec_options = CodecOptions(document_class=RawBSONDocument)
          >>> coll = db.get_collection('test', codec_options=codec_options)
          >>> doc = coll.find_one()
          >>> doc.raw
          '\\x16\\x00\\x00\\x00\\x07_id\\x00[0\\x165\\x91\\x10\\xea\\x14\\xe8\\xc5\\x8b\\x93\\x00'

        The document class can be any type that inherits from
        :class:`~collections.MutableMapping`::

          >>> class AttributeDict(dict):
          ...     # A dict that supports attribute access.
          ...     def __getattr__(self, key):
          ...         return self[key]
          ...     def __setattr__(self, key, value):
          ...         self[key] = value
          ...
          >>> codec_options = CodecOptions(document_class=AttributeDict)
          >>> coll = db.get_collection('test', codec_options=codec_options)
          >>> doc = coll.find_one()
          >>> doc._id
          ObjectId('5b3016359110ea14e8c58b93')

        See :doc:`/examples/datetimes` for examples using the `tz_aware` and
        `tzinfo` options.

        See :class:`~bson.binary.UUIDLegacy` for examples using the
        `uuid_representation` option.

        :Parameters:
          - `document_class`: BSON documents returned in queries will be decoded
            to an instance of this class. Must be a subclass of
            :class:`~collections.MutableMapping`. Defaults to :class:`dict`.
          - `tz_aware`: If ``True``, BSON datetimes will be decoded to timezone
            aware instances of :class:`~datetime.datetime`. Otherwise they will be
            naive. Defaults to ``False``.
          - `uuid_representation`: The BSON representation to use when encoding
            and decoding instances of :class:`~uuid.UUID`. Defaults to
            :data:`~bson.binary.UuidRepresentation.PYTHON_LEGACY`. New
            applications should consider setting this to
            :data:`~bson.binary.UuidRepresentation.STANDARD` for cross language
            compatibility. See :ref:`handling-uuid-data-example` for details.
          - `unicode_decode_error_handler`: The error handler to apply when
            a Unicode-related error occurs during BSON decoding that would
            otherwise raise :exc:`UnicodeDecodeError`. Valid options include
            'strict', 'replace', and 'ignore'. Defaults to 'strict'.
          - `tzinfo`: A :class:`~datetime.tzinfo` subclass that specifies the
            timezone to/from which :class:`~datetime.datetime` objects should be
            encoded/decoded.
          - `type_registry`: Instance of :class:`TypeRegistry` used to customize
            encoding and decoding behavior.

        .. versionadded:: 3.8
           `type_registry` attribute.

        .. warning:: Care must be taken when changing
           `unicode_decode_error_handler` from its default value ('strict').
           The 'replace' and 'ignore' modes should not be used when documents
           retrieved from the server will be modified in the client application
           and stored back to the server.
    
    """
2021-03-02 20:47:02,748 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:47:02,748 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:47:02,749 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:47:02,749 : INFO : tokenize_signature : --> do i ever get here?
    def __new__(cls, document_class=dict,
                tz_aware=False,
                uuid_representation=None,
                unicode_decode_error_handler="strict",
                tzinfo=None, type_registry=None):
        """
        document_class must be dict, bson.son.SON, 
        bson.raw_bson.RawBSONDocument, or a 
        sublass of collections.MutableMapping
        """
    def _arguments_repr(self):
        """
        Representation of the arguments used to create this object.
        """
    def _options_dict(self):
        """
        Dictionary of the arguments used to create this object.
        """
    def __repr__(self):
        """
        '%s(%s)'
        """
    def with_options(self, **kwargs):
        """
        Make a copy of this CodecOptions, overriding some options::

                    >>> from bson.codec_options import DEFAULT_CODEC_OPTIONS
                    >>> DEFAULT_CODEC_OPTIONS.tz_aware
                    False
                    >>> options = DEFAULT_CODEC_OPTIONS.with_options(tz_aware=True)
                    >>> options.tz_aware
                    True

                .. versionadded:: 3.5
        
        """
def _parse_codec_options(options):
    """
    Parse BSON codec options.
    """
