    def _from_bytes(value, dummy, _int=int, _hexlify=binascii.hexlify):
        """
        An implementation of int.from_bytes for python 2.x.
        """
def create_decimal128_context():
    """
    Returns an instance of :class:`decimal.Context` appropriate
        for working with IEEE-754 128-bit decimal floating point values.
    
    """
def _decimal_to_128(value):
    """
    Converts a decimal.Decimal to BID (high bits, low bits).

        :Parameters:
          - `value`: An instance of decimal.Decimal
    
    """
def Decimal128(object):
    """
    BSON Decimal128 type::

          >>> Decimal128(Decimal("0.0005"))
          Decimal128('0.0005')
          >>> Decimal128("0.0005")
          Decimal128('0.0005')
          >>> Decimal128((3474527112516337664, 5))
          Decimal128('0.0005')

        :Parameters:
          - `value`: An instance of :class:`decimal.Decimal`, string, or tuple of
            (high bits, low bits) from Binary Integer Decimal (BID) format.

        .. note:: :class:`~Decimal128` uses an instance of :class:`decimal.Context`
          configured for IEEE-754 Decimal128 when validating parameters.
          Signals like :class:`decimal.InvalidOperation`, :class:`decimal.Inexact`,
          and :class:`decimal.Overflow` are trapped and raised as exceptions::

            >>> Decimal128(".13.1")
            Traceback (most recent call last):
              File "<stdin>", line 1, in <module>
              ...
            decimal.InvalidOperation: [<class 'decimal.ConversionSyntax'>]
            >>>
            >>> Decimal128("1E-6177")
            Traceback (most recent call last):
              File "<stdin>", line 1, in <module>
              ...
            decimal.Inexact: [<class 'decimal.Inexact'>]
            >>>
            >>> Decimal128("1E6145")
            Traceback (most recent call last):
              File "<stdin>", line 1, in <module>
              ...
            decimal.Overflow: [<class 'decimal.Overflow'>, <class 'decimal.Rounded'>]

          To ensure the result of a calculation can always be stored as BSON
          Decimal128 use the context returned by
          :func:`create_decimal128_context`::

            >>> import decimal
            >>> decimal128_ctx = create_decimal128_context()
            >>> with decimal.localcontext(decimal128_ctx) as ctx:
            ...     Decimal128(ctx.create_decimal(".13.3"))
            ...
            Decimal128('NaN')
            >>>
            >>> with decimal.localcontext(decimal128_ctx) as ctx:
            ...     Decimal128(ctx.create_decimal("1E-6177"))
            ...
            Decimal128('0E-6176')
            >>>
            >>> with decimal.localcontext(DECIMAL128_CTX) as ctx:
            ...     Decimal128(ctx.create_decimal("1E6145"))
            ...
            Decimal128('Infinity')

          To match the behavior of MongoDB's Decimal128 implementation
          str(Decimal(value)) may not match str(Decimal128(value)) for NaN values::

            >>> Decimal128(Decimal('NaN'))
            Decimal128('NaN')
            >>> Decimal128(Decimal('-NaN'))
            Decimal128('NaN')
            >>> Decimal128(Decimal('sNaN'))
            Decimal128('NaN')
            >>> Decimal128(Decimal('-sNaN'))
            Decimal128('NaN')

          However, :meth:`~Decimal128.to_decimal` will return the exact value::

            >>> Decimal128(Decimal('NaN')).to_decimal()
            Decimal('NaN')
            >>> Decimal128(Decimal('-NaN')).to_decimal()
            Decimal('-NaN')
            >>> Decimal128(Decimal('sNaN')).to_decimal()
            Decimal('sNaN')
            >>> Decimal128(Decimal('-sNaN')).to_decimal()
            Decimal('-sNaN')

          Two instances of :class:`Decimal128` compare equal if their Binary
          Integer Decimal encodings are equal::

            >>> Decimal128('NaN') == Decimal128('NaN')
            True
            >>> Decimal128('NaN').bid == Decimal128('NaN').bid
            True

          This differs from :class:`decimal.Decimal` comparisons for NaN::

            >>> Decimal('NaN') == Decimal('NaN')
            False
    
    """
    def __init__(self, value):
        """
        'Invalid size for creation of Decimal128 '
        'from list or tuple. Must have exactly 2 '
        'elements.'
        """
    def to_decimal(self):
        """
        Returns an instance of :class:`decimal.Decimal` for this
                :class:`Decimal128`.
        
        """
    def from_bid(cls, value):
        """
        Create an instance of :class:`Decimal128` from Binary Integer
                Decimal string.

                :Parameters:
                  - `value`: 16 byte string (128-bit IEEE 754-2008 decimal floating
                    point in Binary Integer Decimal (BID) format).
        
        """
    def bid(self):
        """
        The Binary Integer Decimal (BID) encoding of this instance.
        """
    def __str__(self):
        """
         Required by the drivers spec to match MongoDB behavior.

        """
    def __repr__(self):
        """
        Decimal128('%s')
        """
    def __setstate__(self, value):
