def SON(dict):
    """
    SON data.

        A subclass of dict that maintains ordering of keys and provides a
        few extra niceties for dealing with SON. SON provides an API
        similar to collections.OrderedDict from Python 2.7+.
    
    """
    def __init__(self, data=None, **kwargs):
        """
        (%r, %r)
        """
    def __setitem__(self, key, value):
        """
         TODO this is all from UserDict.DictMixin. it could probably be made more
         efficient.
         second level definitions support higher levels

        """
    def __iter__(self):
        """
         third level takes advantage of second level definitions

        """
    def iteritems(self):
        """
         fourth level uses definitions from lower levels

        """
    def itervalues(self):
        """
        pop expected at most 2 arguments, got 
        """
    def popitem(self):
        """
        'container is empty'
        """
    def update(self, other=None, **kwargs):
        """
         Make progressively weaker assumptions about "other

        """
    def get(self, key, default=None):
        """
        Comparison to another SON is order-sensitive while comparison to a
                regular dictionary is order-insensitive.
        
        """
    def __ne__(self, other):
        """
        Convert a SON document to a normal Python dictionary instance.

                This is trickier than just *dict(...)* because it needs to be
                recursive.
        
        """
        def transform_value(value):
