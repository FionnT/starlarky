def DatetimeRepresentation:
    """
    Legacy MongoDB Extended JSON datetime representation.

        :class:`datetime.datetime` instances will be encoded to JSON in the
        format `{"$date": <dateAsMilliseconds>}`, where `dateAsMilliseconds` is
        a 64-bit signed integer giving the number of milliseconds since the Unix
        epoch UTC. This was the default encoding before PyMongo version 3.4.

        .. versionadded:: 3.4
    
    """
def JSONMode:
    """
    Legacy Extended JSON representation.

        In this mode, :func:`~bson.json_util.dumps` produces PyMongo's legacy
        non-standard JSON output. Consider using
        :const:`~bson.json_util.JSONMode.RELAXED` or
        :const:`~bson.json_util.JSONMode.CANONICAL` instead.

        .. versionadded:: 3.5
    
    """
def JSONOptions(CodecOptions):
    """
    Encapsulates JSON options for :func:`dumps` and :func:`loads`.

        :Parameters:
          - `strict_number_long`: If ``True``, :class:`~bson.int64.Int64` objects
            are encoded to MongoDB Extended JSON's *Strict mode* type
            `NumberLong`, ie ``'{"$numberLong": "<number>" }'``. Otherwise they
            will be encoded as an `int`. Defaults to ``False``.
          - `datetime_representation`: The representation to use when encoding
            instances of :class:`datetime.datetime`. Defaults to
            :const:`~DatetimeRepresentation.LEGACY`.
          - `strict_uuid`: If ``True``, :class:`uuid.UUID` object are encoded to
            MongoDB Extended JSON's *Strict mode* type `Binary`. Otherwise it
            will be encoded as ``'{"$uuid": "<hex>" }'``. Defaults to ``False``.
          - `json_mode`: The :class:`JSONMode` to use when encoding BSON types to
            Extended JSON. Defaults to :const:`~JSONMode.LEGACY`.
          - `document_class`: BSON documents returned by :func:`loads` will be
            decoded to an instance of this class. Must be a subclass of
            :class:`collections.MutableMapping`. Defaults to :class:`dict`.
          - `uuid_representation`: The :class:`~bson.binary.UuidRepresentation`
            to use when encoding and decoding instances of :class:`uuid.UUID`.
            Defaults to :const:`~bson.binary.UuidRepresentation.PYTHON_LEGACY`.
          - `tz_aware`: If ``True``, MongoDB Extended JSON's *Strict mode* type
            `Date` will be decoded to timezone aware instances of
            :class:`datetime.datetime`. Otherwise they will be naive. Defaults
            to ``True``.
          - `tzinfo`: A :class:`datetime.tzinfo` subclass that specifies the
            timezone from which :class:`~datetime.datetime` objects should be
            decoded. Defaults to :const:`~bson.tz_util.utc`.
          - `args`: arguments to :class:`~bson.codec_options.CodecOptions`
          - `kwargs`: arguments to :class:`~bson.codec_options.CodecOptions`

        .. seealso:: The specification for Relaxed and Canonical `Extended JSON`_.

        .. versionadded:: 3.4

        .. versionchanged:: 3.5
           Accepts the optional parameter `json_mode`.

    
    """
2021-03-02 20:47:01,680 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:47:01,680 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:47:01,680 : INFO : tokenize_signature : --> do i ever get here?
    def __new__(cls, strict_number_long=False,
                datetime_representation=DatetimeRepresentation.LEGACY,
                strict_uuid=False, json_mode=JSONMode.LEGACY,
                *args, **kwargs):
        """
        tz_aware
        """
    def _arguments_repr(self):
        """
        'strict_number_long=%r, '
        'datetime_representation=%r, '
        'strict_uuid=%r, json_mode=%r, %s'
        """
    def _options_dict(self):
        """
         TODO: PYTHON-2442 use _asdict() instead

        """
    def with_options(self, **kwargs):
        """

                Make a copy of this JSONOptions, overriding some options::

                    >>> from bson.json_util import CANONICAL_JSON_OPTIONS
                    >>> CANONICAL_JSON_OPTIONS.tz_aware
                    True
                    >>> json_options = CANONICAL_JSON_OPTIONS.with_options(tz_aware=False)
                    >>> json_options.tz_aware
                    False

                .. versionadded:: 3.12
        
        """
def dumps(obj, *args, **kwargs):
    """
    Helper function that wraps :func:`json.dumps`.

        Recursive function that handles all BSON types including
        :class:`~bson.binary.Binary` and :class:`~bson.code.Code`.

        :Parameters:
          - `json_options`: A :class:`JSONOptions` instance used to modify the
            encoding of MongoDB Extended JSON types. Defaults to
            :const:`DEFAULT_JSON_OPTIONS`.

        .. versionchanged:: 3.4
           Accepts optional parameter `json_options`. See :class:`JSONOptions`.

        .. versionchanged:: 2.7
           Preserves order when rendering SON, Timestamp, Code, Binary, and DBRef
           instances.
    
    """
def loads(s, *args, **kwargs):
    """
    Helper function that wraps :func:`json.loads`.

        Automatically passes the object_hook for BSON type conversion.

        Raises ``TypeError``, ``ValueError``, ``KeyError``, or
        :exc:`~bson.errors.InvalidId` on invalid MongoDB Extended JSON.

        :Parameters:
          - `json_options`: A :class:`JSONOptions` instance used to modify the
            decoding of MongoDB Extended JSON types. Defaults to
            :const:`DEFAULT_JSON_OPTIONS`.

        .. versionchanged:: 3.5
           Parses Relaxed and Canonical Extended JSON as well as PyMongo's legacy
           format. Now raises ``TypeError`` or ``ValueError`` when parsing JSON
           type wrappers with values of the wrong type or any extra keys.

        .. versionchanged:: 3.4
           Accepts optional parameter `json_options`. See :class:`JSONOptions`.
    
    """
def _json_convert(obj, json_options=DEFAULT_JSON_OPTIONS):
    """
    Recursive helper method that converts BSON types so they can be
        converted into json.
    
    """
def object_pairs_hook(pairs, json_options=DEFAULT_JSON_OPTIONS):
    """
    $oid
    """
def _parse_legacy_regex(doc):
    """
    $regex
    """
def _parse_legacy_uuid(doc, json_options):
    """
    Decode a JSON legacy $uuid to Python UUID.
    """
def _binary_or_uuid(data, subtype, json_options):
    """
     special handling for UUID

    """
def _parse_legacy_binary(doc, json_options):
    """
    $type
    """
def _parse_canonical_binary(doc, json_options):
    """
    $binary
    """
def _parse_canonical_datetime(doc, json_options):
    """
    Decode a JSON datetime to python datetime.datetime.
    """
def _parse_canonical_oid(doc):
    """
    Decode a JSON ObjectId to bson.objectid.ObjectId.
    """
def _parse_canonical_symbol(doc):
    """
    Decode a JSON symbol to Python string.
    """
def _parse_canonical_code(doc):
    """
    Decode a JSON code to bson.code.Code.
    """
def _parse_canonical_regex(doc):
    """
    Decode a JSON regex to bson.regex.Regex.
    """
def _parse_canonical_dbref(doc):
    """
    Decode a JSON DBRef to bson.dbref.DBRef.
    """
def _parse_canonical_dbpointer(doc):
    """
    Decode a JSON (deprecated) DBPointer to bson.dbref.DBRef.
    """
def _parse_canonical_int32(doc):
    """
    Decode a JSON int32 to python int.
    """
def _parse_canonical_int64(doc):
    """
    Decode a JSON int64 to bson.int64.Int64.
    """
def _parse_canonical_double(doc):
    """
    Decode a JSON double to python float.
    """
def _parse_canonical_decimal128(doc):
    """
    Decode a JSON decimal128 to bson.decimal128.Decimal128.
    """
def _parse_canonical_minkey(doc):
    """
    Decode a JSON MinKey to bson.min_key.MinKey.
    """
def _parse_canonical_maxkey(doc):
    """
    Decode a JSON MaxKey to bson.max_key.MaxKey.
    """
def _encode_binary(data, subtype, json_options):
    """
    '$binary'
    """
def default(obj, json_options=DEFAULT_JSON_OPTIONS):
    """
     We preserve key order when rendering SON, DBRef, etc. as JSON by
     returning a SON for those types instead of a dict.

    """
