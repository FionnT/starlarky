def indent(instr,nspaces=4, ntabs=0, flatten=False):
    """
    Indent a string a given number of spaces or tabstops.

        indent(str,nspaces=4,ntabs=0) -> indent str by ntabs+nspaces.

        Parameters
        ----------

        instr : basestring
            The string to be indented.
        nspaces : int (default: 4)
            The number of spaces to be indented.
        ntabs : int (default: 0)
            The number of tabs to be indented.
        flatten : bool (default: False)
            Whether to scrub existing indentation.  If True, all lines will be
            aligned to the same indentation.  If False, existing indentation will
            be strictly increased.

        Returns
        -------

        str|unicode : string indented by ntabs and nspaces.

    
    """
def dedent(text):
    """
    Equivalent of textwrap.dedent that ignores unindented first line.

        This means it will still dedent strings like:
        '''foo
        is a bar
        '''

        For use in wrap_paragraphs.
    
    """
def wrap_paragraphs(text, ncols=80):
    """
    Wrap multiple paragraphs to fit a specified width.

        This is equivalent to textwrap.wrap, but with support for multiple
        paragraphs, as separated by empty lines.

        Returns
        -------

        list of complete paragraphs, wrapped to fill `ncols` columns.
    
    """
def strip_ansi(source):
    """

        Remove ansi escape codes from text.
    
        Parameters
        ----------
        source : str
            Source to remove the ansi from
    
    """
def _chunks(l, n):
    """
    Yield successive n-sized chunks from l.
    """
def _find_optimal(rlist , separator_size=2 , displaywidth=80):
    """
    Calculate optimal info to columnize a list of string
    """
def _get_or_default(mylist, i, default=None):
    """
    return list item number, or default if don't exist
    """
def compute_item_matrix(items, empty=None, *args, **kwargs) :
    """
    Returns a nested list, and info to columnize items

        Parameters
        ----------

        items
            list of strings to columize
        empty : (default None)
            default value to fill list if needed
        separator_size : int (default=2)
            How much caracters will be used as a separation between each columns.
        displaywidth : int (default=80)
            The width of the area onto wich the columns should enter

        Returns
        -------

        strings_matrix

            nested list of string, the outer most list contains as many list as
            rows, the innermost lists have each as many element as colums. If the
            total number of elements in `items` does not equal the product of
            rows*columns, the last element of some lists are filled with `None`.

        dict_info
            some info to make columnize easier:

            columns_numbers
              number of columns
            rows_numbers
              number of rows
            columns_width
              list of with of each columns
            optimal_separator_width
              best separator width between columns

        Examples
        --------
        ::

            In [1]: l = ['aaa','b','cc','d','eeeee','f','g','h','i','j','k','l']
               ...: compute_item_matrix(l,displaywidth=12)
            Out[1]:
                ([['aaa', 'f', 'k'],
                ['b', 'g', 'l'],
                ['cc', 'h', None],
                ['d', 'i', None],
                ['eeeee', 'j', None]],
                {'columns_numbers': 3,
                'columns_width': [5, 1, 1],
                'optimal_separator_width': 2,
                'rows_numbers': 5})
    
    """
def columnize(items, separator='  ', displaywidth=80):
    """
     Transform a list of strings into a single string with columns.

        Parameters
        ----------
        items : sequence of strings
            The strings to process.

        separator : str, optional [default is two spaces]
            The string that separates columns.

        displaywidth : int, optional [default is 80]
            Width of the display in number of characters.

        Returns
        -------
        The formatted string.
    
    """
