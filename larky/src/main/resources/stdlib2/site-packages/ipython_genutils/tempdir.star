    def TemporaryDirectory(object):
    """
    Create and return a temporary directory.  This has the same
            behavior as mkdtemp but can be used as a context manager.  For
            example:

                with TemporaryDirectory() as tmpdir:
                    ...

            Upon exiting the context, the directory and everthing contained
            in it are removed.
        
    """
        def __init__(self, suffix="", prefix=template, dir=None):
            """
             Issue #10188: Emit a warning on stderr
             if the directory could not be cleaned
             up due to missing globals

            """
        def __exit__(self, exc, value, tb):
            """
             Issue a ResourceWarning if implicit cleanup needed

            """
        def _rmtree(self, path):
            """
             Essentially a stripped down version of shutil.rmtree.  We can't
             use globals because they may be None'ed out at shutdown.

            """
def NamedFileInTemporaryDirectory(object):
    """
    'w+b'
    """
    def cleanup(self):
        """

            Creates a temporary directory and sets the cwd to that directory.
            Automatically reverts to previous cwd upon cleanup.
            Usage example:

                with TemporaryWorkingDirectory() as tmpdir:
                    ...
    
        """
    def __enter__(self):
