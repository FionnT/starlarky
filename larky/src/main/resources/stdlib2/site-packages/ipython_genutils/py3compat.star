def no_code(x, encoding=None):
    """
    replace
    """
def encode(u, encoding=None):
    """
    replace
    """
def cast_unicode(s, encoding=None):
    """
    Cast a buffer or memoryview object to bytes
    """
def _modify_str_or_docstring(str_change_func):
    """
    unicode(e) with various fallbacks. Used for exceptions, which may not be
        safe to call unicode() on.
    
    """
def _shutil_which(cmd, mode=os.F_OK | os.X_OK, path=None):
    """
    Given a command, mode, and a PATH string, return the path which
        conforms to the given mode on the PATH, or None if there is no such
        file.

        `mode` defaults to os.F_OK | os.X_OK. `path` defaults to the result
        of os.environ.get("PATH"), or can be overridden with a custom search
        path.
    
        This is a backport of shutil.which from Python 3.4
    
    """
    def _access_check(fn, mode):
        """
         If we're given a path with a directory part, look it up directly rather
         than referring to PATH directories. This includes checking relative to the
         current directory, e.g. ./script

        """
    def input(prompt=''):
        """
        builtins
        """
    def isidentifier(s, dotted=False):
        """
        .
        """
    def iteritems(d): return iter(d.items())
        """
        'rb'
        """
    def _print_statement_sub(match):
        """
        'expr'
        """
    def doctest_refactor_print(doc):
        """
        Refactor 'print x' statements in a doctest to print(x) style. 2to3
                unfortunately doesn't pick up on our doctests.
        
                Can accept a string or a function, so it can be used as a decorator.
        """
    def u_format(s):
        """
        {u}'abc'" --> "'abc'" (Python 3)
        
                Accepts a string or a function, so it can be used as a decorator.
        """
    def get_closure(f):
        """
        Get a function's closure attribute
        """
    def input(prompt=''):
        """
        __builtin__
        """
    def isidentifier(s, dotted=False):
        """
        .
        """
    def iteritems(d): return d.iteritems()
        """
        Get a function's closure attribute
        """
    def u_format(s):
        """
        {u}'abc'" --> "u'abc'" (Python 2)
        
                Accepts a string or a function, so it can be used as a decorator.
        """
        def execfile(fname, glob=None, loc=None, compiler=None):
            """
            '\n'
            """
        def execfile(fname, glob=None, loc=None, compiler=None):
            """
            '\n'
            """
def annotate(**kwargs):
    """
    Python 3 compatible function annotation for Python 2.
    """
    def dec(f):
        """
        '__annotations__'
        """
def with_metaclass(meta, *bases):
    """
    Create a base class with a metaclass.
    """
