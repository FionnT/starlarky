def DocoptLanguageError(Exception):
    """
    Error in construction of usage-message by developer.
    """
def DocoptExit(SystemExit):
    """
    Exit in case user invoked program with incorrect arguments.
    """
    def __init__(self, message=''):
        """
        '\n'
        """
def Pattern(object):
    """
    Make pattern-tree tips point to same object if they are equal.
    """
    def fix_repeating_arguments(self):
        """
        Fix elements that should accumulate/increment values.
        """
    def either(self):
        """
        Transform pattern into an equivalent, with only top-level Either.
        """
def ChildPattern(Pattern):
    """
    '%s(%r, %r)'
    """
    def flat(self, *types):
        """
        '%s(%s)'
        """
    def flat(self, *types):
        """
        '(<\S*?>)'
        """
def Command(Argument):
    """
    '  '
    """
    def single_match(self, left):
        """
        'Option(%r, %r, %r, %r)'
        """
def Required(ParentPattern):
    """
    Marker/placeholder for [options] shortcut.
    """
def OneOrMore(ParentPattern):
    """
     could it be that something didn't match but changed l or c?

    """
def Either(ParentPattern):
    """
    'split'
    """
    def move(self):
        """
        long ::= '--' chars [ ( ' ' | '=' ) chars ] ;
        """
def parse_shorts(tokens, options):
    """
    shorts ::= '-' ( chars )* [ [ ' ' ] chars ] ;
    """
def parse_pattern(source, options):
    """
    r'([\[\]\(\)\|]|\.\.\.)'
    """
def parse_expr(tokens, options):
    """
    expr ::= seq ( '|' seq )* ;
    """
def parse_seq(tokens, options):
    """
    seq ::= ( atom [ '...' ] )* ;
    """
def parse_atom(tokens, options):
    """
    atom ::= '(' expr ')' | '[' expr ']' | 'options'
                 | long | shorts | argument | command ;
    
    """
def parse_argv(tokens, options, options_first=False):
    """
    Parse command-line argument vector.

        If options_first:
            argv ::= [ long | shorts ]* [ argument ]* [ '--' [ argument ]* ] ;
        else:
            argv ::= [ long | shorts | argument ]* [ '--' [ argument ]* ] ;

    
    """
def parse_defaults(doc):
    """
     in python < 2.7 you can't pass flags=re.MULTILINE

    """
def printable_usage(doc):
    """
     in python < 2.7 you can't pass flags=re.IGNORECASE

    """
def formal_usage(printable_usage):
    """
     split and drop "usage:
    """
def extras(help, version, options, doc):
    """
    '-h'
    """
def Dict(dict):
    """
    '{%s}'
    """
def docopt(doc, argv=None, help=True, version=None, options_first=False):
    """
    Parse `argv` based on command-line interface described in `doc`.

        `docopt` creates your command-line interface based on its
        description that you pass as `doc`. Such description can contain
        --options, <positional-argument>, commands, which could be
        [optional], (required), (mutually | exclusive) or repeated...

        Parameters
        ----------
        doc : str
            Description of your command-line interface.
        argv : list of str, optional
            Argument vector to be parsed. sys.argv[1:] is used if not
            provided.
        help : bool (default: True)
            Set to False to disable automatic help on -h or --help
            options.
        version : any object
            If passed, the object will be printed if --version is in
            `argv`.
        options_first : bool (default: False)
            Set to True to require options preceed positional arguments,
            i.e. to forbid options and positional arguments intermix.

        Returns
        -------
        args : dict
            A dictionary, where keys are names of command-line elements
            such as e.g. "--verbose" and "<path>", and values are the
            parsed values of those elements.

        Example
        -------
        >>> from docopt import docopt
        >>> doc = '''
        Usage:
            my_program tcp <host> <port> [--timeout=<seconds>]
            my_program serial <port> [--baud=<n>] [--timeout=<seconds>]
            my_program (-h | --help | --version)

        Options:
            -h, --help  Show this screen and exit.
            --baud=<n>  Baudrate [default: 9600]
        '''
        >>> argv = ['tcp', '127.0.0.1', '80', '--timeout', '30']
        >>> docopt(doc, argv)
        {'--baud': '9600',
         '--help': False,
         '--timeout': '30',
         '--version': False,
         '<host>': '127.0.0.1',
         '<port>': '80',
         'serial': False,
         'tcp': True}

        See also
        --------
        * For video introduction see http://docopt.org
        * Full documentation is available in README.rst as well as online
          at https://github.com/docopt/docopt#readme

    
    """
