2021-03-02 20:50:08,023 : INFO : tokenize_signature : --> do i ever get here?
def match(pattern, string, flags=0, pos=None, endpos=None, partial=False,
  concurrent=None, timeout=None, ignore_unused=False, **kwargs):
    """
    Try to apply the pattern at the start of the string, returning a match
        object, or None if no match was found.
    """
2021-03-02 20:50:08,023 : INFO : tokenize_signature : --> do i ever get here?
def fullmatch(pattern, string, flags=0, pos=None, endpos=None, partial=False,
  concurrent=None, timeout=None, ignore_unused=False, **kwargs):
    """
    Try to apply the pattern against all of the string, returning a match
        object, or None if no match was found.
    """
2021-03-02 20:50:08,024 : INFO : tokenize_signature : --> do i ever get here?
def search(pattern, string, flags=0, pos=None, endpos=None, partial=False,
  concurrent=None, timeout=None, ignore_unused=False, **kwargs):
    """
    Search through string looking for a match to the pattern, returning a
        match object, or None if no match was found.
    """
2021-03-02 20:50:08,025 : INFO : tokenize_signature : --> do i ever get here?
def sub(pattern, repl, string, count=0, flags=0, pos=None, endpos=None,
  concurrent=None, timeout=None, ignore_unused=False, **kwargs):
    """
    Return the string obtained by replacing the leftmost (or rightmost with a
        reverse pattern) non-overlapping occurrences of the pattern in string by the
        replacement repl. repl can be either a string or a callable; if a string,
        backslash escapes in it are processed; if a callable, it's passed the match
        object and must return a replacement string to be used.
    """
2021-03-02 20:50:08,025 : INFO : tokenize_signature : --> do i ever get here?
def subf(pattern, format, string, count=0, flags=0, pos=None, endpos=None,
  concurrent=None, timeout=None, ignore_unused=False, **kwargs):
    """
    Return the string obtained by replacing the leftmost (or rightmost with a
        reverse pattern) non-overlapping occurrences of the pattern in string by the
        replacement format. format can be either a string or a callable; if a string,
        it's treated as a format string; if a callable, it's passed the match object
        and must return a replacement string to be used.
    """
2021-03-02 20:50:08,026 : INFO : tokenize_signature : --> do i ever get here?
def subn(pattern, repl, string, count=0, flags=0, pos=None, endpos=None,
  concurrent=None, timeout=None, ignore_unused=False, **kwargs):
    """
    Return a 2-tuple containing (new_string, number). new_string is the string
        obtained by replacing the leftmost (or rightmost with a reverse pattern)
        non-overlapping occurrences of the pattern in the source string by the
        replacement repl. number is the number of substitutions that were made. repl
        can be either a string or a callable; if a string, backslash escapes in it
        are processed; if a callable, it's passed the match object and must return a
        replacement string to be used.
    """
2021-03-02 20:50:08,026 : INFO : tokenize_signature : --> do i ever get here?
def subfn(pattern, format, string, count=0, flags=0, pos=None, endpos=None,
  concurrent=None, timeout=None, ignore_unused=False, **kwargs):
    """
    Return a 2-tuple containing (new_string, number). new_string is the string
        obtained by replacing the leftmost (or rightmost with a reverse pattern)
        non-overlapping occurrences of the pattern in the source string by the
        replacement format. number is the number of substitutions that were made. format
        can be either a string or a callable; if a string, it's treated as a format
        string; if a callable, it's passed the match object and must return a
        replacement string to be used.
    """
2021-03-02 20:50:08,027 : INFO : tokenize_signature : --> do i ever get here?
def split(pattern, string, maxsplit=0, flags=0, concurrent=None, timeout=None,
  ignore_unused=False, **kwargs):
    """
    Split the source string by the occurrences of the pattern, returning a
        list containing the resulting substrings.  If capturing parentheses are used
        in pattern, then the text of all groups in the pattern are also returned as
        part of the resulting list.  If maxsplit is nonzero, at most maxsplit splits
        occur, and the remainder of the string is returned as the final element of
        the list.
    """
2021-03-02 20:50:08,027 : INFO : tokenize_signature : --> do i ever get here?
def splititer(pattern, string, maxsplit=0, flags=0, concurrent=None,
  timeout=None, ignore_unused=False, **kwargs):
    """
    Return an iterator yielding the parts of a split string.
    """
2021-03-02 20:50:08,027 : INFO : tokenize_signature : --> do i ever get here?
def findall(pattern, string, flags=0, pos=None, endpos=None, overlapped=False,
  concurrent=None, timeout=None, ignore_unused=False, **kwargs):
    """
    Return a list of all matches in the string. The matches may be overlapped
        if overlapped is True. If one or more groups are present in the pattern,
        return a list of groups; this will be a list of tuples if the pattern has
        more than one group. Empty matches are included in the result.
    """
2021-03-02 20:50:08,028 : INFO : tokenize_signature : --> do i ever get here?
def finditer(pattern, string, flags=0, pos=None, endpos=None, overlapped=False,
  partial=False, concurrent=None, timeout=None, ignore_unused=False, **kwargs):
    """
    Return an iterator over all matches in the string. The matches may be
        overlapped if overlapped is True. For each match, the iterator returns a
        match object. Empty matches are included in the result.
    """
def compile(pattern, flags=0, ignore_unused=False, **kwargs):
    """
    Compile a regular expression pattern, returning a pattern object.
    """
def purge():
    """
    Clear the regular expression cache
    """
def cache_all(value=True):
    """
    Sets whether to cache all patterns, even those are compiled explicitly.
        Passing None has no effect, but returns the current setting.
    """
def template(pattern, flags=0):
    """
    Compile a template pattern, returning a pattern object.
    """
def escape(pattern, special_only=True, literal_spaces=False):
    """
    Escape a string for use as a literal in a pattern. If special_only is
        True, escape only special characters, else escape all non-alphanumeric
        characters. If literal_spaces is True, don't escape spaces.
    """
def _compile(pattern, flags, ignore_unused, kwargs, cache_it):
    """
    Compiles a regular expression to a PatternObject.
    """
def _compile_replacement_helper(pattern, template):
    """
    Compiles a replacement template.
    """
        def make_string(char_codes):
            """

            """
        def make_string(char_codes):
            """
            \\
            """
def _pickle(pattern):
