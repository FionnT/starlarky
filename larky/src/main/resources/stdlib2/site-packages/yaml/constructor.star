def ConstructorError(MarkedYAMLError):
    """
     If there are more documents available?

    """
    def check_state_key(self, key):
        """
        Block special attributes/methods from being set in a newly created
                object, to prevent user-controlled methods from being called during
                deserialization
        """
    def get_data(self):
        """
         Construct and return the next document.

        """
    def get_single_data(self):
        """
         Ensure that the stream contains a single document and construct it.

        """
    def construct_document(self, node):
        """
        found unconstructable recursive node
        """
    def construct_scalar(self, node):
        """
        expected a scalar node, but found %s
        """
    def construct_sequence(self, node, deep=False):
        """
        expected a sequence node, but found %s
        """
    def construct_mapping(self, node, deep=False):
        """
        expected a mapping node, but found %s
        """
    def construct_pairs(self, node, deep=False):
        """
        expected a mapping node, but found %s
        """
    def add_constructor(cls, tag, constructor):
        """
        'yaml_constructors'
        """
    def add_multi_constructor(cls, tag_prefix, multi_constructor):
        """
        'yaml_multi_constructors'
        """
def SafeConstructor(BaseConstructor):
    """
    'tag:yaml.org,2002:value'
    """
    def flatten_mapping(self, node):
        """
        'tag:yaml.org,2002:merge'
        """
    def construct_mapping(self, node, deep=False):
        """
        'yes'
        """
    def construct_yaml_bool(self, node):
        """
        '_'
        """
    def construct_yaml_float(self, node):
        """
        '_'
        """
    def construct_yaml_binary(self, node):
        """
        'ascii'
        """
    def construct_yaml_timestamp(self, node):
        """
        'year'
        """
    def construct_yaml_omap(self, node):
        """
         Note: we do not check for duplicate keys, because it's too
         CPU-expensive.

        """
    def construct_yaml_pairs(self, node):
        """
         Note: the same code as `construct_yaml_omap`.

        """
    def construct_yaml_set(self, node):
        """
        '__setstate__'
        """
    def construct_undefined(self, node):
        """
        could not determine a constructor for the tag %r
        """
def FullConstructor(SafeConstructor):
    """
     'extend' is blacklisted because it is used by
     construct_python_object_apply to add `listitems` to a newly generate
     python instance

    """
    def get_state_keys_blacklist(self):
        """
        '^extend$'
        """
    def get_state_keys_blacklist_regexp(self):
        """
        'state_keys_blacklist_regexp'
        """
    def construct_python_str(self, node):
        """
        'ascii'
        """
    def construct_python_long(self, node):
        """
        while constructing a Python module
        """
    def find_python_name(self, name, mark, unsafe=False):
        """
        while constructing a Python object
        """
    def construct_python_name(self, suffix, node):
        """
        while constructing a Python name
        """
    def construct_python_module(self, suffix, node):
        """
        while constructing a Python module
        """
2021-03-02 20:52:08,711 : INFO : tokenize_signature : --> do i ever get here?
    def make_python_instance(self, suffix, node,
            args=None, kwds=None, newobj=False, unsafe=False):
        """
        while constructing a Python instance
        """
    def set_python_instance_state(self, instance, state, unsafe=False):
        """
        '__setstate__'
        """
    def construct_python_object(self, suffix, node):
        """
         Format:
           !!python/object:module.name { ... state ... }

        """
    def construct_python_object_apply(self, suffix, node, newobj=False):
        """
         Format:
           !!python/object/apply       # (or !!python/object/new)
           args: [ ... arguments ... ]
           kwds: { ... keywords ... }
           state: ... state ...
           listitems: [ ... listitems ... ]
           dictitems: { ... dictitems ... }
         or short format:
           !!python/object/apply [ ... arguments ... ]
         The difference between !!python/object/apply and !!python/object/new
         is how an object is created, check make_python_instance for details.

        """
    def construct_python_object_new(self, suffix, node):
        """
        'tag:yaml.org,2002:python/none'
        """
def UnsafeConstructor(FullConstructor):
    """
    'tag:yaml.org,2002:python/object/apply:'
    """
def Constructor(UnsafeConstructor):
