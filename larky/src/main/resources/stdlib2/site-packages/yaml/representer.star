def RepresenterError(YAMLError):
    """
    if node is None:
        raise RepresenterError("recursive objects are not allowed: %r" % data)

    """
    def add_representer(cls, data_type, representer):
        """
        'yaml_representers'
        """
    def add_multi_representer(cls, data_type, representer):
        """
        'yaml_multi_representers'
        """
    def represent_scalar(self, tag, value, style=None):
        """
        'items'
        """
    def ignore_aliases(self, data):
        """
        'tag:yaml.org,2002:null'
        """
    def represent_str(self, data):
        """
        'tag:yaml.org,2002:str'
        """
    def represent_binary(self, data):
        """
        'encodebytes'
        """
    def represent_bool(self, data):
        """
        'true'
        """
    def represent_int(self, data):
        """
        'tag:yaml.org,2002:int'
        """
    def represent_float(self, data):
        """
        '.nan'
        """
    def represent_list(self, data):
        """
        pairs = (len(data) > 0 and isinstance(data, list))
        if pairs:
            for item in data:
                if not isinstance(item, tuple) or len(item) != 2:
                    pairs = False
                    break
        if not pairs:

        """
    def represent_dict(self, data):
        """
        'tag:yaml.org,2002:map'
        """
    def represent_set(self, data):
        """
        'tag:yaml.org,2002:set'
        """
    def represent_date(self, data):
        """
        'tag:yaml.org,2002:timestamp'
        """
    def represent_datetime(self, data):
        """
        ' '
        """
    def represent_yaml_object(self, tag, data, cls, flow_style=None):
        """
        '__getstate__'
        """
    def represent_undefined(self, data):
        """
        cannot represent an object
        """
def Representer(SafeRepresenter):
    """
    '%r'
    """
    def represent_tuple(self, data):
        """
        'tag:yaml.org,2002:python/tuple'
        """
    def represent_name(self, data):
        """
        '%s.%s'
        """
    def represent_module(self, data):
        """
        'tag:yaml.org,2002:python/module:'
        """
    def represent_object(self, data):
        """
         We use __reduce__ API to save the data. data.__reduce__ returns
         a tuple of length 2-5:
           (function, args, state, listitems, dictitems)

         For reconstructing, we calls function(*args), then set its state,
         listitems, and dictitems if they are not None.

         A special case is when function.__name__ == '__newobj__'. In this
         case we create the object with args[0].__new__(*args).

         Another special case is when __reduce__ returns a string - we don't
         support it.

         We produce a !!python/object, !!python/object/new or
         !!python/object/apply node.


        """
    def represent_ordered_dict(self, data):
        """
         Provide uniform representation across different Python versions.

        """
