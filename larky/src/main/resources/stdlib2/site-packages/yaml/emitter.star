def EmitterError(YAMLError):
    """
    '!'
    """
2021-03-02 20:52:11,206 : INFO : tokenize_signature : --> do i ever get here?
    def __init__(self, stream, canonical=None, indent=None, width=None,
            allow_unicode=None, line_break=None):
        """
         The stream should have the methods `write` and possibly `flush`.

        """
    def dispose(self):
        """
         Reset the state attributes (to clear self-references)

        """
    def emit(self, event):
        """
         In some cases, we wait for a few next events before emitting.


        """
    def need_more_events(self):
        """
         States.

         Stream handlers.


        """
    def expect_stream_start(self):
        """
        'encoding'
        """
    def expect_nothing(self):
        """
        expected nothing, but got %s
        """
    def expect_first_document_start(self):
        """
        '...'
        """
    def expect_document_end(self):
        """
        '...'
        """
    def expect_document_root(self):
        """
         Node handlers.


        """
2021-03-02 20:52:11,212 : INFO : tokenize_signature : --> do i ever get here?
    def expect_node(self, root=False, sequence=False, mapping=False,
            simple_key=False):
        """
        '&'
        """
    def expect_alias(self):
        """
        anchor is not specified for alias
        """
    def expect_scalar(self):
        """
         Flow sequence handlers.


        """
    def expect_flow_sequence(self):
        """
        '['
        """
    def expect_first_flow_sequence_item(self):
        """
        ']'
        """
    def expect_flow_sequence_item(self):
        """
        ','
        """
    def expect_flow_mapping(self):
        """
        '{'
        """
    def expect_first_flow_mapping_key(self):
        """
        '}'
        """
    def expect_flow_mapping_key(self):
        """
        ','
        """
    def expect_flow_mapping_simple_value(self):
        """
        ':'
        """
    def expect_flow_mapping_value(self):
        """
        ':'
        """
    def expect_block_sequence(self):
        """
        '-'
        """
    def expect_block_mapping(self):
        """
        '?'
        """
    def expect_block_mapping_simple_value(self):
        """
        ':'
        """
    def expect_block_mapping_value(self):
        """
        ':'
        """
    def check_empty_sequence(self):
        """
        ''
        """
    def check_simple_key(self):
        """
         Anchor, Tag, and Scalar processors.


        """
    def process_anchor(self, indicator):
        """
        ''
        """
    def choose_scalar_style(self):
        """
        '"'
        """
    def process_scalar(self):
        """
        if self.analysis.multiline and split    \
                and (not self.style or self.style in '\'\"'):
            self.write_indent()

        """
    def prepare_version(self, version):
        """
        unsupported YAML version: %d.%d
        """
    def prepare_tag_handle(self, handle):
        """
        tag handle must not be empty
        """
    def prepare_tag_prefix(self, prefix):
        """
        tag prefix must not be empty
        """
    def prepare_tag(self, tag):
        """
        tag must not be empty
        """
    def prepare_anchor(self, anchor):
        """
        anchor must not be empty
        """
    def analyze_scalar(self, scalar):
        """
         Empty scalar is a special case.

        """
    def flush_stream(self):
        """
        'flush'
        """
    def write_stream_start(self):
        """
         Write BOM if needed.

        """
    def write_stream_end(self):
        """
        ' '
        """
    def write_indent(self):
        """
        ' '
        """
    def write_line_break(self, data=None):
        """
        '%%YAML %s'
        """
    def write_tag_directive(self, handle_text, prefix_text):
        """
        '%%TAG %s %s'
        """
    def write_single_quoted(self, text, split=True):
        """
        '\''
        """
    def write_double_quoted(self, text, split=True):
        """
        '"'
        """
    def determine_block_hints(self, text):
        """
        ''
        """
    def write_folded(self, text):
        """
        '>'
        """
    def write_literal(self, text):
        """
        '|'
        """
    def write_plain(self, text, split=True):
        """
        ' '
        """
