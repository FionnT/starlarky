def PeriodicExecutor(object):
    """
    Run a target function periodically on a background thread.

            If the target's return value is false, the executor stops.

            :Parameters:
              - `interval`: Seconds between calls to `target`.
              - `min_interval`: Minimum seconds between calls if `wake` is
                called very often.
              - `target`: A function.
              - `name`: A name to give the underlying thread.
        
    """
    def __repr__(self):
        """
        '<%s(name=%s) object at 0x%x>'
        """
    def open(self):
        """
        Start. Multiple calls have no effect.

                Not safe to call from multiple threads at once.
        
        """
    def close(self, dummy=None):
        """
        Stop. To restart, call open().

                The dummy parameter allows an executor's close method to be a weakref
                callback; see monitor.py.
        
        """
    def join(self, timeout=None):
        """
         Thread already terminated, or not yet started.

        """
    def wake(self):
        """
        Execute the target function soon.
        """
    def update_interval(self, new_interval):
        """
         Early wake.
        """
def _register_executor(executor):
    """
     Copy the set. Stopping threads has the side effect of removing executors.

    """
