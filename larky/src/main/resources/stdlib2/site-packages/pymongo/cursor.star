def CursorType(object):
    """
    The standard cursor type.
    """
def _SocketManager:
    """
    Used with exhaust cursors to ensure the socket is returned.
    
    """
    def __init__(self, sock, pool):
        """
        Return this instance's socket to the connection pool.
        
        """
def Cursor(object):
    """
    A cursor / iterator over Mongo query results.
    
    """
2021-03-02 20:50:18,635 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:18,635 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:18,635 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:18,635 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:18,635 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:18,636 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:18,636 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:18,636 : INFO : tokenize_signature : --> do i ever get here?
    def __init__(self, collection, filter=None, projection=None, skip=0,
                 limit=0, no_cursor_timeout=False,
                 cursor_type=CursorType.NON_TAILABLE,
                 sort=None, allow_partial_results=False, oplog_replay=False,
                 modifiers=None, batch_size=0, manipulate=True,
                 collation=None, hint=None, max_scan=None, max_time_ms=None,
                 max=None, min=None, return_key=False, show_record_id=False,
                 snapshot=False, comment=None, session=None,
                 allow_disk_use=None):
        """
        Create a new cursor.

                Should not be called directly by application developers - see
                :meth:`~pymongo.collection.Collection.find` instead.

                .. mongodoc:: cursors
        
        """
    def collection(self):
        """
        The :class:`~pymongo.collection.Collection` that this
                :class:`Cursor` is iterating.
        
        """
    def retrieved(self):
        """
        The number of documents retrieved so far.
        
        """
    def __del__(self):
        """
        Rewind this cursor to its unevaluated state.

                Reset this cursor if it has been partially or completely evaluated.
                Any options that are present on the cursor will remain in effect.
                Future iterating performed on this cursor will cause new queries to
                be sent to the server, even if the resultant data has already been
                retrieved by this cursor.
        
        """
    def clone(self):
        """
        Get a clone of this cursor.

                Returns a new Cursor instance with options matching those that have
                been set on the current instance. The clone will be completely
                unevaluated, even if the current instance has been partially or
                completely evaluated.
        
        """
    def _clone(self, deepcopy=True, base=None):
        """
        Internal clone helper.
        """
    def _clone_base(self, session):
        """
        Creates an empty Cursor object for information to be copied into.
        
        """
    def __die(self, synchronous=False):
        """
        Closes this cursor.
        
        """
    def close(self):
        """
        Explicitly close / kill this cursor.
        
        """
    def __query_spec(self):
        """
        Get the spec to use for a query.
        
        """
    def __check_okay_to_chain(self):
        """
        Check if it is okay to chain more options onto this cursor.
        
        """
    def add_option(self, mask):
        """
        Set arbitrary query flags using a bitmask.

                To set the tailable flag:
                cursor.add_option(2)
        
        """
    def remove_option(self, mask):
        """
        Unset arbitrary query flags using a bitmask.

                To unset the tailable flag:
                cursor.remove_option(2)
        
        """
    def allow_disk_use(self, allow_disk_use):
        """
        Specifies whether MongoDB can use temporary disk files while
                processing a blocking sort operation.

                Raises :exc:`TypeError` if `allow_disk_use` is not a boolean.

                .. note:: `allow_disk_use` requires server version **>= 4.4**

                :Parameters:
                  - `allow_disk_use`: if True, MongoDB may use temporary
                    disk files to store data exceeding the system memory limit while
                    processing a blocking sort operation.

                .. versionadded:: 3.11
        
        """
    def limit(self, limit):
        """
        Limits the number of results to be returned by this cursor.

                Raises :exc:`TypeError` if `limit` is not an integer. Raises
                :exc:`~pymongo.errors.InvalidOperation` if this :class:`Cursor`
                has already been used. The last `limit` applied to this cursor
                takes precedence. A limit of ``0`` is equivalent to no limit.

                :Parameters:
                  - `limit`: the number of results to return

                .. mongodoc:: limit
        
        """
    def batch_size(self, batch_size):
        """
        Limits the number of documents returned in one batch. Each batch
                requires a round trip to the server. It can be adjusted to optimize
                performance and limit data transfer.

                .. note:: batch_size can not override MongoDB's internal limits on the
                   amount of data it will return to the client in a single batch (i.e
                   if you set batch size to 1,000,000,000, MongoDB will currently only
                   return 4-16MB of results per batch).

                Raises :exc:`TypeError` if `batch_size` is not an integer.
                Raises :exc:`ValueError` if `batch_size` is less than ``0``.
                Raises :exc:`~pymongo.errors.InvalidOperation` if this
                :class:`Cursor` has already been used. The last `batch_size`
                applied to this cursor takes precedence.

                :Parameters:
                  - `batch_size`: The size of each batch of results requested.
        
        """
    def skip(self, skip):
        """
        Skips the first `skip` results of this cursor.

                Raises :exc:`TypeError` if `skip` is not an integer. Raises
                :exc:`ValueError` if `skip` is less than ``0``. Raises
                :exc:`~pymongo.errors.InvalidOperation` if this :class:`Cursor` has
                already been used. The last `skip` applied to this cursor takes
                precedence.

                :Parameters:
                  - `skip`: the number of results to skip
        
        """
    def max_time_ms(self, max_time_ms):
        """
        Specifies a time limit for a query operation. If the specified
                time is exceeded, the operation will be aborted and
                :exc:`~pymongo.errors.ExecutionTimeout` is raised. If `max_time_ms`
                is ``None`` no limit is applied.

                Raises :exc:`TypeError` if `max_time_ms` is not an integer or ``None``.
                Raises :exc:`~pymongo.errors.InvalidOperation` if this :class:`Cursor`
                has already been used.

                :Parameters:
                  - `max_time_ms`: the time limit after which the operation is aborted
        
        """
    def max_await_time_ms(self, max_await_time_ms):
        """
        Specifies a time limit for a getMore operation on a
                :attr:`~pymongo.cursor.CursorType.TAILABLE_AWAIT` cursor. For all other
                types of cursor max_await_time_ms is ignored.

                Raises :exc:`TypeError` if `max_await_time_ms` is not an integer or
                ``None``. Raises :exc:`~pymongo.errors.InvalidOperation` if this
                :class:`Cursor` has already been used.

                .. note:: `max_await_time_ms` requires server version **>= 3.2**

                :Parameters:
                  - `max_await_time_ms`: the time limit after which the operation is
                    aborted

                .. versionadded:: 3.2
        
        """
    def __getitem__(self, index):
        """
        Get a single document or a slice of documents from this cursor.

                Raises :class:`~pymongo.errors.InvalidOperation` if this
                cursor has already been used.

                To get a single document use an integral index, e.g.::

                  >>> db.test.find()[50]

                An :class:`IndexError` will be raised if the index is negative
                or greater than the amount of documents in this cursor. Any
                limit previously applied to this cursor will be ignored.

                To get a slice of documents use a slice index, e.g.::

                  >>> db.test.find()[20:25]

                This will return this cursor with a limit of ``5`` and skip of
                ``20`` applied.  Using a slice index will override any prior
                limits or skips applied to this cursor (including those
                applied through previous calls to this method). Raises
                :class:`IndexError` when the slice has a step, a negative
                start value, or a stop value less than or equal to the start
                value.

                :Parameters:
                  - `index`: An integer or slice index to be applied to this cursor
        
        """
    def max_scan(self, max_scan):
        """
        **DEPRECATED** - Limit the number of documents to scan when
                performing the query.

                Raises :class:`~pymongo.errors.InvalidOperation` if this
                cursor has already been used. Only the last :meth:`max_scan`
                applied to this cursor has any effect.

                :Parameters:
                  - `max_scan`: the maximum number of documents to scan

                .. versionchanged:: 3.7
                  Deprecated :meth:`max_scan`. Support for this option is deprecated in
                  MongoDB 4.0. Use :meth:`max_time_ms` instead to limit server side
                  execution time.
        
        """
    def max(self, spec):
        """
        Adds ``max`` operator that specifies upper bound for specific index.

                When using ``max``, :meth:`~hint` should also be configured to ensure
                the query uses the expected index and starting in MongoDB 4.2
                :meth:`~hint` will be required.

                :Parameters:
                  - `spec`: a list of field, limit pairs specifying the exclusive
                    upper bound for all keys of a specific index in order.

                .. versionchanged:: 3.8
                   Deprecated cursors that use ``max`` without a :meth:`~hint`.

                .. versionadded:: 2.7
        
        """
    def min(self, spec):
        """
        Adds ``min`` operator that specifies lower bound for specific index.

                When using ``min``, :meth:`~hint` should also be configured to ensure
                the query uses the expected index and starting in MongoDB 4.2
                :meth:`~hint` will be required.

                :Parameters:
                  - `spec`: a list of field, limit pairs specifying the inclusive
                    lower bound for all keys of a specific index in order.

                .. versionchanged:: 3.8
                   Deprecated cursors that use ``min`` without a :meth:`~hint`.

                .. versionadded:: 2.7
        
        """
    def sort(self, key_or_list, direction=None):
        """
        Sorts this cursor's results.

                Pass a field name and a direction, either
                :data:`~pymongo.ASCENDING` or :data:`~pymongo.DESCENDING`::

                    for doc in collection.find().sort('field', pymongo.ASCENDING):
                        print(doc)

                To sort by multiple fields, pass a list of (key, direction) pairs::

                    for doc in collection.find().sort([
                            ('field1', pymongo.ASCENDING),
                            ('field2', pymongo.DESCENDING)]):
                        print(doc)

                Beginning with MongoDB version 2.6, text search results can be
                sorted by relevance::

                    cursor = db.test.find(
                        {'$text': {'$search': 'some words'}},
                        {'score': {'$meta': 'textScore'}})

                    # Sort by 'score' field.
                    cursor.sort([('score', {'$meta': 'textScore'})])

                    for doc in cursor:
                        print(doc)

                For more advanced text search functionality, see MongoDB's
                `Atlas Search <https://docs.atlas.mongodb.com/atlas-search/>`_.

                Raises :class:`~pymongo.errors.InvalidOperation` if this cursor has
                already been used. Only the last :meth:`sort` applied to this
                cursor has any effect.

                :Parameters:
                  - `key_or_list`: a single key or a list of (key, direction)
                    pairs specifying the keys to sort on
                  - `direction` (optional): only used if `key_or_list` is a single
                    key, if not given :data:`~pymongo.ASCENDING` is assumed
        
        """
    def count(self, with_limit_and_skip=False):
        """
        **DEPRECATED** - Get the size of the results set for this query.

                The :meth:`count` method is deprecated and **not** supported in a
                transaction. Please use
                :meth:`~pymongo.collection.Collection.count_documents` instead.

                Returns the number of documents in the results set for this query. Does
                not take :meth:`limit` and :meth:`skip` into account by default - set
                `with_limit_and_skip` to ``True`` if that is the desired behavior.
                Raises :class:`~pymongo.errors.OperationFailure` on a database error.

                When used with MongoDB >= 2.6, :meth:`~count` uses any :meth:`~hint`
                applied to the query. In the following example the hint is passed to
                the count command:

                  collection.find({'field': 'value'}).hint('field_1').count()

                The :meth:`count` method obeys the
                :attr:`~pymongo.collection.Collection.read_preference` of the
                :class:`~pymongo.collection.Collection` instance on which
                :meth:`~pymongo.collection.Collection.find` was called.

                :Parameters:
                  - `with_limit_and_skip` (optional): take any :meth:`limit` or
                    :meth:`skip` that has been applied to this cursor into account when
                    getting the count

                .. note:: The `with_limit_and_skip` parameter requires server
                   version **>= 1.1.4-**

                .. versionchanged:: 3.7
                   Deprecated.

                .. versionchanged:: 2.8
                   The :meth:`~count` method now supports :meth:`~hint`.
        
        """
    def distinct(self, key):
        """
        Get a list of distinct values for `key` among all documents
                in the result set of this query.

                Raises :class:`TypeError` if `key` is not an instance of
                :class:`basestring` (:class:`str` in python 3).

                The :meth:`distinct` method obeys the
                :attr:`~pymongo.collection.Collection.read_preference` of the
                :class:`~pymongo.collection.Collection` instance on which
                :meth:`~pymongo.collection.Collection.find` was called.

                :Parameters:
                  - `key`: name of key for which we want to get the distinct values

                .. seealso:: :meth:`pymongo.collection.Collection.distinct`
        
        """
    def explain(self):
        """
        Returns an explain plan record for this cursor.

                .. note:: Starting with MongoDB 3.2 :meth:`explain` uses
                  the default verbosity mode of the `explain command
                  <https://docs.mongodb.com/manual/reference/command/explain/>`_,
                  ``allPlansExecution``. To use a different verbosity use
                  :meth:`~pymongo.database.Database.command` to run the explain
                  command directly.

                .. mongodoc:: explain
        
        """
    def __set_hint(self, index):
        """
        Adds a 'hint', telling Mongo the proper index to use for the query.

                Judicious use of hints can greatly improve query
                performance. When doing a query on multiple fields (at least
                one of which is indexed) pass the indexed field as a hint to
                the query. Raises :class:`~pymongo.errors.OperationFailure` if the
                provided hint requires an index that does not exist on this collection,
                and raises :class:`~pymongo.errors.InvalidOperation` if this cursor has
                already been used.

                `index` should be an index as passed to
                :meth:`~pymongo.collection.Collection.create_index`
                (e.g. ``[('field', ASCENDING)]``) or the name of the index.
                If `index` is ``None`` any existing hint for this query is
                cleared. The last hint applied to this cursor takes precedence
                over all others.

                :Parameters:
                  - `index`: index to hint on (as an index specifier)

                .. versionchanged:: 2.8
                   The :meth:`~hint` method accepts the name of the index.
        
        """
    def comment(self, comment):
        """
        Adds a 'comment' to the cursor.

                http://docs.mongodb.org/manual/reference/operator/comment/

                :Parameters:
                  - `comment`: A string to attach to the query to help interpret and
                    trace the operation in the server logs and in profile data.

                .. versionadded:: 2.7
        
        """
    def where(self, code):
        """
        Adds a `$where`_ clause to this query.

                The `code` argument must be an instance of :class:`basestring`
                (:class:`str` in python 3) or :class:`~bson.code.Code`
                containing a JavaScript expression. This expression will be
                evaluated for each document scanned. Only those documents
                for which the expression evaluates to *true* will be returned
                as results. The keyword *this* refers to the object currently
                being scanned. For example::

                    # Find all documents where field "a" is less than "b" plus "c".
                    for doc in db.test.find().where('this.a < (this.b + this.c)'):
                        print(doc)

                Raises :class:`TypeError` if `code` is not an instance of
                :class:`basestring` (:class:`str` in python 3). Raises
                :class:`~pymongo.errors.InvalidOperation` if this
                :class:`Cursor` has already been used. Only the last call to
                :meth:`where` applied to a :class:`Cursor` has any effect.

                .. note:: MongoDB 4.4 drops support for :class:`~bson.code.Code`
                  with scope variables. Consider using `$expr`_ instead.

                :Parameters:
                  - `code`: JavaScript expression to use as a filter

                .. _$expr: https://docs.mongodb.com/manual/reference/operator/query/expr/
                .. _$where: https://docs.mongodb.com/manual/reference/operator/query/where/
        
        """
    def collation(self, collation):
        """
        Adds a :class:`~pymongo.collation.Collation` to this query.

                This option is only supported on MongoDB 3.4 and above.

                Raises :exc:`TypeError` if `collation` is not an instance of
                :class:`~pymongo.collation.Collation` or a ``dict``. Raises
                :exc:`~pymongo.errors.InvalidOperation` if this :class:`Cursor` has
                already been used. Only the last collation applied to this cursor has
                any effect.

                :Parameters:
                  - `collation`: An instance of :class:`~pymongo.collation.Collation`.
        
        """
    def __send_message(self, operation):
        """
        Send a query or getmore operation and handles the response.

                If operation is ``None`` this is an exhaust cursor, which reads
                the next result batch off the exhaust socket instead of
                sending getMore messages to the server.

                Can raise ConnectionFailure.
        
        """
2021-03-02 20:50:18,652 : INFO : tokenize_signature : --> do i ever get here?
    def _unpack_response(self, response, cursor_id, codec_options,
                         user_fields=None, legacy_response=False):
        """
         Save the read preference for getMore commands.

        """
    def _refresh(self):
        """
        Refreshes the cursor with more data from Mongo.

                Returns the length of self.__data after refresh. Will exit early if
                self.__data is already non-empty. Raises OperationFailure when the
                cursor cannot be refreshed due to an error on the query.
        
        """
    def alive(self):
        """
        Does this cursor have the potential to return more data?

                This is mostly useful with `tailable cursors
                <http://www.mongodb.org/display/DOCS/Tailable+Cursors>`_
                since they will stop iterating even though they *may* return more
                results in the future.

                With regular cursors, simply use a for loop instead of :attr:`alive`::

                    for doc in collection.find():
                        print(doc)

                .. note:: Even if :attr:`alive` is True, :meth:`next` can raise
                  :exc:`StopIteration`. :attr:`alive` can also be True while iterating
                  a cursor from a failed server. In this case :attr:`alive` will
                  return False after :meth:`next` fails to retrieve the next batch
                  of results from the server.
        
        """
    def cursor_id(self):
        """
        Returns the id of the cursor

                Useful if you need to manage cursor ids and want to handle killing
                cursors manually using
                :meth:`~pymongo.mongo_client.MongoClient.kill_cursors`

                .. versionadded:: 2.2
        
        """
    def address(self):
        """
        The (host, port) of the server used, or None.

                .. versionchanged:: 3.0
                   Renamed from "conn_id".
        
        """
    def session(self):
        """
        The cursor's :class:`~pymongo.client_session.ClientSession`, or None.

                .. versionadded:: 3.6
        
        """
    def __iter__(self):
        """
        Advance the cursor.
        """
    def __enter__(self):
        """
        Support function for `copy.copy()`.

                .. versionadded:: 2.4
        
        """
    def __deepcopy__(self, memo):
        """
        Support function for `copy.deepcopy()`.

                .. versionadded:: 2.4
        
        """
    def _deepcopy(self, x, memo=None):
        """
        Deepcopy helper for the data dictionary or list.

                Regular expressions cannot be deep copied but as they are immutable we
                don't have to copy them when cloning.
        
        """
def RawBatchCursor(Cursor):
    """
    A cursor / iterator over raw batches of BSON data from a query result.
    """
    def __init__(self, *args, **kwargs):
        """
        Create a new cursor / iterator over raw batches of BSON data.

                Should not be called directly by application developers -
                see :meth:`~pymongo.collection.Collection.find_raw_batches`
                instead.

                .. mongodoc:: cursors
        
        """
2021-03-02 20:50:18,656 : INFO : tokenize_signature : --> do i ever get here?
    def _unpack_response(self, response, cursor_id, codec_options,
                         user_fields=None, legacy_response=False):
        """
        Returns an explain plan record for this cursor.

                .. mongodoc:: explain
        
        """
    def __getitem__(self, index):
        """
        Cannot call __getitem__ on RawBatchCursor
        """
