def CommandLogger(monitoring.CommandListener):
    """
    A simple listener that logs command events.

        Listens for :class:`~pymongo.monitoring.CommandStartedEvent`,
        :class:`~pymongo.monitoring.CommandSucceededEvent` and
        :class:`~pymongo.monitoring.CommandFailedEvent` events and
        logs them at the `INFO` severity level using :mod:`logging`.
        .. versionadded:: 3.11
    
    """
    def started(self, event):
        """
        Command {0.command_name} with request id 
        {0.request_id} started on server 
        {0.connection_id}
        """
    def succeeded(self, event):
        """
        Command {0.command_name} with request id 
        {0.request_id} on server {0.connection_id} 
        succeeded in {0.duration_micros} 
        microseconds
        """
    def failed(self, event):
        """
        Command {0.command_name} with request id 
        {0.request_id} on server {0.connection_id} 
        failed in {0.duration_micros} 
        microseconds
        """
def ServerLogger(monitoring.ServerListener):
    """
    A simple listener that logs server discovery events.

        Listens for :class:`~pymongo.monitoring.ServerOpeningEvent`,
        :class:`~pymongo.monitoring.ServerDescriptionChangedEvent`,
        and :class:`~pymongo.monitoring.ServerClosedEvent`
        events and logs them at the `INFO` severity level using :mod:`logging`.

        .. versionadded:: 3.11
    
    """
    def opened(self, event):
        """
        Server {0.server_address} added to topology 
        {0.topology_id}
        """
    def description_changed(self, event):
        """
         server_type_name was added in PyMongo 3.4

        """
    def closed(self, event):
        """
        Server {0.server_address} removed from topology 
        {0.topology_id}
        """
def HeartbeatLogger(monitoring.ServerHeartbeatListener):
    """
    A simple listener that logs server heartbeat events.

        Listens for :class:`~pymongo.monitoring.ServerHeartbeatStartedEvent`,
        :class:`~pymongo.monitoring.ServerHeartbeatSucceededEvent`,
        and :class:`~pymongo.monitoring.ServerHeartbeatFailedEvent`
        events and logs them at the `INFO` severity level using :mod:`logging`.

        .. versionadded:: 3.11
    
    """
    def started(self, event):
        """
        Heartbeat sent to server 
        {0.connection_id}
        """
    def succeeded(self, event):
        """
         The reply.document attribute was added in PyMongo 3.4.

        """
    def failed(self, event):
        """
        Heartbeat to server {0.connection_id} 
        failed with error {0.reply}
        """
def TopologyLogger(monitoring.TopologyListener):
    """
    A simple listener that logs server topology events.

        Listens for :class:`~pymongo.monitoring.TopologyOpenedEvent`,
        :class:`~pymongo.monitoring.TopologyDescriptionChangedEvent`,
        and :class:`~pymongo.monitoring.TopologyClosedEvent`
        events and logs them at the `INFO` severity level using :mod:`logging`.

        .. versionadded:: 3.11
    
    """
    def opened(self, event):
        """
        Topology with id {0.topology_id} 
        opened
        """
    def description_changed(self, event):
        """
        Topology description updated for 
        topology id {0.topology_id}
        """
    def closed(self, event):
        """
        Topology with id {0.topology_id} 
        closed
        """
def ConnectionPoolLogger(monitoring.ConnectionPoolListener):
    """
    A simple listener that logs server connection pool events.

        Listens for :class:`~pymongo.monitoring.PoolCreatedEvent`,
        :class:`~pymongo.monitoring.PoolClearedEvent`,
        :class:`~pymongo.monitoring.PoolClosedEvent`,
        :~pymongo.monitoring.class:`ConnectionCreatedEvent`,
        :class:`~pymongo.monitoring.ConnectionReadyEvent`,
        :class:`~pymongo.monitoring.ConnectionClosedEvent`,
        :class:`~pymongo.monitoring.ConnectionCheckOutStartedEvent`,
        :class:`~pymongo.monitoring.ConnectionCheckOutFailedEvent`,
        :class:`~pymongo.monitoring.ConnectionCheckedOutEvent`,
        and :class:`~pymongo.monitoring.ConnectionCheckedInEvent`
        events and logs them at the `INFO` severity level using :mod:`logging`.

        .. versionadded:: 3.11
    
    """
    def pool_created(self, event):
        """
        [pool {0.address}] pool created
        """
    def pool_cleared(self, event):
        """
        [pool {0.address}] pool cleared
        """
    def pool_closed(self, event):
        """
        [pool {0.address}] pool closed
        """
    def connection_created(self, event):
        """
        [pool {0.address}][conn #{0.connection_id}] 
        connection created
        """
    def connection_ready(self, event):
        """
        [pool {0.address}][conn #{0.connection_id}] 
        connection setup succeeded
        """
    def connection_closed(self, event):
        """
        [pool {0.address}][conn #{0.connection_id}] 
        connection closed, reason: 
        {0.reason}
        """
    def connection_check_out_started(self, event):
        """
        [pool {0.address}] connection check out 
        started
        """
    def connection_check_out_failed(self, event):
        """
        [pool {0.address}] connection check out 
        failed, reason: {0.reason}
        """
    def connection_checked_out(self, event):
        """
        [pool {0.address}][conn #{0.connection_id}] 
        connection checked out of pool
        """
    def connection_checked_in(self, event):
        """
        [pool {0.address}][conn #{0.connection_id}] 
        connection checked into pool
        """
