def Selection(object):
    """
    Input or output of a server selector function.
    """
    def from_topology_description(cls, topology_description):
        """
         Python 2.
        """
    def __getitem__(self, item):
        """
        Like PrimaryPreferred but doesn't use tags or latency.
        """
def apply_single_tag_set(tag_set, selection):
    """
    All servers matching one tag set.

        A tag set is a dict. A server matches if its tags are a superset:
        A server tagged {'a': '1', 'b': '2'} matches the tag set {'a': '1'}.

        The empty tag set {} matches any server.
    
    """
    def tags_match(server_tags):
        """
        All servers match a list of tag sets.

            tag_sets is a list of dicts. The empty tag set {} matches any server,
            and may be provided at the end of the list as a fallback. So
            [{'a': 'value'}, {}] expresses a preference for servers tagged
            {'a': 'value'}, but accepts any server if none matches the first
            preference.
    
        """
def secondary_with_tags_server_selector(tag_sets, selection):
    """
    All near-enough secondaries matching the tag sets.
    """
def member_with_tags_server_selector(tag_sets, selection):
    """
    All near-enough members matching the tag sets.
    """
