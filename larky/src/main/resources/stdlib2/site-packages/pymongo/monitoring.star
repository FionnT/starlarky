def _EventListener(object):
    """
    Abstract base class for all event listeners.
    """
def CommandListener(_EventListener):
    """
    Abstract base class for command listeners.

        Handles `CommandStartedEvent`, `CommandSucceededEvent`,
        and `CommandFailedEvent`.
    
    """
    def started(self, event):
        """
        Abstract method to handle a `CommandStartedEvent`.

                :Parameters:
                  - `event`: An instance of :class:`CommandStartedEvent`.
        
        """
    def succeeded(self, event):
        """
        Abstract method to handle a `CommandSucceededEvent`.

                :Parameters:
                  - `event`: An instance of :class:`CommandSucceededEvent`.
        
        """
    def failed(self, event):
        """
        Abstract method to handle a `CommandFailedEvent`.

                :Parameters:
                  - `event`: An instance of :class:`CommandFailedEvent`.
        
        """
def ConnectionPoolListener(_EventListener):
    """
    Abstract base class for connection pool listeners.

        Handles all of the connection pool events defined in the Connection
        Monitoring and Pooling Specification:
        :class:`PoolCreatedEvent`, :class:`PoolClearedEvent`,
        :class:`PoolClosedEvent`, :class:`ConnectionCreatedEvent`,
        :class:`ConnectionReadyEvent`, :class:`ConnectionClosedEvent`,
        :class:`ConnectionCheckOutStartedEvent`,
        :class:`ConnectionCheckOutFailedEvent`,
        :class:`ConnectionCheckedOutEvent`,
        and :class:`ConnectionCheckedInEvent`.

        .. versionadded:: 3.9
    
    """
    def pool_created(self, event):
        """
        Abstract method to handle a :class:`PoolCreatedEvent`.

                Emitted when a Connection Pool is created.

                :Parameters:
                  - `event`: An instance of :class:`PoolCreatedEvent`.
        
        """
    def pool_cleared(self, event):
        """
        Abstract method to handle a `PoolClearedEvent`.

                Emitted when a Connection Pool is cleared.

                :Parameters:
                  - `event`: An instance of :class:`PoolClearedEvent`.
        
        """
    def pool_closed(self, event):
        """
        Abstract method to handle a `PoolClosedEvent`.

                Emitted when a Connection Pool is closed.

                :Parameters:
                  - `event`: An instance of :class:`PoolClosedEvent`.
        
        """
    def connection_created(self, event):
        """
        Abstract method to handle a :class:`ConnectionCreatedEvent`.

                Emitted when a Connection Pool creates a Connection object.

                :Parameters:
                  - `event`: An instance of :class:`ConnectionCreatedEvent`.
        
        """
    def connection_ready(self, event):
        """
        Abstract method to handle a :class:`ConnectionReadyEvent`.

                Emitted when a Connection has finished its setup, and is now ready to
                use.

                :Parameters:
                  - `event`: An instance of :class:`ConnectionReadyEvent`.
        
        """
    def connection_closed(self, event):
        """
        Abstract method to handle a :class:`ConnectionClosedEvent`.

                Emitted when a Connection Pool closes a Connection.

                :Parameters:
                  - `event`: An instance of :class:`ConnectionClosedEvent`.
        
        """
    def connection_check_out_started(self, event):
        """
        Abstract method to handle a :class:`ConnectionCheckOutStartedEvent`.

                Emitted when the driver starts attempting to check out a connection.

                :Parameters:
                  - `event`: An instance of :class:`ConnectionCheckOutStartedEvent`.
        
        """
    def connection_check_out_failed(self, event):
        """
        Abstract method to handle a :class:`ConnectionCheckOutFailedEvent`.

                Emitted when the driver's attempt to check out a connection fails.

                :Parameters:
                  - `event`: An instance of :class:`ConnectionCheckOutFailedEvent`.
        
        """
    def connection_checked_out(self, event):
        """
        Abstract method to handle a :class:`ConnectionCheckedOutEvent`.

                Emitted when the driver successfully checks out a Connection.

                :Parameters:
                  - `event`: An instance of :class:`ConnectionCheckedOutEvent`.
        
        """
    def connection_checked_in(self, event):
        """
        Abstract method to handle a :class:`ConnectionCheckedInEvent`.

                Emitted when the driver checks in a Connection back to the Connection
                Pool.

                :Parameters:
                  - `event`: An instance of :class:`ConnectionCheckedInEvent`.
        
        """
def ServerHeartbeatListener(_EventListener):
    """
    Abstract base class for server heartbeat listeners.

        Handles `ServerHeartbeatStartedEvent`, `ServerHeartbeatSucceededEvent`,
        and `ServerHeartbeatFailedEvent`.

        .. versionadded:: 3.3
    
    """
    def started(self, event):
        """
        Abstract method to handle a `ServerHeartbeatStartedEvent`.

                :Parameters:
                  - `event`: An instance of :class:`ServerHeartbeatStartedEvent`.
        
        """
    def succeeded(self, event):
        """
        Abstract method to handle a `ServerHeartbeatSucceededEvent`.

                :Parameters:
                  - `event`: An instance of :class:`ServerHeartbeatSucceededEvent`.
        
        """
    def failed(self, event):
        """
        Abstract method to handle a `ServerHeartbeatFailedEvent`.

                :Parameters:
                  - `event`: An instance of :class:`ServerHeartbeatFailedEvent`.
        
        """
def TopologyListener(_EventListener):
    """
    Abstract base class for topology monitoring listeners.
        Handles `TopologyOpenedEvent`, `TopologyDescriptionChangedEvent`, and
        `TopologyClosedEvent`.

        .. versionadded:: 3.3
    
    """
    def opened(self, event):
        """
        Abstract method to handle a `TopologyOpenedEvent`.

                :Parameters:
                  - `event`: An instance of :class:`TopologyOpenedEvent`.
        
        """
    def description_changed(self, event):
        """
        Abstract method to handle a `TopologyDescriptionChangedEvent`.

                :Parameters:
                  - `event`: An instance of :class:`TopologyDescriptionChangedEvent`.
        
        """
    def closed(self, event):
        """
        Abstract method to handle a `TopologyClosedEvent`.

                :Parameters:
                  - `event`: An instance of :class:`TopologyClosedEvent`.
        
        """
def ServerListener(_EventListener):
    """
    Abstract base class for server listeners.
        Handles `ServerOpeningEvent`, `ServerDescriptionChangedEvent`, and
        `ServerClosedEvent`.

        .. versionadded:: 3.3
    
    """
    def opened(self, event):
        """
        Abstract method to handle a `ServerOpeningEvent`.

                :Parameters:
                  - `event`: An instance of :class:`ServerOpeningEvent`.
        
        """
    def description_changed(self, event):
        """
        Abstract method to handle a `ServerDescriptionChangedEvent`.

                :Parameters:
                  - `event`: An instance of :class:`ServerDescriptionChangedEvent`.
        
        """
    def closed(self, event):
        """
        Abstract method to handle a `ServerClosedEvent`.

                :Parameters:
                  - `event`: An instance of :class:`ServerClosedEvent`.
        
        """
def _to_micros(dur):
    """
    Convert duration 'dur' to microseconds.
    """
def _validate_event_listeners(option, listeners):
    """
    Validate event listeners
    """
def register(listener):
    """
    Register a global event listener.

        :Parameters:
          - `listener`: A subclasses of :class:`CommandListener`,
            :class:`ServerHeartbeatListener`, :class:`ServerListener`,
            :class:`TopologyListener`, or :class:`ConnectionPoolListener`.
    
    """
def _CommandEvent(object):
    """
    Base class for command events.
    """
    def __init__(self, command_name, request_id, connection_id, operation_id):
        """
        The command name.
        """
    def request_id(self):
        """
        The request id for this operation.
        """
    def connection_id(self):
        """
        The address (host, port) of the server this command was sent to.
        """
    def operation_id(self):
        """
        An id for this series of events or None.
        """
def CommandStartedEvent(_CommandEvent):
    """
    Event published when a command starts.

        :Parameters:
          - `command`: The command document.
          - `database_name`: The name of the database this command was run against.
          - `request_id`: The request id for this operation.
          - `connection_id`: The address (host, port) of the server this command
            was sent to.
          - `operation_id`: An optional identifier for a series of related events.
    
    """
    def __init__(self, command, database_name, *args):
        """
        %r is not a valid command
        """
    def command(self):
        """
        The command document.
        """
    def database_name(self):
        """
        The name of the database this command was run against.
        """
    def __repr__(self):
        """
        <%s %s db: %r, command: %r, operation_id: %s>
        """
def CommandSucceededEvent(_CommandEvent):
    """
    Event published when a command succeeds.

        :Parameters:
          - `duration`: The command duration as a datetime.timedelta.
          - `reply`: The server reply document.
          - `command_name`: The command name.
          - `request_id`: The request id for this operation.
          - `connection_id`: The address (host, port) of the server this command
            was sent to.
          - `operation_id`: An optional identifier for a series of related events.
    
    """
2021-03-02 20:50:11,355 : INFO : tokenize_signature : --> do i ever get here?
    def __init__(self, duration, reply, command_name,
                 request_id, connection_id, operation_id):
        """
        The duration of this operation in microseconds.
        """
    def reply(self):
        """
        The server failure document for this operation.
        """
    def __repr__(self):
        """
        <%s %s command: %r, operation_id: %s, duration_micros: %s>
        """
def CommandFailedEvent(_CommandEvent):
    """
    Event published when a command fails.

        :Parameters:
          - `duration`: The command duration as a datetime.timedelta.
          - `failure`: The server reply document.
          - `command_name`: The command name.
          - `request_id`: The request id for this operation.
          - `connection_id`: The address (host, port) of the server this command
            was sent to.
          - `operation_id`: An optional identifier for a series of related events.
    
    """
    def __init__(self, duration, failure, *args):
        """
        The duration of this operation in microseconds.
        """
    def failure(self):
        """
        The server failure document for this operation.
        """
    def __repr__(self):
        """
        <%s %s command: %r, operation_id: %s, duration_micros: %s, 
        failure: %r>
        """
def _PoolEvent(object):
    """
    Base class for pool events.
    """
    def __init__(self, address):
        """
        The address (host, port) pair of the server the pool is attempting
                to connect to.
        
        """
    def __repr__(self):
        """
        '%s(%r)'
        """
def PoolCreatedEvent(_PoolEvent):
    """
    Published when a Connection Pool is created.

        :Parameters:
         - `address`: The address (host, port) pair of the server this Pool is
           attempting to connect to.

        .. versionadded:: 3.9
    
    """
    def __init__(self, address, options):
        """
        Any non-default pool options that were set on this Connection Pool.
        
        """
    def __repr__(self):
        """
        '%s(%r, %r)'
        """
def PoolClearedEvent(_PoolEvent):
    """
    Published when a Connection Pool is cleared.

        :Parameters:
         - `address`: The address (host, port) pair of the server this Pool is
           attempting to connect to.

        .. versionadded:: 3.9
    
    """
def PoolClosedEvent(_PoolEvent):
    """
    Published when a Connection Pool is closed.

        :Parameters:
         - `address`: The address (host, port) pair of the server this Pool is
           attempting to connect to.

        .. versionadded:: 3.9
    
    """
def ConnectionClosedReason(object):
    """
    An enum that defines values for `reason` on a
        :class:`ConnectionClosedEvent`.

        .. versionadded:: 3.9
    
    """
def ConnectionCheckOutFailedReason(object):
    """
    An enum that defines values for `reason` on a
        :class:`ConnectionCheckOutFailedEvent`.

        .. versionadded:: 3.9
    
    """
def _ConnectionEvent(object):
    """
    Private base class for some connection events.
    """
    def __init__(self, address, connection_id):
        """
        The address (host, port) pair of the server this connection is
                attempting to connect to.
        
        """
    def connection_id(self):
        """
        The ID of the Connection.
        """
    def __repr__(self):
        """
        '%s(%r, %r)'
        """
def ConnectionCreatedEvent(_ConnectionEvent):
    """
    Published when a Connection Pool creates a Connection object.

        NOTE: This connection is not ready for use until the
        :class:`ConnectionReadyEvent` is published.

        :Parameters:
         - `address`: The address (host, port) pair of the server this
           Connection is attempting to connect to.
         - `connection_id`: The integer ID of the Connection in this Pool.

        .. versionadded:: 3.9
    
    """
def ConnectionReadyEvent(_ConnectionEvent):
    """
    Published when a Connection has finished its setup, and is ready to use.

        :Parameters:
         - `address`: The address (host, port) pair of the server this
           Connection is attempting to connect to.
         - `connection_id`: The integer ID of the Connection in this Pool.

        .. versionadded:: 3.9
    
    """
def ConnectionClosedEvent(_ConnectionEvent):
    """
    Published when a Connection is closed.

        :Parameters:
         - `address`: The address (host, port) pair of the server this
           Connection is attempting to connect to.
         - `connection_id`: The integer ID of the Connection in this Pool.
         - `reason`: A reason explaining why this connection was closed.

        .. versionadded:: 3.9
    
    """
    def __init__(self, address, connection_id, reason):
        """
        A reason explaining why this connection was closed.

                The reason must be one of the strings from the
                :class:`ConnectionClosedReason` enum.
        
        """
    def __repr__(self):
        """
        '%s(%r, %r, %r)'
        """
def ConnectionCheckOutStartedEvent(object):
    """
    Published when the driver starts attempting to check out a connection.

        :Parameters:
         - `address`: The address (host, port) pair of the server this
           Connection is attempting to connect to.

        .. versionadded:: 3.9
    
    """
    def __init__(self, address):
        """
        The address (host, port) pair of the server this connection is
                attempting to connect to.
        
        """
    def __repr__(self):
        """
        '%s(%r)'
        """
def ConnectionCheckOutFailedEvent(object):
    """
    Published when the driver's attempt to check out a connection fails.

        :Parameters:
         - `address`: The address (host, port) pair of the server this
           Connection is attempting to connect to.
         - `reason`: A reason explaining why connection check out failed.

        .. versionadded:: 3.9
    
    """
    def __init__(self, address, reason):
        """
        The address (host, port) pair of the server this connection is
                attempting to connect to.
        
        """
    def reason(self):
        """
        A reason explaining why connection check out failed.

                The reason must be one of the strings from the
                :class:`ConnectionCheckOutFailedReason` enum.
        
        """
    def __repr__(self):
        """
        '%s(%r, %r)'
        """
def ConnectionCheckedOutEvent(_ConnectionEvent):
    """
    Published when the driver successfully checks out a Connection.

        :Parameters:
         - `address`: The address (host, port) pair of the server this
           Connection is attempting to connect to.
         - `connection_id`: The integer ID of the Connection in this Pool.

        .. versionadded:: 3.9
    
    """
def ConnectionCheckedInEvent(_ConnectionEvent):
    """
    Published when the driver checks in a Connection into the Pool.

        :Parameters:
         - `address`: The address (host, port) pair of the server this
           Connection is attempting to connect to.
         - `connection_id`: The integer ID of the Connection in this Pool.

        .. versionadded:: 3.9
    
    """
def _ServerEvent(object):
    """
    Base class for server events.
    """
    def __init__(self, server_address, topology_id):
        """
        The address (host, port) pair of the server
        """
    def topology_id(self):
        """
        A unique identifier for the topology this server is a part of.
        """
    def __repr__(self):
        """
        <%s %s topology_id: %s>
        """
def ServerDescriptionChangedEvent(_ServerEvent):
    """
    Published when server description changes.

        .. versionadded:: 3.3
    
    """
    def __init__(self, previous_description, new_description, *args):
        """
        The previous
                :class:`~pymongo.server_description.ServerDescription`.
        """
    def new_description(self):
        """
        The new
                :class:`~pymongo.server_description.ServerDescription`.
        """
    def __repr__(self):
        """
        <%s %s changed from: %s, to: %s>
        """
def ServerOpeningEvent(_ServerEvent):
    """
    Published when server is initialized.

        .. versionadded:: 3.3
    
    """
def ServerClosedEvent(_ServerEvent):
    """
    Published when server is closed.

        .. versionadded:: 3.3
    
    """
def TopologyEvent(object):
    """
    Base class for topology description events.
    """
    def __init__(self, topology_id):
        """
        A unique identifier for the topology this server is a part of.
        """
    def __repr__(self):
        """
        <%s topology_id: %s>
        """
def TopologyDescriptionChangedEvent(TopologyEvent):
    """
    Published when the topology description changes.

        .. versionadded:: 3.3
    
    """
    def __init__(self, previous_description,  new_description, *args):
        """
        The previous
                :class:`~pymongo.topology_description.TopologyDescription`.
        """
    def new_description(self):
        """
        The new
                :class:`~pymongo.topology_description.TopologyDescription`.
        """
    def __repr__(self):
        """
        <%s topology_id: %s changed from: %s, to: %s>
        """
def TopologyOpenedEvent(TopologyEvent):
    """
    Published when the topology is initialized.

        .. versionadded:: 3.3
    
    """
def TopologyClosedEvent(TopologyEvent):
    """
    Published when the topology is closed.

        .. versionadded:: 3.3
    
    """
def _ServerHeartbeatEvent(object):
    """
    Base class for server heartbeat events.
    """
    def __init__(self, connection_id):
        """
        The address (host, port) of the server this heartbeat was sent
                to.
        """
    def __repr__(self):
        """
        <%s %s>
        """
def ServerHeartbeatStartedEvent(_ServerHeartbeatEvent):
    """
    Published when a heartbeat is started.

        .. versionadded:: 3.3
    
    """
def ServerHeartbeatSucceededEvent(_ServerHeartbeatEvent):
    """
    Fired when the server heartbeat succeeds.

        .. versionadded:: 3.3
    
    """
    def __init__(self, duration, reply, connection_id, awaited=False):
        """
        The duration of this heartbeat in microseconds.
        """
    def reply(self):
        """
        An instance of :class:`~pymongo.ismaster.IsMaster`.
        """
    def awaited(self):
        """
        Whether the heartbeat was awaited.

                If true, then :meth:`duration` reflects the sum of the round trip time
                to the server and the time that the server waited before sending a
                response.
        
        """
    def __repr__(self):
        """
        <%s %s duration: %s, awaited: %s, reply: %s>
        """
def ServerHeartbeatFailedEvent(_ServerHeartbeatEvent):
    """
    Fired when the server heartbeat fails, either with an "ok: 0"
        or a socket exception.

        .. versionadded:: 3.3
    
    """
    def __init__(self, duration, reply, connection_id, awaited=False):
        """
        The duration of this heartbeat in microseconds.
        """
    def reply(self):
        """
        A subclass of :exc:`Exception`.
        """
    def awaited(self):
        """
        Whether the heartbeat was awaited.

                If true, then :meth:`duration` reflects the sum of the round trip time
                to the server and the time that the server waited before sending a
                response.
        
        """
    def __repr__(self):
        """
        <%s %s duration: %s, awaited: %s, reply: %r>
        """
def _EventListeners(object):
    """
    Configure event listeners for a client instance.

        Any event listeners registered globally are included by default.

        :Parameters:
          - `listeners`: A list of event listeners.
    
    """
    def __init__(self, listeners):
        """
        Are any CommandListener instances registered?
        """
    def enabled_for_server(self):
        """
        Are any ServerListener instances registered?
        """
    def enabled_for_server_heartbeat(self):
        """
        Are any ServerHeartbeatListener instances registered?
        """
    def enabled_for_topology(self):
        """
        Are any TopologyListener instances registered?
        """
    def enabled_for_cmap(self):
        """
        Are any ConnectionPoolListener instances registered?
        """
    def event_listeners(self):
        """
        List of registered event listeners.
        """
2021-03-02 20:50:11,367 : INFO : tokenize_signature : --> do i ever get here?
    def publish_command_start(self, command, database_name,
                              request_id, connection_id, op_id=None):
        """
        Publish a CommandStartedEvent to all command listeners.

                :Parameters:
                  - `command`: The command document.
                  - `database_name`: The name of the database this command was run
                    against.
                  - `request_id`: The request id for this operation.
                  - `connection_id`: The address (host, port) of the server this
                    command was sent to.
                  - `op_id`: The (optional) operation id for this operation.
        
        """
2021-03-02 20:50:11,367 : INFO : tokenize_signature : --> do i ever get here?
    def publish_command_success(self, duration, reply, command_name,
                                request_id, connection_id, op_id=None):
        """
        Publish a CommandSucceededEvent to all command listeners.

                :Parameters:
                  - `duration`: The command duration as a datetime.timedelta.
                  - `reply`: The server reply document.
                  - `command_name`: The command name.
                  - `request_id`: The request id for this operation.
                  - `connection_id`: The address (host, port) of the server this
                    command was sent to.
                  - `op_id`: The (optional) operation id for this operation.
        
        """
2021-03-02 20:50:11,368 : INFO : tokenize_signature : --> do i ever get here?
    def publish_command_failure(self, duration, failure, command_name,
                                request_id, connection_id, op_id=None):
        """
        Publish a CommandFailedEvent to all command listeners.

                :Parameters:
                  - `duration`: The command duration as a datetime.timedelta.
                  - `failure`: The server reply document or failure description
                    document.
                  - `command_name`: The command name.
                  - `request_id`: The request id for this operation.
                  - `connection_id`: The address (host, port) of the server this
                    command was sent to.
                  - `op_id`: The (optional) operation id for this operation.
        
        """
    def publish_server_heartbeat_started(self, connection_id):
        """
        Publish a ServerHeartbeatStartedEvent to all server heartbeat
                listeners.

                :Parameters:
                 - `connection_id`: The address (host, port) pair of the connection.
        
        """
2021-03-02 20:50:11,369 : INFO : tokenize_signature : --> do i ever get here?
    def publish_server_heartbeat_succeeded(self, connection_id, duration,
                                           reply, awaited):
        """
        Publish a ServerHeartbeatSucceededEvent to all server heartbeat
                listeners.

                :Parameters:
                 - `connection_id`: The address (host, port) pair of the connection.
                 - `duration`: The execution time of the event in the highest possible
                    resolution for the platform.
                 - `reply`: The command reply.
                 - `awaited`: True if the response was awaited.
         
        """
2021-03-02 20:50:11,369 : INFO : tokenize_signature : --> do i ever get here?
    def publish_server_heartbeat_failed(self, connection_id, duration, reply,
                                        awaited):
        """
        Publish a ServerHeartbeatFailedEvent to all server heartbeat
                listeners.

                :Parameters:
                 - `connection_id`: The address (host, port) pair of the connection.
                 - `duration`: The execution time of the event in the highest possible
                    resolution for the platform.
                 - `reply`: The command reply.
                 - `awaited`: True if the response was awaited.
         
        """
    def publish_server_opened(self, server_address, topology_id):
        """
        Publish a ServerOpeningEvent to all server listeners.

                :Parameters:
                 - `server_address`: The address (host, port) pair of the server.
                 - `topology_id`: A unique identifier for the topology this server
                   is a part of.
        
        """
    def publish_server_closed(self, server_address, topology_id):
        """
        Publish a ServerClosedEvent to all server listeners.

                :Parameters:
                 - `server_address`: The address (host, port) pair of the server.
                 - `topology_id`: A unique identifier for the topology this server
                   is a part of.
        
        """
2021-03-02 20:50:11,370 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:11,370 : INFO : tokenize_signature : --> do i ever get here?
    def publish_server_description_changed(self, previous_description,
                                           new_description, server_address,
                                           topology_id):
        """
        Publish a ServerDescriptionChangedEvent to all server listeners.

                :Parameters:
                 - `previous_description`: The previous server description.
                 - `server_address`: The address (host, port) pair of the server.
                 - `new_description`: The new server description.
                 - `topology_id`: A unique identifier for the topology this server
                   is a part of.
        
        """
    def publish_topology_opened(self, topology_id):
        """
        Publish a TopologyOpenedEvent to all topology listeners.

                :Parameters:
                 - `topology_id`: A unique identifier for the topology this server
                   is a part of.
        
        """
    def publish_topology_closed(self, topology_id):
        """
        Publish a TopologyClosedEvent to all topology listeners.

                :Parameters:
                 - `topology_id`: A unique identifier for the topology this server
                   is a part of.
        
        """
2021-03-02 20:50:11,371 : INFO : tokenize_signature : --> do i ever get here?
    def publish_topology_description_changed(self, previous_description,
                                             new_description, topology_id):
        """
        Publish a TopologyDescriptionChangedEvent to all topology listeners.

                :Parameters:
                 - `previous_description`: The previous topology description.
                 - `new_description`: The new topology description.
                 - `topology_id`: A unique identifier for the topology this server
                   is a part of.
        
        """
    def publish_pool_created(self, address, options):
        """
        Publish a :class:`PoolCreatedEvent` to all pool listeners.
        
        """
    def publish_pool_cleared(self, address):
        """
        Publish a :class:`PoolClearedEvent` to all pool listeners.
        
        """
    def publish_pool_closed(self, address):
        """
        Publish a :class:`PoolClosedEvent` to all pool listeners.
        
        """
    def publish_connection_created(self, address, connection_id):
        """
        Publish a :class:`ConnectionCreatedEvent` to all connection
                listeners.
        
        """
    def publish_connection_ready(self, address, connection_id):
        """
        Publish a :class:`ConnectionReadyEvent` to all connection listeners.
        
        """
    def publish_connection_closed(self, address, connection_id, reason):
        """
        Publish a :class:`ConnectionClosedEvent` to all connection
                listeners.
        
        """
    def publish_connection_check_out_started(self, address):
        """
        Publish a :class:`ConnectionCheckOutStartedEvent` to all connection
                listeners.
        
        """
    def publish_connection_check_out_failed(self, address, reason):
        """
        Publish a :class:`ConnectionCheckOutFailedEvent` to all connection
                listeners.
        
        """
    def publish_connection_checked_out(self, address, connection_id):
        """
        Publish a :class:`ConnectionCheckedOutEvent` to all connection
                listeners.
        
        """
    def publish_connection_checked_in(self, address, connection_id):
        """
        Publish a :class:`ConnectionCheckedInEvent` to all connection
                listeners.
        
        """
