def SessionOptions(object):
    """
    Options for a new :class:`ClientSession`.

        :Parameters:
          - `causal_consistency` (optional): If True (the default), read
            operations are causally ordered within the session.
          - `default_transaction_options` (optional): The default
            TransactionOptions to use for transactions started on this session.
    
    """
2021-03-02 20:50:18,444 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:18,445 : INFO : tokenize_signature : --> do i ever get here?
    def __init__(self,
                 causal_consistency=True,
                 default_transaction_options=None):
        """
        default_transaction_options must be an instance of 
        pymongo.client_session.TransactionOptions, not: %r
        """
    def causal_consistency(self):
        """
        Whether causal consistency is configured.
        """
    def default_transaction_options(self):
        """
        The default TransactionOptions to use for transactions started on
                this session.

                .. versionadded:: 3.7
        
        """
def TransactionOptions(object):
    """
    Options for :meth:`ClientSession.start_transaction`.
    
        :Parameters:
          - `read_concern` (optional): The
            :class:`~pymongo.read_concern.ReadConcern` to use for this transaction.
            If ``None`` (the default) the :attr:`read_preference` of
            the :class:`MongoClient` is used.
          - `write_concern` (optional): The
            :class:`~pymongo.write_concern.WriteConcern` to use for this
            transaction. If ``None`` (the default) the :attr:`read_preference` of
            the :class:`MongoClient` is used.
          - `read_preference` (optional): The read preference to use. If
            ``None`` (the default) the :attr:`read_preference` of this
            :class:`MongoClient` is used. See :mod:`~pymongo.read_preferences`
            for options. Transactions which read must use
            :attr:`~pymongo.read_preferences.ReadPreference.PRIMARY`.
          - `max_commit_time_ms` (optional): The maximum amount of time to allow a
            single commitTransaction command to run. This option is an alias for
            maxTimeMS option on the commitTransaction command. If ``None`` (the
            default) maxTimeMS is not used.

        .. versionchanged:: 3.9
           Added the ``max_commit_time_ms`` option.

        .. versionadded:: 3.7
    
    """
2021-03-02 20:50:18,445 : INFO : tokenize_signature : --> do i ever get here?
    def __init__(self, read_concern=None, write_concern=None,
                 read_preference=None, max_commit_time_ms=None):
        """
        read_concern must be an instance of 
        pymongo.read_concern.ReadConcern, not: %r
        """
    def read_concern(self):
        """
        This transaction's :class:`~pymongo.read_concern.ReadConcern`.
        """
    def write_concern(self):
        """
        This transaction's :class:`~pymongo.write_concern.WriteConcern`.
        """
    def read_preference(self):
        """
        This transaction's :class:`~pymongo.read_preferences.ReadPreference`.
        
        """
    def max_commit_time_ms(self):
        """
        The maxTimeMS to use when running a commitTransaction command.

                .. versionadded:: 3.9
        
        """
def _validate_session_write_concern(session, write_concern):
    """
    Validate that an explicit session is not used with an unack'ed write.

        Returns the session to use for the next operation.
    
    """
def _TransactionContext(object):
    """
    Internal transaction context manager for start_transaction.
    """
    def __init__(self, session):
        """
        Internal class to hold transaction information in a ClientSession.
        """
    def __init__(self, opts):
        """
        Re-raise an exception with the UnknownTransactionCommitResult label.
        """
def _max_time_expired_error(exc):
    """
    Return true if exc is a MaxTimeMSExpired error.
    """
def _within_time_limit(start_time):
    """
    Are we within the with_transaction retry limit?
    """
def ClientSession(object):
    """
    A session for ordering sequential operations.

        :class:`ClientSession` instances are **not thread-safe or fork-safe**.
        They can only be used by one thread or process at a time. A single
        :class:`ClientSession` cannot be used to run multiple operations
        concurrently.

        Should not be initialized directly by application developers - to create a
        :class:`ClientSession`, call
        :meth:`~pymongo.mongo_client.MongoClient.start_session`.
    
    """
    def __init__(self, client, server_session, options, authset, implicit):
        """
         A MongoClient, a _ServerSession, a SessionOptions, and a set.

        """
    def end_session(self):
        """
        Finish this session. If a transaction has started, abort it.

                It is an error to use the session after the session has ended.
        
        """
    def _end_session(self, lock):
        """
        Cannot use ended session
        """
    def __enter__(self):
        """
        The :class:`~pymongo.mongo_client.MongoClient` this session was
                created from.
        
        """
    def options(self):
        """
        The :class:`SessionOptions` this session was created with.
        """
    def session_id(self):
        """
        A BSON document, the opaque server session identifier.
        """
    def cluster_time(self):
        """
        The cluster time returned by the last operation executed
                in this session.
        
        """
    def operation_time(self):
        """
        The operation time returned by the last operation executed
                in this session.
        
        """
    def _inherit_option(self, name, val):
        """
        Return the inherited TransactionOption value.
        """
2021-03-02 20:50:18,450 : INFO : tokenize_signature : --> do i ever get here?
    def with_transaction(self, callback, read_concern=None, write_concern=None,
                         read_preference=None, max_commit_time_ms=None):
        """
        Execute a callback in a transaction.

                This method starts a transaction on this session, executes ``callback``
                once, and then commits the transaction. For example::

                  def callback(session):
                      orders = session.client.db.orders
                      inventory = session.client.db.inventory
                      orders.insert_one({"sku": "abc123", "qty": 100}, session=session)
                      inventory.update_one({"sku": "abc123", "qty": {"$gte": 100}},
                                           {"$inc": {"qty": -100}}, session=session)

                  with client.start_session() as session:
                      session.with_transaction(callback)

                To pass arbitrary arguments to the ``callback``, wrap your callable
                with a ``lambda`` like this::

                  def callback(session, custom_arg, custom_kwarg=None):
                      # Transaction operations...

                  with client.start_session() as session:
                      session.with_transaction(
                          lambda s: callback(s, "custom_arg", custom_kwarg=1))

                In the event of an exception, ``with_transaction`` may retry the commit
                or the entire transaction, therefore ``callback`` may be invoked
                multiple times by a single call to ``with_transaction``. Developers
                should be mindful of this possiblity when writing a ``callback`` that
                modifies application state or has any other side-effects.
                Note that even when the ``callback`` is invoked multiple times,
                ``with_transaction`` ensures that the transaction will be committed
                at-most-once on the server.

                The ``callback`` should not attempt to start new transactions, but
                should simply run operations meant to be contained within a
                transaction. The ``callback`` should also not commit the transaction;
                this is handled automatically by ``with_transaction``. If the
                ``callback`` does commit or abort the transaction without error,
                however, ``with_transaction`` will return without taking further
                action.

                :class:`ClientSession` instances are **not thread-safe or fork-safe**.
                Consequently, the ``callback`` must not attempt to execute multiple
                operations concurrently.

                When ``callback`` raises an exception, ``with_transaction``
                automatically aborts the current transaction. When ``callback`` or
                :meth:`~ClientSession.commit_transaction` raises an exception that
                includes the ``"TransientTransactionError"`` error label,
                ``with_transaction`` starts a new transaction and re-executes
                the ``callback``.

                When :meth:`~ClientSession.commit_transaction` raises an exception with
                the ``"UnknownTransactionCommitResult"`` error label,
                ``with_transaction`` retries the commit until the result of the
                transaction is known.

                This method will cease retrying after 120 seconds has elapsed. This
                timeout is not configurable and any exception raised by the
                ``callback`` or by :meth:`ClientSession.commit_transaction` after the
                timeout is reached will be re-raised. Applications that desire a
                different timeout duration should not use this method.

                :Parameters:
                  - `callback`: The callable ``callback`` to run inside a transaction.
                    The callable must accept a single argument, this session. Note,
                    under certain error conditions the callback may be run multiple
                    times.
                  - `read_concern` (optional): The
                    :class:`~pymongo.read_concern.ReadConcern` to use for this
                    transaction.
                  - `write_concern` (optional): The
                    :class:`~pymongo.write_concern.WriteConcern` to use for this
                    transaction.
                  - `read_preference` (optional): The read preference to use for this
                    transaction. If ``None`` (the default) the :attr:`read_preference`
                    of this :class:`Database` is used. See
                    :mod:`~pymongo.read_preferences` for options.

                :Returns:
                  The return value of the ``callback``.

                .. versionadded:: 3.9
        
        """
2021-03-02 20:50:18,452 : INFO : tokenize_signature : --> do i ever get here?
    def start_transaction(self, read_concern=None, write_concern=None,
                          read_preference=None, max_commit_time_ms=None):
        """
        Start a multi-statement transaction.

                Takes the same arguments as :class:`TransactionOptions`.

                .. versionchanged:: 3.9
                   Added the ``max_commit_time_ms`` option.

                .. versionadded:: 3.7
        
        """
    def commit_transaction(self):
        """
        Commit a multi-statement transaction.

                .. versionadded:: 3.7
        
        """
    def abort_transaction(self):
        """
        Abort a multi-statement transaction.

                .. versionadded:: 3.7
        
        """
    def _finish_transaction_with_retry(self, command_name):
        """
        Run commit or abort with one retry after any retryable error.

                :Parameters:
                  - `command_name`: Either "commitTransaction" or "abortTransaction".
        
        """
        def func(session, sock_info, retryable):
            """
            commitTransaction
            """
    def _advance_cluster_time(self, cluster_time):
        """
        Internal cluster time helper.
        """
    def advance_cluster_time(self, cluster_time):
        """
        Update the cluster time for this session.

                :Parameters:
                  - `cluster_time`: The
                    :data:`~pymongo.client_session.ClientSession.cluster_time` from
                    another `ClientSession` instance.
        
        """
    def _advance_operation_time(self, operation_time):
        """
        Internal operation time helper.
        """
    def advance_operation_time(self, operation_time):
        """
        Update the operation time for this session.

                :Parameters:
                  - `operation_time`: The
                    :data:`~pymongo.client_session.ClientSession.operation_time` from
                    another `ClientSession` instance.
        
        """
    def _process_response(self, reply):
        """
        Process a response to a command that was run with this session.
        """
    def has_ended(self):
        """
        True if this session is finished.
        """
    def in_transaction(self):
        """
        True if this session has an active multi-statement transaction.

                .. versionadded:: 3.10
        
        """
    def _pinned_address(self):
        """
        The mongos address this transaction was created on.
        """
    def _pin_mongos(self, server):
        """
        Pin this session to the given mongos Server.
        """
    def _unpin_mongos(self):
        """
        Unpin this session from any pinned mongos address.
        """
    def _txn_read_preference(self):
        """
        Return read preference of this transaction or None.
        """
    def _apply_to(self, command, is_retryable, read_preference):
        """
        'lsid'
        """
    def _start_retryable_write(self):
        """
         Ensure id is type 4, regardless of CodecOptions.uuid_representation.

        """
    def mark_dirty(self):
        """
        Mark this session as dirty.

                A server session is marked dirty when a command fails with a network
                error. Dirty sessions are later discarded from the server session pool.
        
        """
    def timed_out(self, session_timeout_minutes):
        """
         Timed out if we have less than a minute to live.

        """
    def transaction_id(self):
        """
        Positive 64-bit integer.
        """
    def inc_transaction_id(self):
        """
        Pool of _ServerSession objects.

            This class is not thread-safe, access it while holding the Topology lock.
    
        """
    def __init__(self, *args, **kwargs):
        """
         Although the Driver Sessions Spec says we only clear stale sessions
         in return_server_session, PyMongo can't take a lock when returning
         sessions from a __del__ method (like in Cursor.__die), so it can't
         clear stale sessions there. In case many sessions were returned via
         __del__, check for stale sessions here too.

        """
    def return_server_session(self, server_session, session_timeout_minutes):
        """
         Discard sessions from an old pool to avoid duplicate sessions in the
         child process after a fork.

        """
    def _clear_stale(self, session_timeout_minutes):
        """
         Clear stale sessions. The least recently used are on the right.

        """
