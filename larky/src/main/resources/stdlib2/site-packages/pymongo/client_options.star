def _parse_credentials(username, password, database, options):
    """
    Parse authentication credentials.
    """
def _parse_read_preference(options):
    """
    Parse read preference options.
    """
def _parse_write_concern(options):
    """
    Parse write concern options.
    """
def _parse_read_concern(options):
    """
    Parse read concern options.
    """
def _parse_ssl_options(options):
    """
    Parse ssl options.
    """
def _parse_pool_options(options):
    """
    Parse connection pool options.
    """
def ClientOptions(object):
    """
    ClientOptions
    """
    def __init__(self, username, password, database, options):
        """
        'directconnection'
        """
    def _options(self):
        """
        The original options used to create this ClientOptions.
        """
    def connect(self):
        """
        Whether to begin discovering a MongoDB topology automatically.
        """
    def codec_options(self):
        """
        A :class:`~bson.codec_options.CodecOptions` instance.
        """
    def credentials(self):
        """
        A :class:`~pymongo.auth.MongoCredentials` instance or None.
        """
    def direct_connection(self):
        """
        Whether to connect to the deployment in 'Single' topology.
        """
    def local_threshold_ms(self):
        """
        The local threshold for this instance.
        """
    def server_selection_timeout(self):
        """
        The server selection timeout for this instance in seconds.
        """
    def server_selector(self):
        """
        The monitoring frequency in seconds.
        """
    def pool_options(self):
        """
        A :class:`~pymongo.pool.PoolOptions` instance.
        """
    def read_preference(self):
        """
        A read preference instance.
        """
    def replica_set_name(self):
        """
        Replica set name or None.
        """
    def write_concern(self):
        """
        A :class:`~pymongo.write_concern.WriteConcern` instance.
        """
    def read_concern(self):
        """
        A :class:`~pymongo.read_concern.ReadConcern` instance.
        """
    def retry_writes(self):
        """
        If this instance should retry supported write operations.
        """
    def retry_reads(self):
        """
        If this instance should retry supported read operations.
        """
    def auto_encryption_opts(self):
        """
        A :class:`~pymongo.encryption.AutoEncryptionOpts` or None.
        """
