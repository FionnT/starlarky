def _Run(object):
    """
    Represents a batch of write operations.
    
    """
    def __init__(self, op_type):
        """
        Initialize a new Run object.
        
        """
    def index(self, idx):
        """
        Get the original index of an operation in this run.

                :Parameters:
                  - `idx`: The Run index that maps to the original index.
        
        """
    def add(self, original_index, operation):
        """
        Add an operation to this Run instance.

                :Parameters:
                  - `original_index`: The original index of this operation
                    within a larger bulk operation.
                  - `operation`: The operation document.
        
        """
def _merge_command(run, full_result, offset, result):
    """
    Merge a write command result into the full bulk result.
    
    """
def _raise_bulk_write_error(full_result):
    """
    Raise a BulkWriteError from the full bulk api result.
    
    """
def _Bulk(object):
    """
    The private guts of the bulk write API.
    
    """
    def __init__(self, collection, ordered, bypass_document_validation):
        """
        Initialize a _Bulk instance.
        
        """
    def bulk_ctx_class(self):
        """
        Add an insert document to the list of ops.
        
        """
2021-03-02 20:50:10,812 : INFO : tokenize_signature : --> do i ever get here?
    def add_update(self, selector, update, multi=False, upsert=False,
                   collation=None, array_filters=None, hint=None):
        """
        Create an update document and add it to the list of ops.
        
        """
2021-03-02 20:50:10,813 : INFO : tokenize_signature : --> do i ever get here?
    def add_replace(self, selector, replacement, upsert=False,
                    collation=None, hint=None):
        """
        Create a replace document and add it to the list of ops.
        
        """
    def add_delete(self, selector, limit, collation=None, hint=None):
        """
        Create a delete document and add it to the list of ops.
        
        """
    def gen_ordered(self):
        """
        Generate batches of operations, batched by type of
                operation, in the order **provided**.
        
        """
    def gen_unordered(self):
        """
        Generate batches of operations, batched by type of
                operation, in arbitrary order.
        
        """
2021-03-02 20:50:10,814 : INFO : tokenize_signature : --> do i ever get here?
    def _execute_command(self, generator, write_concern, session,
                         sock_info, op_id, retryable, full_result):
        """
        'Must be connected to MongoDB 3.4+ to use a collation.'
        """
    def execute_command(self, generator, write_concern, session):
        """
        Execute using write commands.
        
        """
        def retryable_bulk(session, sock_info, retryable):
            """
            writeErrors
            """
    def execute_insert_no_results(self, sock_info, run, op_id, acknowledged):
        """
        Execute insert, returning no results.
        
        """
    def execute_op_msg_no_results(self, sock_info, generator):
        """
        Execute write commands with OP_MSG and w=0 writeConcern, unordered.
        
        """
    def execute_command_no_results(self, sock_info, generator):
        """
        Execute write commands with OP_MSG and w=0 WriteConcern, ordered.
        
        """
    def execute_no_results(self, sock_info, generator):
        """
        Execute all operations, returning no results (w=0).
        
        """
    def execute(self, write_concern, session):
        """
        Execute operations.
        
        """
def BulkUpsertOperation(object):
    """
    An interface for adding upsert operations.
    
    """
    def __init__(self, selector, bulk, collation):
        """
        Update one document matching the selector.

                :Parameters:
                  - `update` (dict): the update operations to apply
        
        """
    def update(self, update):
        """
        Update all documents matching the selector.

                :Parameters:
                  - `update` (dict): the update operations to apply
        
        """
    def replace_one(self, replacement):
        """
        Replace one entire document matching the selector criteria.

                :Parameters:
                  - `replacement` (dict): the replacement document
        
        """
def BulkWriteOperation(object):
    """
    An interface for adding update or remove operations.
    
    """
    def __init__(self, selector, bulk, collation):
        """
        Update one document matching the selector criteria.

                :Parameters:
                  - `update` (dict): the update operations to apply
        
        """
    def update(self, update):
        """
        Update all documents matching the selector criteria.

                :Parameters:
                  - `update` (dict): the update operations to apply
        
        """
    def replace_one(self, replacement):
        """
        Replace one entire document matching the selector criteria.

                :Parameters:
                  - `replacement` (dict): the replacement document
        
        """
    def remove_one(self):
        """
        Remove a single document matching the selector criteria.
        
        """
    def remove(self):
        """
        Remove all documents matching the selector criteria.
        
        """
    def upsert(self):
        """
        Specify that all chained update operations should be
                upserts.

                :Returns:
                  - A :class:`BulkUpsertOperation` instance, used to add
                    update operations to this bulk operation.
        
        """
def BulkOperationBuilder(object):
    """
    **DEPRECATED**: An interface for executing a batch of write operations.
    
    """
2021-03-02 20:50:10,823 : INFO : tokenize_signature : --> do i ever get here?
    def __init__(self, collection, ordered=True,
                 bypass_document_validation=False):
        """
        **DEPRECATED**: Initialize a new BulkOperationBuilder instance.

                :Parameters:
                  - `collection`: A :class:`~pymongo.collection.Collection` instance.
                  - `ordered` (optional): If ``True`` all operations will be executed
                    serially, in the order provided, and the entire execution will
                    abort on the first error. If ``False`` operations will be executed
                    in arbitrary order (possibly in parallel on the server), reporting
                    any errors that occurred after attempting all operations. Defaults
                    to ``True``.
                  - `bypass_document_validation`: (optional) If ``True``, allows the
                    write to opt-out of document level validation. Default is
                    ``False``.

                .. note:: `bypass_document_validation` requires server version
                  **>= 3.2**

                .. versionchanged:: 3.5
                   Deprecated. Use :meth:`~pymongo.collection.Collection.bulk_write`
                   instead.

                .. versionchanged:: 3.2
                  Added bypass_document_validation support
        
        """
    def find(self, selector, collation=None):
        """
        Specify selection criteria for bulk operations.

                :Parameters:
                  - `selector` (dict): the selection criteria for update
                    and remove operations.
                  - `collation` (optional): An instance of
                    :class:`~pymongo.collation.Collation`. This option is only
                    supported on MongoDB 3.4 and above.

                :Returns:
                  - A :class:`BulkWriteOperation` instance, used to add
                    update and remove operations to this bulk operation.

                .. versionchanged:: 3.4
                   Added the `collation` option.

        
        """
    def insert(self, document):
        """
        Insert a single document.

                :Parameters:
                  - `document` (dict): the document to insert

                .. seealso:: :ref:`writes-and-ids`
        
        """
    def execute(self, write_concern=None):
        """
        Execute all provided operations.

                :Parameters:
                  - write_concern (optional): the write concern for this bulk
                    execution.
        
        """
