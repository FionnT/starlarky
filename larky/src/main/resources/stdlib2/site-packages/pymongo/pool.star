    def is_ip_address(address):
        """
        'inet_pton'
        """
        def is_ip_address(address):
            """
             inet_pton rejects IPv4 literals with leading zeros
             (e.g. 192.168.0.01), inet_aton does not, and we
             can connect to them without issue. Use inet_aton.

            """
        def is_ip_address(address):
            """
            ':'
            """
    def _set_non_inheritable_non_atomic(fd):
        """
        Set the close-on-exec flag on the given file descriptor.
        """
    def _set_non_inheritable_non_atomic(dummy):
        """
        Dummy function for platforms that don't provide fcntl.
        """
    def _query(key, name, default):
        """
         Ensure the value is a number or raise ValueError.

        """
    def _set_keepalive_times(sock):
        """
         PYTHON-1350 - NetBSD doesn't implement getsockopt for
         TCP_KEEPIDLE and friends. Don't attempt to set the
         values there.

        """
    def _set_keepalive_times(sock):
        """
        'TCP_KEEPIDLE'
        """
def _raise_connection_failure(address, error, msg_prefix=None):
    """
    Convert a socket.error to ConnectionFailure and raise it.
    """
def PoolOptions(object):
    """
    '__max_pool_size'
    """
2021-03-02 20:50:17,558 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:17,558 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:17,559 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:17,559 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:17,559 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:17,559 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:17,559 : INFO : tokenize_signature : --> do i ever get here?
    def __init__(self, max_pool_size=MAX_POOL_SIZE,
                 min_pool_size=MIN_POOL_SIZE,
                 max_idle_time_seconds=MAX_IDLE_TIME_SEC, connect_timeout=None,
                 socket_timeout=None, wait_queue_timeout=WAIT_QUEUE_TIMEOUT,
                 wait_queue_multiple=None, ssl_context=None,
                 ssl_match_hostname=True, socket_keepalive=True,
                 event_listeners=None, appname=None, driver=None,
                 compression_settings=None):
        """
        'application'
        """
    def non_default_options(self):
        """
        The non-default options this pool was created with.

                Added for CMAP's :class:`PoolCreatedEvent`.
        
        """
    def max_pool_size(self):
        """
        The maximum allowable number of concurrent connections to each
                connected server. Requests to a server will block if there are
                `maxPoolSize` outstanding connections to the requested server.
                Defaults to 100. Cannot be 0.

                When a server's pool has reached `max_pool_size`, operations for that
                server block waiting for a socket to be returned to the pool. If
                ``waitQueueTimeoutMS`` is set, a blocked operation will raise
                :exc:`~pymongo.errors.ConnectionFailure` after a timeout.
                By default ``waitQueueTimeoutMS`` is not set.
        
        """
    def min_pool_size(self):
        """
        The minimum required number of concurrent connections that the pool
                will maintain to each connected server. Default is 0.
        
        """
    def max_idle_time_seconds(self):
        """
        The maximum number of seconds that a connection can remain
                idle in the pool before being removed and replaced. Defaults to
                `None` (no limit).
        
        """
    def connect_timeout(self):
        """
        How long a connection can take to be opened before timing out.
        
        """
    def socket_timeout(self):
        """
        How long a send or receive on a socket can take before timing out.
        
        """
    def wait_queue_timeout(self):
        """
        How long a thread will wait for a socket from the pool if the pool
                has no free sockets.
        
        """
    def wait_queue_multiple(self):
        """
        Multiplied by max_pool_size to give the number of threads allowed
                to wait for a socket at one time.
        
        """
    def ssl_context(self):
        """
        An SSLContext instance or None.
        
        """
    def ssl_match_hostname(self):
        """
        Call ssl.match_hostname if cert_reqs is not ssl.CERT_NONE.
        
        """
    def socket_keepalive(self):
        """
        Whether to send periodic messages to determine if a connection
                is closed.
        
        """
    def event_listeners(self):
        """
        An instance of pymongo.monitoring._EventListeners.
        
        """
    def appname(self):
        """
        The application name, for sending with ismaster in server handshake.
        
        """
    def driver(self):
        """
        Driver name and version, for sending with ismaster in handshake.
        
        """
    def compression_settings(self):
        """
        A dict of metadata about the application, driver, os, and platform.
        
        """
def _negotiate_creds(all_credentials):
    """
    Return one credential that needs mechanism negotiation, if any.
    
    """
def _speculative_context(all_credentials):
    """
    Return the _AuthContext to use for speculative auth, if any.
    
    """
def _CancellationContext(object):
    """
    Cancel this context.
    """
    def cancelled(self):
        """
        Was cancel called?
        """
def SocketInfo(object):
    """
    Store a socket with some metadata.

        :Parameters:
          - `sock`: a raw socket object
          - `pool`: a Pool instance
          - `address`: the server's (host, port)
          - `id`: the id of this socket in it's pool
    
    """
    def __init__(self, sock, pool, address, id):
        """
         Support for mechanism negotiation on the initial handshake.
         Maps credential to saslSupportedMechs.

        """
    def ismaster(self, all_credentials=None):
        """
        'ismaster'
        """
    def _next_reply(self):
        """
        Execute a command or raise an error.

                :Parameters:
                  - `dbname`: name of the database on which to run the command
                  - `spec`: a command document as a dict, SON, or mapping object
                  - `slave_ok`: whether to set the SlaveOkay wire protocol bit
                  - `read_preference`: a read preference
                  - `codec_options`: a CodecOptions instance
                  - `check`: raise OperationFailure if there are errors
                  - `allowable_errors`: errors to ignore if `check` is True
                  - `check_keys`: if True, check `spec` for invalid keys
                  - `read_concern`: The read concern for this command.
                  - `write_concern`: The write concern for this command.
                  - `parse_write_concern_error`: Whether to parse the
                    ``writeConcernError`` field in the command response.
                  - `collation`: The collation for this command.
                  - `session`: optional ClientSession instance.
                  - `client`: optional MongoClient for gossipping $clusterTime.
                  - `retryable_write`: True if this command is a retryable write.
                  - `publish_events`: Should we publish events for this command?
                  - `user_fields` (optional): Response fields that should be decoded
                    using the TypeDecoders from codec_options, passed to
                    bson._decode_all_selective.
        
        """
    def send_message(self, message, max_doc_size):
        """
        Send a raw BSON message or raise ConnectionFailure.

                If a network exception is raised, the socket is closed.
        
        """
    def receive_message(self, request_id):
        """
        Receive a raw BSON message or raise ConnectionFailure.

                If any exception is raised, the socket is closed.
        
        """
    def _raise_if_not_writable(self, unacknowledged):
        """
        Raise NotMasterError on unacknowledged write if this socket is not
                writable.
        
        """
    def legacy_write(self, request_id, msg, max_doc_size, with_last_error):
        """
        Send OP_INSERT, etc., optionally returning response as a dict.

                Can raise ConnectionFailure or OperationFailure.

                :Parameters:
                  - `request_id`: an int.
                  - `msg`: bytes, an OP_INSERT, OP_UPDATE, or OP_DELETE message,
                    perhaps with a getlasterror command appended.
                  - `max_doc_size`: size in bytes of the largest document in `msg`.
                  - `with_last_error`: True if a getlasterror command is appended.
        
        """
    def write_command(self, request_id, msg):
        """
        Send "insert" etc. command, returning response as a dict.

                Can raise ConnectionFailure or OperationFailure.

                :Parameters:
                  - `request_id`: an int.
                  - `msg`: bytes, the command message.
        
        """
    def check_auth(self, all_credentials):
        """
        Update this socket's authentication.

                Log in or out to bring this socket's credentials up to date with
                those provided. Can raise ConnectionFailure or OperationFailure.

                :Parameters:
                  - `all_credentials`: dict, maps auth source to MongoCredential.
        
        """
    def authenticate(self, credentials):
        """
        Log in to the server and store these credentials in `authset`.

                Can raise ConnectionFailure or OperationFailure.

                :Parameters:
                  - `credentials`: A MongoCredential.
        
        """
    def validate_session(self, client, session):
        """
        Validate this session before use with client.

                Raises error if this session is logged in as a different user or
                the client is not the one that created the session.
        
        """
    def close_socket(self, reason):
        """
        Close this connection with a reason.
        """
    def _close_socket(self):
        """
        Close this connection.
        """
    def socket_closed(self):
        """
        Return True if we know socket has been closed, False otherwise.
        """
    def send_cluster_time(self, command, session, client):
        """
        Add cluster time for MongoDB >= 3.6.
        """
    def update_last_checkin_time(self):
        """
        Seconds since this socket was last checked into its pool.
        """
    def _raise_connection_failure(self, error):
        """
         Catch *all* exceptions from socket methods and close the socket. In
         regular Python, socket operations only raise socket.error, even if
         the underlying cause was a Ctrl-C: a signal raised during socket.recv
         is expressed as an EINTR error from poll. See internal_select_ex() in
         socketmodule.c. All error codes from poll become socket.error at
         first. Eventually in PyEval_EvalFrameEx the interpreter checks for
         signals and throws KeyboardInterrupt into the current frame on the
         main thread.

         But in Gevent and Eventlet, the polling mechanism (epoll, kqueue,
         ...) is called in Python code, which experiences the signal as a
         KeyboardInterrupt from the start, rather than as an initial
         socket.error, so we catch that, close the socket, and reraise it.

        """
    def __eq__(self, other):
        """
        SocketInfo(%s)%s at %s
        """
def _create_connection(address, options):
    """
    Given (host, port) and PoolOptions, connect and return a socket object.

        Can raise socket.error.

        This is a modified version of create_connection from CPython >= 2.7.
    
    """
def _configured_socket(address, options):
    """
    Given (host, port) and PoolOptions, return a configured socket.

        Can raise socket.error, ConnectionFailure, or CertificateError.

        Sets socket's SSL and timeout options.
    
    """
def _PoolClosedError(PyMongoError):
    """
    Internal error raised when a thread tries to get a connection from a
        closed pool.
    
    """
def Pool:
    """

            :Parameters:
              - `address`: a (hostname, port) tuple
              - `options`: a PoolOptions instance
              - `handshake`: whether to call ismaster for each new SocketInfo
        
    """
    def _reset(self, close):
        """
         CMAP spec says that close() MUST close sockets before publishing the
         PoolClosedEvent but that reset() SHOULD close sockets *after*
         publishing the PoolClearedEvent.

        """
    def update_is_writable(self, is_writable):
        """
        Updates the is_writable attribute on all sockets currently in the
                Pool.
        
        """
    def reset(self):
        """
        Removes stale sockets then adds new ones if pool is too small and
                has not been reset. The `reference_generation` argument specifies the
                `generation` at the point in time this operation was requested on the
                pool.
        
        """
    def connect(self, all_credentials=None):
        """
        Connect to Mongo and return a new SocketInfo.

                Can raise ConnectionFailure or CertificateError.

                Note that the pool does not keep a reference to the socket -- you
                must call return_socket() when you're done with it.
        
        """
    def get_socket(self, all_credentials, checkout=False):
        """
        Get a socket from the pool. Use with a "with" statement.

                Returns a :class:`SocketInfo` object wrapping a connected
                :class:`socket.socket`.

                This method should always be used in a with-statement::

                    with pool.get_socket(credentials, checkout) as socket_info:
                        socket_info.send_message(msg)
                        data = socket_info.receive_message(op_code, request_id)

                The socket is logged in or out as needed to match ``all_credentials``
                using the correct authentication mechanism for the server's wire
                protocol version.

                Can raise ConnectionFailure or OperationFailure.

                :Parameters:
                  - `all_credentials`: dict, maps auth source to MongoCredential.
                  - `checkout` (optional): keep socket checked out.
        
        """
    def _get_socket(self, all_credentials):
        """
        Get or create a SocketInfo. Can raise ConnectionFailure.
        """
    def return_socket(self, sock_info):
        """
        Return the socket to the pool, or if it's closed discard it.

                :Parameters:
                  - `sock_info`: The socket to check into the pool.
        
        """
    def _perished(self, sock_info):
        """
        Return True and close the connection if it is "perished".

                This side-effecty function checks if this socket has been idle for
                for longer than the max idle time, or if the socket has been closed by
                some external network error, or if the socket's generation is outdated.

                Checking sockets lets us avoid seeing *some*
                :class:`~pymongo.errors.AutoReconnect` exceptions on server
                hiccups, etc. We only check if the socket was closed by an external
                error if it has been > 1 second since the socket was checked into the
                pool, to keep performance reasonable - we can't avoid AutoReconnects
                completely anyway.
        
        """
    def _raise_wait_queue_timeout(self):
        """
        'Timed out while checking out a connection from connection pool '
        'with max_size %r and wait_queue_timeout %r'
        """
    def __del__(self):
        """
         Avoid ResourceWarnings in Python 3
         Close all sockets without calling reset() or close() because it is
         not safe to acquire a lock in __del__.

        """
