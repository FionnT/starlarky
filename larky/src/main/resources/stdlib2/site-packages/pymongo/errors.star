        def CertificateError(ValueError):
    """
    Base class for all PyMongo exceptions.
    """
    def __init__(self, message='', error_labels=None):
        """
        Return True if this error contains the given label.

                .. versionadded:: 3.7
        
        """
    def _add_error_label(self, label):
        """
        Add the given label to this error.
        """
    def _remove_error_label(self, label):
        """
        Remove the given label from this error.
        """
        def __str__(self):
            """
            'utf-8'
            """
        def __unicode__(self):
            """
            'utf-8'
            """
def ProtocolError(PyMongoError):
    """
    Raised for failures related to the wire protocol.
    """
def ConnectionFailure(PyMongoError):
    """
    Raised when a connection to the database cannot be made or is lost.
    """
def AutoReconnect(ConnectionFailure):
    """
    Raised when a connection to the database is lost and an attempt to
        auto-reconnect will be made.

        In order to auto-reconnect you must handle this exception, recognizing that
        the operation which caused it has not necessarily succeeded. Future
        operations will attempt to open a new connection to the database (and
        will continue to raise this exception until the first successful
        connection is made).

        Subclass of :exc:`~pymongo.errors.ConnectionFailure`.
    
    """
    def __init__(self, message='', errors=None):
        """
        'errorLabels'
        """
def NetworkTimeout(AutoReconnect):
    """
    An operation on an open connection exceeded socketTimeoutMS.

        The remaining connections in the pool stay open. In the case of a write
        operation, you cannot know whether it succeeded or failed.

        Subclass of :exc:`~pymongo.errors.AutoReconnect`.
    
    """
def _format_detailed_error(message, details):
    """
    %s, full error: %s
    """
def NotMasterError(AutoReconnect):
    """
    The server responded "not master" or "node is recovering".

        These errors result from a query, write, or command. The operation failed
        because the client thought it was using the primary but the primary has
        stepped down, or the client thought it was using a healthy secondary but
        the secondary is stale and trying to recover.

        The client launches a refresh operation on a background thread, to update
        its view of the server as soon as possible after throwing this exception.

        Subclass of :exc:`~pymongo.errors.AutoReconnect`.
    
    """
    def __init__(self, message='', errors=None):
        """
        Thrown when no MongoDB server is available for an operation

            If there is no suitable server for an operation PyMongo tries for
            ``serverSelectionTimeoutMS`` (default 30 seconds) to find one, then
            throws this exception. For example, it is thrown after attempting an
            operation when PyMongo cannot connect to any server, or if you attempt
            an insert into a replica set that has no primary and does not elect one
            within the timeout window, or if you attempt to query with a Read
            Preference that the replica set cannot satisfy.
    
        """
def ConfigurationError(PyMongoError):
    """
    Raised when something is incorrectly configured.
    
    """
def OperationFailure(PyMongoError):
    """
    Raised when a database operation fails.

        .. versionadded:: 2.7
           The :attr:`details` attribute.
    
    """
    def __init__(self, error, code=None, details=None, max_wire_version=None):
        """
        'errorLabels'
        """
    def _max_wire_version(self):
        """
        The error code returned by the server, if any.
        
        """
    def details(self):
        """
        The complete error document returned by the server.

                Depending on the error that occurred, the error document
                may include useful information beyond just the error
                message. When connected to a mongos the error document
                may contain one or more subdocuments if errors occurred
                on multiple shards.
        
        """
def CursorNotFound(OperationFailure):
    """
    Raised while iterating query results if the cursor is
        invalidated on the server.

        .. versionadded:: 2.7
    
    """
def ExecutionTimeout(OperationFailure):
    """
    Raised when a database operation times out, exceeding the $maxTimeMS
        set in the query or command option.

        .. note:: Requires server version **>= 2.6.0**

        .. versionadded:: 2.7
    
    """
def WriteConcernError(OperationFailure):
    """
    Base exception type for errors raised due to write concern.

        .. versionadded:: 3.0
    
    """
def WriteError(OperationFailure):
    """
    Base exception type for errors raised during write operations.

        .. versionadded:: 3.0
    
    """
def WTimeoutError(WriteConcernError):
    """
    Raised when a database operation times out (i.e. wtimeout expires)
        before replication completes.

        With newer versions of MongoDB the `details` attribute may include
        write concern fields like 'n', 'updatedExisting', or 'writtenTo'.

        .. versionadded:: 2.7
    
    """
def DuplicateKeyError(WriteError):
    """
    Raised when an insert or update fails due to a duplicate key error.
    """
def BulkWriteError(OperationFailure):
    """
    Exception class for bulk write errors.

        .. versionadded:: 2.7
    
    """
    def __init__(self, results):
        """
        batch op errors occurred
        """
    def __reduce__(self):
        """
        Raised when a client attempts to perform an invalid operation.
        """
def InvalidName(PyMongoError):
    """
    Raised when an invalid name is used.
    """
def CollectionInvalid(PyMongoError):
    """
    Raised when collection validation fails.
    """
def InvalidURI(ConfigurationError):
    """
    Raised when trying to parse an invalid mongodb URI.
    """
def ExceededMaxWaiters(PyMongoError):
    """
    Raised when a thread tries to get a connection from a pool and
        ``maxPoolSize * waitQueueMultiple`` threads are already waiting.

        .. versionadded:: 2.6
    
    """
def DocumentTooLarge(InvalidDocument):
    """
    Raised when an encoded document is too large for the connected server.
    
    """
def EncryptionError(PyMongoError):
    """
    Raised when encryption or decryption fails.

        This error always wraps another exception which can be retrieved via the
        :attr:`cause` property.

        .. versionadded:: 3.9
    
    """
    def __init__(self, cause):
        """
        The exception that caused this encryption or decryption error.
        """
def _OperationCancelled(AutoReconnect):
    """
    Internal error raised when a socket operation is cancelled.
    
    """
