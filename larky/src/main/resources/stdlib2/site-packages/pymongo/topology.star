def process_events_queue(queue_ref):
    """
     Cancel PeriodicExecutor.
    """
def Topology(object):
    """
    Monitor a topology of one or more servers.
    """
    def __init__(self, topology_settings):
        """
         Create events queue if there are publishers.

        """
            def target():
                """
                pymongo_events_thread
                """
    def open(self):
        """
        Start monitoring, or restart after a fork.

                No effect if called multiple times.

                .. warning:: Topology is shared among multiple threads and is protected
                  by mutual exclusion. Using Topology from a process other than the one
                  that initialized it will emit a warning and may result in deadlock. To
                  prevent this from happening, MongoClient must be created after any
                  forking.

        
        """
2021-03-02 20:50:15,684 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:15,684 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:15,685 : INFO : tokenize_signature : --> do i ever get here?
    def select_servers(self,
                       selector,
                       server_selection_timeout=None,
                       address=None):
        """
        Return a list of Servers matching selector, or time out.

                :Parameters:
                  - `selector`: function that takes a list of Servers and returns
                    a subset of them.
                  - `server_selection_timeout` (optional): maximum seconds to wait.
                    If not provided, the default value common.SERVER_SELECTION_TIMEOUT
                    is used.
                  - `address`: optional server address to select.

                Calls self.open() if needed.

                Raises exc:`ServerSelectionTimeoutError` after
                `server_selection_timeout` if no matching servers are found.
        
        """
    def _select_servers_loop(self, selector, timeout, address):
        """
        select_servers() guts. Hold the lock when calling this.
        """
2021-03-02 20:50:15,686 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:15,686 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:15,686 : INFO : tokenize_signature : --> do i ever get here?
    def select_server(self,
                      selector,
                      server_selection_timeout=None,
                      address=None):
        """
        Like select_servers, but choose a random server if several match.
        """
2021-03-02 20:50:15,686 : INFO : tokenize_signature : --> do i ever get here?
    def select_server_by_address(self, address,
                                 server_selection_timeout=None):
        """
        Return a Server for "address", reconnecting if necessary.

                If the server's type is not known, request an immediate check of all
                servers. Time out after "server_selection_timeout" if the server
                cannot be reached.

                :Parameters:
                  - `address`: A (host, port) pair.
                  - `server_selection_timeout` (optional): maximum seconds to wait.
                    If not provided, the default value
                    common.SERVER_SELECTION_TIMEOUT is used.

                Calls self.open() if needed.

                Raises exc:`ServerSelectionTimeoutError` after
                `server_selection_timeout` if no matching servers are found.
        
        """
    def _process_change(self, server_description, reset_pool=False):
        """
        Process a new ServerDescription on an opened topology.

                Hold the lock when calling this.
        
        """
    def on_change(self, server_description, reset_pool=False):
        """
        Process a new ServerDescription after an ismaster call completes.
        """
    def _process_srv_update(self, seedlist):
        """
        Process a new seedlist on an opened topology.
                Hold the lock when calling this.
        
        """
    def on_srv_update(self, seedlist):
        """
        Process a new list of nodes obtained from scanning SRV records.
        """
    def get_server_by_address(self, address):
        """
        Get a Server or None.

                Returns the current version of the server immediately, even if it's
                Unknown or absent from the topology. Only use this in unittests.
                In driver code, use select_server_by_address, since then you're
                assured a recent view of the server's type and wire protocol version.
        
        """
    def has_server(self, address):
        """
        Return primary's address or None.
        """
    def _get_replica_set_members(self, selector):
        """
        Return set of replica set member addresses.
        """
    def get_secondaries(self):
        """
        Return set of secondary addresses.
        """
    def get_arbiters(self):
        """
        Return set of arbiter addresses.
        """
    def max_cluster_time(self):
        """
        Return a document, the highest seen $clusterTime.
        """
    def _receive_cluster_time_no_lock(self, cluster_time):
        """
         Driver Sessions Spec: "Whenever a driver receives a cluster time from
         a server it MUST compare it to the current highest seen cluster time
         for the deployment. If the new cluster time is higher than the
         highest seen cluster time it MUST become the new highest seen cluster
         time. Two cluster times are compared using only the BsonTimestamp
         value of the clusterTime embedded field.

        """
    def receive_cluster_time(self, cluster_time):
        """
        Wake all monitors, wait for at least one to check its server.
        """
    def handle_getlasterror(self, address, error_msg):
        """
        Clear our pool for a server, mark it Unknown, and check it soon.
        """
    def update_pool(self, all_credentials):
        """
         Remove any stale sockets and add new sockets if pool is too small.

        """
    def close(self):
        """
        Clear pools and terminate monitors. Topology reopens on demand.
        """
    def description(self):
        """
        Pop all session ids from the pool.
        """
    def get_server_session(self):
        """
        Start or resume a server session, or raise ConfigurationError.
        """
    def return_server_session(self, server_session, lock):
        """
         Called from a __del__ method, can't use a lock.

        """
    def _new_selection(self):
        """
        A Selection object, initially including all known servers.

                Hold the lock when calling this.
        
        """
    def _ensure_opened(self):
        """
        Start monitors, or restart after a fork.

                Hold the lock when calling this.
        
        """
    def _is_stale_error(self, address, err_ctx):
        """
         Another thread removed this server from the topology.

        """
    def _handle_error(self, address, err_ctx):
        """
         The socket has been closed. Don't reset the server.
         Server Discovery And Monitoring Spec: "When an application
         operation fails because of any network error besides a socket
         timeout....

        """
    def handle_error(self, address, err_ctx):
        """
        Handle an application error.

                May reset the server to Unknown, clear the pool, and request an
                immediate check depending on the error and the context.
        
        """
    def _request_check_all(self):
        """
        Wake all monitors. Hold the lock when calling this.
        """
    def _update_servers(self):
        """
        Sync our Servers from TopologyDescription.server_descriptions.

                Hold the lock while calling this.
        
        """
    def _create_pool_for_server(self, address):
        """
         According to the Server Discovery And Monitoring Spec, monitors use
         connect_timeout for both connect_timeout and socket_timeout. The
         pool only has one socket so maxPoolSize and so on aren't needed.

        """
    def _error_message(self, selector):
        """
        Format an error message if server selection fails.

                Hold the lock when calling this.
        
        """
    def __repr__(self):
        """
        ''
        """
def _ErrorContext(object):
    """
    An error with context for SDAM error handling.
    """
2021-03-02 20:50:15,697 : INFO : tokenize_signature : --> do i ever get here?
    def __init__(self, error, max_wire_version, sock_generation,
                 completed_handshake):
        """
        Return True if the error's topologyVersion is <= current.
        """
def _is_stale_server_description(current_sd, new_sd):
    """
    Return True if the new topologyVersion is < current.
    """
