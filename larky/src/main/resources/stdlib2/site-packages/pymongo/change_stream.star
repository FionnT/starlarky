def ChangeStream(object):
    """
    The internal abstract base class for change stream cursors.

        Should not be called directly by application developers. Use 
        :meth:`pymongo.collection.Collection.watch`,
        :meth:`pymongo.database.Database.watch`, or
        :meth:`pymongo.mongo_client.MongoClient.watch` instead.

        .. versionadded:: 3.6
        .. mongodoc:: changeStreams
    
    """
2021-03-02 20:50:16,093 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:16,094 : INFO : tokenize_signature : --> do i ever get here?
    def __init__(self, target, pipeline, full_document, resume_after,
                 max_await_time_ms, batch_size, collation,
                 start_at_operation_time, session, start_after):
        """
        pipeline must be a list
        """
    def _aggregation_command_class(self):
        """
        The aggregation command class to be used.
        """
    def _client(self):
        """
        The client against which the aggregation commands for
                this ChangeStream will be run. 
        """
    def _change_stream_options(self):
        """
        Return the options dict for the $changeStream pipeline stage.
        """
    def _command_options(self):
        """
        Return the options dict for the aggregation command.
        """
    def _aggregation_pipeline(self):
        """
        Return the full aggregation pipeline for this ChangeStream.
        """
    def _process_result(self, result, session, server, sock_info, slave_ok):
        """
        Callback that caches the postBatchResumeToken or
                startAtOperationTime from a changeStream aggregate command response
                containing an empty batch of change documents.

                This is implemented as a callback because we need access to the wire
                version in order to determine whether to cache this value.
        
        """
    def _run_aggregation_cmd(self, session, explicit_session):
        """
        Run the full aggregation pipeline for this ChangeStream and return
                the corresponding CommandCursor.
        
        """
    def _create_cursor(self):
        """
        Reestablish this change stream after a resumable error.
        """
    def close(self):
        """
        Close this ChangeStream.
        """
    def __iter__(self):
        """
        The cached resume token that will be used to resume after the most
                recently returned change.

                .. versionadded:: 3.9
        
        """
    def next(self):
        """
        Advance the cursor.

                This method blocks until the next change document is returned or an
                unrecoverable error is raised. This method is used when iterating over
                all changes in the cursor. For example::

                    try:
                        resume_token = None
                        pipeline = [{'$match': {'operationType': 'insert'}}]
                        with db.collection.watch(pipeline) as stream:
                            for insert_change in stream:
                                print(insert_change)
                                resume_token = stream.resume_token
                    except pymongo.errors.PyMongoError:
                        # The ChangeStream encountered an unrecoverable error or the
                        # resume attempt failed to recreate the cursor.
                        if resume_token is None:
                            # There is no usable resume token because there was a
                            # failure during ChangeStream initialization.
                            logging.error('...')
                        else:
                            # Use the interrupted ChangeStream's resume token to create
                            # a new ChangeStream. The new stream will continue from the
                            # last seen insert change without missing any events.
                            with db.collection.watch(
                                    pipeline, resume_after=resume_token) as stream:
                                for insert_change in stream:
                                    print(insert_change)

                Raises :exc:`StopIteration` if this ChangeStream is closed.
        
        """
    def alive(self):
        """
        Does this cursor have the potential to return more data?

                .. note:: Even if :attr:`alive` is ``True``, :meth:`next` can raise
                    :exc:`StopIteration` and :meth:`try_next` can return ``None``.

                .. versionadded:: 3.8
        
        """
    def try_next(self):
        """
        Advance the cursor without blocking indefinitely.

                This method returns the next change document without waiting
                indefinitely for the next change. For example::

                    with db.collection.watch() as stream:
                        while stream.alive:
                            change = stream.try_next()
                            # Note that the ChangeStream's resume token may be updated
                            # even when no changes are returned.
                            print("Current resume token: %r" % (stream.resume_token,))
                            if change is not None:
                                print("Change document: %r" % (change,))
                                continue
                            # We end up here when there are no recent changes.
                            # Sleep for a while before trying again to avoid flooding
                            # the server with getMore requests when no changes are
                            # available.
                            time.sleep(10)

                If no change document is cached locally then this method runs a single
                getMore command. If the getMore yields any documents, the next
                document is returned, otherwise, if the getMore returns no documents
                (because there have been no changes) then ``None`` is returned.

                :Returns:
                  The next change document or ``None`` when no document is available
                  after running a single getMore or when the cursor is closed.

                .. versionadded:: 3.8
        
        """
    def __enter__(self):
        """
        A change stream that watches changes on a single collection.

            Should not be called directly by application developers. Use
            helper method :meth:`pymongo.collection.Collection.watch` instead.

            .. versionadded:: 3.7
    
        """
    def _aggregation_command_class(self):
        """
        A change stream that watches changes on all collections in a database.

            Should not be called directly by application developers. Use
            helper method :meth:`pymongo.database.Database.watch` instead.

            .. versionadded:: 3.7
    
        """
    def _aggregation_command_class(self):
        """
        A change stream that watches changes on all collections in the cluster.

            Should not be called directly by application developers. Use
            helper method :meth:`pymongo.mongo_client.MongoClient.watch` instead.

            .. versionadded:: 3.7
    
        """
    def _change_stream_options(self):
        """
        allChangesForCluster
        """
