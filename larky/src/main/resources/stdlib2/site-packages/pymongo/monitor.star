def _sanitize(error):
    """
    PYTHON-2433 Clear error traceback info.
    """
def MonitorBase(object):
    """
    Base class to do periodic work on a background thread.

            The the background thread is signaled to stop when the Topology or
            this instance is freed.
        
    """
        def target():
            """
             Stop the executor.
            """
        def _on_topology_gc(dummy=None):
            """
             This prevents GC from waiting 10 seconds for isMaster to complete
             See test_cleanup_executors_on_client_del.

            """
    def open(self):
        """
        Start monitoring, or restart after a fork.

                Multiple calls have no effect.
        
        """
    def gc_safe_close(self):
        """
        GC safe close.
        """
    def close(self):
        """
        Close and stop monitoring.

                open() restarts the monitor after closing.
        
        """
    def join(self, timeout=None):
        """
        Wait for the monitor to stop.
        """
    def request_check(self):
        """
        If the monitor is sleeping, wake it soon.
        """
def Monitor(MonitorBase):
    """
    Class to monitor a MongoDB server on a background thread.

            Pass an initial ServerDescription, a Topology, a Pool, and
            TopologySettings.

            The Topology is weakly referenced. The Pool must be exclusive to this
            Monitor.
        
    """
    def cancel_check(self):
        """
        Cancel any concurrent isMaster check.

                Note: this is called from a weakref.proxy callback and MUST NOT take
                any locks.
        
        """
    def _start_rtt_monitor(self):
        """
        Start an _RttMonitor that periodically runs ping.
        """
    def gc_safe_close(self):
        """
         Increment the generation and maybe close the socket. If the executor
         thread has the socket checked out, it will be closed when checked in.

        """
    def _reset_connection(self):
        """
         Clear our pooled connection.

        """
    def _run(self):
        """
         Already closed the connection, wait for the next check.

        """
    def _check_server(self):
        """
        Call isMaster or read the next streaming response.

                Returns a ServerDescription.
        
        """
    def _check_once(self):
        """
        A single attempt to call ismaster.

                Returns a ServerDescription, or raises an exception.
        
        """
    def _check_with_socket(self, conn):
        """
        Return (IsMaster, round_trip_time).

                Can raise ConnectionFailure or OperationFailure.
        
        """
def SrvMonitor(MonitorBase):
    """
    Class to poll SRV records on a background thread.

            Pass a Topology and a TopologySettings.

            The Topology is weakly referenced.
        
    """
    def _run(self):
        """
         Topology was garbage-collected.

        """
    def _get_seedlist(self):
        """
        Poll SRV records for a seedlist.

                Returns a list of ServerDescriptions.
        
        """
def _RttMonitor(MonitorBase):
    """
    Maintain round trip times for a server.

            The Topology is weakly referenced.
        
    """
    def close(self):
        """
         Increment the generation and maybe close the socket. If the executor
         thread has the socket checked out, it will be closed when checked in.

        """
    def add_sample(self, sample):
        """
        Add a RTT sample.
        """
    def average(self):
        """
        Get the calculated average, or None if no samples yet.
        """
    def reset(self):
        """
        Reset the average RTT.
        """
    def _run(self):
        """
         NOTE: This thread is only run when when using the streaming
         heartbeat protocol (MongoDB 4.4+).
         XXX: Skip check if the server is unknown?

        """
    def _ping(self):
        """
        Run an "isMaster" command and return the RTT.
        """
def _register(monitor):
    """
     Copy the set. Closing monitors removes them.

    """
def _shutdown_resources():
    """
     _shutdown_monitors/_shutdown_executors may already be GC'd at shutdown.

    """
