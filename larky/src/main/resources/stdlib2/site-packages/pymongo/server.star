def Server(object):
    """
    Represent one MongoDB server.
    """
    def open(self):
        """
        Start monitoring, or restart after a fork.

                Multiple calls have no effect.
        
        """
    def reset(self):
        """
        Clear the connection pool.
        """
    def close(self):
        """
        Clear the connection pool and stop the monitor.

                Reconnect with open().
        
        """
    def request_check(self):
        """
        Check the server's state soon.
        """
2021-03-02 20:50:09,382 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:09,382 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:09,382 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:09,382 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:09,382 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:09,382 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:50:09,382 : INFO : tokenize_signature : --> do i ever get here?
    def run_operation_with_response(
            self,
            sock_info,
            operation,
            set_slave_okay,
            listeners,
            exhaust,
            unpack_res):
        """
        Run a _Query or _GetMore operation and return a Response object.

                This method is used only to run _Query/_GetMore operations from
                cursors.
                Can raise ConnectionFailure, OperationFailure, etc.

                :Parameters:
                  - `operation`: A _Query or _GetMore object.
                  - `set_slave_okay`: Pass to operation.get_message.
                  - `all_credentials`: dict, maps auth source to MongoCredential.
                  - `listeners`: Instance of _EventListeners or None.
                  - `exhaust`: If True, then this is an exhaust cursor operation.
                  - `unpack_res`: A callable that decodes the wire protocol response.
        
        """
    def get_socket(self, all_credentials, checkout=False):
        """
        Return request_id, data, max_doc_size.

                :Parameters:
                  - `message`: (request_id, data, max_doc_size) or (request_id, data)
        
        """
    def __repr__(self):
        """
        '<%s %r>'
        """
