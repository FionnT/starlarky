def _Cache(object):
    """
    data
    """
    def __init__(self):
        """
         Two instances must always compare equal.

        """
    def __ne__(self, other):
        """
        'MongoCredential'
        """
def _build_credentials_tuple(mech, source, user, passwd, extra, database):
    """
    Build and return a mechanism specific credentials tuple.
    
    """
    def _xor(fir, sec):
        """
        XOR two byte strings together (python 3.x).
        """
    def _xor(fir, sec):
        """
        XOR two byte strings together (python 2.x).
        """
    def _from_bytes(value, dummy, _int=int, _hexlify=_hexlify):
        """
        An implementation of int.from_bytes for python 2.x.
        """
    def _to_bytes(value, length, dummy, _unhexlify=_unhexlify):
        """
        An implementation of int.to_bytes for python 2.x.
        """
        def _hi(hash_name, data, salt, iterations):
            """
            A simple implementation of PBKDF2-HMAC.
            """
            def _digest(msg, mac=mac):
                """
                Get a digest for msg.
                """
        def _xor_bytes(a, b):
            """
             Python 2.x < 2.7.7
             Note: This method is intentionally obtuse to prevent timing attacks. Do
             not refactor it!
             References:
              - http://bugs.python.org/issue14532
              - http://bugs.python.org/issue14955
              - http://bugs.python.org/issue15061

            """
    def compare_digest(a, b, _xor_bytes=_xor_bytes):
        """
        Split a scram response into key, value pairs.
        """
def _authenticate_scram_start(credentials, mechanism):
    """
    utf-8
    """
def _authenticate_scram(credentials, sock_info, mechanism):
    """
    Authenticate using SCRAM.
    """
def _password_digest(username, password):
    """
    Get a password digest to use for authentication.
    
    """
def _auth_key(nonce, username, password):
    """
    Get an auth key to use for authentication.
    
    """
def _canonicalize_hostname(hostname):
    """
    Canonicalize hostname following MIT-krb5 behavior.
    """
def _authenticate_gssapi(credentials, sock_info):
    """
    Authenticate using GSSAPI.
    
    """
def _authenticate_plain(credentials, sock_info):
    """
    Authenticate using SASL PLAIN (RFC 4616)
    
    """
def _authenticate_cram_md5(credentials, sock_info):
    """
    Authenticate using CRAM-MD5 (RFC 2195)
    
    """
def _authenticate_x509(credentials, sock_info):
    """
    Authenticate using MONGODB-X509.
    
    """
def _authenticate_mongo_cr(credentials, sock_info):
    """
    Authenticate using MONGODB-CR.
    
    """
def _authenticate_default(credentials, sock_info):
    """
    'ismaster'
    """
def _AuthContext(object):
    """
     The 'db' field is included only on the speculative command.

    """
def _X509Context(_AuthContext):
    """
    'authenticate'
    """
def authenticate(credentials, sock_info):
    """
    Authenticate sock_info.
    """
def logout(source, sock_info):
    """
    Log out from a database.
    """
