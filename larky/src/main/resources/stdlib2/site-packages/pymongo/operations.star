def InsertOne(object):
    """
    Represents an insert_one operation.
    """
    def __init__(self, document):
        """
        Create an InsertOne instance.

                For use with :meth:`~pymongo.collection.Collection.bulk_write`.

                :Parameters:
                  - `document`: The document to insert. If the document is missing an
                    _id field one will be added.
        
        """
    def _add_to_bulk(self, bulkobj):
        """
        Add this operation to the _Bulk instance `bulkobj`.
        """
    def __repr__(self):
        """
        InsertOne(%r)
        """
    def __eq__(self, other):
        """
        Represents a delete_one operation.
        """
    def __init__(self, filter, collation=None, hint=None):
        """
        Create a DeleteOne instance.

                For use with :meth:`~pymongo.collection.Collection.bulk_write`.

                :Parameters:
                  - `filter`: A query that matches the document to delete.
                  - `collation` (optional): An instance of
                    :class:`~pymongo.collation.Collation`. This option is only
                    supported on MongoDB 3.4 and above.
                  - `hint` (optional): An index to use to support the query
                    predicate specified either by its string name, or in the same
                    format as passed to
                    :meth:`~pymongo.collection.Collection.create_index` (e.g.
                    ``[('field', ASCENDING)]``). This option is only supported on
                    MongoDB 4.4 and above.

                .. versionchanged:: 3.11
                   Added the ``hint`` option.
                .. versionchanged:: 3.5
                   Added the `collation` option.
        
        """
    def _add_to_bulk(self, bulkobj):
        """
        Add this operation to the _Bulk instance `bulkobj`.
        """
    def __repr__(self):
        """
        DeleteOne(%r, %r)
        """
    def __eq__(self, other):
        """
        Represents a delete_many operation.
        """
    def __init__(self, filter, collation=None, hint=None):
        """
        Create a DeleteMany instance.

                For use with :meth:`~pymongo.collection.Collection.bulk_write`.

                :Parameters:
                  - `filter`: A query that matches the documents to delete.
                  - `collation` (optional): An instance of
                    :class:`~pymongo.collation.Collation`. This option is only
                    supported on MongoDB 3.4 and above.
                  - `hint` (optional): An index to use to support the query
                    predicate specified either by its string name, or in the same
                    format as passed to
                    :meth:`~pymongo.collection.Collection.create_index` (e.g.
                    ``[('field', ASCENDING)]``). This option is only supported on
                    MongoDB 4.4 and above.

                .. versionchanged:: 3.11
                   Added the ``hint`` option.
                .. versionchanged:: 3.5
                   Added the `collation` option.
        
        """
    def _add_to_bulk(self, bulkobj):
        """
        Add this operation to the _Bulk instance `bulkobj`.
        """
    def __repr__(self):
        """
        DeleteMany(%r, %r)
        """
    def __eq__(self, other):
        """
        Represents a replace_one operation.
        """
2021-03-02 20:50:13,864 : INFO : tokenize_signature : --> do i ever get here?
    def __init__(self, filter, replacement, upsert=False, collation=None,
                 hint=None):
        """
        Create a ReplaceOne instance.

                For use with :meth:`~pymongo.collection.Collection.bulk_write`.

                :Parameters:
                  - `filter`: A query that matches the document to replace.
                  - `replacement`: The new document.
                  - `upsert` (optional): If ``True``, perform an insert if no documents
                    match the filter.
                  - `collation` (optional): An instance of
                    :class:`~pymongo.collation.Collation`. This option is only
                    supported on MongoDB 3.4 and above.
                  - `hint` (optional): An index to use to support the query
                    predicate specified either by its string name, or in the same
                    format as passed to
                    :meth:`~pymongo.collection.Collection.create_index` (e.g.
                    ``[('field', ASCENDING)]``). This option is only supported on
                    MongoDB 4.2 and above.

                .. versionchanged:: 3.11
                   Added the ``hint`` option.
                .. versionchanged:: 3.5
                   Added the ``collation`` option.
        
        """
    def _add_to_bulk(self, bulkobj):
        """
        Add this operation to the _Bulk instance `bulkobj`.
        """
    def __eq__(self, other):
        """
        %s(%r, %r, %r, %r, %r)
        """
def _UpdateOp(object):
    """
    Private base class for update operations.
    """
    def __init__(self, filter, doc, upsert, collation, array_filters, hint):
        """
        filter
        """
    def __eq__(self, other):
        """
        %s(%r, %r, %r, %r, %r, %r)
        """
def UpdateOne(_UpdateOp):
    """
    Represents an update_one operation.
    """
2021-03-02 20:50:13,867 : INFO : tokenize_signature : --> do i ever get here?
    def __init__(self, filter, update, upsert=False, collation=None,
                 array_filters=None, hint=None):
        """
        Represents an update_one operation.

                For use with :meth:`~pymongo.collection.Collection.bulk_write`.

                :Parameters:
                  - `filter`: A query that matches the document to update.
                  - `update`: The modifications to apply.
                  - `upsert` (optional): If ``True``, perform an insert if no documents
                    match the filter.
                  - `collation` (optional): An instance of
                    :class:`~pymongo.collation.Collation`. This option is only
                    supported on MongoDB 3.4 and above.
                  - `array_filters` (optional): A list of filters specifying which
                    array elements an update should apply. Requires MongoDB 3.6+.
                  - `hint` (optional): An index to use to support the query
                    predicate specified either by its string name, or in the same
                    format as passed to
                    :meth:`~pymongo.collection.Collection.create_index` (e.g.
                    ``[('field', ASCENDING)]``). This option is only supported on
                    MongoDB 4.2 and above.

                .. versionchanged:: 3.11
                   Added the `hint` option.
                .. versionchanged:: 3.9
                   Added the ability to accept a pipeline as the `update`.
                .. versionchanged:: 3.6
                   Added the `array_filters` option.
                .. versionchanged:: 3.5
                   Added the `collation` option.
        
        """
    def _add_to_bulk(self, bulkobj):
        """
        Add this operation to the _Bulk instance `bulkobj`.
        """
def UpdateMany(_UpdateOp):
    """
    Represents an update_many operation.
    """
2021-03-02 20:50:13,868 : INFO : tokenize_signature : --> do i ever get here?
    def __init__(self, filter, update, upsert=False, collation=None,
                 array_filters=None, hint=None):
        """
        Create an UpdateMany instance.

                For use with :meth:`~pymongo.collection.Collection.bulk_write`.

                :Parameters:
                  - `filter`: A query that matches the documents to update.
                  - `update`: The modifications to apply.
                  - `upsert` (optional): If ``True``, perform an insert if no documents
                    match the filter.
                  - `collation` (optional): An instance of
                    :class:`~pymongo.collation.Collation`. This option is only
                    supported on MongoDB 3.4 and above.
                  - `array_filters` (optional): A list of filters specifying which
                    array elements an update should apply. Requires MongoDB 3.6+.
                  - `hint` (optional): An index to use to support the query
                    predicate specified either by its string name, or in the same
                    format as passed to
                    :meth:`~pymongo.collection.Collection.create_index` (e.g.
                    ``[('field', ASCENDING)]``). This option is only supported on
                    MongoDB 4.2 and above.

                .. versionchanged:: 3.11
                   Added the `hint` option.
                .. versionchanged:: 3.9
                   Added the ability to accept a pipeline as the `update`.
                .. versionchanged:: 3.6
                   Added the `array_filters` option.
                .. versionchanged:: 3.5
                   Added the `collation` option.
        
        """
    def _add_to_bulk(self, bulkobj):
        """
        Add this operation to the _Bulk instance `bulkobj`.
        """
def IndexModel(object):
    """
    Represents an index to create.
    """
    def __init__(self, keys, **kwargs):
        """
        Create an Index instance.

                For use with :meth:`~pymongo.collection.Collection.create_indexes`.

                Takes either a single key or a list of (key, direction) pairs.
                The key(s) must be an instance of :class:`basestring`
                (:class:`str` in python 3), and the direction(s) must be one of
                (:data:`~pymongo.ASCENDING`, :data:`~pymongo.DESCENDING`,
                :data:`~pymongo.GEO2D`, :data:`~pymongo.GEOHAYSTACK`,
                :data:`~pymongo.GEOSPHERE`, :data:`~pymongo.HASHED`,
                :data:`~pymongo.TEXT`).

                Valid options include, but are not limited to:

                  - `name`: custom name to use for this index - if none is
                    given, a name will be generated.
                  - `unique`: if ``True``, creates a uniqueness constraint on the index.
                  - `background`: if ``True``, this index should be created in the
                    background.
                  - `sparse`: if ``True``, omit from the index any documents that lack
                    the indexed field.
                  - `bucketSize`: for use with geoHaystack indexes.
                    Number of documents to group together within a certain proximity
                    to a given longitude and latitude.
                  - `min`: minimum value for keys in a :data:`~pymongo.GEO2D`
                    index.
                  - `max`: maximum value for keys in a :data:`~pymongo.GEO2D`
                    index.
                  - `expireAfterSeconds`: <int> Used to create an expiring (TTL)
                    collection. MongoDB will automatically delete documents from
                    this collection after <int> seconds. The indexed field must
                    be a UTC datetime or the data will not expire.
                  - `partialFilterExpression`: A document that specifies a filter for
                    a partial index. Requires MongoDB >= 3.2.
                  - `collation`: An instance of :class:`~pymongo.collation.Collation`
                    that specifies the collation to use in MongoDB >= 3.4.
                  - `wildcardProjection`: Allows users to include or exclude specific
                    field paths from a `wildcard index`_ using the { "$**" : 1} key
                    pattern. Requires MongoDB >= 4.2.
                  - `hidden`: if ``True``, this index will be hidden from the query
                    planner and will not be evaluated as part of query plan
                    selection. Requires MongoDB >= 4.4.

                See the MongoDB documentation for a full list of supported options by
                server version.

                :Parameters:
                  - `keys`: a single key or a list of (key, direction)
                    pairs specifying the index to create
                  - `**kwargs` (optional): any additional index creation
                    options (see the above list) should be passed as keyword
                    arguments

                .. versionchanged:: 3.11
                   Added the ``hidden`` option.
                .. versionchanged:: 3.2
                   Added the ``partialFilterExpression`` option to support partial
                   indexes.

                .. _wildcard index: https://docs.mongodb.com/master/core/index-wildcard/#wildcard-index-core
        
        """
    def document(self):
        """
        An index document suitable for passing to the createIndexes
                command.
        
        """
