def _load_trusted_ca_certs(cafile):
    """
    Parse the tlsCAFile into a list of certificates.
    """
def _get_issuer_cert(cert, chain, trusted_ca_certs):
    """
     Depending on the server's TLS library, the peer's cert chain may not
     include the self signed root CA. In this case we check the user
     provided tlsCAFile (ssl_ca_certs) for the issuer.
     Remove once we use the verified peer cert chain in PYTHON-2147.

    """
def _verify_signature(key, signature, algorithm, data):
    """
     See cryptography.x509.Certificate.public_key
     for the public key types.

    """
def _get_extension(cert, klass):
    """
     https://tools.ietf.org/html/rfc2560#section-4.2.1
     "KeyHash ::= OCTET STRING -- SHA-1 hash of responder's public key
     (excluding the tag and length fields)
     https://stackoverflow.com/a/46309453/600498

    """
def _get_certs_by_key_hash(certificates, issuer, responder_key_hash):
    """
     Response object will have a responder_name or responder_key_hash
     not both.

    """
def _build_ocsp_request(cert, issuer):
    """
     https://cryptography.io/en/latest/x509/ocsp/#creating-requests

    """
def _verify_response(issuer, response):
    """
    Verifying response
    """
def _get_ocsp_response(cert, issuer, uri, ocsp_response_cache):
    """
    Using cached OCSP response.
    """
def _ocsp_callback(conn, ocsp_bytes, user_data):
    """
    Callback for use with OpenSSL.SSL.Context.set_ocsp_client_callback.
    """
