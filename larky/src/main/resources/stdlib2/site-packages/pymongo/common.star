def partition_node(node):
    """
    Split a host:port string into (host, int(port)) pair.
    """
def clean_node(node):
    """
    Split and normalize a node name from an ismaster response.
    """
def raise_config_error(key, dummy):
    """
    Raise ConfigurationError with the given key name.
    """
def validate_boolean(option, value):
    """
    Validates that 'value' is True or False.
    """
def validate_boolean_or_string(option, value):
    """
    Validates that value is True, False, 'true', or 'false'.
    """
def validate_integer(option, value):
    """
    Validates that 'value' is an integer (or basestring representation).
    
    """
def validate_positive_integer(option, value):
    """
    Validate that 'value' is a positive integer, which does not include 0.
    
    """
def validate_non_negative_integer(option, value):
    """
    Validate that 'value' is a positive integer or 0.
    
    """
def validate_readable(option, value):
    """
    Validates that 'value' is file-like and readable.
    
    """
def validate_positive_integer_or_none(option, value):
    """
    Validate that 'value' is a positive integer or None.
    
    """
def validate_non_negative_integer_or_none(option, value):
    """
    Validate that 'value' is a positive integer or 0 or None.
    
    """
def validate_string(option, value):
    """
    Validates that 'value' is an instance of `basestring` for Python 2
        or `str` for Python 3.
    
    """
def validate_string_or_none(option, value):
    """
    Validates that 'value' is an instance of `basestring` or `None`.
    
    """
def validate_int_or_basestring(option, value):
    """
    Validates that 'value' is an integer or string.
    
    """
def validate_non_negative_int_or_basestring(option, value):
    """
    Validates that 'value' is an integer or string.
    
    """
def validate_positive_float(option, value):
    """
    Validates that 'value' is a float, or can be converted to one, and is
           positive.
    
    """
def validate_positive_float_or_zero(option, value):
    """
    Validates that 'value' is 0 or a positive float, or can be converted to
        0 or a positive float.
    
    """
def validate_timeout_or_none(option, value):
    """
    Validates a timeout specified in milliseconds returning
        a value in floating point seconds.
    
    """
def validate_timeout_or_zero(option, value):
    """
    Validates a timeout specified in milliseconds returning
        a value in floating point seconds for the case where None is an error
        and 0 is valid. Setting the timeout to nothing in the URI string is a
        config error.
    
    """
def validate_timeout_or_none_or_zero(option, value):
    """
    Validates a timeout specified in milliseconds returning
        a value in floating point seconds. value=0 and value="0" are treated the
        same as value=None which means unlimited timeout.
    
    """
def validate_max_staleness(option, value):
    """
    Validates maxStalenessSeconds according to the Max Staleness Spec.
    """
def validate_read_preference(dummy, value):
    """
    Validate a read preference.
    
    """
def validate_read_preference_mode(dummy, value):
    """
    Validate read preference mode for a MongoReplicaSetClient.

        .. versionchanged:: 3.5
           Returns the original ``value`` instead of the validated read preference
           mode.
    
    """
def validate_auth_mechanism(option, value):
    """
    Validate the authMechanism URI option.
    
    """
def validate_uuid_representation(dummy, value):
    """
    Validate the uuid representation option selected in the URI.
    
    """
def validate_read_preference_tags(name, value):
    """
    Parse readPreferenceTags if passed as a client kwarg.
    
    """
def validate_auth_mechanism_properties(option, value):
    """
    Validate authMechanismProperties.
    """
def validate_document_class(option, value):
    """
    Validate the document_class option.
    """
def validate_type_registry(option, value):
    """
    Validate the type_registry option.
    """
def validate_list(option, value):
    """
    Validates that 'value' is a list.
    """
def validate_list_or_none(option, value):
    """
    Validates that 'value' is a list or None.
    """
def validate_list_or_mapping(option, value):
    """
    Validates that 'value' is a list or a document.
    """
def validate_is_mapping(option, value):
    """
    Validate the type of method arguments that expect a document.
    """
def validate_is_document_type(option, value):
    """
    Validate the type of method arguments that expect a MongoDB document.
    """
def validate_appname_or_none(option, value):
    """
    Validate the appname option.
    """
def validate_driver_or_none(option, value):
    """
    Validate the driver keyword arg.
    """
def validate_is_callable_or_none(option, value):
    """
    Validates that 'value' is a callable.
    """
def validate_ok_for_replace(replacement):
    """
    Validate a replacement document.
    """
def validate_ok_for_update(update):
    """
    Validate an update document.
    """
def validate_unicode_decode_error_handler(dummy, value):
    """
    Validate the Unicode decode error handler option of CodecOptions.
    
    """
def validate_tzinfo(dummy, value):
    """
    Validate the tzinfo option
    
    """
def validate_auth_option(option, value):
    """
    Validate optional authentication parameters.
    
    """
def validate(option, value):
    """
    Generic validation function.
    
    """
def get_validated_options(options, warn=True):
    """
    Validate each entry in options and raise a warning if it is not valid.
        Returns a copy of options with invalid entries removed.

        :Parameters:
            - `opts`: A dict containing MongoDB URI options.
            - `warn` (optional): If ``True`` then warnings will be logged and
              invalid options will be ignored. Otherwise, invalid options will
              cause errors.
    
    """
def BaseObject(object):
    """
    A base class that provides attributes and methods common
        to multiple pymongo classes.

        SHOULD NOT BE USED BY DEVELOPERS EXTERNAL TO MONGODB.
    
    """
2021-03-02 20:50:14,579 : INFO : tokenize_signature : --> do i ever get here?
    def __init__(self, codec_options, read_preference, write_concern,
                 read_concern):
        """
        codec_options must be an instance of 
        bson.codec_options.CodecOptions
        """
    def codec_options(self):
        """
        Read only access to the :class:`~bson.codec_options.CodecOptions`
                of this instance.
        
        """
    def write_concern(self):
        """
        Read only access to the :class:`~pymongo.write_concern.WriteConcern`
                of this instance.

                .. versionchanged:: 3.0
                  The :attr:`write_concern` attribute is now read only.
        
        """
    def _write_concern_for(self, session):
        """
        Read only access to the write concern of this instance or session.
        
        """
    def read_preference(self):
        """
        Read only access to the read preference of this instance.

                .. versionchanged:: 3.0
                  The :attr:`read_preference` attribute is now read only.
        
        """
    def _read_preference_for(self, session):
        """
        Read only access to the read preference of this instance or session.
        
        """
    def read_concern(self):
        """
        Read only access to the :class:`~pymongo.read_concern.ReadConcern`
                of this instance.

                .. versionadded:: 3.2
        
        """
def _CaseInsensitiveDictionary(abc.MutableMapping):
