def _validate_tag_sets(tag_sets):
    """
    Validate tag sets for a MongoReplicaSetClient.
    
    """
def _invalid_max_staleness_msg(max_staleness):
    """
    maxStalenessSeconds must be a positive integer, not %s
    """
def _validate_max_staleness(max_staleness):
    """
    Validate max_staleness.
    """
def _validate_hedge(hedge):
    """
    Validate hedge.
    """
def _ServerMode(object):
    """
    Base class for all read preferences.
    
    """
    def __init__(self, mode, tag_sets=None, max_staleness=-1, hedge=None):
        """
        The name of this read preference.
        
        """
    def mongos_mode(self):
        """
        The mongos mode of this read preference.
        
        """
    def document(self):
        """
        Read preference as a document.
        
        """
    def mode(self):
        """
        The mode of this read preference instance.
        
        """
    def tag_sets(self):
        """
        Set ``tag_sets`` to a list of dictionaries like [{'dc': 'ny'}] to
                read only from members whose ``dc`` tag has the value ``"ny"``.
                To specify a priority-order for tag sets, provide a list of
                tag sets: ``[{'dc': 'ny'}, {'dc': 'la'}, {}]``. A final, empty tag
                set, ``{}``, means "read from any member that matches the mode,
                ignoring tags." MongoReplicaSetClient tries each set of tags in turn
                until it finds a set of tags with at least one matching member.

                   .. seealso:: `Data-Center Awareness
                       <http://www.mongodb.org/display/DOCS/Data+Center+Awareness>`_
        
        """
    def max_staleness(self):
        """
        The maximum estimated length of time (in seconds) a replica set
                secondary can fall behind the primary in replication before it will
                no longer be selected for operations, or -1 for no maximum.
        """
    def hedge(self):
        """
        The read preference ``hedge`` parameter.

                A dictionary that configures how the server will perform hedged reads.
                It consists of the following keys:

                - ``enabled``: Enables or disables hedged reads in sharded clusters.

                Hedged reads are automatically enabled in MongoDB 4.4+ when using a
                ``nearest`` read preference. To explicitly enable hedged reads, set
                the ``enabled`` key  to ``true``::

                    >>> Nearest(hedge={'enabled': True})

                To explicitly disable hedged reads, set the ``enabled`` key  to
                ``False``::

                    >>> Nearest(hedge={'enabled': False})

                .. versionadded:: 3.11
        
        """
    def min_wire_version(self):
        """
        The wire protocol version the server must support.

                Some read preferences impose version requirements on all servers (e.g.
                maxStalenessSeconds requires MongoDB 3.4 / maxWireVersion 5).

                All servers' maxWireVersion must be at least this read preference's
                `min_wire_version`, or the driver raises
                :exc:`~pymongo.errors.ConfigurationError`.
        
        """
    def __repr__(self):
        """
        %s(tag_sets=%r, max_staleness=%r, hedge=%r)
        """
    def __eq__(self, other):
        """
        Return value of object for pickling.

                Needed explicitly because __slots__() defined.
        
        """
    def __setstate__(self, value):
        """
        Restore from pickling.
        """
def Primary(_ServerMode):
    """
    Primary read preference.

        * When directly connected to one mongod queries are allowed if the server
          is standalone or a replica set primary.
        * When connected to a mongos queries are sent to the primary of a shard.
        * When connected to a replica set queries are sent to the primary of
          the replica set.
    
    """
    def __init__(self):
        """
        Apply this read preference to a Selection.
        """
    def __repr__(self):
        """
        Primary()
        """
    def __eq__(self, other):
        """
        PrimaryPreferred read preference.

            * When directly connected to one mongod queries are allowed to standalone
              servers, to a replica set primary, or to replica set secondaries.
            * When connected to a mongos queries are sent to the primary of a shard if
              available, otherwise a shard secondary.
            * When connected to a replica set queries are sent to the primary if
              available, otherwise a secondary.

            :Parameters:
              - `tag_sets`: The :attr:`~tag_sets` to use if the primary is not
                available.
              - `max_staleness`: (integer, in seconds) The maximum estimated
                length of time a replica set secondary can fall behind the primary in
                replication before it will no longer be selected for operations.
                Default -1, meaning no maximum. If it is set, it must be at least
                90 seconds.
              - `hedge`: The :attr:`~hedge` to use if the primary is not available.

            .. versionchanged:: 3.11
               Added ``hedge`` parameter.
    
        """
    def __init__(self, tag_sets=None, max_staleness=-1, hedge=None):
        """
        Apply this read preference to Selection.
        """
def Secondary(_ServerMode):
    """
    Secondary read preference.

        * When directly connected to one mongod queries are allowed to standalone
          servers, to a replica set primary, or to replica set secondaries.
        * When connected to a mongos queries are distributed among shard
          secondaries. An error is raised if no secondaries are available.
        * When connected to a replica set queries are distributed among
          secondaries. An error is raised if no secondaries are available.

        :Parameters:
          - `tag_sets`: The :attr:`~tag_sets` for this read preference.
          - `max_staleness`: (integer, in seconds) The maximum estimated
            length of time a replica set secondary can fall behind the primary in
            replication before it will no longer be selected for operations.
            Default -1, meaning no maximum. If it is set, it must be at least
            90 seconds.
          - `hedge`: The :attr:`~hedge` for this read preference.

        .. versionchanged:: 3.11
           Added ``hedge`` parameter.
    
    """
    def __init__(self, tag_sets=None, max_staleness=-1, hedge=None):
        """
        Apply this read preference to Selection.
        """
def SecondaryPreferred(_ServerMode):
    """
    SecondaryPreferred read preference.

        * When directly connected to one mongod queries are allowed to standalone
          servers, to a replica set primary, or to replica set secondaries.
        * When connected to a mongos queries are distributed among shard
          secondaries, or the shard primary if no secondary is available.
        * When connected to a replica set queries are distributed among
          secondaries, or the primary if no secondary is available.

        :Parameters:
          - `tag_sets`: The :attr:`~tag_sets` for this read preference.
          - `max_staleness`: (integer, in seconds) The maximum estimated
            length of time a replica set secondary can fall behind the primary in
            replication before it will no longer be selected for operations.
            Default -1, meaning no maximum. If it is set, it must be at least
            90 seconds.
          - `hedge`: The :attr:`~hedge` for this read preference.

        .. versionchanged:: 3.11
           Added ``hedge`` parameter.
    
    """
    def __init__(self, tag_sets=None, max_staleness=-1, hedge=None):
        """
        Apply this read preference to Selection.
        """
def Nearest(_ServerMode):
    """
    Nearest read preference.

        * When directly connected to one mongod queries are allowed to standalone
          servers, to a replica set primary, or to replica set secondaries.
        * When connected to a mongos queries are distributed among all members of
          a shard.
        * When connected to a replica set queries are distributed among all
          members.

        :Parameters:
          - `tag_sets`: The :attr:`~tag_sets` for this read preference.
          - `max_staleness`: (integer, in seconds) The maximum estimated
            length of time a replica set secondary can fall behind the primary in
            replication before it will no longer be selected for operations.
            Default -1, meaning no maximum. If it is set, it must be at least
            90 seconds.
          - `hedge`: The :attr:`~hedge` for this read preference.

        .. versionchanged:: 3.11
           Added ``hedge`` parameter.
    
    """
    def __init__(self, tag_sets=None, max_staleness=-1, hedge=None):
        """
        Apply this read preference to Selection.
        """
def make_read_preference(mode, tag_sets, max_staleness=-1):
    """
    Read preference primary 
    cannot be combined with tags
    """
def ReadPreference(object):
    """
    An enum that defines the read preference modes supported by PyMongo.

        See :doc:`/examples/high_availability` for code examples.

        A read preference is used in three cases:

        :class:`~pymongo.mongo_client.MongoClient` connected to a single mongod:

        - ``PRIMARY``: Queries are allowed if the server is standalone or a replica
          set primary.
        - All other modes allow queries to standalone servers, to a replica set
          primary, or to replica set secondaries.

        :class:`~pymongo.mongo_client.MongoClient` initialized with the
        ``replicaSet`` option:

        - ``PRIMARY``: Read from the primary. This is the default, and provides the
          strongest consistency. If no primary is available, raise
          :class:`~pymongo.errors.AutoReconnect`.

        - ``PRIMARY_PREFERRED``: Read from the primary if available, or if there is
          none, read from a secondary.

        - ``SECONDARY``: Read from a secondary. If no secondary is available,
          raise :class:`~pymongo.errors.AutoReconnect`.

        - ``SECONDARY_PREFERRED``: Read from a secondary if available, otherwise
          from the primary.

        - ``NEAREST``: Read from any member.

        :class:`~pymongo.mongo_client.MongoClient` connected to a mongos, with a
        sharded cluster of replica sets:

        - ``PRIMARY``: Read from the primary of the shard, or raise
          :class:`~pymongo.errors.OperationFailure` if there is none.
          This is the default.

        - ``PRIMARY_PREFERRED``: Read from the primary of the shard, or if there is
          none, read from a secondary of the shard.

        - ``SECONDARY``: Read from a secondary of the shard, or raise
          :class:`~pymongo.errors.OperationFailure` if there is none.

        - ``SECONDARY_PREFERRED``: Read from a secondary of the shard if available,
          otherwise from the shard primary.

        - ``NEAREST``: Read from any shard member.
    
    """
def read_pref_mode_from_name(name):
    """
    Get the read preference mode from mongos/uri name.
    
    """
def MovingAverage(object):
    """
    Tracks an exponentially-weighted moving average.
    """
    def __init__(self):
        """
         Likely system time change while waiting for ismaster response
         and not using time.monotonic. Ignore it, the next one will
         probably be valid.

        """
    def get(self):
        """
        Get the calculated average, or None if no samples yet.
        """
    def reset(self):
