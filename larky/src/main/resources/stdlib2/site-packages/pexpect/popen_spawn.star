def PopenSpawn(SpawnBase):
    """
    'strict'
    """
    def read_nonblocking(self, size, timeout):
        """
         We have already finished reading. Use up any buffered data,
         then raise EOF

        """
    def _read_incoming(self):
        """
        Run in a thread to move output from a pipe to a queue.
        """
    def write(self, s):
        """
        '''This is similar to send() except that there is no return value.
                '''
        """
    def writelines(self, sequence):
        """
        '''This calls write() for each element in the sequence.

                The sequence can be any iterable object producing strings, typically a
                list of strings. This does not add line separators. There is no return
                value.
                '''
        """
    def send(self, s):
        """
        '''Send data to the subprocess' stdin.

                Returns the number of bytes written.
                '''
        """
    def sendline(self, s=''):
        """
        '''Wraps send(), sending string ``s`` to child process, with os.linesep
                automatically appended. Returns number of bytes written. '''
        """
    def wait(self):
        """
        '''Wait for the subprocess to finish.

                Returns the exit code.
                '''
        """
    def kill(self, sig):
        """
        '''Sends a Unix signal to the subprocess.

                Use constants from the :mod:`signal` module to specify which signal.
                '''
        """
    def sendeof(self):
        """
        '''Closes the stdin pipe from the writing end.'''
        """
