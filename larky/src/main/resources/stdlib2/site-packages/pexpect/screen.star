def constrain (n, min, max):
    """
    '''This returns a number, n constrained to the min and max bounds. '''
    """
def screen:
    """
    '''This object maintains the state of a virtual text screen as a
        rectangular array. This maintains a virtual cursor position and handles
        scrolling as characters are added. This supports most of the methods needed
        by an ANSI text screen. Row and column indexes are 1-based (not zero-based,
        like arrays).

        Characters are represented internally using unicode. Methods that accept
        input characters, when passed 'bytes' (which in Python 2 is equivalent to
        'str'), convert them from the encoding specified in the 'encoding'
        parameter to the constructor. Methods that return screen contents return
        unicode strings, with the exception of __str__() under Python 2. Passing
        ``encoding=None`` limits the API to only accept unicode input, so passing
        bytes in will raise :exc:`TypeError`.
        '''
    """
    def __init__(self, r=24, c=80, encoding='latin-1', encoding_errors='replace'):
        """
        '''This initializes a blank screen of the given dimensions.'''
        """
    def _decode(self, s):
        """
        '''This converts from the external coding system (as passed to
                the constructor) to the internal one (unicode). '''
        """
    def _unicode(self):
        """
        '''This returns a printable representation of the screen as a unicode
                string (which, under Python 3.x, is the same as 'str'). The end of each
                screen line is terminated by a newline.'''
        """
        def __str__(self):
            """
            '''This returns a printable representation of the screen. The end of
                        each screen line is terminated by a newline. '''
            """
    def dump (self):
        """
        '''This returns a copy of the screen as a unicode string. This is similar to
                __str__/__unicode__ except that lines are not terminated with line
                feeds.'''
        """
    def pretty (self):
        """
        '''This returns a copy of the screen as a unicode string with an ASCII
                text box around the screen border. This is similar to
                __str__/__unicode__ except that it adds a box.'''
        """
    def fill (self, ch=SPACE):
        """
        '''This moves the cursor to the beginning (col 1) of the current row.
                '''
        """
    def lf (self):
        """
        '''This moves the cursor down with scrolling.
                '''
        """
    def crlf (self):
        """
        '''This advances the cursor with CRLF properties.
                The cursor will line wrap and the screen may scroll.
                '''
        """
    def newline (self):
        """
        '''This is an alias for crlf().
                '''
        """
    def put_abs (self, r, c, ch):
        """
        '''Screen array starts at 1 index.'''
        """
    def put (self, ch):
        """
        '''This puts a characters at the current cursor position.
                '''
        """
    def insert_abs (self, r, c, ch):
        """
        '''This inserts a character at (r,c). Everything under
                and to the right is shifted right one character.
                The last character of the line is lost.
                '''
        """
    def insert (self, ch):
        """
        '''This returns a list of lines representing the region.
                '''
        """
    def cursor_constrain (self):
        """
        '''This keeps the cursor within the screen area.
                '''
        """
    def cursor_home (self, r=1, c=1): # <ESC>[{ROW};{COLUMN}H
        """
         <ESC>[{ROW};{COLUMN}H
        """
    def cursor_back (self,count=1): # <ESC>[{COUNT}D (not confused with down)
        """
         <ESC>[{COUNT}D (not confused with down)
        """
    def cursor_down (self,count=1): # <ESC>[{COUNT}B (not confused with back)
        """
         <ESC>[{COUNT}B (not confused with back)
        """
    def cursor_forward (self,count=1): # <ESC>[{COUNT}C
        """
         <ESC>[{COUNT}C
        """
    def cursor_up (self,count=1): # <ESC>[{COUNT}A
        """
         <ESC>[{COUNT}A
        """
    def cursor_up_reverse (self): # <ESC> M   (called RI -- Reverse Index)
        """
         <ESC> M   (called RI -- Reverse Index)
        """
    def cursor_force_position (self, r, c): # <ESC>[{ROW};{COLUMN}f
        """
         <ESC>[{ROW};{COLUMN}f
        """
    def cursor_save (self): # <ESC>[s
        """
         <ESC>[s
        """
    def cursor_unsave (self): # <ESC>[u
        """
         <ESC>[u
        """
    def cursor_save_attrs (self): # <ESC>7
        """
         <ESC>7
        """
    def cursor_restore_attrs (self): # <ESC>8
        """
         <ESC>8
        """
    def scroll_constrain (self):
        """
        '''This keeps the scroll region within the screen region.'''
        """
    def scroll_screen (self): # <ESC>[r
        """
         <ESC>[r
        """
    def scroll_screen_rows (self, rs, re): # <ESC>[{start};{end}r
        """
         <ESC>[{start};{end}r
        """
    def scroll_down (self): # <ESC>D
        """
         <ESC>D
        """
    def scroll_up (self): # <ESC>M
        """
         <ESC>M
        """
    def erase_end_of_line (self): # <ESC>[0K -or- <ESC>[K
        """
         <ESC>[0K -or- <ESC>[K
        """
    def erase_start_of_line (self): # <ESC>[1K
        """
         <ESC>[1K
        """
    def erase_line (self): # <ESC>[2K
        """
         <ESC>[2K
        """
    def erase_down (self): # <ESC>[0J -or- <ESC>[J
        """
         <ESC>[0J -or- <ESC>[J
        """
    def erase_up (self): # <ESC>[1J
        """
         <ESC>[1J
        """
    def erase_screen (self): # <ESC>[2J
        """
         <ESC>[2J
        """
    def set_tab (self): # <ESC>H
        """
         <ESC>H
        """
    def clear_tab (self): # <ESC>[g
        """
         <ESC>[g
        """
    def clear_all_tabs (self): # <ESC>[3g
        """
         <ESC>[3g
        """
