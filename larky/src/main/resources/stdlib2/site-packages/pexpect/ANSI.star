def DoEmit (fsm):
    """
     Should be 4
    """
def DoLog (fsm):
    """
    'log'
    """
def term (screen.screen):
    """
    '''This class is an abstract, generic terminal.
        This does nothing. This is a placeholder that
        provides a common base class for other terminals
        such as an ANSI terminal. '''
    """
    def __init__ (self, r=24, c=80, *args, **kwargs):
        """
        '''This class implements an ANSI (VT100) terminal.
            It is a stream filter that recognizes ANSI terminal
            escape sequences and maintains the state of a screen object. '''
        """
    def __init__ (self, r=24,c=80,*args,**kwargs):
        """
        self.screen = screen (24,80)

        """
    def process (self, c):
        """
        Process a single character. Called by :meth:`write`.
        """
    def process_list (self, l):
        """
        Process text, writing it to the virtual screen while handling
                ANSI escape codes.
        
        """
    def flush (self):
        """
        '''This puts a character at the current cursor position. The cursor
                position is moved forward with wrap-around, but no scrolling is done if
                the cursor hits the lower-right corner of the screen. '''
        """
    def do_sgr (self, fsm):
        """
        '''Select Graphic Rendition, e.g. color. '''
        """
    def do_decsca (self, fsm):
        """
        '''Select character protection attribute. '''
        """
    def do_modecrap (self, fsm):
        """
        '''Handler for \x1b[?<number>h and \x1b[?<number>l. If anyone
                wanted to actually use these, they'd need to add more states to the
                FSM rather than just improve or override this method. '''
        """
