def path_split(pathname_spec, separator=os.pathsep):
    """

        Splits a pathname specification separated by an OS-dependent separator.

        :param pathname_spec:
            The pathname specification.
        :param separator:
            (OS Dependent) `:` on Unix and `;` on Windows or user-specified.
    
    """
def add_to_sys_path(pathnames, index=0):
    """

        Adds specified paths at specified index into the sys.path list.

        :param paths:
            A list of paths to add to the sys.path
        :param index:
            (Default 0) The index in the sys.path list where the paths will be
            added.
    
    """
def load_config(tricks_file_pathname):
    """

        Loads the YAML configuration from the specified file.

        :param tricks_file_path:
            The path to the tricks configuration file.
        :returns:
            A dictionary of configuration information.
    
    """
def parse_patterns(patterns_spec, ignore_patterns_spec, separator=';'):
    """

        Parses pattern argument specs and returns a two-tuple of
        (patterns, ignore_patterns).
    
    """
def observe_with(observer, event_handler, pathnames, recursive):
    """

        Single observer thread with a scheduled path and event handler.

        :param observer:
            The observer thread.
        :param event_handler:
            Event handler which will be called in response to file system events.
        :param pathnames:
            A list of pathnames to monitor.
        :param recursive:
            ``True`` if recursive; ``False`` otherwise.
    
    """
def schedule_tricks(observer, tricks, pathname, recursive):
    """

        Schedules tricks with the specified observer and for the given watch
        path.

        :param observer:
            The observer thread into which to schedule the trick and watch.
        :param tricks:
            A list of tricks.
        :param pathname:
            A path name which should be watched.
        :param recursive:
            ``True`` if recursive; ``False`` otherwise.
    
    """
def tricks_from(args):
    """

        Subcommand to execute tricks from a tricks configuration file.

        :param args:
            Command line argument options.
    
    """
def tricks_generate_yaml(args):
    """

        Subcommand to generate Yaml configuration for tricks named on the command
        line.

        :param args:
            Command line argument options.
    
    """
def log(args):
    """

        Subcommand to log file system events to the console.

        :param args:
            Command line argument options.
    
    """
def shell_command(args):
    """

        Subcommand to execute shell commands in response to file system events.

        :param args:
            Command line argument options.
    
    """
def auto_restart(args):
    """

        Subcommand to start a long-running subprocess and restart it
        on matched events.

        :param args:
            Command line argument options.
    
    """
    def handler_termination_signal(_signum, _frame):
        """
         Neuter all signals so that we don't attempt a double shutdown

        """
def main():
    """
    Entry-point function.
    """
