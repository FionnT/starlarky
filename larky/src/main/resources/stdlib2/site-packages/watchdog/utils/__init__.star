def has_attribute(ob, attribute):
    """

        :func:`hasattr` swallows exceptions. :func:`has_attribute` tests a Python object for the
        presence of an attribute.

        :param ob:
            object to inspect
        :param attribute:
            ``str`` for the name of the attribute.
    
    """
def UnsupportedLibc(Exception):
    """

        Semantic exception used to signal an external shutdown event.
    
    """
def BaseThread(threading.Thread):
    """
     Convenience class for creating stoppable threads. 
    """
    def __init__(self):
        """
        'daemon'
        """
    def stopped_event(self):
        """
        Determines whether the thread should continue running.
        """
    def on_thread_stop(self):
        """
        Override this method instead of :meth:`stop()`.
                :meth:`stop()` calls this method.

                This method is called immediately after the thread is signaled to stop.
        
        """
    def stop(self):
        """
        Signals the thread to stop.
        """
    def on_thread_start(self):
        """
        Override this method instead of :meth:`start()`. :meth:`start()`
                calls this method.

                This method is called right before this thread is started and this
                objectâ€™s run() method is invoked.
        
        """
    def start(self):
        """
        Imports a module given its name and returns a handle to it.
        """
def load_class(dotted_path):
    """
    Loads and returns a class definition provided a dotted path
        specification the last part of the dotted path is the class name
        and there is at least one module name preceding the class name.

        Notes:
        You will need to ensure that the module you are trying to load
        exists in the Python path.

        Examples:
        - module.name.ClassName    # Provided module.name is in the Python path.
        - module.ClassName         # Provided module is in the Python path.

        What won't work:
        - ClassName
        - modle.name.ClassName     # Typo in module name.
        - module.name.ClasNam      # Typo in classname.
    
    """
