def name(item):
    """
     Return an item's name. 
    """
def is_classmethod(instancemethod, klass):
    """
     Determine if an instancemethod is a classmethod. 
    """
def is_static_method(method, klass):
    """
    Returns True if method is an instance method of klass.
    """
def is_class_private_name(name):
    """
     Determine if a name is a class private name. 
    """
def method_name(method):
    """
     Return a method's name.

        This function returns the name the method is accessed by from
        outside the class (i.e. it prefixes "private" methods appropriately).
    
    """
def format_arg_value(arg_val):
    """
     Return a string representing a (name, value) pair.

        >>> format_arg_value(('x', (1, 2, 3)))
        'x=(1, 2, 3)'
    
    """
def echo(fn, write=sys.stdout.write):
    """
     Echo calls to a function.

        Returns a decorated version of the input function which "echoes" calls
        made to it by writing out the function's name and the arguments it was
        called with.
    
    """
    def wrapped(*v, **k):
        """
         Collect function arguments by chaining together positional,
         defaulted, extra positional and keyword arguments.

        """
def echo_instancemethod(klass, method, write=sys.stdout.write):
    """
     Change an instancemethod so that calls to it are echoed.

        Replacing a classmethod is a little more tricky.
        See: http://www.python.org/doc/current/ref/types.html
    
    """
def echo_class(klass, write=sys.stdout.write):
    """
     Echo calls to class methods and static functions
    
    """
def echo_module(mod, write=sys.stdout.write):
    """
     Echo calls to functions and methods in a module.
    
    """
