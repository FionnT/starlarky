def _load_libc():
    """
    'c'
    """
def InotifyConstants(object):
    """
     User-space events

    """
def inotify_event_struct(ctypes.Structure):
    """

        Structure representation of the inotify_event structure
        (used in buffer size calculations)::

            struct inotify_event {
                __s32 wd;            /* watch descriptor */
                __u32 mask;          /* watch mask */
                __u32 cookie;        /* cookie to synchronize two events */
                __u32 len;           /* length (including nulls) of name */
                char  name[0];       /* stub for possible name */
            };
    
    """
def Inotify(object):
    """

        Linux inotify(7) API wrapper class.

        :param path:
            The directory path for which we want an inotify object.
        :type path:
            :class:`bytes`
        :param recursive:
            ``True`` if subdirectories should be monitored; ``False`` otherwise.
    
    """
    def __init__(self, path, recursive=False, event_mask=WATCHDOG_ALL_EVENTS):
        """
         The file descriptor associated with the inotify instance.

        """
    def event_mask(self):
        """
        The event mask for this inotify instance.
        """
    def path(self):
        """
        The path associated with the inotify instance.
        """
    def is_recursive(self):
        """
        Whether we are watching directories recursively.
        """
    def fd(self):
        """
        The file descriptor associated with the inotify instance.
        """
    def clear_move_records(self):
        """
        Clear cached records of MOVED_FROM events
        """
    def source_for_move(self, destination_event):
        """

                The source path corresponding to the given MOVED_TO event.

                If the source path is outside the monitored directories, None
                is returned instead.
        
        """
    def remember_move_from_event(self, event):
        """

                Save this event as the source event for future MOVED_TO events to
                reference.
        
        """
    def add_watch(self, path):
        """

                Adds a watch for the given path.

                :param path:
                    Path to begin monitoring.
        
        """
    def remove_watch(self, path):
        """

                Removes a watch for the given path.

                :param path:
                    Path string for which the watch will be removed.
        
        """
    def close(self):
        """

                Closes the inotify instance and removes all associated watches.
        
        """
    def read_events(self, event_buffer_size=DEFAULT_EVENT_BUFFER_SIZE):
        """

                Reads events from inotify and yields them.
        
        """
        def _recursive_simulate(src_path):
            """
             avoid trailing slash
            """
    def _add_dir_watch(self, path, recursive, mask):
        """

                Adds a watch (optionally recursively) for the given directory path
                to monitor events specified by the mask.

                :param path:
                    Path to monitor
                :param recursive:
                    ``True`` to monitor recursively.
                :param mask:
                    Event bit mask.
        
        """
    def _add_watch(self, path, mask):
        """

                Adds a watch for the given path to monitor events specified by the
                mask.

                :param path:
                    Path to monitor
                :param mask:
                    Event bit mask.
        
        """
    def _raise_error():
        """

                Raises errors for inotify failures.
        
        """
    def _parse_event_buffer(event_buffer):
        """

                Parses an event buffer of ``inotify_event`` structs returned by
                inotify::

                    struct inotify_event {
                        __s32 wd;            /* watch descriptor */
                        __u32 mask;          /* watch mask */
                        __u32 cookie;        /* cookie to synchronize two events */
                        __u32 len;           /* length (including nulls) of name */
                        char  name[0];       /* stub for possible name */
                    };

                The ``cookie`` member of this struct is used to pair two related
                events, for example, it pairs an IN_MOVED_FROM event with an
                IN_MOVED_TO event.
        
        """
def InotifyEvent(object):
    """

        Inotify event struct wrapper.

        :param wd:
            Watch descriptor
        :param mask:
            Event mask
        :param cookie:
            Event cookie
        :param name:
            Base name of the event source path.
        :param src_path:
            Full event source path.
    
    """
    def __init__(self, wd, mask, cookie, name, src_path):
        """
         It looks like the kernel does not provide this information for
         IN_DELETE_SELF and IN_MOVE_SELF. In this case, assume it's a dir.
         See also: https://github.com/seb-m/pyinotify/blob/2c7e8f8/python2/pyinotify.py#L897

        """
    def key(self):
        """
        'IN_'
        """
    def __repr__(self):
        """
        '<%s: src_path=%r, wd=%d, mask=%s, cookie=%d, name=%s>'
        """
