def FSEventsEmitter(EventEmitter):
    """

        Mac OS X FSEvents Emitter class.

        :param event_queue:
            The event queue to fill with events.
        :param watch:
            A watch object representing the directory to monitor.
        :type watch:
            :class:`watchdog.observers.api.ObservedWatch`
        :param timeout:
            Read events blocking timeout (in seconds).
        :type timeout:
            ``float``
    
    """
    def __init__(self, event_queue, watch, timeout=DEFAULT_EMITTER_TIMEOUT):
        """
         For some reason the create and remove flags are sometimes also
         set for rename and modify type events, so let those take
         precedence.

        """
    def run(self):
        """
         for pathname, flag in zip(pathnames, flags):
         if emitter.watch.is_recursive: # and pathname != emitter.watch.path:
            new_sub_snapshot = DirectorySnapshot(pathname, True)
            old_sub_snapshot = self.snapshot.copy(pathname)
            diff = new_sub_snapshot - old_sub_snapshot
            self.snapshot += new_subsnapshot
         else:
            new_snapshot = DirectorySnapshot(emitter.watch.path, False)
            diff = new_snapshot - emitter.snapshot
            emitter.snapshot = new_snapshot

         INFO: FSEvents reports directory notifications recursively
         by default, so we do not need to add subdirectory paths.
         pathnames = set([self.watch.path])
         if self.watch.is_recursive:
            for root, directory_names, _ in os.walk(self.watch.path):
                for directory_name in directory_names:
                    full_path = absolute_path(
                                    os.path.join(root, directory_name))
                    pathnames.add(full_path)

        """
def FSEventsObserver(BaseObserver):
    """
     Python 2/3 compat

    """
