def EventQueue(SkipRepeatsQueue):
    """
    Thread-safe event queue based on a special queue that skips adding
        the same event (:class:`FileSystemEvent`) multiple times consecutively.
        Thus avoiding dispatching multiple event handling
        calls when multiple identical events are produced quicker than an observer
        can consume them.
    
    """
def ObservedWatch(object):
    """
    An scheduled watch.

        :param path:
            Path string.
        :param recursive:
            ``True`` if watch is recursive; ``False`` otherwise.
    
    """
    def __init__(self, path, recursive):
        """
        The path that this watch monitors.
        """
    def is_recursive(self):
        """
        Determines whether subdirectories are watched for the path.
        """
    def key(self):
        """
        <%s: path=%s, is_recursive=%s>
        """
def EventEmitter(BaseThread):
    """

        Producer thread base class subclassed by event emitters
        that generate events and populate a queue with them.

        :param event_queue:
            The event queue to populate with generated events.
        :type event_queue:
            :class:`watchdog.events.EventQueue`
        :param watch:
            The watch to observe and produce events for.
        :type watch:
            :class:`ObservedWatch`
        :param timeout:
            Timeout (in seconds) between successive attempts at reading events.
        :type timeout:
            ``float``
    
    """
    def __init__(self, event_queue, watch, timeout=DEFAULT_EMITTER_TIMEOUT):
        """

                Blocking timeout for reading events.
        
        """
    def watch(self):
        """

                The watch associated with this emitter.
        
        """
    def queue_event(self, event):
        """

                Queues a single event.

                :param event:
                    Event to be queued.
                :type event:
                    An instance of :class:`watchdog.events.FileSystemEvent`
                    or a subclass.
        
        """
    def queue_events(self, timeout):
        """
        Override this method to populate the event queue with events
                per interval period.

                :param timeout:
                    Timeout (in seconds) between successive attempts at
                    reading events.
                :type timeout:
                    ``float``
        
        """
    def run(self):
        """

            Consumer thread base class subclassed by event observer threads
            that dispatch events from an event queue to appropriate event handlers.

            :param timeout:
                Event queue blocking timeout (in seconds).
            :type timeout:
                ``float``
    
        """
    def __init__(self, timeout=DEFAULT_OBSERVER_TIMEOUT):
        """
        Event queue block timeout.
        """
    def event_queue(self):
        """
        The event queue which is populated with file system events
                by emitters and from which events are dispatched by a dispatcher
                thread.
        """
    def dispatch_events(self, event_queue, timeout):
        """
        Override this method to consume events from an event queue, blocking
                on the queue for the specified timeout before raising :class:`queue.Empty`.

                :param event_queue:
                    Event queue to populate with one set of events.
                :type event_queue:
                    :class:`EventQueue`
                :param timeout:
                    Interval period (in seconds) to wait before timing out on the
                    event queue.
                :type timeout:
                    ``float``
                :raises:
                    :class:`queue.Empty`
        
        """
    def run(self):
        """
        Base observer.
        """
    def __init__(self, emitter_class, timeout=DEFAULT_OBSERVER_TIMEOUT):
        """
        Returns event emitter created by this observer.
        """
    def start(self):
        """

                Schedules watching a path and calls appropriate methods specified
                in the given event handler in response to file system events.

                :param event_handler:
                    An event handler instance that has appropriate event handling
                    methods which will be called by the observer in response to
                    file system events.
                :type event_handler:
                    :class:`watchdog.events.FileSystemEventHandler` or a subclass
                :param path:
                    Directory path that will be monitored.
                :type path:
                    ``str``
                :param recursive:
                    ``True`` if events will be emitted for sub-directories
                    traversed recursively; ``False`` otherwise.
                :type recursive:
                    ``bool``
                :return:
                    An :class:`ObservedWatch` object instance representing
                    a watch.
        
        """
    def add_handler_for_watch(self, event_handler, watch):
        """
        Adds a handler for the given watch.

                :param event_handler:
                    An event handler instance that has appropriate event handling
                    methods which will be called by the observer in response to
                    file system events.
                :type event_handler:
                    :class:`watchdog.events.FileSystemEventHandler` or a subclass
                :param watch:
                    The watch to add a handler for.
                :type watch:
                    An instance of :class:`ObservedWatch` or a subclass of
                    :class:`ObservedWatch`
        
        """
    def remove_handler_for_watch(self, event_handler, watch):
        """
        Removes a handler for the given watch.

                :param event_handler:
                    An event handler instance that has appropriate event handling
                    methods which will be called by the observer in response to
                    file system events.
                :type event_handler:
                    :class:`watchdog.events.FileSystemEventHandler` or a subclass
                :param watch:
                    The watch to remove a handler for.
                :type watch:
                    An instance of :class:`ObservedWatch` or a subclass of
                    :class:`ObservedWatch`
        
        """
    def unschedule(self, watch):
        """
        Unschedules a watch.

                :param watch:
                    The watch to unschedule.
                :type watch:
                    An instance of :class:`ObservedWatch` or a subclass of
                    :class:`ObservedWatch`
        
        """
    def unschedule_all(self):
        """
        Unschedules all watches and detaches all associated event
                handlers.
        """
    def on_thread_stop(self):
        """
         To allow unschedule/stop and safe removal of event handlers
         within event handlers itself, check if the handler is still
         registered after every dispatch.

        """
