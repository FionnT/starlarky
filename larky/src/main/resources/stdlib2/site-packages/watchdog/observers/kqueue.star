def is_deleted(kev):
    """
    Determines whether the given kevent represents deletion.
    """
def is_modified(kev):
    """
    Determines whether the given kevent represents modification.
    """
def is_attrib_modified(kev):
    """
    Determines whether the given kevent represents attribute modification.
    """
def is_renamed(kev):
    """
    Determines whether the given kevent represents movement.
    """
def KeventDescriptorSet(object):
    """

        Thread-safe kevent descriptor collection.
    
    """
    def __init__(self):
        """
         Set of KeventDescriptor

        """
    def kevents(self):
        """

                List of kevents monitored.
        
        """
    def paths(self):
        """

                List of paths for which kevents have been created.
        
        """
    def get_for_fd(self, fd):
        """

                Given a file descriptor, returns the kevent descriptor object
                for it.

                :param fd:
                    OS file descriptor.
                :type fd:
                    ``int``
                :returns:
                    A :class:`KeventDescriptor` object.
        
        """
    def get(self, path):
        """

                Obtains a :class:`KeventDescriptor` object for the specified path.

                :param path:
                    Path for which the descriptor will be obtained.
        
        """
    def __contains__(self, path):
        """

                Determines whether a :class:`KeventDescriptor has been registered
                for the specified path.

                :param path:
                    Path for which the descriptor will be obtained.
        
        """
    def add(self, path, is_directory):
        """

                Adds a :class:`KeventDescriptor` to the collection for the given
                path.

                :param path:
                    The path for which a :class:`KeventDescriptor` object will be
                    added.
                :param is_directory:
                    ``True`` if the path refers to a directory; ``False`` otherwise.
                :type is_directory:
                    ``bool``
        
        """
    def remove(self, path):
        """

                Removes the :class:`KeventDescriptor` object for the given path
                if it already exists.

                :param path:
                    Path for which the :class:`KeventDescriptor` object will be
                    removed.
        
        """
    def clear(self):
        """

                Clears the collection and closes all open descriptors.
        
        """
    def _get(self, path):
        """
        Returns a kevent descriptor for a given path.
        """
    def _has_path(self, path):
        """
        Determines whether a :class:`KeventDescriptor` for the specified
           path exists already in the collection.
        """
    def _add_descriptor(self, descriptor):
        """

                Adds a descriptor to the collection.

                :param descriptor:
                    An instance of :class:`KeventDescriptor` to be added.
        
        """
    def _remove_descriptor(self, descriptor):
        """

                Removes a descriptor from the collection.

                :param descriptor:
                    An instance of :class:`KeventDescriptor` to be removed.
        
        """
def KeventDescriptor(object):
    """

        A kevent descriptor convenience data structure to keep together:

            * kevent
            * directory status
            * path
            * file descriptor

        :param path:
            Path string for which a kevent descriptor will be created.
        :param is_directory:
            ``True`` if the path refers to a directory; ``False`` otherwise.
        :type is_directory:
            ``bool``
    
    """
    def __init__(self, path, is_directory):
        """
        OS file descriptor for the kevent descriptor.
        """
    def path(self):
        """
        The path associated with the kevent descriptor.
        """
    def kevent(self):
        """
        The kevent object associated with the kevent descriptor.
        """
    def is_directory(self):
        """
        Determines whether the kevent descriptor refers to a directory.

                :returns:
                    ``True`` or ``False``
        
        """
    def close(self):
        """

                Closes the file descriptor associated with a kevent descriptor.
        
        """
    def key(self):
        """
        <%s: path=%s, is_directory=%s>
        """
def KqueueEmitter(EventEmitter):
    """

        kqueue(2)-based event emitter.

        .. ADMONITION:: About ``kqueue(2)`` behavior and this implementation

                  ``kqueue(2)`` monitors file system events only for
                  open descriptors, which means, this emitter does a lot of
                  book-keeping behind the scenes to keep track of open
                  descriptors for every entry in the monitored directory tree.

                  This also means the number of maximum open file descriptors
                  on your system must be increased **manually**.
                  Usually, issuing a call to ``ulimit`` should suffice::

                      ulimit -n 1024

                  Ensure that you pick a number that is larger than the
                  number of files you expect to be monitored.

                  ``kqueue(2)`` does not provide enough information about the
                  following things:

                  * The destination path of a file or directory that is renamed.
                  * Creation of a file or directory within a directory; in this
                    case, ``kqueue(2)`` only indicates a modified event on the
                    parent directory.

                  Therefore, this emitter takes a snapshot of the directory
                  tree when ``kqueue(2)`` detects a change on the file system
                  to be able to determine the above information.

        :param event_queue:
            The event queue to fill with events.
        :param watch:
            A watch object representing the directory to monitor.
        :type watch:
            :class:`watchdog.observers.api.ObservedWatch`
        :param timeout:
            Read events blocking timeout (in seconds).
        :type timeout:
            ``float``
        :param stat: stat function. See ``os.stat`` for details.
    
    """
2021-03-02 20:52:00,534 : INFO : tokenize_signature : --> do i ever get here?
    def __init__(self, event_queue, watch, timeout=DEFAULT_EMITTER_TIMEOUT,
                 stat=default_stat):
        """
         A collection of KeventDescriptor.

        """
        def custom_stat(path, self=self):
            """

                    Registers a kevent descriptor for the given path.

                    :param path:
                        Path for which a kevent descriptor will be created.
                    :param is_directory:
                        ``True`` if the path refers to a directory; ``False`` otherwise.
                    :type is_directory:
                        ``bool``
        
            """
    def _unregister_kevent(self, path):
        """

                Convenience function to close the kevent descriptor for a
                specified kqueue-monitored path.

                :param path:
                    Path for which the kevent descriptor will be closed.
        
        """
    def queue_event(self, event):
        """

                Handles queueing a single event object.

                :param event:
                    An instance of :class:`watchdog.events.FileSystemEvent`
                    or a subclass.
        
        """
2021-03-02 20:52:00,535 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:52:00,536 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:52:00,536 : INFO : tokenize_signature : --> do i ever get here?
    def _gen_kqueue_events(self,
                           kev,
                           ref_snapshot,
                           new_snapshot):
        """

                Generate events from the kevent list returned from the call to
                :meth:`select.kqueue.control`.

                .. NOTE:: kqueue only tells us about deletions, file modifications,
                          attribute modifications. The other events, namely,
                          file creation, directory modification, file rename,
                          directory rename, directory creation, etc. are
                          determined by comparing directory snapshots.
        
        """
    def _parent_dir_modified(self, src_path):
        """

                Helper to generate a DirModifiedEvent on the parent of src_path.
        
        """
2021-03-02 20:52:00,537 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:52:00,537 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:52:00,537 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:52:00,538 : INFO : tokenize_signature : --> do i ever get here?
    def _gen_renamed_events(self,
                            src_path,
                            is_directory,
                            ref_snapshot,
                            new_snapshot):
        """

                Compares information from two directory snapshots (one taken before
                the rename operation and another taken right after) to determine the
                destination path of the file system object renamed, and yields
                the appropriate events to be queued.
        
        """
    def _read_events(self, timeout=None):
        """

                Reads events from a call to the blocking
                :meth:`select.kqueue.control()` method.

                :param timeout:
                    Blocking timeout for reading events.
                :type timeout:
                    ``float`` (seconds)
        
        """
    def queue_events(self, timeout):
        """

                Queues events by reading them from a call to the blocking
                :meth:`select.kqueue.control()` method.

                :param timeout:
                    Blocking timeout for reading events.
                :type timeout:
                    ``float`` (seconds)
        
        """
    def on_thread_stop(self):
        """
         Clean up.

        """
def KqueueObserver(BaseObserver):
    """

        Observer thread that schedules watching directories and dispatches
        calls to event handlers.
    
    """
    def __init__(self, timeout=DEFAULT_OBSERVER_TIMEOUT):
