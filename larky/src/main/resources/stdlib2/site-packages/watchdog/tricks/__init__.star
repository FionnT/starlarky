def Trick(PatternMatchingEventHandler):
    """
    Your tricks should subclass this class.
    """
    def generate_yaml(cls):
        """
        - %(module_name)s.%(klass_name)s:
          args:
          - argument1
          - argument2
          kwargs:
            patterns:
            - "*.py"
            - "*.js"
            ignore_patterns:
            - "version.py"
            ignore_directories: false

        """
def LoggerTrick(Trick):
    """
    A simple trick that does only logs events.
    """
    def on_any_event(self, event):
        """
        Executes shell commands in response to matched events.
        """
2021-03-02 20:52:01,394 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:52:01,394 : INFO : tokenize_signature : --> do i ever get here?
    def __init__(self, shell_command=None, patterns=None, ignore_patterns=None,
                 ignore_directories=False, wait_for_process=False,
                 drop_during_process=False):
        """
        'directory'
        """
def AutoRestartTrick(Trick):
    """
    Starts a long-running subprocess and restarts it on matched events.

        The command parameter is a list of command arguments, such as
        `['bin/myserver', '-c', 'etc/myconfig.ini']`.

        Call `start()` after creating the Trick. Call `stop()` when stopping
        the process.
    
    """
2021-03-02 20:52:01,397 : INFO : tokenize_signature : --> do i ever get here?
2021-03-02 20:52:01,397 : INFO : tokenize_signature : --> do i ever get here?
    def __init__(self, command, patterns=None, ignore_patterns=None,
                 ignore_directories=False, stop_signal=signal.SIGINT,
                 kill_after=10):
        """
         Process is already gone

        """
    def on_any_event(self, event):
