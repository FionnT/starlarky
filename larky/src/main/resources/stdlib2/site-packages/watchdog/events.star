def FileSystemEvent(object):
    """

        Immutable type that represents a file system event that is triggered
        when a change occurs on the monitored file system.

        All FileSystemEvent objects are required to be immutable and hence
        can be used as keys in dictionaries or be added to sets.
    
    """
    def __init__(self, src_path):
        """
        Source path of the file system object that triggered this event.
        """
    def __str__(self):
        """
        <%(class_name)s: event_type=%(event_type)s, 
        src_path=%(src_path)r, 
        is_directory=%(is_directory)s>

        """
    def key(self):
        """

            File system event representing any kind of file system movement.
    
        """
    def __init__(self, src_path, dest_path):
        """
        The destination path of the move event.
        """
    def key(self):
        """
        <%(class_name)s: src_path=%(src_path)r, 
        dest_path=%(dest_path)r, 
        is_directory=%(is_directory)s>

        """
def FileDeletedEvent(FileSystemEvent):
    """
    File system event representing file deletion on the file system.
    """
    def __init__(self, src_path):
        """
        <%(class_name)s: src_path=%(src_path)r>
        """
def FileModifiedEvent(FileSystemEvent):
    """
    File system event representing file modification on the file system.
    """
    def __init__(self, src_path):
        """
        <%(class_name)s: src_path=%(src_path)r>

        """
def FileCreatedEvent(FileSystemEvent):
    """
    File system event representing file creation on the file system.
    """
    def __init__(self, src_path):
        """
        <%(class_name)s: src_path=%(src_path)r>

        """
def FileMovedEvent(FileSystemMovedEvent):
    """
    File system event representing file movement on the file system.
    """
    def __init__(self, src_path, dest_path):
        """
        <%(class_name)s: src_path=%(src_path)r, 
        dest_path=%(dest_path)r>

        """
def DirDeletedEvent(FileSystemEvent):
    """
    File system event representing directory deletion on the file system.
    """
    def __init__(self, src_path):
        """
        <%(class_name)s: src_path=%(src_path)r>

        """
def DirModifiedEvent(FileSystemEvent):
    """

        File system event representing directory modification on the file system.
    
    """
    def __init__(self, src_path):
        """
        <%(class_name)s: src_path=%(src_path)r>

        """
def DirCreatedEvent(FileSystemEvent):
    """
    File system event representing directory creation on the file system.
    """
    def __init__(self, src_path):
        """
        <%(class_name)s: src_path=%(src_path)r>

        """
def DirMovedEvent(FileSystemMovedEvent):
    """
    File system event representing directory movement on the file system.
    """
    def __init__(self, src_path, dest_path):
        """
        <%(class_name)s: src_path=%(src_path)r, 
        dest_path=%(dest_path)r>

        """
def FileSystemEventHandler(object):
    """

        Base file system event handler that you can override methods from.
    
    """
    def dispatch(self, event):
        """
        Dispatches events to the appropriate methods.

                :param event:
                    The event object representing the file system event.
                :type event:
                    :class:`FileSystemEvent`
        
        """
    def on_any_event(self, event):
        """
        Catch-all event handler.

                :param event:
                    The event object representing the file system event.
                :type event:
                    :class:`FileSystemEvent`
        
        """
    def on_moved(self, event):
        """
        Called when a file or a directory is moved or renamed.

                :param event:
                    Event representing file/directory movement.
                :type event:
                    :class:`DirMovedEvent` or :class:`FileMovedEvent`
        
        """
    def on_created(self, event):
        """
        Called when a file or directory is created.

                :param event:
                    Event representing file/directory creation.
                :type event:
                    :class:`DirCreatedEvent` or :class:`FileCreatedEvent`
        
        """
    def on_deleted(self, event):
        """
        Called when a file or directory is deleted.

                :param event:
                    Event representing file/directory deletion.
                :type event:
                    :class:`DirDeletedEvent` or :class:`FileDeletedEvent`
        
        """
    def on_modified(self, event):
        """
        Called when a file or directory is modified.

                :param event:
                    Event representing file/directory modification.
                :type event:
                    :class:`DirModifiedEvent` or :class:`FileModifiedEvent`
        
        """
def PatternMatchingEventHandler(FileSystemEventHandler):
    """

        Matches given patterns with file paths associated with occurring events.
    
    """
2021-03-02 20:51:57,079 : INFO : tokenize_signature : --> do i ever get here?
    def __init__(self, patterns=None, ignore_patterns=None,
                 ignore_directories=False, case_sensitive=False):
        """

                (Read-only)
                Patterns to allow matching event paths.
        
        """
    def ignore_patterns(self):
        """

                (Read-only)
                Patterns to ignore matching event paths.
        
        """
    def ignore_directories(self):
        """

                (Read-only)
                ``True`` if directories should be ignored; ``False`` otherwise.
        
        """
    def case_sensitive(self):
        """

                (Read-only)
                ``True`` if path names should be matched sensitive to case; ``False``
                otherwise.
        
        """
    def dispatch(self, event):
        """
        Dispatches events to the appropriate methods.

                :param event:
                    The event object representing the file system event.
                :type event:
                    :class:`FileSystemEvent`
        
        """
def RegexMatchingEventHandler(FileSystemEventHandler):
    """

        Matches given regexes with file paths associated with occurring events.
    
    """
2021-03-02 20:51:57,080 : INFO : tokenize_signature : --> do i ever get here?
    def __init__(self, regexes=None, ignore_regexes=None,
                 ignore_directories=False, case_sensitive=False):
        """
        r".*
        """
    def regexes(self):
        """

                (Read-only)
                Regexes to allow matching event paths.
        
        """
    def ignore_regexes(self):
        """

                (Read-only)
                Regexes to ignore matching event paths.
        
        """
    def ignore_directories(self):
        """

                (Read-only)
                ``True`` if directories should be ignored; ``False`` otherwise.
        
        """
    def case_sensitive(self):
        """

                (Read-only)
                ``True`` if path names should be matched sensitive to case; ``False``
                otherwise.
        
        """
    def dispatch(self, event):
        """
        Dispatches events to the appropriate methods.

                :param event:
                    The event object representing the file system event.
                :type event:
                    :class:`FileSystemEvent`
        
        """
def LoggingEventHandler(FileSystemEventHandler):
    """
    Logs all the events captured.
    """
    def __init__(self, logger=None):
        """
        'directory'
        """
    def on_created(self, event):
        """
        'directory'
        """
    def on_deleted(self, event):
        """
        'directory'
        """
    def on_modified(self, event):
        """
        'directory'
        """
def LoggingFileSystemEventHandler(LoggingEventHandler):
    """

        For backwards-compatibility. Please use :class:`LoggingEventHandler`
        instead.
    
    """
def generate_sub_moved_events(src_dir_path, dest_dir_path):
    """
    Generates an event list of :class:`DirMovedEvent` and
        :class:`FileMovedEvent` objects for all the files and directories within
        the given moved directory that were moved along with the directory.

        :param src_dir_path:
            The source path of the moved directory.
        :param dest_dir_path:
            The destination path of the moved directory.
        :returns:
            An iterable of file system events of type :class:`DirMovedEvent` and
            :class:`FileMovedEvent`.
    
    """
def generate_sub_created_events(src_dir_path):
    """
    Generates an event list of :class:`DirCreatedEvent` and
        :class:`FileCreatedEvent` objects for all the files and directories within
        the given moved directory that were moved along with the directory.

        :param src_dir_path:
            The source path of the created directory.
        :returns:
            An iterable of file system events of type :class:`DirCreatedEvent` and
            :class:`FileCreatedEvent`.
    
    """
