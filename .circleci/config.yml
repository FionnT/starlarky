job-defaults: &job-defaults
  working_directory: &working_directory
    ~/starlarky
  test_results_directory: &test_results_directory
    /tmp/test-results
  dist_directory: &dist_directory
    /tmp/dist
  environment:
    - DIST_PATH: *dist_directory
    - TEST_RESULTS_PATH: *test_results_directory
    - MAVEN_OPTS: -Xmx6400m
    - GRAALVM_HOME: /home/circleci/starlarky/.graalvm

install-java: &install-java
  run:
    name: Install OpenJDK11 and Maven
    command: |
      sudo apt-get update && sudo apt-get install openjdk-11-jdk maven
      sudo update-alternatives --set java /usr/lib/jvm/java-11-openjdk-amd64/bin/java
      sudo update-alternatives --set javac /usr/lib/jvm/java-11-openjdk-amd64/bin/javac

install-gh: &install-gh
  run:
    name: Install Go and ghr
    command: |
      sudo apt-get update && sudo apt-get install golang -y
      go get -u github.com/tcnksm/ghr

install-graalvm: &install-graalvm
  run:
    name: Install GraalVM
    command: |
      [ ! -d $GRAALVM_HOME ] \
        && curl https://github.com/graalvm/graalvm-ce-builds/releases/download/vm-20.2.0/graalvm-ce-java11-linux-amd64-20.2.0.tar.gz -O -J -L \
        && tar xfz graalvm-ce-java11-linux-amd64-20.2.0.tar.gz \
        && mv graalvm-ce-java11-20.2.0 .graalvm \
        && rm graalvm-ce-java11-linux-amd64-20.2.0.tar.gz \
        && $GRAALVM_HOME/bin/gu install native-image

# Template to save Maven dependency cache to restore it in another jobs
save-maven-cache: &save-maven-cache
  save_cache:
    key: starlarky-{{ checksum "pom.xml" }}
    paths:
      - ~/.m2

restore-maven-cache: &restore-maven-cache
  restore_cache:
    key: starlarky-{{ checksum "pom.xml" }}

save-graalvm-cache: &save-graalvm-cache
  save_cache:
    key: starlarky-{{ checksum ".circleci/config.yml" }}
    paths:
      - $GRAALVM_HOME

restore-graalvm-cache: &restore-graalvm-cache
  restore_cache:
    key: starlarky-{{ checksum ".circleci/config.yml" }}

build_test_pylarky: &build_test_pylarky
  - run:
      name: Install Python
      command: |
        git clone https://github.com/pyenv/pyenv.git ~/.pyenv
        echo 'export PYENV_ROOT="$HOME/.pyenv"' >> $BASH_ENV
        echo 'export PATH="$PYENV_ROOT/shims:$PYENV_ROOT/bin:$PATH"' >> $BASH_ENV
        ~/.pyenv/bin/pyenv install 3.8.6
        ~/.pyenv/bin/pyenv local 3.8.6
        curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py | python -
  - run:
      name: Test Python lib
      command: |
        poetry install
        poetry run pytest pylarky/tests
  - run:
      name: Build Python package
      command: poetry build

persist-dist: &persist-dist
  persist_to_workspace:
    root: *dist_directory
    paths:
      - "*"

attach-dist: &attach-dist
  attach_workspace:
    at: *dist_directory

# === JOBS ===
version: 2
jobs:
  build:
    <<: *job-defaults
    machine:
      image: ubuntu-1604:202007-01
    steps:
      - checkout
      - <<: *install-java
      - <<: *restore-maven-cache
      - run:
          name: Maven Clean Package
          command: |
            mvn clean install -DskipTests dependency:go-offline -T 2.0C -B
      - <<: *save-maven-cache
  test:
    <<: *job-defaults
    machine:
      image: ubuntu-1604:202007-01
    steps:
      - checkout
      - <<: *install-java
      - <<: *restore-maven-cache
      - run: mkdir -p $TEST_RESULTS_PATH/junit/
      - run: mkdir -p $TEST_RESULTS_PATH/coverage/
      - run:
          name: Maven Test
          command: |
            mvn test dependency:go-offline
      - run: find . -type f -regex ".*/target/surefire-reports/.*xml" -exec cp {} $TEST_RESULTS_PATH/junit/ \;
      - run: find . -type f -regex ".*/target/surefire-reports/.*-output.txt" -exec cp {} $TEST_RESULTS_PATH/junit/ \;
      - run: find . -type f -regex ".*/target/site/.*" -exec cp --parents {} $TEST_RESULTS_PATH/coverage/ \;
      - store_artifacts:
          path: *test_results_directory
      - store_test_results:
          path: *test_results_directory

  build-dist-linux:
    <<: *job-defaults
    machine:
      image: ubuntu-1604:202007-01
    steps:
      - checkout
      - <<: *install-java
      - <<: *restore-maven-cache
      - <<: *restore-graalvm-cache
      - <<: *install-graalvm
      - <<: *save-graalvm-cache
      - run:
          name: Build (Native)
          command: mvn package -Pnative -DskipTests
          no_output_timeout: 30m
      - <<: *build_test_pylarky
      - run:
          name: Copy dist files
          command: |
            mkdir ${DIST_PATH}
            cp ./runlarky/target/larky-runner ${DIST_PATH}/larky-linux
            cp dist/*.whl ${DIST_PATH}
      - <<: *persist-dist

  build-dist-macos:
    <<: *job-defaults
    macos:
      xcode: 12.0.1
    steps:
      - checkout
      - run:
          name: Install dev
          command: brew install maven
      - run:
          name: Install GRAALVM
          command: |
            brew cask install graalvm/tap/graalvm-ce-java11
            # Brew is designed to pull latest versions for the formula
            xattr -r -d com.apple.quarantine /Library/Java/JavaVirtualMachines/graalvm-ce-java11-*
            # We can use java_home exe to set GRAALVM_HOME
            echo 'export GRAALVM_HOME="$(/usr/libexec/java_home)"' >> $BASH_ENV
            source $BASH_ENV
            # add gu to PATH
            ln -s "$GRAALVM_HOME/bin/gu" /usr/local/bin
            gu install native-image
      - run:
          name: Maven Clean Package
          command: |
            mvn clean install -DskipTests dependency:go-offline -T 2.0C -B
      - run:
          name: Build (Native)
          command: mvn package -Pnative -DskipTests
          no_output_timeout: 30m
      - <<: *build_test_pylarky
      - run:
          name: Copy dist files
          command: |
            mkdir ${DIST_PATH}
            cp ./runlarky/target/larky-runner ${DIST_PATH}/larky-macos
            cp dist/*.whl ${DIST_PATH}
      - <<: *persist-dist

  publish-to-gh:
    <<: *job-defaults
    docker:
      - image: cibuilds/github:0.13
    steps:
      - <<: *attach-dist
      - run:
          name: Create GH release
          command: ghr -draft -t ${GITHUB_API_TOKEN} -u ${CIRCLE_PROJECT_USERNAME} -r ${CIRCLE_PROJECT_REPONAME} -c ${CIRCLE_SHA1} -n ${CIRCLE_TAG} ${CIRCLE_TAG} ${DIST_PATH}

  publish-to-pypi:
    <<: *job-defaults
    docker:
      - image: circleci/python
    steps:
      - <<: *attach-dist
      - run:
          name: Install twine
          command: pip install twine
      - run:
          name: Upload packages
          command: twine upload -u __token__ -p ${PYPI_TOKEN} ${DIST_PATH}/*.whl

workflows:
  version: 2
  build_and_tests:
    jobs:
      - build
      - test
      - build-dist-linux:
          requires:
            - build
      - build-dist-macos

  release:
    jobs:
      - publish-to-gh:
          filters:
            tags:
              only: /^\d+\.\d+\.\d+(?:-[a-zA-Z0-9_.]+){0,1}$/
            branches:
              ignore: /.*/
          requires:
            - build-dist-linux
            - build-dist-macos
      - publish-to-pypi:
          filters:
            tags:
              only: /^\d+\.\d+\.\d+(?:-[a-zA-Z0-9_.]+){0,1}$/
            branches:
              ignore: /.*/
          requires:
            - build-dist-linux
            - build-dist-macos
